{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/ (unsupported edge import 'stream')"],"sourcesContent":["__turbopack_context__.n(__import_unsupported(`stream`));\n"],"names":[],"mappings":"AAAA,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/ (unsupported edge import 'crypto')"],"sourcesContent":["__turbopack_context__.n(__import_unsupported(`crypto`));\n"],"names":[],"mappings":"AAAA,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'venturo_app_jwt_secret_key_change_in_production_2024';\n\nexport interface AuthPayload {\n  id: string;\n  employeeNumber: string;\n  permissions: string[];\n  role: string;\n}\n\n// 生成 JWT token\nexport function generateToken(payload: AuthPayload): string {\n  try {\n    return jwt.sign(payload, JWT_SECRET, {\n      expiresIn: '8h',\n      issuer: 'venturo-app'\n    });\n  } catch (error) {\n    console.warn('JWT generation failed, using simple token', error);\n    // 如果 JWT 失敗，使用簡單的編碼方案\n    return btoa(JSON.stringify({\n      ...payload,\n      exp: Date.now() + 8 * 60 * 60 * 1000, // 8小時\n      iss: 'venturo-app'\n    }));\n  }\n}\n\n// 驗證 JWT token\nexport function verifyToken(token: string): AuthPayload | null {\n  try {\n    // 嘗試 JWT 驗證\n    const decoded = jwt.verify(token, JWT_SECRET) as AuthPayload;\n    return decoded;\n  } catch (jwtError) {\n    try {\n      // 如果 JWT 失敗，嘗試簡單解碼\n      const decoded = JSON.parse(atob(token));\n\n      // 檢查是否過期\n      if (decoded.exp && Date.now() > decoded.exp) {\n        console.log('Token expired');\n        return null;\n      }\n\n      return decoded as AuthPayload;\n    } catch (fallbackError) {\n      console.error('Token verification failed:', fallbackError);\n      return null;\n    }\n  }\n}\n\n// 加密密碼\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// 驗證密碼\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// 從 token 取得用戶資訊\nexport function getUserFromToken(token: string): AuthPayload | null {\n  return verifyToken(token);\n}\n\n// 檢查權限\nexport function hasPermission(userPermissions: string[], requiredPermission: string): boolean {\n  return userPermissions.includes(requiredPermission) ||\n         userPermissions.includes('super_admin') ||\n         userPermissions.includes('admin');\n}\n\n// 檢查角色\nexport function hasRole(userPermissions: string[], requiredRoles: string[]): boolean {\n  return requiredRoles.some(role => userPermissions.includes(role));\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAUtC,SAAS,cAAc,OAAoB;IAChD,IAAI;QACF,OAAO,wJAAG,CAAC,IAAI,CAAC,SAAS,YAAY;YACnC,WAAW;YACX,QAAQ;QACV;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,6CAA6C;QAC1D,sBAAsB;QACtB,OAAO,KAAK,KAAK,SAAS,CAAC;YACzB,GAAG,OAAO;YACV,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK;YAChC,KAAK;QACP;IACF;AACF;AAGO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,YAAY;QACZ,MAAM,UAAU,wJAAG,CAAC,MAAM,CAAC,OAAO;QAClC,OAAO;IACT,EAAE,OAAO,UAAU;QACjB,IAAI;YACF,mBAAmB;YACnB,MAAM,UAAU,KAAK,KAAK,CAAC,KAAK;YAEhC,SAAS;YACT,IAAI,QAAQ,GAAG,IAAI,KAAK,GAAG,KAAK,QAAQ,GAAG,EAAE;gBAC3C,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACT;YAEA,OAAO;QACT,EAAE,OAAO,eAAe;YACtB,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO;QACT;IACF;AACF;AAGO,eAAe,aAAa,QAAgB;IACjD,MAAM,aAAa;IACnB,OAAO,oJAAM,CAAC,IAAI,CAAC,UAAU;AAC/B;AAGO,eAAe,eAAe,QAAgB,EAAE,cAAsB;IAC3E,OAAO,oJAAM,CAAC,OAAO,CAAC,UAAU;AAClC;AAGO,SAAS,iBAAiB,KAAa;IAC5C,OAAO,YAAY;AACrB;AAGO,SAAS,cAAc,eAAyB,EAAE,kBAA0B;IACjF,OAAO,gBAAgB,QAAQ,CAAC,uBACzB,gBAAgB,QAAQ,CAAC,kBACzB,gBAAgB,QAAQ,CAAC;AAClC;AAGO,SAAS,QAAQ,eAAyB,EAAE,aAAuB;IACxE,OAAO,cAAc,IAAI,CAAC,CAAA,OAAQ,gBAAgB,QAAQ,CAAC;AAC7D"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getUserFromToken, hasPermission, hasRole } from '@/lib/auth';\n\nexport function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n\n  // 白名單路徑 - 不需要驗證\n  if (\n    pathname === '/login' ||\n    pathname.startsWith('/api/public') ||\n    pathname.startsWith('/_next/') ||\n    pathname.startsWith('/favicon.ico') ||\n    pathname === '/unauthorized'\n  ) {\n    return NextResponse.next();\n  }\n\n  // 🔥 暫時允許所有請求通過，因為現在使用 localStorage 認證\n  // 認證檢查在客戶端的 AuthGuard 和 MainLayout 中進行\n  return NextResponse.next();\n\n  // 檢查認證 token\n  const authToken = request.cookies.get('auth-token');\n\n  if (!authToken) {\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n\n  try {\n    // 驗證 JWT token\n    const user = getUserFromToken(authToken.value);\n\n    if (!user) {\n      const response = NextResponse.redirect(new URL('/login', request.url));\n      response.cookies.delete('auth-token');\n      return response;\n    }\n\n    // 權限檢查\n    const userPermissions = user.permissions || [];\n\n    // HR 模組權限檢查\n    if (pathname.startsWith('/hr')) {\n      if (!hasPermission(userPermissions, 'hr')) {\n        return NextResponse.redirect(new URL('/unauthorized', request.url));\n      }\n    }\n\n    // 財務模組權限檢查\n    if (pathname.startsWith('/finance')) {\n      const hasPaymentsPermission = hasPermission(userPermissions, 'payments');\n      const hasDisbursementPermission = hasPermission(userPermissions, 'disbursement');\n\n      if (!hasPaymentsPermission && !hasDisbursementPermission) {\n        return NextResponse.redirect(new URL('/unauthorized', request.url));\n      }\n    }\n\n    // 資料庫管理權限檢查 - 允許所有已登入用戶存取\n    if (pathname.startsWith('/database')) {\n      // 資料庫管理對所有已登入用戶開放，不需要特殊權限\n    }\n\n    // 特殊團權限檢查\n    if (pathname.includes('/special') ||\n        (pathname.includes('/tours') && request.nextUrl.searchParams.get('type') === 'special')) {\n      if (!hasRole(userPermissions, ['super_admin', 'admin'])) {\n        return NextResponse.redirect(new URL('/unauthorized', request.url));\n      }\n    }\n\n    // 報表權限檢查\n    if (pathname.startsWith('/reports')) {\n      if (!hasPermission(userPermissions, 'reports')) {\n        return NextResponse.redirect(new URL('/unauthorized', request.url));\n      }\n    }\n\n    // 設定權限檢查\n    if (pathname.startsWith('/settings')) {\n      if (!hasPermission(userPermissions, 'settings')) {\n        return NextResponse.redirect(new URL('/unauthorized', request.url));\n      }\n    }\n\n    // 在 response header 中添加用戶資訊供後續使用\n    const response = NextResponse.next();\n    response.headers.set('x-user-id', user.id);\n    response.headers.set('x-user-permissions', JSON.stringify(userPermissions));\n\n    return response;\n\n  } catch (error) {\n    console.error('🚫 Middleware auth error:', error);\n    const response = NextResponse.redirect(new URL('/login', request.url));\n    response.cookies.delete('auth-token');\n    return response;\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * 匹配所有路徑除了：\n     * - api 路由\n     * - _next/static (靜態文件)\n     * - _next/image (圖像優化)\n     * - favicon.ico (網站圖標)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,gBAAgB;IAChB,IACE,aAAa,YACb,SAAS,UAAU,CAAC,kBACpB,SAAS,UAAU,CAAC,cACpB,SAAS,UAAU,CAAC,mBACpB,aAAa,iBACb;QACA,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,uCAAuC;IACvC,uCAAuC;IACvC,OAAO,gMAAY,CAAC,IAAI;;;IAExB,aAAa;IACb,MAAM;AA4ER;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}