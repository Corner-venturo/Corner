[{"filePath":"/Users/william/Projects/Corner/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/check-data.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/check-messages-schema.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/check-schema-diff.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getSupabaseFields' is defined but never used. Allowed unused vars must match /^_/u.","line":74,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tableName' is defined but never used. Allowed unused args must match /^_/u.","line":74,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Schema 差異檢查工具\n * 比對 IndexedDB schemas、前端 types、Supabase types\n */\n\nimport { TABLE_SCHEMAS } from '../src/lib/db/schemas';\nimport type { Database } from '../src/lib/supabase/types';\n\n// 前端實際使用的型別（從 stores/types.ts）\nconst FRONTEND_TYPES = {\n  employees: [\n    'id', 'employee_number', 'english_name', 'display_name', 'chinese_name',\n    'personal_info', 'job_info', 'salary_info', 'permissions', 'roles',\n    'attendance', 'contracts', 'status', 'avatar', 'password_hash',\n    'last_password_change', 'must_change_password', 'failed_login_attempts',\n    'last_failed_login', 'created_at', 'updated_at'\n  ],\n  tours: [\n    'id', 'code', 'name', 'departure_date', 'return_date', 'status',\n    'location', 'price', 'max_participants', 'current_participants',\n    'contract_status', 'total_revenue', 'total_cost', 'profit',\n    'quote_id', 'quote_cost_structure', 'archived', 'description',\n    'outboundFlight', 'returnFlight', 'created_at', 'updated_at'\n  ],\n  orders: [\n    'id', 'order_number', 'tour_id', 'code', 'tour_name', 'customer_id',\n    'contact_person', 'sales_person', 'assistant', 'member_count',\n    'status', 'payment_status', 'total_amount', 'paid_amount',\n    'remaining_amount', 'notes', 'created_at', 'updated_at'\n  ],\n  members: [\n    'id', 'order_id', 'tour_id', 'name', 'name_en', 'birthday',\n    'passport_number', 'passport_expiry', 'id_number', 'gender', 'age',\n    'phone', 'email', 'emergency_contact', 'emergency_phone',\n    'dietary_restrictions', 'medical_conditions', 'room_preference',\n    'assigned_room', 'is_child_no_bed', 'reservation_code',\n    'add_ons', 'refunds', 'custom_fields', 'notes', 'created_at', 'updated_at'\n  ],\n  customers: [\n    'id', 'code', 'name', 'phone', 'email', 'address', 'notes',\n    'is_vip', 'is_active', 'created_at', 'updated_at'\n  ],\n  quotes: [\n    'id', 'quote_number', 'name', 'status', 'tour_id', 'customer_name',\n    'contact_person', 'contact_phone', 'contact_email', 'group_size',\n    'accommodation_days', 'requirements', 'budget_range', 'valid_until',\n    'payment_terms', 'categories', 'total_cost', 'version', 'versions',\n    'created_at', 'updated_at'\n  ],\n  suppliers: [\n    'id', 'code', 'name', 'type', 'contact', 'bank_info', 'price_list',\n    'status', 'note', 'created_at', 'updated_at'\n  ],\n  todos: [\n    'id', 'title', 'priority', 'deadline', 'status', 'completed',\n    'creator', 'assignee', 'visibility', 'related_items', 'sub_tasks',\n    'notes', 'enabled_quick_actions', 'needs_creator_notification',\n    'type', 'parent_id', 'project_id', 'created_at', 'updated_at'\n  ],\n  tour_addons: [\n    'id', 'tour_id', 'name', 'price', 'description', 'is_active',\n    'created_at', 'updated_at'\n  ],\n  tour_refunds: [\n    'id', 'tour_id', 'order_id', 'order_number', 'member_name',\n    'reason', 'amount', 'status', 'applied_date', 'processed_date',\n    'notes', 'created_at', 'updated_at'\n  ],\n};\n\n// Supabase 型別定義（從 types.ts 提取）\ntype SupabaseTables = Database['public']['Tables'];\n\nfunction getSupabaseFields(tableName: keyof SupabaseTables): string[] {\n  // 這裡需要手動列出（因為 TypeScript 型別在 runtime 不可用）\n  // 或者從 Supabase 實際查詢 schema\n  return [];\n}\n\nfunction compareSchemas() {\n  console.log('🔍 開始比對 Schema...\\n');\n\n  const results = {\n    missing_in_supabase: {} as Record<string, string[]>,\n    missing_in_frontend: {} as Record<string, string[]>,\n    missing_tables: [] as string[],\n    extra_tables: [] as string[],\n  };\n\n  // 檢查缺少的表格\n  const frontendTables = Object.keys(FRONTEND_TYPES);\n  const supabaseTables = TABLE_SCHEMAS.map(s => s.name);\n\n  frontendTables.forEach(table => {\n    if (!supabaseTables.includes(table)) {\n      results.missing_tables.push(table);\n    }\n  });\n\n  // 生成報告\n  console.log('📊 檢查結果：\\n');\n\n  if (results.missing_tables.length > 0) {\n    console.log('❌ Supabase 缺少的表格：');\n    results.missing_tables.forEach(table => {\n      console.log(`   - ${table}`);\n    });\n    console.log('');\n  }\n\n  Object.entries(FRONTEND_TYPES).forEach(([table, fields]) => {\n    console.log(`\\n📋 ${table}:`);\n    console.log(`   前端欄位數: ${fields.length}`);\n    fields.forEach(field => {\n      console.log(`   - ${field}`);\n    });\n  });\n}\n\ncompareSchemas();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/clean-invalid-tours.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[792,795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[792,795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 清理無效的旅遊團資料\n * 用途：移除 departure_date 無效或空白的旅遊團\n */\n\nimport { openDB } from 'idb';\n\nasync function cleanInvalidTours() {\n  console.log('🔍 開始掃描無效的旅遊團資料...');\n\n  try {\n    // 開啟 IndexedDB\n    const db = await openDB('venturo-db', 1);\n\n    // 讀取所有旅遊團\n    const allTours = await db.getAll('tours');\n\n    console.log(`📊 總共找到 ${allTours.length} 筆旅遊團資料`);\n\n    // 找出無效的旅遊團（departure_date 空白或無效）\n    const invalidTours = allTours.filter((tour: any) => {\n      if (!tour.departure_date) return true; // 空白\n      const date = new Date(tour.departure_date);\n      return isNaN(date.getTime()); // 無效日期\n    });\n\n    if (invalidTours.length === 0) {\n      console.log('✅ 沒有找到無效的旅遊團資料');\n      return;\n    }\n\n    console.log(`❌ 找到 ${invalidTours.length} 筆無效的旅遊團資料：`);\n    invalidTours.forEach((tour: any) => {\n      console.log(`  - ID: ${tour.id}, 名稱: ${tour.name || '(無名稱)'}, 出發日期: ${tour.departure_date || '(空白)'}`);\n    });\n\n    // 確認是否要刪除\n    const confirmed = confirm(`確定要永久刪除這 ${invalidTours.length} 筆無效資料嗎？`);\n\n    if (!confirmed) {\n      console.log('❌ 使用者取消操作');\n      return;\n    }\n\n    // 永久刪除\n    console.log('🗑️ 開始刪除...');\n    for (const tour of invalidTours) {\n      await db.delete('tours', tour.id);\n      console.log(`✅ 已刪除: ${tour.id}`);\n    }\n\n    console.log(`✅ 成功清除 ${invalidTours.length} 筆無效資料！`);\n    console.log('💡 請重新整理頁面以查看結果');\n\n  } catch (error) {\n    console.error('❌ 清理失敗:', error);\n  }\n}\n\n// 執行清理\ncleanInvalidTours();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/cleanup-workspace.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/comprehensive-analysis.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/create-tour-channels.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/diagnose-id-strategy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/fix-author-id-type.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'supabase' is assigned a value but never used.","line":14,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/fix-db-issues.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[239,242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[239,242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7014,7017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7014,7017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7019,7022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7019,7022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9662,9665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9662,9665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n/**\n * 修復 IndexedDB 問題腳本\n * 處理：\n * 1. 重複索引問題\n * 2. 資料表不存在問題\n * 3. 資料庫版本升級問題\n */\n\nconst DB_NAME = 'VenturoOfflineDB';\nconst CURRENT_VERSION = 2;\n\ninterface DBFixResult {\n  success: boolean;\n  message: string;\n  details?: any;\n}\n\nclass DatabaseFixer {\n  /**\n   * 主要修復函數\n   */\n  static async fix(): Promise<DBFixResult> {\n    console.log('🔧 開始修復資料庫問題...\\n');\n\n    try {\n      // 1. 檢查並升級資料庫版本\n      console.log('📊 檢查資料庫版本...');\n      const versionResult = await this.checkAndUpgradeVersion();\n      console.log(versionResult.message);\n\n      // 2. 檢查 regions 表是否存在\n      console.log('\\n📊 檢查 regions 表...');\n      const regionsResult = await this.checkRegionsTable();\n      console.log(regionsResult.message);\n\n      // 3. 清理重複資料\n      console.log('\\n🧹 清理重複資料...');\n      const cleanupResult = await this.cleanupDuplicates();\n      console.log(cleanupResult.message);\n\n      // 4. 驗證修復結果\n      console.log('\\n✅ 驗證修復結果...');\n      const validationResult = await this.validateFix();\n      console.log(validationResult.message);\n\n      console.log('\\n✨ 資料庫修復完成！');\n\n      return {\n        success: true,\n        message: '資料庫修復成功',\n        details: {\n          version: versionResult,\n          regions: regionsResult,\n          cleanup: cleanupResult,\n          validation: validationResult\n        }\n      };\n    } catch (error) {\n      console.error('❌ 修復失敗:', error);\n      return {\n        success: false,\n        message: '資料庫修復失敗',\n        details: error\n      };\n    }\n  }\n\n  /**\n   * 檢查並升級資料庫版本\n   */\n  private static checkAndUpgradeVersion(): Promise<DBFixResult> {\n    return new Promise((resolve, reject) => {\n      // 先獲取當前版本\n      const versionRequest = indexedDB.open(DB_NAME);\n      \n      versionRequest.onsuccess = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        const currentVersion = db.version;\n        db.close();\n\n        if (currentVersion < CURRENT_VERSION) {\n          // 需要升級\n          console.log(`  需要升級: v${currentVersion} -> v${CURRENT_VERSION}`);\n          \n          const upgradeRequest = indexedDB.open(DB_NAME, CURRENT_VERSION);\n          \n          upgradeRequest.onupgradeneeded = (event) => {\n            const db = (event.target as IDBOpenDBRequest).result;\n            \n            // 如果 regions 表不存在，建立它\n            if (!db.objectStoreNames.contains('regions')) {\n              console.log('  建立 regions 表...');\n              const regionsStore = db.createObjectStore('regions', {\n                keyPath: 'id',\n                autoIncrement: false,\n              });\n\n              // 建立索引\n              regionsStore.createIndex('code', 'code', { unique: true });\n              regionsStore.createIndex('name', 'name', { unique: false });\n              regionsStore.createIndex('status', 'status', { unique: false });\n              regionsStore.createIndex('is_active', 'is_active', { unique: false });\n              regionsStore.createIndex('created_at', 'created_at', { unique: false });\n              regionsStore.createIndex('updated_at', 'updated_at', { unique: false });\n              regionsStore.createIndex('sync_status', 'sync_status', { unique: false });\n            }\n          };\n\n          upgradeRequest.onsuccess = () => {\n            upgradeRequest.result.close();\n            resolve({\n              success: true,\n              message: `  ✅ 資料庫已升級到 v${CURRENT_VERSION}`\n            });\n          };\n\n          upgradeRequest.onerror = () => {\n            reject(new Error(`升級失敗: ${upgradeRequest.error?.message}`));\n          };\n        } else {\n          resolve({\n            success: true,\n            message: `  ✅ 資料庫已是最新版本 v${currentVersion}`\n          });\n        }\n      };\n\n      versionRequest.onerror = () => {\n        reject(new Error(`無法開啟資料庫: ${versionRequest.error?.message}`));\n      };\n    });\n  }\n\n  /**\n   * 檢查 regions 表是否存在\n   */\n  private static checkRegionsTable(): Promise<DBFixResult> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, CURRENT_VERSION);\n\n      request.onsuccess = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        if (db.objectStoreNames.contains('regions')) {\n          // 計算 regions 表中的資料筆數\n          const transaction = db.transaction(['regions'], 'readonly');\n          const objectStore = transaction.objectStore('regions');\n          const countRequest = objectStore.count();\n\n          countRequest.onsuccess = () => {\n            db.close();\n            resolve({\n              success: true,\n              message: `  ✅ regions 表存在，包含 ${countRequest.result} 筆資料`\n            });\n          };\n\n          countRequest.onerror = () => {\n            db.close();\n            reject(new Error('無法計算 regions 資料筆數'));\n          };\n        } else {\n          db.close();\n          resolve({\n            success: false,\n            message: '  ⚠️ regions 表不存在（需要重新建立）'\n          });\n        }\n      };\n\n      request.onerror = () => {\n        reject(new Error(`無法開啟資料庫: ${request.error?.message}`));\n      };\n    });\n  }\n\n  /**\n   * 清理重複資料\n   */\n  private static async cleanupDuplicates(): Promise<DBFixResult> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, CURRENT_VERSION);\n\n      request.onsuccess = async (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        // 需要檢查的表和唯一索引\n        const tablesToCheck = [\n          { table: 'regions', uniqueField: 'code' },\n          { table: 'tours', uniqueField: 'code' },\n          { table: 'orders', uniqueField: 'code' },\n          { table: 'customers', uniqueField: 'code' },\n        ];\n\n        let totalCleaned = 0;\n\n        for (const { table, uniqueField } of tablesToCheck) {\n          if (!db.objectStoreNames.contains(table)) {\n            console.log(`    跳過 ${table} (不存在)`);\n            continue;\n          }\n\n          try {\n            const cleaned = await this.cleanTableDuplicates(db, table, uniqueField);\n            totalCleaned += cleaned;\n            if (cleaned > 0) {\n              console.log(`    清理 ${table}: 移除 ${cleaned} 筆重複資料`);\n            }\n          } catch (error) {\n            console.error(`    ${table} 清理失敗:`, error);\n          }\n        }\n\n        db.close();\n        resolve({\n          success: true,\n          message: `  ✅ 清理完成，共移除 ${totalCleaned} 筆重複資料`\n        });\n      };\n\n      request.onerror = () => {\n        reject(new Error(`無法開啟資料庫: ${request.error?.message}`));\n      };\n    });\n  }\n\n  /**\n   * 清理單個表的重複資料\n   */\n  private static cleanTableDuplicates(\n    db: IDBDatabase, \n    tableName: string, \n    uniqueField: string\n  ): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const getAllRequest = objectStore.getAll();\n\n      getAllRequest.onsuccess = async () => {\n        const records = getAllRequest.result;\n        const seen = new Map<any, any>();\n        const duplicates: string[] = [];\n\n        // 找出重複資料\n        for (const record of records) {\n          const key = record[uniqueField];\n          if (key && seen.has(key)) {\n            // 保留較新的資料（根據 updated_at 或 created_at）\n            const existing = seen.get(key);\n            const existingTime = new Date(existing.updated_at || existing.created_at || 0).getTime();\n            const currentTime = new Date(record.updated_at || record.created_at || 0).getTime();\n            \n            if (currentTime > existingTime) {\n              duplicates.push(existing.id);\n              seen.set(key, record);\n            } else {\n              duplicates.push(record.id);\n            }\n          } else if (key) {\n            seen.set(key, record);\n          }\n        }\n\n        // 刪除重複資料\n        if (duplicates.length > 0) {\n          const deleteTransaction = db.transaction([tableName], 'readwrite');\n          const deleteStore = deleteTransaction.objectStore(tableName);\n          \n          for (const id of duplicates) {\n            deleteStore.delete(id);\n          }\n\n          deleteTransaction.oncomplete = () => {\n            resolve(duplicates.length);\n          };\n\n          deleteTransaction.onerror = () => {\n            reject(new Error(`刪除重複資料失敗: ${deleteTransaction.error?.message}`));\n          };\n        } else {\n          resolve(0);\n        }\n      };\n\n      getAllRequest.onerror = () => {\n        reject(new Error(`讀取 ${tableName} 失敗`));\n      };\n    });\n  }\n\n  /**\n   * 驗證修復結果\n   */\n  private static validateFix(): Promise<DBFixResult> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, CURRENT_VERSION);\n\n      request.onsuccess = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        const issues: string[] = [];\n\n        // 檢查關鍵表是否存在\n        const requiredTables = ['regions', 'tours', 'orders', 'customers', 'employees'];\n        for (const table of requiredTables) {\n          if (!db.objectStoreNames.contains(table)) {\n            issues.push(`缺少表: ${table}`);\n          }\n        }\n\n        db.close();\n\n        if (issues.length === 0) {\n          resolve({\n            success: true,\n            message: '  ✅ 資料庫結構正常'\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `  ⚠️ 發現問題:\\n    - ${issues.join('\\n    - ')}`\n          });\n        }\n      };\n\n      request.onerror = () => {\n        reject(new Error(`無法開啟資料庫: ${request.error?.message}`));\n      };\n    });\n  }\n}\n\n// 在瀏覽器環境中執行\nif (typeof window !== 'undefined') {\n  // 添加到 window 對象以便在 console 中調用\n  (window as any).fixDatabase = DatabaseFixer.fix;\n  console.log('💡 在 Console 中執行 fixDatabase() 來修復資料庫問題');\n} else {\n  console.log('⚠️ 此腳本需要在瀏覽器環境中執行');\n  console.log('請在瀏覽器的 Console 中貼上此腳本並執行 fixDatabase()');\n}\n\n// 導出供其他模組使用\nexport default DatabaseFixer;\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/generate-complete-fix.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/generate-uuid-migration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/scripts/restore-default-channels.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/_dev/dev-tools/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":120,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { initializeEmployeePasswords, createTestEmployees } from '@/lib/init-passwords';\nimport { useUserStore } from '@/stores/user-store';\nimport { useWorkspaceStore } from '@/stores/workspace-store';\nimport { DB_NAME } from '@/lib/db/schemas';\nimport { Shield, Users, Key, AlertTriangle, CheckCircle, Settings, Trash2, Hash } from 'lucide-react';\n\nexport default function DevToolsPage() {\n  const [isInitializing, setIsInitializing] = useState(false);\n  const [isCreatingTest, setIsCreatingTest] = useState(false);\n  const [devMode, setDevMode] = useState(process.env.NODE_ENV === 'development');\n  const [logs, setLogs] = useState<string[]>([]);\n  const { items: users } = useUserStore();\n  const { channels } = useWorkspaceStore();\n\n  // 攔截 console.log 以顯示在頁面上\n  const captureLog = (callback: () => Promise<void>) => {\n    return async () => {\n      const originalLog = console.log;\n      const newLogs: string[] = [];\n      \n      console.log = (...args) => {\n        newLogs.push(args.join(' '));\n        originalLog(...args);\n      };\n\n      try {\n        await callback();\n      } finally {\n        console.log = originalLog;\n        setLogs(newLogs);\n      }\n    };\n  };\n\n  const handleInitPasswords = captureLog(async () => {\n    setIsInitializing(true);\n    try {\n      await initializeEmployeePasswords();\n    } finally {\n      setIsInitializing(false);\n    }\n  });\n\n  const handleCreateTestEmployees = captureLog(async () => {\n    setIsCreatingTest(true);\n    try {\n      await createTestEmployees();\n    } finally {\n      setIsCreatingTest(false);\n    }\n  });\n\n  const toggleDevMode = () => {\n    const newMode = !devMode;\n    setDevMode(newMode);\n    \n    if (newMode) {\n      localStorage.setItem('dev-mode', 'true');\n    } else {\n      localStorage.removeItem('dev-mode');\n    }\n    \n    setLogs([`開發模式已${newMode ? '啟用' : '停用'}`]);\n  };\n\n  const clearAllData = () => {\n    if (confirm('⚠️ 確定要清除所有本地資料嗎？此操作無法復原！')) {\n      localStorage.clear();\n      sessionStorage.clear();\n      indexedDB.deleteDatabase(DB_NAME);\n      setLogs(['✅ 已清除所有本地資料，請重新整理頁面']);\n    }\n  };\n\n  const clearTestData = async () => {\n    if (confirm('⚠️ 確定要清理所有測試資料嗎？（保留人資管理資料）\\n\\n將清理：\\n• 工作空間頻道\\n• 旅遊團\\n• 報價單\\n• 訂單\\n• 客戶\\n• 待辦事項\\n• IndexedDB 所有表格')) {\n      const logs: string[] = [];\n\n      try {\n        // 1. 清空工作空間頻道（保留一般討論）\n        const workspaceData = localStorage.getItem('workspace-storage');\n        if (workspaceData) {\n          const data = JSON.parse(workspaceData);\n          const channelCount = data.state?.channels?.length || 0;\n          data.state.channels = [\n            {\n              id: 'channel-001',\n              workspace_id: data.state.currentWorkspace?.id || 'workspace-001',\n              name: '一般討論',\n              description: '一般事務討論',\n              type: 'public',\n              created_at: new Date().toISOString()\n            }\n          ];\n          data.state.messages = [];\n          localStorage.setItem('workspace-storage', JSON.stringify(data));\n          logs.push(`✅ 清空 ${channelCount} 個頻道`);\n        }\n\n        // 2. 清空 IndexedDB 所有表格（保留 employees）\n        const db = await indexedDB.databases();\n        const venturoDb = db.find(d => d.name === DB_NAME);\n\n        if (venturoDb) {\n          const request = indexedDB.open(DB_NAME);\n          request.onsuccess = (event) => {\n            const database = (event.target as IDBOpenDBRequest).result;\n            const transaction = database.transaction(database.objectStoreNames, 'readwrite');\n\n            // 清空除了 employees 以外的所有表格\n            Array.from(database.objectStoreNames).forEach(storeName => {\n              if (storeName !== 'employees') {\n                try {\n                  transaction.objectStore(storeName).clear();\n                  logs.push(`✅ 清空 ${storeName}`);\n                } catch (err) {\n                  logs.push(`⚠️ 清空 ${storeName} 失敗`);\n                }\n              }\n            });\n\n            transaction.oncomplete = () => {\n              logs.push('✅ IndexedDB 清理完成');\n              logs.push('⚠️ 請重新整理頁面以載入最新資料');\n              setLogs(logs);\n            };\n          };\n        }\n\n        // 3. 清空其他 localStorage 資料（保留認證和員工相關）\n        const keysToKeep = ['auth-storage', 'user-storage', 'dev-mode'];\n        const allKeys = Object.keys(localStorage);\n\n        allKeys.forEach(key => {\n          if (!keysToKeep.some(keep => key.includes(keep))) {\n            localStorage.removeItem(key);\n          }\n        });\n\n        logs.push('✅ 測試資料清理完成');\n        logs.push('✅ 已保留：員工資料、認證資訊');\n        setLogs(logs);\n\n      } catch (error) {\n        console.error('清理失敗:', error);\n        setLogs([...logs, '❌ 清理過程發生錯誤']);\n      }\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* 標題 */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-morandi-primary flex items-center gap-2\">\n            <Settings size={28} />\n            開發者工具\n          </h1>\n          <p className=\"text-morandi-secondary mt-2\">\n            系統初始化和測試工具\n          </p>\n        </div>\n\n        {/* 系統狀態 */}\n        <div className=\"bg-white rounded-lg border border-border p-4 mb-6\">\n          <h2 className=\"font-semibold text-morandi-primary mb-3\">系統狀態</h2>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Users size={18} className=\"text-morandi-secondary\" />\n              <span className=\"text-sm text-morandi-secondary\">員工數量：</span>\n              <span className=\"font-semibold text-morandi-primary\">{users.length}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Hash size={18} className=\"text-morandi-secondary\" />\n              <span className=\"text-sm text-morandi-secondary\">頻道數量：</span>\n              <span className=\"font-semibold text-morandi-primary\">{channels.length}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Shield size={18} className=\"text-morandi-secondary\" />\n              <span className=\"text-sm text-morandi-secondary\">開發模式：</span>\n              <span className={`font-semibold ${devMode ? 'text-green-600' : 'text-red-600'}`}>\n                {devMode ? '已啟用' : '已停用'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* 工具按鈕 */}\n        <div className=\"space-y-4\">\n          {/* 密碼管理 */}\n          <div className=\"bg-white rounded-lg border border-border p-4\">\n            <h3 className=\"font-semibold text-morandi-primary mb-3 flex items-center gap-2\">\n              <Key size={18} />\n              密碼管理\n            </h3>\n            <div className=\"space-y-3\">\n              <div>\n                <Button\n                  onClick={handleInitPasswords}\n                  disabled={isInitializing}\n                  className=\"w-full\"\n                >\n                  {isInitializing ? '初始化中...' : '初始化員工密碼'}\n                </Button>\n                <p className=\"text-xs text-morandi-secondary mt-1\">\n                  為現有員工設定預設密碼，格式：員工編號@當前年份\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 測試資料 */}\n          <div className=\"bg-white rounded-lg border border-border p-4\">\n            <h3 className=\"font-semibold text-morandi-primary mb-3 flex items-center gap-2\">\n              <Users size={18} />\n              測試資料\n            </h3>\n            <div className=\"space-y-3\">\n              <div>\n                <Button\n                  onClick={handleCreateTestEmployees}\n                  disabled={isCreatingTest}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  {isCreatingTest ? '建立中...' : '建立測試員工'}\n                </Button>\n                <p className=\"text-xs text-morandi-secondary mt-1\">\n                  建立 3 個測試員工帳號（john01, mary01, peter01）\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* 系統設定 */}\n          <div className=\"bg-white rounded-lg border border-border p-4\">\n            <h3 className=\"font-semibold text-morandi-primary mb-3 flex items-center gap-2\">\n              <Settings size={18} />\n              系統設定\n            </h3>\n            <div className=\"space-y-3\">\n              <Button\n                onClick={toggleDevMode}\n                variant={devMode ? 'default' : 'outline'}\n                className=\"w-full\"\n              >\n                {devMode ? '停用開發模式' : '啟用開發模式'}\n              </Button>\n\n              <Button\n                onClick={clearTestData}\n                variant=\"outline\"\n                className=\"w-full border-orange-300 hover:bg-orange-50\"\n              >\n                <Trash2 size={16} className=\"mr-2\" />\n                清理測試資料（保留員工）\n              </Button>\n\n              <Button\n                onClick={clearAllData}\n                variant=\"destructive\"\n                className=\"w-full\"\n              >\n                <AlertTriangle size={16} className=\"mr-2\" />\n                清除所有本地資料\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* 執行日誌 */}\n        {logs.length > 0 && (\n          <div className=\"mt-6 bg-gray-900 text-gray-100 rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-2\">執行日誌</h3>\n            <div className=\"font-mono text-sm space-y-1\">\n              {logs.map((log, index) => (\n                <div key={index} className=\"flex items-start gap-2\">\n                  <span className=\"text-gray-500\">{index + 1}.</span>\n                  <span className={\n                    log.includes('✅') ? 'text-green-400' :\n                    log.includes('⚠️') ? 'text-yellow-400' :\n                    log.includes('❌') ? 'text-red-400' :\n                    'text-gray-300'\n                  }>{log}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* 預設帳號資訊 */}\n        <div className=\"mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <h3 className=\"font-semibold text-blue-900 mb-2\">預設帳號資訊</h3>\n          <div className=\"space-y-2 text-sm text-blue-800\">\n            <div className=\"font-mono bg-white rounded p-2\">\n              <div>🔐 管理員：admin / admin123</div>\n            </div>\n            <div className=\"font-mono bg-white rounded p-2\">\n              <div>👤 測試員工：</div>\n              <div className=\"ml-4\">john01 / john123 (業務部)</div>\n              <div className=\"ml-4\">mary01 / mary123 (財務部)</div>\n              <div className=\"ml-4\">peter01 / peter123 (人資部)</div>\n            </div>\n            <p className=\"text-xs text-blue-600 mt-2\">\n              ⚠️ 這些是測試用帳號，正式上線前請刪除或修改密碼\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/_dev/dev/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/accounting/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/accounting/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'is_active' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":408,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":408,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef, useMemo, useCallback } from 'react';\n\nimport {\n  Wallet,\n  Plus,\n  TrendingUp,\n  ArrowUpDown,\n  BarChart3,\n  Settings,\n  Zap,\n  Package,\n  Edit3,\n} from 'lucide-react';\n\nimport { AccountsManagement } from '@/components/accounting/accounts-management';\nimport { AddAccountDialog } from '@/components/accounting/add-account-dialog';\nimport { TransactionList } from '@/components/accounting/transaction-list';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useAccountingStore } from '@/stores/accounting-store';\n\nimport { cn } from '@/lib/utils';\n\nexport default function AccountingPage() {\n  const { accounts, stats, categories, transactions, addTransaction } = useAccountingStore();\n  const [activeTab, setActiveTab] = useState<'overview' | 'transactions' | 'accounts' | 'settings'>('overview');\n  const [isAddAccountOpen, setIsAddAccountOpen] = useState(false);\n  const [theme, setTheme] = useState<'morandi' | 'moneypro'>('morandi');\n\n  // 快速記帳狀態\n  const [quickAmount, setQuickAmount] = useState('');\n  const [quickCategory, setQuickCategory] = useState('4'); // 預設餐費\n  const [quickAccount] = useState(accounts.length > 0 ? accounts[0].id : '');\n  const [showToast, setShowToast] = useState(false);\n  const amountInputRef = useRef<HTMLInputElement>(null);\n  const categorySelectRef = useRef<HTMLButtonElement>(null);\n  const addButtonRef = useRef<HTMLButtonElement>(null);\n\n  const tabs = [\n    { id: 'overview', label: '總覽', icon: BarChart3 },\n    { id: 'transactions', label: '交易', icon: ArrowUpDown },\n    { id: 'accounts', label: '帳戶', icon: Wallet },\n    { id: 'settings', label: '設定', icon: Settings },\n  ];\n\n  // 常用分類配置\n  const quickCategories = [\n    { id: '4', name: '餐費', icon: 'Food', color: '#F97316' },\n    { id: '5', name: '交通', icon: 'Transport', color: '#8B5CF6' },\n    { id: '6', name: '購物', icon: 'Shopping', color: '#EC4899' },\n    { id: '7', name: '娛樂', icon: 'Game', color: '#6366F1' },\n    { id: '8', name: '其他', icon: 'Other', color: '#6B7280' },\n  ];\n\n  // 今日交易\n  const today = new Date().toISOString().split('T')[0];\n  const todayTransactions = useMemo(() =>\n    transactions\n      .filter(t => t.date === today)\n      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n      .slice(0, 3)\n  , [transactions, today]);\n\n  // 快速記帳處理\n  const handleQuickTransaction = useCallback(async () => {\n    if (!quickAmount || !quickCategory || !quickAccount) return;\n\n    const categoryData = categories.find(c => c.id === quickCategory);\n    const accountData = accounts.find(a => a.id === quickAccount);\n\n    if (!categoryData || !accountData) return;\n\n    const transactionData = {\n      account_id: quickAccount,\n      account_name: accountData.name,\n      category_id: quickCategory,\n      category_name: categoryData.name,\n      type: 'expense' as const,\n      amount: parseFloat(quickAmount),\n      currency: 'TWD',\n      description: '',\n      date: today,\n    };\n\n    addTransaction(transactionData);\n\n    // 清空表單並顯示成功動畫\n    setQuickAmount('');\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 2000);\n\n    // 重新聚焦到金額輸入\n    setTimeout(() => {\n      amountInputRef.current?.focus();\n    }, 100);\n  }, [quickAmount, quickCategory, quickAccount, categories, accounts, today, addTransaction]);\n\n  // 分類快速選擇\n  const handleQuickCategorySelect = useCallback((category_id: string) => {\n    setQuickCategory(category_id);\n    setTimeout(() => {\n      addButtonRef.current?.focus();\n    }, 100);\n  }, []);\n\n  // 金額輸入完成\n  const handleAmountComplete = useCallback(() => {\n    if (quickAmount) {\n      categorySelectRef.current?.focus();\n    }\n  }, [quickAmount]);\n\n  // 計算本月與上月差異\n  const currentMonth = new Date().getMonth();\n  const currentYear = new Date().getFullYear();\n  const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;\n  const lastMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;\n\n  const lastMonthExpense = useMemo(() =>\n    transactions\n      .filter(t => {\n        const transactionDate = new Date(t.date);\n        return t.type === 'expense' &&\n               transactionDate.getMonth() === lastMonth &&\n               transactionDate.getFullYear() === lastMonthYear;\n      })\n      .reduce((sum, t) => sum + t.amount, 0)\n  , [transactions, lastMonth, lastMonthYear]);\n\n  const expenseDifference = lastMonthExpense - (stats?.monthly_expense || 0);\n  const daysToEndOfMonth = new Date(currentYear, currentMonth + 1, 0).getDate() - new Date().getDate();\n\n  // 主題配置\n  const themeConfig = {\n    morandi: {\n      bg: 'bg-gradient-to-br from-[#F8F5F0] to-[#E6DDD4]',\n      headerBg: 'bg-gradient-to-r from-[#6B5B73] to-[#B5986A]',\n      cardBg: 'bg-gradient-to-br from-white to-[#F8F5F0]',\n      primary: 'text-[#6B5B73]',\n      secondary: 'text-[#6B5B73]/60',\n      accent: 'bg-gradient-to-r from-[#B5986A] to-[#D4C4A8]',\n      border: 'border-[#E6DDD4]'\n    },\n    moneypro: {\n      bg: 'bg-gradient-to-b from-slate-700 to-slate-800',\n      headerBg: 'bg-gradient-to-r from-slate-800 to-slate-700',\n      cardBg: 'bg-slate-600',\n      primary: 'text-white',\n      secondary: 'text-slate-300',\n      accent: 'bg-gradient-to-r from-blue-600 to-blue-700',\n      border: 'border-slate-500'\n    }\n  };\n\n  const currentTheme = themeConfig[theme];\n\n  return (\n    <div className={cn('min-h-screen pb-20 pt-4', currentTheme.bg)}>\n      {/* APP風格頂部區域 */}\n      <div className={cn('text-white p-4 sm:p-6 mx-4 rounded-3xl shadow-lg', currentTheme.headerBg)}>\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-xl sm:text-2xl font-bold\">記帳助手</h1>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setTheme(theme === 'morandi' ? 'moneypro' : 'morandi')}\n              className=\"text-white hover:bg-white/20 rounded-full p-2 text-xs\"\n            >\n              {theme === 'morandi' ? 'Dark' : 'Light'}\n            </Button>\n          </div>\n        </div>\n\n        {/* 本月支出主卡片 */}\n        <div className=\"bg-white/15 backdrop-blur-sm rounded-2xl p-4 sm:p-6 mb-4\">\n          <div className=\"text-center\">\n            <div className=\"text-white/80 text-sm mb-1\">本月支出</div>\n            <div className=\"text-3xl sm:text-4xl font-bold text-white mb-2\">\n              NT$ {(stats?.monthly_expense || 0).toLocaleString()}\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center space-y-2 sm:space-y-0 sm:space-x-4 text-sm text-white/80\">\n              <div className=\"flex items-center space-x-1\">\n                <TrendingUp size={14} />\n                <span>收入: NT$ {(stats?.monthly_income || 0).toLocaleString()}</span>\n              </div>\n              {expenseDifference > 0 && (\n                <div className=\"flex items-center space-x-1 text-green-300\">\n                  <span>比上月省了 NT$ {expenseDifference.toLocaleString()}</span>\n                </div>\n              )}\n            </div>\n            <div className=\"text-xs text-white/60 mt-2\">\n              距離月底還有 {daysToEndOfMonth} 天\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-4 mt-4 space-y-6\">\n        {/* 快速記帳區域 */}\n        <div className={cn('rounded-2xl p-6 shadow-lg border', currentTheme.cardBg, currentTheme.border)}>\n          <div className=\"flex items-center space-x-2 mb-6\">\n            <Zap className={cn('w-5 h-5', theme === 'morandi' ? 'text-[#B5986A]' : 'text-blue-400')} />\n            <h2 className={cn('text-lg font-semibold', currentTheme.primary)}>快速記帳</h2>\n          </div>\n\n          {/* 三按鈕區域 - 響應式設計 */}\n          <div className=\"space-y-4 sm:space-y-0 sm:grid sm:grid-cols-3 sm:gap-3 mb-6\">\n            {/* 金額輸入 */}\n            <div className=\"sm:col-span-1\">\n              <div className={cn('rounded-xl border-2 p-4 h-20 transition-colors',\n                theme === 'morandi' ? 'bg-white border-[#E6DDD4] focus-within:border-[#B5986A]' : 'bg-slate-700 border-slate-500 focus-within:border-blue-400'\n              )}>\n                <div className={cn('text-xs mb-1', currentTheme.secondary)}>金額</div>\n                <input\n                  ref={amountInputRef}\n                  type=\"number\"\n                  value={quickAmount}\n                  onChange={(e) => setQuickAmount(e.target.value)}\n                  onKeyDown={(e) => e.key === 'Enter' && handleAmountComplete()}\n                  placeholder='0'\n                  className={cn('w-full text-xl font-bold bg-transparent border-0 focus:outline-none',\n                    currentTheme.primary,\n                    theme === 'morandi' ? 'placeholder-[#6B5B73]/30' : 'placeholder-slate-400'\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* 分類選擇 */}\n            <div className=\"sm:col-span-1\">\n              <Select value={quickCategory} onValueChange={setQuickCategory}>\n                <SelectTrigger\n                  ref={categorySelectRef}\n                  className={cn('h-20 border-2 rounded-xl text-center',\n                    theme === 'morandi'\n                      ? 'bg-white border-[#E6DDD4] text-[#6B5B73] focus:border-[#B5986A]'\n                      : 'bg-slate-700 border-slate-500 text-white focus:border-blue-400'\n                  )}\n                >\n                  <SelectValue>\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <span className=\"font-semibold\">\n                        {quickCategories.find(c => c.id === quickCategory)?.name || '餐費'}\n                      </span>\n                    </div>\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  {quickCategories.map((category) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      <span>{category.name}</span>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* 記帳按鈕 */}\n            <div className=\"sm:col-span-1\">\n              <Button\n                ref={addButtonRef}\n                onClick={handleQuickTransaction}\n                disabled={!quickAmount || !quickCategory}\n                className={cn('w-full h-20 text-white font-semibold rounded-xl border-0 shadow-lg transition-all duration-200 active:scale-95 disabled:opacity-50 disabled:active:scale-100 text-base',\n                  currentTheme.accent\n                )}\n              >\n                <Plus size={20} className=\"mr-2\" />\n                記帳\n              </Button>\n            </div>\n          </div>\n\n          {/* 常用分類快速選擇 */}\n          <div className=\"space-y-3\">\n            <div className={cn('text-sm', currentTheme.secondary)}>常用分類</div>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-2\">\n              {quickCategories.map((category) => (\n                <button\n                  key={category.id}\n                  onClick={() => handleQuickCategorySelect(category.id)}\n                  className={cn(\n                    'flex items-center justify-center px-3 py-3 sm:px-4 rounded-full transition-all duration-200 active:scale-95 text-sm sm:text-base',\n                    quickCategory === category.id\n                      ? (theme === 'morandi' ? 'bg-[#B5986A] text-white shadow-lg' : 'bg-blue-600 text-white shadow-lg')\n                      : (theme === 'morandi' ? 'bg-white/80 text-[#6B5B73] hover:bg-white border border-[#E6DDD4]' : 'bg-slate-700 text-slate-300 hover:bg-slate-600 border border-slate-500')\n                  )}\n                >\n                  <span className=\"font-medium\">{category.name}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* 今日交易簡化列表 */}\n        <div className={cn('rounded-2xl p-6 shadow-lg border', currentTheme.cardBg, currentTheme.border)}>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className={cn('text-lg font-semibold', currentTheme.primary)}>今日交易</h3>\n            <Button\n              variant='ghost'\n              size='sm'\n              onClick={() => setActiveTab('transactions')}\n              className={cn('rounded-full text-sm',\n                theme === 'morandi' ? 'text-[#B5986A] hover:bg-[#B5986A]/10' : 'text-blue-400 hover:bg-blue-400/10'\n              )}\n            >\n              查看全部\n            </Button>\n          </div>\n\n          {todayTransactions.length > 0 ? (\n            <div className=\"space-y-3\">\n              {todayTransactions.map((transaction) => {\n                const _category = quickCategories.find(c => c.id === transaction.category_id);\n                return (\n                  <div key={transaction.id} className={cn('flex items-center justify-between p-3 sm:p-4 rounded-xl border',\n                    theme === 'morandi' ? 'bg-white/60 border-[#E6DDD4]/50' : 'bg-slate-700 border-slate-600'\n                  )}>\n                    <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                      <div className=\"min-w-0 flex-1\">\n                        <div className={cn('font-medium truncate', currentTheme.primary)}>{transaction.category_name}</div>\n                        <div className={cn('text-sm', currentTheme.secondary)}>\n                          {new Date(transaction.created_at).toLocaleTimeString('zh-TW', {\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                      <div className=\"text-right\">\n                        <span className={cn(\n                          'font-bold text-base sm:text-lg',\n                          transaction.type === 'expense'\n                            ? (theme === 'morandi' ? 'text-[#D2691E]' : 'text-red-400')\n                            : (theme === 'morandi' ? 'text-[#228B22]' : 'text-green-400')\n                        )}>\n                          {transaction.type === 'expense' ? '-' : '+'}NT$ {transaction.amount.toLocaleString()}\n                        </span>\n                      </div>\n                      <Button\n                        variant='ghost'\n                        size='sm'\n                        className={cn('p-1 sm:p-2',\n                          theme === 'morandi' ? 'text-[#6B5B73]/40 hover:text-[#6B5B73]' : 'text-slate-400 hover:text-slate-300'\n                        )}\n                      >\n                        <Edit3 size={14} />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className={cn('text-center py-8', currentTheme.secondary)}>\n              <Package size={40} className={cn('mx-auto mb-3 sm:w-12 sm:h-12',\n                theme === 'morandi' ? 'text-[#B5986A]/40' : 'text-blue-400/40'\n              )} />\n              <p className='text-base sm:text-lg'>今日還沒有交易紀錄</p>\n              <p className='text-sm'>使用上方快速記帳開始吧</p>\n            </div>\n          )}\n        </div>\n\n        {/* 其他分頁內容 */}\n        {activeTab !== 'overview' && (\n          <div className={cn('rounded-2xl shadow-lg border', currentTheme.cardBg, currentTheme.border)}>\n            {activeTab === 'transactions' && (\n              <div className=\"p-6\">\n                <TransactionList />\n              </div>\n            )}\n\n            {activeTab === 'accounts' && (\n              <div className=\"p-6\">\n                <AccountsManagement />\n              </div>\n            )}\n\n            {activeTab === 'settings' && (\n              <div className=\"p-6\">\n                <div className=\"text-center py-8\">\n                  <Settings size={48} className=\"mx-auto mb-3 text-[#B5986A]\" />\n                  <h3 className=\"text-lg font-semibold text-[#6B5B73] mb-2\">設定功能</h3>\n                  <p className=\"text-[#6B5B73]/60\">即將推出更多設定選項</p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* APP風格底部導航 */}\n      <div className={cn('fixed bottom-0 left-0 right-0 backdrop-blur-lg border-t px-2 sm:px-4 py-2 sm:py-3 safe-area-bottom',\n        theme === 'morandi'\n          ? 'bg-gradient-to-r from-white/95 to-[#F8F5F0]/95 border-[#E6DDD4]/50'\n          : 'bg-slate-800/95 border-slate-600'\n      )}>\n        <div className=\"flex items-center justify-around max-w-lg mx-auto\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            const is_active = activeTab === tab.id;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as typeof activeTab)}\n                className={cn(\n                  'flex flex-col items-center space-y-1 p-2 sm:p-3 rounded-xl transition-all duration-200 min-w-0 flex-1',\n                  activeTab === tab.id\n                    ? (theme === 'morandi' ? 'text-[#B5986A] bg-[#B5986A]/10 scale-110' : 'text-blue-400 bg-blue-400/10 scale-110')\n                    : (theme === 'morandi' ? 'text-[#6B5B73]/60 hover:text-[#6B5B73] hover:bg-[#6B5B73]/5' : 'text-slate-400 hover:text-slate-300 hover:bg-slate-700')\n                )}\n              >\n                <Icon size={20} className=\"sm:w-6 sm:h-6\" />\n                <span className=\"text-xs font-medium truncate\">{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n\n      {/* 成功提示Toast */}\n      {showToast && (\n        <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 rounded-full shadow-lg flex items-center space-x-2 animate-pulse\">\n            <div className=\"w-2 h-2 bg-white rounded-full animate-ping\" />\n            <span className=\"font-medium\">記帳成功！</span>\n          </div>\n        </div>\n      )}\n\n\n      {/* 新增帳戶對話框 */}\n      <AddAccountDialog\n        isOpen={isAddAccountOpen}\n        onClose={() => setIsAddAccountOpen(false)}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/api/health/detailed/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/api/health/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":49,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';\n\n/**\n * Health Check API\n * 檢查系統各項服務狀態\n *\n * GET /api/health\n */\nexport async function GET() {\n  const startTime = Date.now();\n\n  const checks = {\n    status: 'healthy' as 'healthy' | 'degraded' | 'unhealthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    services: {\n      database: {\n        status: 'unknown' as 'ok' | 'error' | 'unknown',\n        responseTime: 0,\n        message: ''\n      },\n      cache: {\n        status: 'ok' as 'ok' | 'error' | 'unknown',\n        message: 'IndexedDB (client-side)'\n      }\n    },\n    version: {\n      app: '5.8.0',\n      node: process.version\n    }\n  };\n\n  // 檢查 Supabase 連線\n  try {\n    const dbStartTime = Date.now();\n\n    if (!supabaseUrl || !supabaseKey) {\n      checks.services.database.status = 'error';\n      checks.services.database.message = 'Supabase credentials not configured';\n      checks.status = 'degraded';\n    } else {\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // 簡單查詢測試連線\n      const { data, error } = await supabase\n        .from('employees')\n        .select('count', { count: 'exact', head: true });\n\n      checks.services.database.responseTime = Date.now() - dbStartTime;\n\n      if (error) {\n        checks.services.database.status = 'error';\n        checks.services.database.message = error.message;\n        checks.status = 'degraded';\n      } else {\n        checks.services.database.status = 'ok';\n        checks.services.database.message = `Connected (${checks.services.database.responseTime}ms)`;\n      }\n    }\n  } catch (error) {\n    checks.services.database.status = 'error';\n    checks.services.database.message = error instanceof Error ? error.message : 'Unknown error';\n    checks.status = 'unhealthy';\n  }\n\n  const totalTime = Date.now() - startTime;\n\n  return NextResponse.json({\n    ...checks,\n    responseTime: totalTime\n  }, {\n    status: checks.status === 'healthy' ? 200 :\n           checks.status === 'degraded' ? 207 : 503\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/api/log-error/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/business/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/calendar/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":291,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9036,9039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9036,9039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":428,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12963,12966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12963,12966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":823,"column":41,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":823,"endColumn":65,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[27770,27771],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useRef, useMemo, useCallback, useEffect } from 'react'\n\nimport { useRouter } from 'next/navigation'\n\nimport { EventClickArg } from '@fullcalendar/core'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport FullCalendar from '@fullcalendar/react'\nimport {\n  Calendar as CalendarIcon,\n  MapPin,\n  X,\n  Plus,\n  Cake,\n  Briefcase,\n  Clock,\n  CheckSquare,\n} from 'lucide-react'\n\nimport { CalendarSettingsDialog } from '@/components/calendar/calendar-settings-dialog'\nimport { ResponsiveHeader } from '@/components/layout/responsive-header'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Input } from '@/components/ui/input'\nimport { useTourStore, useOrderStore, useMemberStore, useCalendarStore, useCalendarEventStore } from '@/stores'\nimport { useAuthStore } from '@/stores/auth-store'\nimport { Tour } from '@/stores/types'\nimport { CalendarEvent } from '@/types/calendar.types'\nimport { logger } from '@/lib/utils/logger'\n\n// FullCalendar 元件所需的顯示格式（與資料庫 CalendarEvent 不同）\ninterface FullCalendarEvent {\n  id: string\n  title: string\n  start: string\n  end?: string\n  backgroundColor: string\n  borderColor: string\n  extendedProps: {\n    type: 'tour' | 'personal' | 'birthday' | 'company'\n    description?: string\n    location?: string\n    participants?: number\n    max_participants?: number\n    status?: Tour['status']\n    tour_id?: string\n    code?: string\n  }\n}\n\ninterface PersonalEvent {\n  id: string\n  title: string\n  date: string\n  end_date?: string\n  time?: string\n  type: 'meeting' | 'deadline' | 'task'\n  description?: string\n}\n\nexport default function CalendarPage() {\n  const router = useRouter()\n  const calendarRef = useRef<FullCalendar>(null)\n  const { items: tours } = useTourStore()\n  const { items: orders } = useOrderStore()\n  const { items: members } = useMemberStore()\n\n  // CalendarStore（只管理 UI 狀態）\n  const { user } = useAuthStore()\n  const { settings } = useCalendarStore()\n\n  // CalendarEventStore（管理事件資料）\n  const { items: calendarEvents, create: addEvent, delete: deleteEvent } = useCalendarEventStore()\n\n  const [moreEventsDialog, setMoreEventsDialog] = useState<{\n    open: boolean\n    date: string\n    events: FullCalendarEvent[]\n  }>({\n    open: false,\n    date: '',\n    events: [],\n  })\n\n  const [eventDetailDialog, setEventDetailDialog] = useState<{\n    open: boolean\n    event: PersonalEvent | null\n  }>({\n    open: false,\n    event: null,\n  })\n\n  const [addEventDialog, setAddEventDialog] = useState<{\n    open: boolean\n    selectedDate: string\n  }>({\n    open: false,\n    selectedDate: '',\n  })\n\n  const [currentDate, setCurrentDate] = useState(new Date())\n\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    visibility: 'personal' as 'personal' | 'company',\n    event_type: 'meeting' as 'meeting' | 'deadline' | 'task' | 'other',\n    description: '',\n    end_date: '',\n    start_time: '',\n    end_time: '',\n  })\n\n  // 計算事件區間長度（用於排序）\n  const getEventDuration = useCallback((event: FullCalendarEvent): number => {\n    if (!event.end) return 0\n    const start = new Date(event.start)\n    const end = new Date(event.end)\n    return Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))\n  }, [])\n\n  // 事件排序：短程在前，長程在後\n  const compareEvents = useCallback(\n    (a: FullCalendarEvent, b: FullCalendarEvent): number => {\n      const durationA = getEventDuration(a)\n      const durationB = getEventDuration(b)\n\n      if (durationA !== durationB) {\n        return durationA - durationB\n      }\n\n      return a.start.localeCompare(b.start)\n    },\n    [getEventDuration]\n  )\n\n  // 根據類型取得顏色 - 使用莫蘭迪配色\n  const getEventColor = useCallback((type: string, status?: Tour['status']) => {\n    if (type === 'tour' && status) {\n      const colors: Record<Tour['status'], { bg: string; border: string }> = {\n        draft: { bg: '#9BB5D6', border: '#8AA4C5' },       // 提案\n        active: { bg: '#A8C4A2', border: '#97B391' },      // 進行中\n        pending_close: { bg: '#D4B896', border: '#C3A785' }, // 待結案\n        closed: { bg: '#B8B3AE', border: '#A7A29D' },      // 結案\n        cancelled: { bg: '#B8B3AE', border: '#A7A29D' },   // 已取消\n        special: { bg: '#D4A5A5', border: '#C39494' },     // 特殊團\n      }\n      return colors[status] || colors.draft\n    }\n\n    const colors = {\n      personal: { bg: '#B8A9D1', border: '#A798C0' },\n      birthday: { bg: '#E6B8C8', border: '#D5A7B7' },\n      company: { bg: '#E0C3A0', border: '#CFB28F' },\n    }\n    return colors[type as keyof typeof colors] || { bg: '#B8B3AE', border: '#A7A29D' }\n  }, [])\n\n  // 轉換旅遊團為日曆事件（過濾掉特殊團）\n  const tourEvents: FullCalendarEvent[] = useMemo(() => {\n    return (tours || [])\n      .filter(tour => tour.status !== 'special') // 過濾掉簽證專用團等特殊團\n      .map(tour => {\n        const color = getEventColor('tour', tour.status)\n        const tourOrders = (orders || []).filter(order => order.tour_id === tour.id)\n        const actualMembers = (members || []).filter(member =>\n          tourOrders.some(order => order.id === member.order_id)\n        ).length\n\n        // 修正 FullCalendar 的多日事件顯示問題\n        // 如果有 return_date，則需要加一天才能正確顯示跨日事件\n        let end_date = tour.return_date\n        if (end_date && end_date !== tour.departure_date) {\n          const returnDateObj = new Date(end_date)\n          returnDateObj.setDate(returnDateObj.getDate() + 1)\n          end_date = returnDateObj.toISOString().split('T')[0]\n        }\n\n        return {\n          id: `tour-${tour.id}`,\n          title: `🛫 ${tour.name}`,\n          start: tour.departure_date,\n          end: end_date,\n          backgroundColor: color.bg,\n          borderColor: color.border,\n          extendedProps: {\n            type: 'tour' as const,\n            tour_id: tour.id,\n            code: tour.code,\n            location: tour.location,\n            participants: actualMembers,\n            max_participants: tour.max_participants,\n            status: tour.status,\n          },\n        }\n      })\n  }, [tours, orders, members, getEventColor])\n\n  // 轉換個人事項為日曆事件\n  const personalCalendarEvents: FullCalendarEvent[] = useMemo(() => {\n    return (calendarEvents || [])\n      .filter(event => event.visibility === 'personal')\n      .map(event => {\n        const color = getEventColor('personal')\n        return {\n          id: event.id,\n          title: `📅 ${event.title}`,\n          start: event.start,\n          end: event.end,\n          backgroundColor: color.bg,\n          borderColor: color.border,\n          extendedProps: {\n            type: 'personal' as const,\n            description: event.description,\n          },\n        }\n      })\n  }, [calendarEvents, getEventColor])\n\n  // 轉換公司事項為日曆事件\n  const companyCalendarEvents: FullCalendarEvent[] = useMemo(() => {\n    return (calendarEvents || [])\n      .filter(event => event.visibility === 'company')\n      .map(event => {\n        const color = getEventColor('company')\n        return {\n          id: event.id,\n          title: `🏢 ${event.title}`,\n          start: event.start,\n          end: event.end,\n          backgroundColor: color.bg,\n          borderColor: color.border,\n          extendedProps: {\n            type: 'company' as const,\n            description: event.description,\n          },\n        }\n      })\n  }, [calendarEvents, getEventColor])\n\n  // 轉換會員生日為日曆事件\n  const birthdayEvents: FullCalendarEvent[] = useMemo(() => {\n    const currentYear = new Date().getFullYear()\n\n    return (members || [])\n      .map(member => {\n        if (!member?.birthday) return null\n\n        // 計算今年的生日日期\n        const birthdayThisYear = `${currentYear}-${member.birthday.slice(5)}`\n\n        return {\n          id: `birthday-${member.id}`,\n          title: `🎂 ${member.name}`,\n          start: birthdayThisYear,\n          backgroundColor: getEventColor('birthday').bg,\n          borderColor: getEventColor('birthday').border,\n          extendedProps: {\n            type: 'birthday' as const,\n            member_id: member.id,\n            member_name: member.name,\n            order_id: member.order_id,\n          },\n        }\n      })\n      .filter(Boolean) as FullCalendarEvent[]\n  }, [members, getEventColor])\n\n  // 合併所有事件\n  const allEvents = useMemo(() => {\n    return [...tourEvents, ...personalCalendarEvents, ...companyCalendarEvents, ...birthdayEvents]\n  }, [tourEvents, personalCalendarEvents, companyCalendarEvents, birthdayEvents])\n\n  // 過濾事件（根據 settings）\n  const filteredEvents = useMemo(() => {\n    return allEvents.filter(event => {\n      const type = event.extendedProps.type\n\n      if (type === 'tour' && !settings.showTours) return false\n      if (type === 'personal' && !settings.showPersonal) return false\n      if (type === 'company' && !settings.showCompany) return false\n      if (type === 'birthday' && !settings.showBirthdays) return false\n\n      return true\n    })\n  }, [allEvents, settings])\n\n  // 處理日期點擊 - 直接開啟新增個人事項\n  const handleDateClick = (info: any) => {\n    setAddEventDialog({\n      open: true,\n      selectedDate: info.dateStr,\n    })\n  }\n\n  // 新增事件\n  const handleAddEvent = async () => {\n    if (!newEvent.title || !user) return\n\n    try {\n      // 組合日期和時間\n      const startDateTime = newEvent.start_time\n        ? `${addEventDialog.selectedDate}T${newEvent.start_time}:00`\n        : `${addEventDialog.selectedDate}T00:00:00`;\n\n      const endDate = newEvent.end_date || addEventDialog.selectedDate;\n      const endDateTime = newEvent.end_time\n        ? `${endDate}T${newEvent.end_time}:00`\n        : `${endDate}T23:59:59`;\n\n      // 映射 event_type: deadline → reminder\n      const mappedType = newEvent.event_type === 'deadline' ? 'reminder' : newEvent.event_type;\n\n      await addEvent({\n        title: newEvent.title,\n        description: newEvent.description,\n        start: startDateTime,\n        end: endDateTime,\n        all_day: !newEvent.start_time && !newEvent.end_time,\n        type: mappedType as 'tour' | 'meeting' | 'task' | 'reminder' | 'other',\n        visibility: newEvent.visibility,\n        owner_id: user.id,\n      })\n\n      // 重置表單\n      setNewEvent({\n        title: '',\n        visibility: 'personal',\n        event_type: 'meeting',\n        description: '',\n        end_date: '',\n        start_time: '',\n        end_time: '',\n      })\n\n      setAddEventDialog({ open: false, selectedDate: '' })\n    } catch (error) {\n      logger.error('新增事件失敗:', error)\n    }\n  }\n\n  // 生成15分鐘間隔的時間選項\n  const generateTimeOptions = () => {\n    const options = []\n    for (let hour = 0; hour < 24; hour++) {\n      for (let minute = 0; minute < 60; minute += 15) {\n        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`\n        options.push(timeString)\n      }\n    }\n    return options\n  }\n\n  const timeOptions = generateTimeOptions()\n\n  // 月份切換\n  const handlePrevMonth = () => {\n    const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\n    setCurrentDate(newDate)\n    calendarRef.current?.getApi().prev()\n  }\n\n  const handleNextMonth = () => {\n    const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\n    setCurrentDate(newDate)\n    calendarRef.current?.getApi().next()\n  }\n\n  const handleToday = () => {\n    const today = new Date()\n    setCurrentDate(today)\n    calendarRef.current?.getApi().today()\n  }\n\n  // 格式化當前月份\n  const getCurrentMonthYear = () => {\n    return currentDate.toLocaleDateString('zh-TW', { year: 'numeric', month: 'long' })\n  }\n\n  // 處理事件點擊\n  const handleEventClick = (info: EventClickArg) => {\n    const eventType = info.event.extendedProps.type\n\n    if (eventType === 'tour') {\n      const tour_id = info.event.extendedProps.tourId\n      router.push(`/tours/${tour_id}`)\n    } else if (eventType === 'birthday') {\n      // 跳轉到會員資料頁面\n      const member_id = info.event.extendedProps.memberId\n      // 這裡可以跳轉到訂單詳情頁面的會員區塊\n      router.push(`/orders?member=${member_id}`)\n    } else if (eventType === 'personal' || eventType === 'company') {\n      // 找到對應的事項\n      const eventId = info.event.id\n      const event = calendarEvents.find(e => e.id === eventId)\n      if (event) {\n        // 轉換為 PersonalEvent 格式以兼容現有 Dialog\n        const personalEventFormat: PersonalEvent = {\n          id: event.id,\n          title: event.title,\n          date: event.start,\n          end_date: event.end,\n          time: event.start,\n          type: event.type as 'meeting' | 'deadline' | 'task',\n          description: event.description,\n        }\n        setEventDetailDialog({\n          open: true,\n          event: personalEventFormat,\n        })\n      }\n    }\n  }\n\n  // 刪除事項\n  const handleDeleteEvent = async (eventId: string) => {\n    try {\n      await deleteEvent(eventId)\n      setEventDetailDialog({ open: false, event: null })\n    } catch (error) {\n      logger.error('刪除事件失敗:', error)\n    }\n  }\n\n  // 處理 \"更多\" 連結點擊\n  const handleMoreLinkClick = (info: any) => {\n    info.jsEvent.preventDefault()\n    const clickedDate = info.dateStr\n\n    const dayEvents = (filteredEvents || []).filter((event: FullCalendarEvent) => {\n      if (!event?.start) return false\n      const eventStart = event.start.split('T')[0]\n      const eventEnd = event?.end ? event.end.split('T')[0] : eventStart\n      return clickedDate >= eventStart && clickedDate <= eventEnd\n    })\n\n    const sortedEvents = dayEvents.sort(compareEvents)\n\n    setMoreEventsDialog({\n      open: true,\n      date: clickedDate,\n      events: sortedEvents,\n    })\n\n    return 'popover' as const\n  }\n\n  const handleCloseDialog = () => {\n    setMoreEventsDialog({\n      open: false,\n      date: '',\n      events: [],\n    })\n  }\n\n  const handleDialogEventClick = (event: FullCalendarEvent) => {\n    if (event.extendedProps.type === 'tour') {\n      router.push(`/tours/${event.extendedProps.tour_id}`)\n    }\n    handleCloseDialog()\n  }\n\n  return (\n    <>\n      <ResponsiveHeader\n        title=\"行事曆\"\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '行事曆', href: '/calendar' },\n        ]}\n        actions={\n          <div className=\"flex items-center gap-4\">\n            {/* 月份切換 */}\n            <div className=\"flex items-center gap-2 border border-border rounded-lg p-1\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={handlePrevMonth} className=\"h-8 w-8 p-0\">\n                ←\n              </Button>\n              <span className=\"text-sm font-medium text-morandi-primary min-w-[120px] text-center\">\n                {getCurrentMonthYear()}\n              </span>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleNextMonth} className=\"h-8 w-8 p-0\">\n                →\n              </Button>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleToday}\n              className=\"border-morandi-gold text-morandi-gold hover:bg-morandi-gold hover:text-white\"\n            >\n              今天\n            </Button>\n\n            <CalendarSettingsDialog />\n\n            <Button\n              size=\"sm\"\n              onClick={() => {\n                const today = new Date().toISOString().split('T')[0]\n                setAddEventDialog({ open: true, selectedDate: today })\n              }}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              <Plus size={16} className=\"mr-1\" />\n              新增事項\n            </Button>\n          </div>\n        }\n      />\n\n      <div className=\"space-y-6\">\n        <Card className=\"p-6 border-morandi-container\">\n        {/* 日曆主體 */}\n        <div className=\"calendar-container\">\n          <FullCalendar\n            ref={calendarRef}\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            headerToolbar={false}\n            events={filteredEvents}\n            dateClick={handleDateClick}\n            eventClick={handleEventClick}\n            locale=\"zh-tw\"\n            height=\"auto\"\n            dayMaxEvents={3}\n            moreLinkClick={handleMoreLinkClick}\n            moreLinkText=\"更多\"\n            weekends={true}\n            firstDay={1}\n            eventDisplay=\"auto\"\n            eventDidMount={info => {\n              // 為事件添加 data 屬性以便 CSS 選擇器使用\n              const eventType = info.event.extendedProps.type\n              info.el.setAttribute('data-event-type', eventType)\n            }}\n            displayEventTime={false}\n            eventOrder=\"start,-duration,title\"\n            buttonText={{\n              today: '今天',\n              month: '月',\n              week: '週',\n              day: '日',\n            }}\n          />\n        </div>\n\n        {/* 圖例 */}\n        <div className=\"mt-6 flex flex-wrap gap-4 p-4 bg-morandi-container/10 rounded-lg\">\n          <div className=\"text-sm font-medium text-morandi-secondary\">圖例：</div>\n\n          {/* 旅遊團狀態圖例 */}\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#9BB5D6' }} />\n            <span className=\"text-sm text-morandi-secondary\">提案</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#A8C4A2' }} />\n            <span className=\"text-sm text-morandi-secondary\">進行中</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#D4B896' }} />\n            <span className=\"text-sm text-morandi-secondary\">待結案</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#B8B3AE' }} />\n            <span className=\"text-sm text-morandi-secondary\">結案</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#D4A5A5' }} />\n            <span className=\"text-sm text-morandi-secondary\">特殊團</span>\n          </div>\n\n          {/* 個人事項圖例 */}\n          <div className=\"flex items-center gap-2 ml-4\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#B8A9D1' }} />\n            <span className=\"text-sm text-morandi-secondary\">個人事項</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#E6B8C8' }} />\n            <span className=\"text-sm text-morandi-secondary\">生日</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: '#E0C3A0' }} />\n            <span className=\"text-sm text-morandi-secondary\">公司活動</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* 新增行事曆事項對話框 */}\n      <Dialog\n        open={addEventDialog.open}\n        onOpenChange={(open) => {\n          if (!open) {\n            // 關閉時重置表單\n            setNewEvent({\n              title: '',\n              visibility: 'personal',\n              event_type: 'meeting',\n              description: '',\n              end_date: '',\n              start_time: '',\n              end_time: '',\n            })\n            setAddEventDialog({ open: false, selectedDate: '' })\n          }\n        }}\n      >\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>新增行事曆事項</DialogTitle>\n          </DialogHeader>\n\n          <form\n            onSubmit={e => {\n              e.preventDefault()\n              if (newEvent.title.trim()) {\n                handleAddEvent()\n              }\n            }}\n            className=\"space-y-4\"\n          >\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">開始日期</label>\n                <div className=\"mt-1 p-3 bg-morandi-container/20 rounded-lg\">\n                  <p className=\"text-base font-semibold text-morandi-primary\">\n                    {addEventDialog.selectedDate}\n                  </p>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">結束日期（選填）</label>\n                <Input\n                  type=\"date\"\n                  value={newEvent.end_date}\n                  onChange={e => setNewEvent(prev => ({ ...prev, end_date: e.target.value }))}\n                  min={addEventDialog.selectedDate}\n                  className=\"mt-1\"\n                  placeholder=\"跨天活動請選擇\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">標題</label>\n              <Input\n                value={newEvent.title}\n                onChange={e => setNewEvent(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"輸入事項標題\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">事件類型</label>\n                <select\n                  value={newEvent.visibility}\n                  onChange={e => setNewEvent(prev => ({ ...prev, visibility: e.target.value as 'personal' | 'company' }))}\n                  className=\"mt-1 w-full p-2 border border-border rounded-md bg-white\"\n                >\n                  <option value=\"personal\">個人行事曆</option>\n                  <option value=\"company\">公司行事曆</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">開始時間（選填）</label>\n                <select\n                  value={newEvent.start_time}\n                  onChange={e => setNewEvent(prev => ({ ...prev, start_time: e.target.value }))}\n                  className=\"mt-1 w-full p-2 border border-border rounded-md bg-white\"\n                >\n                  <option value=\"\">不指定時間</option>\n                  {timeOptions.map(time => (\n                    <option key={time} value={time}>\n                      {time}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* 如果有結束日期，顯示結束時間 */}\n            {newEvent.end_date && (\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">結束時間（選填）</label>\n                <select\n                  value={newEvent.end_time}\n                  onChange={e => setNewEvent(prev => ({ ...prev, end_time: e.target.value }))}\n                  className=\"mt-1 w-full p-2 border border-border rounded-md bg-white\"\n                >\n                  <option value=\"\">不指定時間</option>\n                  {timeOptions.map(time => (\n                    <option key={time} value={time}>\n                      {time}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">說明（選填）</label>\n              <Input\n                value={newEvent.description}\n                onChange={e => setNewEvent(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"輸入說明\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setAddEventDialog({ open: false, selectedDate: '' })}\n              >\n                取消\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!newEvent.title.trim()}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增 <span className=\"ml-1 text-xs opacity-70\">(Enter)</span>\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* 事件詳情對話框 */}\n      <Dialog\n        open={eventDetailDialog.open}\n        onOpenChange={() => setEventDetailDialog({ open: false, event: null })}\n      >\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>事件詳情</DialogTitle>\n          </DialogHeader>\n\n          {eventDetailDialog.event && (\n            <div className=\"space-y-4\">\n              {/* 標題 */}\n              <div className=\"p-4 bg-morandi-container/20 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  {eventDetailDialog.event.type === 'meeting' && (\n                    <span className=\"text-2xl\">📅</span>\n                  )}\n                  {eventDetailDialog.event.type === 'deadline' && (\n                    <span className=\"text-2xl\">⏰</span>\n                  )}\n                  {eventDetailDialog.event.type === 'task' && <span className=\"text-2xl\">✓</span>}\n                  <span className=\"text-sm text-morandi-secondary\">\n                    {eventDetailDialog.event.type === 'meeting'\n                      ? '會議'\n                      : eventDetailDialog.event.type === 'deadline'\n                        ? '截止日期'\n                        : '待辦事項'}\n                  </span>\n                </div>\n                <h3 className=\"text-lg font-semibold text-morandi-primary\">\n                  {eventDetailDialog.event.title}\n                </h3>\n              </div>\n\n              {/* 日期時間 */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <CalendarIcon size={16} className=\"text-morandi-secondary\" />\n                  <span className=\"text-morandi-primary\">\n                    {new Date(eventDetailDialog.event.date).toLocaleDateString('zh-TW', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                      weekday: 'long',\n                    })}\n                  </span>\n                </div>\n\n                {eventDetailDialog.event.end_date && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <span className=\"text-morandi-secondary ml-6\">至</span>\n                    <span className=\"text-morandi-primary\">\n                      {new Date(eventDetailDialog.event.end_date).toLocaleDateString('zh-TW', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        weekday: 'long',\n                      })}\n                    </span>\n                  </div>\n                )}\n\n                {eventDetailDialog.event.time && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Clock size={16} className=\"text-morandi-secondary\" />\n                    <span className=\"text-morandi-primary\">{eventDetailDialog.event.time}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* 說明 */}\n              {eventDetailDialog.event.description && (\n                <div className=\"p-3 bg-morandi-container/10 rounded-lg\">\n                  <p className=\"text-sm text-morandi-secondary mb-1\">說明</p>\n                  <p className=\"text-sm text-morandi-primary\">\n                    {eventDetailDialog.event.description}\n                  </p>\n                </div>\n              )}\n\n              {/* 操作按鈕 */}\n              <div className=\"flex justify-end gap-3 pt-4 border-t border-border\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    if (confirm('確定要刪除這個事件嗎？')) {\n                      handleDeleteEvent(eventDetailDialog.event!.id)\n                    }\n                  }}\n                  className=\"text-morandi-red hover:bg-morandi-red hover:text-white\"\n                >\n                  刪除\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setEventDetailDialog({ open: false, event: null })}\n                >\n                  關閉\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* 更多事件對話框 */}\n      <Dialog open={moreEventsDialog.open} onOpenChange={handleCloseDialog}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-between\">\n              <DialogTitle>\n                {moreEventsDialog.date} 的所有事件 ({moreEventsDialog.events.length})\n              </DialogTitle>\n              <button\n                onClick={handleCloseDialog}\n                className=\"text-morandi-secondary hover:text-morandi-primary\"\n              >\n                <X size={20} />\n              </button>\n            </div>\n          </DialogHeader>\n\n          <div className=\"space-y-2 max-h-[60vh] overflow-y-auto\">\n            {moreEventsDialog.events.map((event, index) => {\n              const duration = getEventDuration(event)\n              const Icon =\n                event.extendedProps.type === 'tour'\n                  ? MapPin\n                  : event.extendedProps.type === 'personal'\n                    ? CheckSquare\n                    : event.extendedProps.type === 'birthday'\n                      ? Cake\n                      : Briefcase\n\n              return (\n                <button\n                  key={index}\n                  onClick={() => handleDialogEventClick(event)}\n                  className=\"w-full p-4 border border-border rounded-lg hover:bg-morandi-container/10 transition-colors text-left\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div\n                      className=\"w-3 h-3 rounded mt-1 flex-shrink-0\"\n                      style={{ backgroundColor: event.backgroundColor }}\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium text-morandi-primary mb-1 truncate\">\n                        {event.title}\n                      </div>\n                      <div className=\"flex items-center gap-4 text-sm text-morandi-secondary\">\n                        <div className=\"flex items-center gap-1\">\n                          <Icon size={14} />\n                          <span className=\"capitalize\">{event.extendedProps.type}</span>\n                        </div>\n                        {event.extendedProps.location && (\n                          <span>{event.extendedProps.location}</span>\n                        )}\n                        {event.extendedProps.participants && (\n                          <span>\n                            {event.extendedProps.participants}/{event.extendedProps.max_participants}\n                            人\n                          </span>\n                        )}\n                        {duration > 0 && (\n                          <span className=\"text-morandi-gold font-medium\">{duration}天</span>\n                        )}\n                      </div>\n                      {event.extendedProps.description && (\n                        <div className=\"mt-1 text-xs text-morandi-secondary\">\n                          {event.extendedProps.description}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </button>\n              )\n            })}\n          </div>\n        </DialogContent>\n      </Dialog>\n      </div>\n\n      <style jsx global>{`\n        /* FullCalendar Morandi 樣式覆蓋 */\n        .calendar-container {\n          font-family: inherit;\n        }\n\n        .fc .fc-toolbar-title {\n          font-size: 1.5rem;\n          font-weight: 600;\n          color: #3a3633;\n        }\n\n        .fc .fc-button {\n          background-color: #c4a572;\n          border-color: #c4a572;\n          color: white;\n          padding: 0.5rem 1rem;\n          font-size: 0.875rem;\n          text-transform: none;\n          box-shadow: none;\n        }\n\n        .fc .fc-button:hover {\n          background-color: #b39561;\n          border-color: #b39561;\n        }\n\n        .fc .fc-button:disabled {\n          background-color: #e8e6e3;\n          border-color: #e8e6e3;\n          color: #8b8680;\n          opacity: 0.6;\n        }\n\n        .fc .fc-button-primary:not(:disabled).fc-button-active {\n          background-color: #b39561;\n          border-color: #b39561;\n        }\n\n        .fc .fc-col-header-cell {\n          background-color: #f6f4f1;\n          padding: 1rem 0.5rem;\n          font-weight: 500;\n          color: #8b8680;\n          border-color: #e8e6e3;\n        }\n\n        .fc .fc-daygrid-day {\n          border-color: #e8e6e3;\n        }\n\n        .fc .fc-daygrid-day-number {\n          color: #3a3633;\n          padding: 0.5rem;\n          font-size: 0.875rem;\n        }\n\n        .fc .fc-day-today {\n          background-color: rgba(217, 210, 200, 0.3) !important;\n        }\n\n        .fc .fc-day-today .fc-daygrid-day-number {\n          background-color: #c4a572;\n          color: white;\n          padding: 0.125rem 0.5rem;\n          border-radius: 0.375rem;\n          font-weight: 600;\n          display: inline-block;\n          margin: 0.25rem 0 0.25rem 0.5rem;\n        }\n\n        .fc .fc-daygrid-day:hover {\n          background-color: rgba(58, 54, 51, 0.02);\n          cursor: pointer;\n        }\n\n        .fc-event {\n          cursor: pointer;\n          border: none;\n          font-size: 0.75rem;\n          padding: 0.25rem 0.5rem;\n          border-radius: 0.25rem;\n          font-weight: 500;\n          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);\n          transition: all 0.2s ease;\n        }\n\n        .fc-event:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12);\n        }\n\n        .fc-event-title {\n          font-weight: 500;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .fc-daygrid-more-link {\n          color: #c4a572 !important;\n          font-weight: 500 !important;\n          text-decoration: none !important;\n          padding: 0.125rem 0.5rem !important;\n          border-radius: 0.25rem !important;\n          transition: all 0.2s ease !important;\n          display: inline-block !important;\n          margin-top: 0.25rem !important;\n          font-size: 0.75rem !important;\n        }\n\n        .fc-daygrid-more-link:hover {\n          background-color: rgba(196, 165, 114, 0.1) !important;\n          color: #b39561 !important;\n        }\n\n        .fc-popover {\n          display: none !important;\n        }\n\n        .fc .fc-day-sat,\n        .fc .fc-day-sun {\n          background-color: transparent;\n        }\n\n        /* 點點樣式事件 */\n        .fc .fc-daygrid-event.fc-event-start.fc-event-end {\n          margin: 1px 2px;\n          padding: 2px 6px;\n          border-radius: 12px;\n          font-size: 11px;\n          line-height: 1.2;\n        }\n\n        /* 生日事件特殊樣式 - 圓形點點 */\n        .fc-event[data-event-type='birthday'] {\n          border-radius: 50% !important;\n          width: 24px !important;\n          height: 24px !important;\n          padding: 0 !important;\n          margin: 2px !important;\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n          overflow: hidden !important;\n          border: none !important;\n        }\n\n        .fc-event[data-event-type='birthday'] .fc-event-title {\n          font-size: 14px !important;\n          line-height: 1 !important;\n          text-align: center !important;\n        }\n      `}</style>\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/customers/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'orders' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customer_id' is defined but never used. Allowed unused args must match /^_/u.","line":55,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2132,2135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2132,2135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2514,2517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2514,2517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2839,2842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2839,2842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activeCustomers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":182,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'avgSpentPerCustomer' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":184,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { Users, User, Mail, Phone, MapPin, Calendar, DollarSign, Edit } from 'lucide-react';\n\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { EnhancedTable, TableColumn } from '@/components/ui/enhanced-table';\nimport { Input } from '@/components/ui/input';\nimport { useTourStore, useOrderStore, useCustomerStore } from '@/stores';\n\nexport default function CustomersPage() {\n  const { items: customers, create: addCustomer } = useCustomerStore();\n  const { items: orders } = useOrderStore();\n  const { items: tours } = useTourStore();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [newCustomer, setNewCustomer] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    address: ''\n  });\n\n  const filteredCustomers = useMemo(() => {\n    if (!searchTerm) return customers;\n    return customers.filter(c =>\n      c.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      c.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      c.phone?.includes(searchTerm)\n    );\n  }, [customers, searchTerm]);\n\n  const handleAddCustomer = async () => {\n    if (!newCustomer.name.trim()) return;\n\n    await addCustomer({\n      ...newCustomer,\n      code: '', // 由 Store 自動生成\n      is_vip: false,\n      is_active: true,\n      total_spent: 0\n    });\n\n    setNewCustomer({\n      name: '',\n      email: '',\n      phone: '',\n      address: ''\n    });\n    setIsAddDialogOpen(false);\n  };\n\n  const getCustomerOrders = (customer_id: string) => {\n    // ✅ 透過 Order.customer_id 反查（目前 Order 類型還沒有 customer_id，暫時返回空陣列）\n    // TODO: 等 Order 類型加入 customer_id 後，改為: orders.filter(order => order.customer_id === customer_id)\n    return [];\n  };\n\n  const getCustomerTours = (customer_id: string) => {\n    // ✅ 透過反查訂單的 tour_id\n    const customerOrders = getCustomerOrders(customer_id);\n    const tourIds = new Set(customerOrders.map((o: any) => o.tour_id));\n    return tours.filter(tour => tourIds.has(tour.id));\n  };\n\n  // 模擬更豐富的顧客資料\n  const enrichedCustomers = filteredCustomers.map(customer => {\n    const customerOrders = getCustomerOrders(customer.id);\n    const customerTours = getCustomerTours(customer.id);\n    const lastOrderDate = customerOrders.length > 0\n      ? new Date(Math.max(...customerOrders.map((o: any) => new Date(o.created_at).getTime())))\n      : null;\n\n    return {\n      ...customer,\n      orderCount: customerOrders.length,\n      tourCount: customerTours.length,\n      lastOrderDate: lastOrderDate?.toLocaleDateString(),\n      avgOrderValue: customerOrders.length > 0\n        ? customerOrders.reduce((sum: number, o: any) => sum + o.total_amount, 0) / customerOrders.length\n        : 0\n    };\n  });\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'name',\n      label: '姓名',\n      sortable: true,\n      render: (value, customer) => (\n        <div>\n          <div className=\"text-sm font-medium text-morandi-primary\">{customer.name}</div>\n          <div className=\"text-xs text-morandi-secondary\">ID: {customer.id}</div>\n        </div>\n      ),\n    },\n    {\n      key: 'contact',\n      label: '聯絡方式',\n      sortable: false,\n      render: (value, customer) => (\n        <div>\n          {customer.email && (\n            <div className=\"flex items-center text-sm text-morandi-primary mb-1\">\n              <Mail size={12} className=\"mr-1\" />\n              {customer.email}\n            </div>\n          )}\n          {customer.phone && (\n            <div className=\"flex items-center text-sm text-morandi-secondary\">\n              <Phone size={12} className=\"mr-1\" />\n              {customer.phone}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'address',\n      label: '地址',\n      sortable: true,\n      render: (value, customer) => (\n        <div>\n          {customer.address && (\n            <div className=\"flex items-center text-sm text-morandi-primary\">\n              <MapPin size={12} className=\"mr-1\" />\n              {customer.address}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'orders',\n      label: '訂單/旅遊團',\n      sortable: true,\n      render: (value, customer) => (\n        <div className=\"text-sm\">\n          <div className=\"text-morandi-primary\">訂單: {customer.orderCount} 筆</div>\n          <div className=\"text-morandi-secondary\">旅遊團: {customer.tourCount} 個</div>\n        </div>\n      ),\n    },\n    {\n      key: 'totalSpent',\n      label: '消費紀錄',\n      sortable: true,\n      render: (value, customer) => (\n        <div className=\"text-sm\">\n          <div className=\"font-medium text-morandi-primary\">\n            總計: NT$ {customer.total_spent.toLocaleString()}\n          </div>\n          {customer.avgOrderValue > 0 && (\n            <div className=\"text-morandi-secondary\">\n              平均: NT$ {customer.avgOrderValue.toLocaleString()}\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'lastOrderDate',\n      label: '最後消費',\n      sortable: true,\n      render: (value, customer) => (\n        <div>\n          {customer.lastOrderDate && (\n            <div className=\"flex items-center text-xs text-morandi-secondary\">\n              <Calendar size={12} className=\"mr-1\" />\n              {customer.lastOrderDate}\n            </div>\n          )}\n        </div>\n      ),\n    },\n  ], []);\n\n  const totalCustomers = customers.length;\n  const activeCustomers = customers.filter(c => (c.total_orders ?? 0) > 0).length;\n  const totalSpent = customers.reduce((sum, c) => sum + (c.total_spent ?? 0), 0);\n  const avgSpentPerCustomer = totalCustomers > 0 ? totalSpent / totalCustomers : 0;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"顧客管理\"\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋顧客姓名、電話、Email...\"\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增顧客\"\n      >\n        <div className=\"text-sm text-morandi-secondary\">\n          {filteredCustomers.length} 位顧客\n        </div>\n      </ResponsiveHeader>\n\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n        className=\"min-h-full\"\n        columns={tableColumns}\n        data={enrichedCustomers}\n        actions={() => (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n            title=\"編輯顧客\"\n          >\n            <Edit size={14} className=\"text-morandi-gold\" />\n          </Button>\n        )}\n      />\n      </div>\n\n      {/* 新增顧客對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>新增顧客</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">姓名</label>\n              <Input\n                value={newCustomer.name}\n                onChange={(e) => setNewCustomer(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"輸入顧客姓名\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">Email</label>\n              <Input\n                type=\"email\"\n                value={newCustomer.email}\n                onChange={(e) => setNewCustomer(prev => ({ ...prev, email: e.target.value }))}\n                placeholder=\"輸入 Email 地址\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">電話</label>\n              <Input\n                value={newCustomer.phone}\n                onChange={(e) => setNewCustomer(prev => ({ ...prev, phone: e.target.value }))}\n                placeholder=\"輸入聯絡電話\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">地址</label>\n              <Input\n                value={newCustomer.address}\n                onChange={(e) => setNewCustomer(prev => ({ ...prev, address: e.target.value }))}\n                placeholder=\"輸入地址\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsAddDialogOpen(false)}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleAddCustomer}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/database/activities/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6169,6172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6169,6172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo, useCallback } from 'react';\nimport { MapIcon, Edit, Trash2, Ticket } from 'lucide-react';\n\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { EnhancedTable, TableColumn, useEnhancedTable } from '@/components/ui/enhanced-table';\nimport { Input } from '@/components/ui/input';\nimport { getRegionOptions, type RegionName, type ActivityOption } from '@/data/region-options';\n\nexport default function ActivitiesPage() {\n  const [selectedRegion] = useState<RegionName>('清邁');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [_editingActivity, setEditingActivity] = useState<ActivityOption | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [newActivity, setNewActivity] = useState({\n    name: '',\n    category: '',\n    adultPrice: 0,\n    childPrice: 0,\n    groupDiscount: 0\n  });\n\n  const currentOptions = getRegionOptions(selectedRegion);\n  const activityOptions = currentOptions.activities;\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'name',\n      label: '活動名稱',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <div className=\"flex items-center\">\n          <MapIcon size={16} className=\"mr-2 text-morandi-gold\" />\n          <span className=\"font-medium text-morandi-primary\">{value}</span>\n        </div>\n      )\n    },\n    {\n      key: 'category',\n      label: '類別',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">{value || '-'}</span>\n      )\n    },\n    {\n      key: 'adultPrice',\n      label: '成人價格',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">\n          {value ? `NT$ ${value}` : '-'}\n        </span>\n      )\n    },\n    {\n      key: 'childPrice',\n      label: '兒童價格',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">\n          {value ? `NT$ ${value}` : '-'}\n        </span>\n      )\n    },\n    {\n      key: 'groupDiscount',\n      label: '團體折扣',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">\n          {value ? `${value}%` : '無'}\n        </span>\n      )\n    },\n    {\n      key: 'actions',\n      label: '操作',\n      sortable: false,\n      filterable: false,\n      render: (_, row) => (\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => handleEditActivity(row)}\n            className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n            title=\"編輯活動\"\n          >\n            <Edit size={14} className=\"text-morandi-gold\" />\n          </button>\n          <button\n            onClick={() => handleDeleteActivity(row.id)}\n            className=\"p-1 hover:bg-morandi-red/10 rounded transition-colors\"\n            title=\"刪除活動\"\n          >\n            <Trash2 size={14} className=\"text-morandi-red\" />\n          </button>\n        </div>\n      )\n    }\n  ], []);\n\n  // 排序和篩選函數\n  const sortFunction = (data: ActivityOption[], column: string, direction: 'asc' | 'desc') => {\n    return [...data].sort((a, b) => {\n      const aValue: string | number = a[column as keyof ActivityOption] ?? '';\n      const bValue: string | number = b[column as keyof ActivityOption] ?? '';\n\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  };\n\n  const filterFunction = useCallback((data: ActivityOption[], filters: Record<string, string>) => {\n    return data.filter(activity => {\n      // 搜尋功能：檢查名稱或類別是否包含搜尋詞\n      const matchesSearch = !searchTerm ||\n        activity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (activity.category || '').toLowerCase().includes(searchTerm.toLowerCase());\n\n      return (\n        matchesSearch &&\n        (!filters.name || activity.name.toLowerCase().includes(filters.name.toLowerCase())) &&\n        (!filters.category || (activity.category || '').toLowerCase().includes(filters.category.toLowerCase())) &&\n        (!filters.adultPrice || (activity.adultPrice || 0).toString().includes(filters.adultPrice)) &&\n        (!filters.childPrice || (activity.childPrice || 0).toString().includes(filters.childPrice)) &&\n        (!filters.groupDiscount || (activity.groupDiscount || 0).toString().includes(filters.groupDiscount))\n      );\n    });\n  }, [searchTerm]);\n\n  const { data: filteredAndSortedActivities, handleSort, handleFilter } = useEnhancedTable(\n    activityOptions,\n    sortFunction,\n    filterFunction\n  );\n\n  // 重新計算過濾結果（當搜尋詞改變時）\n  const finalFilteredActivities = useMemo(() => {\n    return filterFunction(filteredAndSortedActivities, {});\n  }, [filteredAndSortedActivities, filterFunction]);\n\n  const handleAddActivity = () => {\n    if (!newActivity.name.trim()) return;\n    // TODO: 新增活動選項到資料庫\n    resetForm();\n  };\n\n  const handleEditActivity = (activity: ActivityOption) => {\n    setEditingActivity(activity);\n    setNewActivity({\n      name: activity.name,\n      category: activity.category || '',\n      adultPrice: activity.adultPrice || 0,\n      childPrice: activity.childPrice || 0,\n      groupDiscount: activity.groupDiscount || 0\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDeleteActivity = (_activityId: string) => {\n    if (confirm('確定要刪除此活動選項嗎？')) {\n      // TODO: 刪除活動選項從資料庫\n    }\n  };\n\n  const resetForm = () => {\n    setNewActivity({\n      name: '',\n      category: '',\n      adultPrice: 0,\n      childPrice: 0,\n      groupDiscount: 0\n    });\n    setIsAddDialogOpen(false);\n    setEditingActivity(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <ResponsiveHeader\n        {...{\n        title: '活動門票管理',\n        icon: Ticket} as any}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '資料庫管理', href: '/database' },\n          { label: '活動門票', href: '/database/activities' }\n        ]}\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋活動或類別...\"\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增活動\"\n        actions={\n          <span className=\"text-sm text-morandi-secondary\">\n            共 {finalFilteredActivities.length} 筆活動門票\n          </span>\n        }\n      />\n\n      <ContentContainer>\n        <EnhancedTable\n          columns={tableColumns}\n          data={finalFilteredActivities}\n          onSort={handleSort}\n          onFilter={handleFilter}\n          selection={undefined}\n        />\n\n        {finalFilteredActivities.length === 0 && (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <MapIcon size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p>{activityOptions.length === 0 ? '此地區尚未建立活動選項' : '無符合條件的活動選項'}</p>\n          </div>\n        )}\n      </ContentContainer>\n\n      {/* 新增活動對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={resetForm}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>新增活動門票</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">活動名稱</label>\n                <Input\n                  value={newActivity.name}\n                  onChange={(e) => setNewActivity(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"例如：大象保護區\"\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">分類</label>\n                <Input\n                  value={newActivity.category}\n                  onChange={(e) => setNewActivity(prev => ({ ...prev, category: e.target.value }))}\n                  placeholder=\"例如：生態體驗\"\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">成人票價</label>\n                <Input\n                  type=\"number\"\n                  value={newActivity.adultPrice || ''}\n                  onChange={(e) => setNewActivity(prev => ({ ...prev, adultPrice: Number(e.target.value) || 0 }))}\n                  placeholder=\"0\"\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">兒童票價</label>\n                <Input\n                  type=\"number\"\n                  value={newActivity.childPrice || ''}\n                  onChange={(e) => setNewActivity(prev => ({ ...prev, childPrice: Number(e.target.value) || 0 }))}\n                  placeholder=\"0\"\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={resetForm}>取消</Button>\n              <Button onClick={handleAddActivity} className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\">\n                新增\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/database/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/database/pricing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/database/regions/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Region' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1677,1680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1677,1680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1959,1962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1959,1962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'create' and 'regions.length'. Either include them or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [create, regions.length]","fix":{"range":[2339,2341],"text":"[create, regions.length]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { MapPin, Edit, Trash2, Power, ChevronRight, ChevronDown } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\n\nimport { cn } from '@/lib/utils';\nimport { DESTINATIONS } from '@/constants/destinations';\nimport { useRegionStore } from '@/stores';\nimport type { Region } from '@/types';\n\nexport default function RegionsPage() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [expandedCountries, setExpandedCountries] = useState<Set<string>>(new Set());\n  const { items: regions, create, update, delete: deleteRegion } = useRegionStore();\n\n  // 初始化：如果沒有資料，從 DESTINATIONS 匯入\n  useEffect(() => {\n    const initializeRegions = async () => {\n      // 檢查是否已經初始化過（使用 localStorage 標記）\n      const initialized = localStorage.getItem('regions_initialized');\n      if (initialized === 'true') {\n        console.log('📍 地區資料已初始化，跳過');\n        return;\n      }\n\n      // 再次檢查 store 中是否已有資料（防止重複初始化）\n      if (regions.length > 0) {\n        console.log('📍 地區資料已存在，標記為已初始化');\n        localStorage.setItem('regions_initialized', 'true');\n        return;\n      }\n\n      console.log('📍 初始化地區資料...');\n\n      try {\n        for (const [countryCode, destination] of Object.entries(DESTINATIONS)) {\n          // 添加國家\n          await create({\n            type: 'country',\n            name: destination.name,\n            code: countryCode,\n            status: 'active'\n          } as any);\n\n          // 添加城市\n          for (const city of destination.cities) {\n            await create({\n              type: 'city',\n              name: city.name,\n              code: city.code,\n              status: 'active',\n              country_code: countryCode\n            } as any);\n          }\n        }\n\n        // 標記為已初始化\n        localStorage.setItem('regions_initialized', 'true');\n        console.log('✅ 地區資料初始化完成');\n      } catch (error) {\n        console.error('❌ 地區資料初始化失敗:', error);\n        // 不標記為已初始化，下次可以重試\n      }\n    };\n\n    // 延遲執行，確保 store 已載入\n    const timer = setTimeout(initializeRegions, 100);\n    return () => clearTimeout(timer);\n  }, []); // 只執行一次\n\n  // 切換國家展開/收起\n  const toggleCountry = (countryCode: string) => {\n    setExpandedCountries(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(countryCode)) {\n        newSet.delete(countryCode);\n      } else {\n        newSet.add(countryCode);\n      }\n      return newSet;\n    });\n  };\n\n  // 停用/啟用\n  const toggleStatus = async (id: string) => {\n    const region = regions.find(r => r.id === id);\n    if (!region) return;\n\n    await update(id, {\n      status: region.status === 'active' ? 'inactive' : 'active'\n    });\n  };\n\n  // 刪除\n  const handleDelete = async (id: string) => {\n    if (confirm('確定要刪除嗎？')) {\n      await deleteRegion(id);\n    }\n  };\n\n  // 過濾和組織資料\n  const { countries, cities } = useMemo(() => {\n    const countryList = regions.filter(r => r.type === 'country');\n    const cityList = regions.filter(r => r.type === 'city');\n\n    return {\n      countries: countryList.filter(country =>\n        !searchTerm ||\n        country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        country.code.toLowerCase().includes(searchTerm.toLowerCase())\n      ),\n      cities: cityList\n    };\n  }, [regions, searchTerm]);\n\n  // 獲取國家的城市列表\n  const getCities = (countryCode: string) => {\n    return cities.filter(city =>\n      city.country_code === countryCode &&\n      (!searchTerm ||\n        city.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        city.code.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    );\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"地區管理\"\n        icon={MapPin}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '資料庫管理', href: '/database' },\n          { label: '地區管理', href: '/database/regions' }\n        ]}\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋國家或城市...\"\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"border border-border rounded-lg overflow-hidden bg-card\">\n          {/* 表格標題 */}\n          <div className=\"bg-morandi-container/30 border-b border-border\">\n            <div className=\"flex items-center px-4 py-3\">\n              <div className=\"flex-1 text-sm font-medium text-morandi-secondary\">國家/城市</div>\n              <div className=\"w-32 text-sm font-medium text-morandi-secondary\">代碼</div>\n              <div className=\"w-24 text-sm font-medium text-morandi-secondary\">狀態</div>\n              <div className=\"w-32 text-sm font-medium text-morandi-secondary text-right\">操作</div>\n            </div>\n          </div>\n\n          {/* 表格內容 */}\n          <div>\n            {countries.length === 0 ? (\n              <div className=\"text-center py-12 text-morandi-secondary\">\n                <MapPin size={48} className=\"mx-auto mb-4 opacity-50\" />\n                <p>無符合條件的地區</p>\n              </div>\n            ) : (\n              countries.map((country) => {\n                const isExpanded = expandedCountries.has(country.code);\n                const countryCities = getCities(country.code);\n\n                return (\n                  <div key={country.id}>\n                    {/* 國家行 */}\n                    <div className=\"border-b border-border hover:bg-morandi-container/20 transition-colors\">\n                      <div className=\"flex items-center px-4 py-3\">\n                        <div className=\"flex-1 flex items-center\">\n                          {/* 展開/收起按鈕 */}\n                          <button\n                            onClick={() => toggleCountry(country.code)}\n                            className=\"mr-2 p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n                          >\n                            {isExpanded ? (\n                              <ChevronDown size={16} className=\"text-morandi-gold\" />\n                            ) : (\n                              <ChevronRight size={16} className=\"text-morandi-secondary\" />\n                            )}\n                          </button>\n\n                          <MapPin size={16} className=\"mr-2 text-morandi-gold\" />\n                          <span className=\"font-semibold text-morandi-primary\">{country.name}</span>\n                          <span className=\"ml-2 text-xs text-morandi-muted\">\n                            ({countryCities.length} 個城市)\n                          </span>\n                        </div>\n\n                        <div className=\"w-32 text-morandi-secondary font-mono\">{country.code}</div>\n\n                        <div className=\"w-24\">\n                          <span className={cn(\n                            'inline-flex items-center px-2 py-1 rounded text-xs font-medium',\n                            country.status === 'active'\n                              ? 'bg-morandi-green text-white'\n                              : 'bg-morandi-container text-morandi-secondary'\n                          )}>\n                            {country.status === 'active' ? '啟用' : '停用'}\n                          </span>\n                        </div>\n\n                        <div className=\"w-32 flex items-center justify-end gap-1\">\n                          <button\n                            onClick={() => toggleStatus(country.id)}\n                            className=\"p-1 rounded transition-colors hover:bg-morandi-container/30\"\n                            title={country.status === 'active' ? '停用' : '啟用'}\n                          >\n                            <Power size={14} className={\n                              country.status === 'active' ? 'text-morandi-green' : 'text-morandi-secondary'\n                            } />\n                          </button>\n                          <button\n                            onClick={() => handleDelete(country.id)}\n                            className=\"p-1 text-morandi-secondary hover:text-morandi-red hover:bg-morandi-red/10 rounded transition-colors\"\n                            title=\"刪除\"\n                          >\n                            <Trash2 size={14} />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* 城市列表（展開時顯示） */}\n                    {isExpanded && countryCities.length > 0 && (\n                      <div className=\"bg-morandi-container/5\">\n                        {countryCities.map((city) => (\n                          <div\n                            key={city.id}\n                            className=\"border-b border-border/50 hover:bg-morandi-container/20 transition-colors\"\n                          >\n                            <div className=\"flex items-center px-4 py-2.5 pl-14\">\n                              <div className=\"flex-1 flex items-center\">\n                                <div className=\"w-1 h-1 rounded-full bg-morandi-gold mr-3\"></div>\n                                <span className=\"text-morandi-primary\">{city.name}</span>\n                              </div>\n\n                              <div className=\"w-32 text-morandi-secondary font-mono text-sm\">{city.code}</div>\n\n                              <div className=\"w-24\">\n                                <span className={cn(\n                                  'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium',\n                                  city.status === 'active'\n                                    ? 'bg-morandi-green/80 text-white'\n                                    : 'bg-morandi-container text-morandi-secondary'\n                                )}>\n                                  {city.status === 'active' ? '啟用' : '停用'}\n                                </span>\n                              </div>\n\n                              <div className=\"w-32 flex items-center justify-end gap-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => toggleStatus(city.id)}\n                                  className=\"h-7 w-7 p-0\"\n                                  title={city.status === 'active' ? '停用' : '啟用'}\n                                >\n                                  <Power size={12} className={\n                                    city.status === 'active' ? 'text-morandi-green' : 'text-morandi-secondary'\n                                  } />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDelete(city.id)}\n                                  className=\"h-7 w-7 p-0 hover:text-morandi-red\"\n                                  title=\"刪除\"\n                                >\n                                  <Trash2 size={12} />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/database/suppliers/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supplierTypeIcons' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supplierTypeColors' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filter' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":54,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2918,2921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2918,2921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo, useCallback } from 'react';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useSupplierStore } from '@/stores';\nimport {\n  Building2,\n  Hotel,\n  UtensilsCrossed,\n  Car,\n  Ticket,\n  UserCheck,\n  Package\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Supplier } from '@/types/supplier.types';\nimport { EnhancedTable, type TableColumn } from '@/components/ui/enhanced-table';\nimport { supplierService } from '@/features/suppliers/services/supplier.service';\nimport { useRegionStore } from '@/stores';\n\nconst supplierTypeIcons = {\n  hotel: Hotel,\n  restaurant: UtensilsCrossed,\n  transport: Car,\n  ticket: Ticket,\n  guide: UserCheck,\n  other: Package\n};\n\nconst supplierTypeLabels = {\n  hotel: '飯店住宿',\n  restaurant: '餐廳',\n  transport: '交通',\n  ticket: '門票',\n  guide: '導遊',\n  other: '其他'\n};\n\nconst supplierTypeColors = {\n  hotel: 'bg-blue-500',\n  restaurant: 'bg-green-500',\n  transport: 'bg-orange-500',\n  ticket: 'bg-purple-500',\n  guide: 'bg-pink-500',\n  other: 'bg-gray-500'\n};\n\nexport default function SuppliersPage() {\n  const { items: suppliers, create: addSupplier, filter } = useSupplierStore();\n  const { items: regions, fetchAll: fetchRegions } = useRegionStore();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // 懶載入：打開新增對話框時才載入 regions\n  const handleOpenAddDialog = useCallback(() => {\n    if (regions.length === 0) {\n      fetchRegions();\n    }\n    setIsAddDialogOpen(true);\n  }, [regions.length, fetchRegions]);\n\n  // 從 regions 取得國家列表\n  const activeCountries = useMemo(() => {\n    return regions\n      .filter(r => r.type === 'country' && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [regions]);\n\n  const [newSupplier, setNewSupplier] = useState({\n    supplier_code: '',\n    name: '',\n    country: '',\n    location: '',\n    type: 'hotel' as Supplier['type'],\n    contact: {\n      contact_person: '',\n      phone: '',\n      email: '',\n      address: '',\n      website: ''\n    },\n    status: 'active' as Supplier['status'],\n    note: ''\n  });\n\n  const handleAddSupplier = useCallback(async () => {\n    if (!newSupplier.name.trim() || !newSupplier.contact.contact_person.trim()) return;\n    if (!newSupplier.country) {\n      alert('請選擇國家');\n      return;\n    }\n\n    // 自動生成供應商編號\n    const supplierCode = await supplierService.generateSupplierCode(newSupplier.country);\n\n    addSupplier({\n      ...newSupplier,\n      supplier_code: supplierCode\n    } as any);\n\n    setNewSupplier({\n      supplier_code: '',\n      name: '',\n      country: '',\n      location: '',\n      type: 'hotel',\n      contact: {\n        contact_person: '',\n        phone: '',\n        email: '',\n        address: '',\n        website: ''\n      },\n      status: 'active',\n      note: ''\n    });\n    setIsAddDialogOpen(false);\n  }, [newSupplier, addSupplier]);\n\n  // 過濾供應商 - 使用 useMemo 優化\n  const filteredSuppliers = useMemo(() => {\n    if (!suppliers || !Array.isArray(suppliers)) return [];\n    return suppliers.filter(supplier => {\n      const matchesSearch = searchQuery === '' ||\n        supplier.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (supplier.supplier_code && supplier.supplier_code.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (supplier.country && supplier.country.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (supplier.location && supplier.location.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        supplier.contact.contact_person.toLowerCase().includes(searchQuery.toLowerCase());\n\n      return matchesSearch;\n    });\n  }, [suppliers, searchQuery]);\n\n  // 定義表格欄位\n  const columns: TableColumn[] = [\n    {\n      key: 'name',\n      label: '供應商名稱',\n      sortable: true,\n      render: (value) => <span className=\"font-medium text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'supplier_code',\n      label: '供應商編號',\n      sortable: true,\n      render: (value) => <span className=\"text-morandi-primary\">{value || '-'}</span>,\n    },\n    {\n      key: 'country',\n      label: '國家',\n      sortable: true,\n      render: (value) => <span className=\"text-morandi-primary\">{value || '-'}</span>,\n    },\n    {\n      key: 'location',\n      label: '地點',\n      sortable: true,\n      render: (value) => <span className=\"text-morandi-primary\">{value || '-'}</span>,\n    },\n    {\n      key: 'type',\n      label: '服務項目',\n      sortable: true,\n      render: (value) => (\n        <Badge variant=\"secondary\" className=\"text-xs\">\n          {supplierTypeLabels[value as Supplier['type']]}\n        </Badge>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"供應商管理\"\n        icon={Building2}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '資料庫管理', href: '/database' },\n          { label: '供應商管理', href: '/database/suppliers' }\n        ]}\n        showSearch={true}\n        searchTerm={searchQuery}\n        onSearchChange={setSearchQuery}\n        searchPlaceholder=\"搜尋供應商名稱、聯絡人或服務項目...\"\n        onAdd={handleOpenAddDialog}\n        addLabel=\"新增供應商\"\n      />\n\n      {/* 供應商列表 */}\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n          className=\"min-h-full\"\n          columns={columns}\n          data={filteredSuppliers}\n          loading={false}\n        />\n      </div>\n\n      {/* 新增供應商對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>新增供應商</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* 基本資訊 */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-sm font-medium text-morandi-primary\">基本資訊</h3>\n                <p className=\"text-xs text-morandi-secondary\">供應商編號將自動生成</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">供應商名稱 *</label>\n                  <Input\n                    value={newSupplier.name}\n                    onChange={(e) => setNewSupplier(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"輸入供應商名稱\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">國家 *</label>\n                  <Select\n                    value={newSupplier.country}\n                    onValueChange={(value) => setNewSupplier(prev => ({ ...prev, country: value }))}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"選擇國家\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {activeCountries.map((dest) => (\n                        <SelectItem key={dest.code} value={dest.name}>\n                          {dest.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">地點</label>\n                  <Input\n                    value={newSupplier.location}\n                    onChange={(e) => setNewSupplier(prev => ({ ...prev, location: e.target.value }))}\n                    placeholder=\"輸入地點\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">服務類別 *</label>\n                  <Select\n                    value={newSupplier.type}\n                    onValueChange={(value: Supplier['type']) => setNewSupplier(prev => ({ ...prev, type: value }))}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(supplierTypeLabels).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>{label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            {/* 聯絡資訊 */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-medium text-morandi-primary\">聯絡資訊</h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">聯絡人 *</label>\n                  <Input\n                    value={newSupplier.contact.contact_person}\n                    onChange={(e) => setNewSupplier(prev => ({\n                      ...prev,\n                      contact: { ...prev.contact, contact_person: e.target.value }\n                    }))}\n                    placeholder=\"聯絡人姓名\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">電話</label>\n                  <Input\n                    value={newSupplier.contact.phone}\n                    onChange={(e) => setNewSupplier(prev => ({\n                      ...prev,\n                      contact: { ...prev.contact, phone: e.target.value }\n                    }))}\n                    placeholder=\"聯絡電話\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">電子信箱</label>\n                  <Input\n                    type=\"email\"\n                    value={newSupplier.contact.email}\n                    onChange={(e) => setNewSupplier(prev => ({\n                      ...prev,\n                      contact: { ...prev.contact, email: e.target.value }\n                    }))}\n                    placeholder=\"example@email.com\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">網站</label>\n                  <Input\n                    value={newSupplier.contact.website}\n                    onChange={(e) => setNewSupplier(prev => ({\n                      ...prev,\n                      contact: { ...prev.contact, website: e.target.value }\n                    }))}\n                    placeholder=\"https://...\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">地址</label>\n                <Input\n                  value={newSupplier.contact.address}\n                  onChange={(e) => setNewSupplier(prev => ({\n                    ...prev,\n                    contact: { ...prev.contact, address: e.target.value }\n                  }))}\n                  placeholder=\"完整地址\"\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n\n            {/* 備註 */}\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">備註</label>\n              <Input\n                value={newSupplier.note}\n                onChange={(e) => setNewSupplier(prev => ({ ...prev, note: e.target.value }))}\n                placeholder=\"供應商備註資訊\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsAddDialogOpen(false)}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleAddSupplier}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增供應商\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/database/transport/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'regionOptionsMap' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedRegion' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":43},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'filterFunction'. Either include it or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [filterFunction, filteredAndSortedTransport]","fix":{"range":[5895,5935],"text":"[filterFunction, filteredAndSortedTransport]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'transportId' is defined but never used. Allowed unused args must match /^_/u.","line":198,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6963,6966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6963,6966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Car, Edit, Trash2, Users, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { EnhancedTable, TableColumn, useEnhancedTable } from '@/components/ui/enhanced-table';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { cn } from '@/lib/utils';\nimport { getRegionOptions, regionOptionsMap, type RegionName, type TransportOption } from '@/data/region-options';\n\nexport default function TransportPage() {\n  const router = useRouter();\n  const [selectedRegion, setSelectedRegion] = useState<RegionName>('清邁');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingTransport, setEditingTransport] = useState<TransportOption | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [newTransport, setNewTransport] = useState({\n    name: '',\n    price_per_person: 0,\n    pricePerGroup: 0,\n    capacity: 0,\n    is_group_cost: false\n  });\n\n  const currentOptions = getRegionOptions(selectedRegion);\n  const transportOptions = currentOptions.transport;\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'name',\n      label: '交通方式',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <div className=\"flex items-center\">\n          <Car size={16} className=\"mr-2 text-morandi-gold\" />\n          <span className=\"font-medium text-morandi-primary\">{value}</span>\n        </div>\n      )\n    },\n    {\n      key: 'is_group_cost',\n      label: '類型',\n      sortable: true,\n      filterable: true,\n      filterType: 'select',\n      filterOptions: [\n        { value: 'true', label: '團體分攤' },\n        { value: 'false', label: '個人費用' }\n      ],\n      render: (value) => (\n        <span className={cn(\n          'inline-flex items-center px-2 py-1 rounded text-xs font-medium',\n          value\n            ? 'bg-morandi-gold text-white'\n            : 'bg-morandi-container text-morandi-secondary'\n        )}>\n          {value ? (\n            <>\n              <Users size={12} className=\"mr-1\" />\n              團體分攤\n            </>\n          ) : (\n            <>\n              <User size={12} className=\"mr-1\" />\n              個人費用\n            </>\n          )}\n        </span>\n      )\n    },\n    {\n      key: 'price_per_person',\n      label: '個人價格',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">\n          {value ? `NT$ ${value}` : '-'}\n        </span>\n      )\n    },\n    {\n      key: 'pricePerGroup',\n      label: '團體價格',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">\n          {value ? `NT$ ${value}` : '-'}\n        </span>\n      )\n    },\n    {\n      key: 'capacity',\n      label: '載客量',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">\n          {value ? `${value} 人` : '-'}\n        </span>\n      )\n    },\n    {\n      key: 'actions',\n      label: '操作',\n      sortable: false,\n      filterable: false,\n      render: (_, row) => (\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => handleEditTransport(row)}\n            className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n            title=\"編輯交通選項\"\n          >\n            <Edit size={14} className=\"text-morandi-gold\" />\n          </button>\n          <button\n            onClick={() => handleDeleteTransport(row.id)}\n            className=\"p-1 hover:bg-morandi-red/10 rounded transition-colors\"\n            title=\"刪除交通選項\"\n          >\n            <Trash2 size={14} className=\"text-morandi-red\" />\n          </button>\n        </div>\n      )\n    }\n  ], []);\n\n  // 排序和篩選函數\n  const sortFunction = (data: TransportOption[], column: string, direction: 'asc' | 'desc') => {\n    return [...data].sort((a, b) => {\n      const aValue: string | number | boolean = a[column as keyof TransportOption] ?? '';\n      const bValue: string | number | boolean = b[column as keyof TransportOption] ?? '';\n\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  };\n\n  const filterFunction = (data: TransportOption[], filters: Record<string, string>) => {\n    return data.filter(transport => {\n      // 搜尋功能：檢查名稱是否包含搜尋詞\n      const matchesSearch = !searchTerm || transport.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n      return (\n        matchesSearch &&\n        (!filters.name || transport.name.toLowerCase().includes(filters.name.toLowerCase())) &&\n        (!filters.is_group_cost || (transport.is_group_cost ?? false).toString() === filters.is_group_cost) &&\n        (!filters.price_per_person || (transport.price_per_person || 0).toString().includes(filters.price_per_person)) &&\n        (!filters.pricePerGroup || (transport.pricePerGroup || 0).toString().includes(filters.pricePerGroup)) &&\n        (!filters.capacity || (transport.capacity || 0).toString().includes(filters.capacity))\n      );\n    });\n  };\n\n  const { data: filteredAndSortedTransport, handleSort, handleFilter } = useEnhancedTable(\n    transportOptions,\n    sortFunction,\n    filterFunction\n  );\n\n  // 重新計算過濾結果（當搜尋詞改變時）\n  const finalFilteredTransport = useMemo(() => {\n    return filterFunction(filteredAndSortedTransport, {});\n  }, [filteredAndSortedTransport, searchTerm]);\n\n  const handleAddTransport = () => {\n    if (!newTransport.name.trim()) return;\n\n    // TODO: 新增交通選項到資料庫\n    resetForm();\n  };\n\n  const handleEditTransport = (transport: TransportOption) => {\n    setEditingTransport(transport);\n    setNewTransport({\n      name: transport.name,\n      price_per_person: transport.price_per_person || 0,\n      pricePerGroup: transport.pricePerGroup || 0,\n      capacity: transport.capacity || 0,\n      is_group_cost: transport.is_group_cost || false\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDeleteTransport = (transportId: string) => {\n    if (confirm('確定要刪除此交通選項嗎？')) {\n      // TODO: 刪除交通選項從資料庫\n    }\n  };\n\n  const resetForm = () => {\n    setNewTransport({\n      name: '',\n      price_per_person: 0,\n      pricePerGroup: 0,\n      capacity: 0,\n      is_group_cost: false\n    });\n    setIsAddDialogOpen(false);\n    setEditingTransport(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <ResponsiveHeader\n        {...{\n        title: \"交通選項管理\",\n        icon: Car} as any}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '資料庫管理', href: '/database' },\n          { label: '交通選項', href: '/database/transport' }\n        ]}\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋交通方式...\"\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增交通選項\"\n        actions={\n          <span className=\"text-sm text-morandi-secondary\">\n            共 {finalFilteredTransport.length} 筆交通選項\n          </span>\n        }\n      />\n\n      <ContentContainer>\n        <EnhancedTable\n          columns={tableColumns}\n          data={finalFilteredTransport}\n          onSort={handleSort}\n          onFilter={handleFilter}\n          selection={undefined}\n        />\n\n        {finalFilteredTransport.length === 0 && (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <Car size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p>{transportOptions.length === 0 ? '此地區尚未建立交通選項' : '無符合條件的交通選項'}</p>\n          </div>\n        )}\n      </ContentContainer>\n\n      {/* 新增/編輯交通選項對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={resetForm}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingTransport ? '編輯交通選項' : '新增交通選項'}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">交通方式名稱</label>\n              <Input\n                value={newTransport.name}\n                onChange={(e) => setNewTransport(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"例如：機場接送、包車一日\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">費用類型</label>\n              <Select\n                value={newTransport.is_group_cost.toString()}\n                onValueChange={(value) => setNewTransport(prev => ({ ...prev, is_group_cost: value === 'true' }))}\n              >\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"false\">個人費用</SelectItem>\n                  <SelectItem value=\"true\">團體分攤</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">個人價格</label>\n                <Input\n                  type=\"number\"\n                  value={newTransport.price_per_person || ''}\n                  onChange={(e) => setNewTransport(prev => ({ ...prev, price_per_person: Number(e.target.value) || 0 }))}\n                  placeholder=\"0\"\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">團體價格</label>\n                <Input\n                  type=\"number\"\n                  value={newTransport.pricePerGroup || ''}\n                  onChange={(e) => setNewTransport(prev => ({ ...prev, pricePerGroup: Number(e.target.value) || 0 }))}\n                  placeholder=\"0\"\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">載客量</label>\n              <Input\n                type=\"number\"\n                value={newTransport.capacity || ''}\n                onChange={(e) => setNewTransport(prev => ({ ...prev, capacity: Number(e.target.value) || 0 }))}\n                placeholder=\"最大載客人數\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={resetForm}>\n                取消\n              </Button>\n              <Button\n                onClick={handleAddTransport}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                {editingTransport ? '更新' : '新增'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/editor/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[477,480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[477,480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { ResponsiveHeader } from \"@/components/layout/responsive-header\";\nimport { TourForm } from \"@/components/editor/TourForm\";\nimport { TourPreview } from \"@/components/editor/TourPreview\";\nimport { PublishButton } from \"@/components/editor/PublishButton\";\nimport {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n} from \"@tabler/icons-react\";\n\n// Icon mapping\nconst iconMap: any = {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n};\n\nexport default function TourEditor() {\n  const [viewMode, setViewMode] = useState<'desktop' | 'mobile'>('desktop');\n  const [tourData, setTourData] = useState({\n    // 封面資訊\n    tagline: \"Venturo Travel 2025 秋季精選\",\n    title: \"漫遊福岡\",\n    subtitle: \"半自由行\",\n    description: \"2日市區自由活動 · 保證入住溫泉飯店 · 柳川遊船 · 阿蘇火山\",\n    departureDate: \"2025/10/21\",\n    tourCode: \"25JFO21CIG\",\n    coverImage: \"https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=1200&q=75&auto=format&fit=crop\",\n\n    // 航班資訊\n    outboundFlight: {\n      airline: \"中華航空\",\n      flightNumber: \"CI110\",\n      departureAirport: \"TPE\",\n      departureTime: \"06:50\",\n      departureDate: \"10/21\",\n      arrivalAirport: \"FUK\",\n      arrivalTime: \"09:55\",\n      duration: \"2小時5分\",\n    },\n    returnFlight: {\n      airline: \"中華航空\",\n      flightNumber: \"CI111\",\n      departureAirport: \"FUK\",\n      departureTime: \"11:00\",\n      departureDate: \"10/25\",\n      arrivalAirport: \"TPE\",\n      arrivalTime: \"12:30\",\n      duration: \"2小時30分\",\n    },\n\n    // 行程特色\n    features: [\n      {\n        icon: \"IconBuilding\",\n        title: \"溫泉飯店體驗\",\n        description: \"保證入住阿蘇溫泉飯店，享受日式溫泉文化\",\n      },\n      {\n        icon: \"IconToolsKitchen2\",\n        title: \"美食饗宴\",\n        description: \"博多拉麵、柳川鰻魚飯、長腳蟹自助餐\",\n      },\n      {\n        icon: \"IconSparkles\",\n        title: \"精選體驗\",\n        description: \"柳川遊船、阿蘇火山、太宰府天滿宮\",\n      },\n      {\n        icon: \"IconCalendar\",\n        title: \"自由活動時間\",\n        description: \"2日福岡市區自由探索，彈性安排個人行程\",\n      },\n      {\n        icon: \"IconPlane\",\n        title: \"直飛航班\",\n        description: \"中華航空桃園直飛福岡，省時便利\",\n      },\n      {\n        icon: \"IconMapPin\",\n        title: \"專業領隊\",\n        description: \"經驗豐富的領隊全程陪同，貼心服務\",\n      },\n    ],\n\n    // 精選景點\n    focusCards: [\n      {\n        title: \"由布院溫泉街\",\n        src: \"https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=400&q=75&auto=format\",\n      },\n      {\n        title: \"阿蘇火山口\",\n        src: \"https://images.unsplash.com/photo-1578469550956-0e16b69c6a3d?w=400&q=75&auto=format\",\n      },\n      {\n        title: \"柳川水鄉\",\n        src: \"https://images.unsplash.com/photo-1528360983277-13d401cdc186?w=400&q=75&auto=format\",\n      },\n      {\n        title: \"太宰府神社\",\n        src: \"https://images.unsplash.com/photo-1624253321033-c4eb104e7462?w=400&q=75&auto=format\",\n      },\n    ],\n\n    // 領隊資訊\n    leader: {\n      name: \"鍾惠如 小姐\",\n      domesticPhone: \"+886 0928402897\",\n      overseasPhone: \"+81 08074371189\",\n    },\n\n    // 集合資訊\n    meetingInfo: {\n      time: \"2025/10/21 04:50\",\n      location: \"桃園機場華航第二航廈 7號櫃台\",\n    },\n\n    // 行程副標題\n    itinerarySubtitle: \"5天4夜精彩旅程規劃\",\n\n    // 逐日行程\n    dailyItinerary: [\n      {\n        dayLabel: \"Day 1\",\n        date: \"10/21 (二)\",\n        title: \"台北 ✈ 福岡空港 → 由布院 · 金麟湖 → 阿蘇溫泉\",\n        highlight: \"✨ 特別安排：由布院 · 金麟湖 ～ 日本 OL 人氣 NO.1 散策地\",\n        description: \"集合於台灣桃園國際機場，由專人辦理出境手續，搭乘豪華客機，飛往日本九州玄關──福岡。\",\n        activities: [],\n        recommendations: [],\n        meals: {\n          breakfast: \"溫暖的家\",\n          lunch: \"博多拉麵 (¥1000)\",\n          dinner: \"長腳蟹自助餐\",\n        },\n        accommodation: \"ASO RESORT GRANDVRIO HOTEL\",\n      },\n      {\n        dayLabel: \"Day 2\",\n        date: \"10/22 (三)\",\n        title: \"阿蘇火山 → 柳川遊船 → 旅人列車 → 太宰府天滿宮\",\n        highlight: \"\",\n        description: \"\",\n        activities: [\n          { icon: \"🌋\", title: \"阿蘇火山\", description: \"近距離觀賞活火山壯麗景觀\" },\n          { icon: \"🚣\", title: \"柳川遊船\", description: \"乘船遊覽水鄉風情\" },\n          { icon: \"🚃\", title: \"旅人列車\", description: \"體驗日式風情列車\" },\n          { icon: \"⛩️\", title: \"太宰府天滿宮\", description: \"參拜學問之神\" },\n        ],\n        recommendations: [],\n        meals: {\n          breakfast: \"飯店內早餐\",\n          lunch: \"柳川鰻魚飯 (¥2400)\",\n          dinner: \"涮涮鍋吃到飽\",\n        },\n        accommodation: \"QUINTESSA HOTEL FUKUOKA TENJIN MINAMI\",\n      },\n      {\n        dayLabel: \"Day 3-4\",\n        date: \"10/23-10/24\",\n        title: \"福岡全日自由活動\",\n        highlight: \"\",\n        description: \"\",\n        activities: [],\n        recommendations: [\n          \"天神商圈購物\",\n          \"福岡塔\",\n          \"雅虎巨蛋\",\n          \"鳥栖 PREMIUM OUTLET\",\n          \"門司港懷舊街道\",\n        ],\n        meals: {\n          breakfast: \"飯店內早餐\",\n          lunch: \"敬請自理\",\n          dinner: \"敬請自理\",\n        },\n        accommodation: \"QUINTESSA HOTEL FUKUOKA TENJIN MINAMI\",\n      },\n      {\n        dayLabel: \"Day 5\",\n        date: \"10/25 (六)\",\n        title: \"福岡空港 ✈ 台北\",\n        highlight: \"\",\n        description: \"享受一個沒有 MORNING CALL 的早晨，悠閒的飯店用完早餐後，接著前往福岡空港，搭乘豪華客機返回台北，結束了愉快的九州之旅。\",\n        activities: [],\n        recommendations: [],\n        meals: {\n          breakfast: \"飯店內早餐\",\n          lunch: \"機上餐食\",\n          dinner: \"溫暖的家\",\n        },\n        accommodation: \"\",\n      },\n    ],\n  });\n\n  // Convert icon strings to components for preview\n  const processedData = {\n    ...tourData,\n    features: tourData.features.map((f) => ({\n      ...f,\n      iconComponent: iconMap[f.icon] || IconSparkles,\n    })),\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* ========== 頁面頂部區域 ========== */}\n      <ResponsiveHeader\n        title=\"行程編輯器\"\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '行程編輯器', href: '/editor' }\n        ]}\n        actions={<PublishButton data={processedData} />}\n      />\n\n      {/* ========== 主要內容區域 ========== */}\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full flex\">\n          {/* 左側：輸入表單 */}\n          <div className=\"w-1/2 bg-white border-r border-slate-200 dark:bg-slate-900 dark:border-slate-700 flex flex-col\">\n            <div className=\"bg-gradient-to-r from-amber-500 to-orange-500 text-white px-6 py-3\">\n              <h2 className=\"text-lg font-bold\">編輯表單</h2>\n            </div>\n            <div className=\"flex-1 overflow-y-auto\">\n              <TourForm data={tourData} onChange={setTourData} />\n            </div>\n          </div>\n\n          {/* 右側：即時預覽 */}\n          <div className=\"w-1/2 bg-slate-50 dark:bg-slate-800 flex flex-col\">\n            <div className=\"bg-slate-800 dark:bg-slate-900 text-white px-6 py-3 flex items-center justify-between border-b border-slate-700\">\n              <div className=\"flex items-center gap-4\">\n                <h2 className=\"text-lg font-bold\">即時預覽</h2>\n                <div className=\"flex gap-2 bg-slate-700 dark:bg-slate-800 rounded-lg p-1\">\n                  <button\n                    onClick={() => setViewMode('desktop')}\n                    className={`px-3 py-1.5 rounded text-sm font-medium transition-all ${\n                      viewMode === 'desktop'\n                        ? 'bg-blue-600 text-white shadow-sm'\n                        : 'text-slate-300 hover:text-white hover:bg-slate-600'\n                    }`}\n                  >\n                    💻 電腦\n                  </button>\n                  <button\n                    onClick={() => setViewMode('mobile')}\n                    className={`px-3 py-1.5 rounded text-sm font-medium transition-all ${\n                      viewMode === 'mobile'\n                        ? 'bg-blue-600 text-white shadow-sm'\n                        : 'text-slate-300 hover:text-white hover:bg-slate-600'\n                    }`}\n                  >\n                    📱 手機\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex-1 overflow-hidden bg-slate-200 dark:bg-slate-700 flex items-center justify-center p-4\">\n              <div\n                className={`bg-white dark:bg-slate-900 h-full transition-all duration-300 rounded-lg shadow-xl ${\n                  viewMode === 'mobile' ? 'w-[375px]' : 'w-full'\n                }`}\n                style={{\n                  maxWidth: viewMode === 'mobile' ? '375px' : '100%',\n                }}\n              >\n                <div className=\"h-full overflow-hidden rounded-lg\">\n                  <TourPreview data={processedData} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tours' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'orders' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":24,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[703,706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[703,706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useMemo } from 'react';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Card } from '@/components/ui/card';\nimport { EnhancedTable, TableColumn } from '@/components/ui/enhanced-table';\nimport { useTourStore, useOrderStore } from '@/stores';\n// TODO: usePaymentStore deprecated - 收款/付款記錄功能未實作\nimport {\n  CreditCard,\n  FileText,\n  Wallet,\n  BarChart3,\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  AlertTriangle\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport default function FinancePage() {\n  const { items: tours } = useTourStore();\n  const { items: orders } = useOrderStore();\n  const payments: any[] = []; // TODO: 實作收款/付款記錄功能\n\n  // 計算財務統計\n  const totalReceivable = payments\n    .filter(p => p.type === '收款')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const totalPayable = payments\n    .filter(p => p.type === '請款')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const pendingPayments = payments\n    .filter(p => p.status === '待確認')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const netProfit = totalReceivable - totalPayable;\n\n  // 最近交易表格配置\n  const recentPayments = payments.slice(0, 10); // 顯示最近10筆\n\n  const transactionColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'type',\n      label: '類型',\n      sortable: true,\n      render: (value, payment) => {\n        const typeIcons = {\n          '收款': <TrendingUp size={16} className=\"text-morandi-green\" />,\n          '請款': <TrendingDown size={16} className=\"text-morandi-red\" />,\n          '出納': <DollarSign size={16} className=\"text-morandi-gold\" />\n        };\n        return (\n          <div className=\"flex items-center space-x-2\">\n            {typeIcons[payment.type as keyof typeof typeIcons]}\n            <span className=\"text-sm\">{payment.type}</span>\n          </div>\n        );\n      }\n    },\n    {\n      key: 'description',\n      label: '說明',\n      sortable: true,\n      render: (value, payment) => (\n        <span className=\"text-sm text-morandi-primary\">{payment.description}</span>\n      )\n    },\n    {\n      key: 'amount',\n      label: '金額',\n      sortable: true,\n      render: (value, payment) => {\n        const isIncome = payment.type === '收款';\n        return (\n          <span className={cn(\n            'text-sm font-medium',\n            isIncome ? 'text-morandi-green' : 'text-morandi-red'\n          )}>\n            {isIncome ? '+' : '-'} NT$ {payment.amount.toLocaleString()}\n          </span>\n        );\n      }\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      render: (value, payment) => {\n        const statusColors = {\n          '已確認': 'text-morandi-green',\n          '待確認': 'text-morandi-gold',\n          '已完成': 'text-morandi-primary'\n        };\n        return (\n          <span className={cn('text-sm', statusColors[payment.status as keyof typeof statusColors])}>\n            {payment.status}\n          </span>\n        );\n      }\n    },\n    {\n      key: 'created_at',\n      label: '日期',\n      sortable: true,\n      render: (value, payment) => (\n        <span className=\"text-sm text-morandi-secondary\">\n          {new Date(payment.created_at).toLocaleDateString()}\n        </span>\n      )\n    }\n  ], []);\n\n  const financeModules = [\n    {\n      title: '財務管理',\n      description: '管理所有收款和請款記錄',\n      icon: CreditCard,\n      href: '/finance/payments',\n      stats: `${payments.length} 筆記錄`,\n      color: 'text-morandi-green',\n      bgColor: 'bg-morandi-green/10'\n    },\n    {\n      title: '出納管理',\n      description: '日常收支與現金流管理',\n      icon: Wallet,\n      href: '/finance/treasury',\n      stats: `${payments.filter(p => p.type === '出納').length} 筆交易`,\n      color: 'text-morandi-gold',\n      bgColor: 'bg-morandi-gold/10'\n    },\n    {\n      title: '報表管理',\n      description: '財務分析與統計報表',\n      icon: BarChart3,\n      href: '/finance/reports',\n      stats: '即時財務分析',\n      color: 'text-morandi-primary',\n      bgColor: 'bg-morandi-primary/10'\n    }\n  ];\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader title=\"財務管理中心\" />\n\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"space-y-6\">\n          {/* 財務總覽 */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"p-4 border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-morandi-secondary mb-1\">總收入</p>\n              <p className=\"text-2xl font-bold text-morandi-green\">\n                NT$ {totalReceivable.toLocaleString()}\n              </p>\n            </div>\n            <TrendingUp size={24} className=\"text-morandi-green\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-4 border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-morandi-secondary mb-1\">總支出</p>\n              <p className=\"text-2xl font-bold text-morandi-red\">\n                NT$ {totalPayable.toLocaleString()}\n              </p>\n            </div>\n            <TrendingDown size={24} className=\"text-morandi-red\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-4 border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-morandi-secondary mb-1\">淨利潤</p>\n              <p className={`text-2xl font-bold ${netProfit >= 0 ? 'text-morandi-green' : 'text-morandi-red'}`}>\n                NT$ {netProfit.toLocaleString()}\n              </p>\n            </div>\n            <DollarSign size={24} className={netProfit >= 0 ? 'text-morandi-green' : 'text-morandi-red'} />\n          </div>\n        </Card>\n\n        <Card className=\"p-4 border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-morandi-secondary mb-1\">待確認款項</p>\n              <p className=\"text-2xl font-bold text-morandi-gold\">\n                NT$ {pendingPayments.toLocaleString()}\n              </p>\n            </div>\n            <AlertTriangle size={24} className=\"text-morandi-gold\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* 功能模組 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {financeModules.map((module, index) => (\n          <Link key={index} href={module.href}>\n            <Card className=\"p-6 border border-border hover:shadow-lg transition-shadow cursor-pointer\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center mb-3\">\n                    <div className={`p-2 rounded-lg ${module.bgColor} mr-3`}>\n                      <module.icon size={24} className={module.color} />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-morandi-primary\">{module.title}</h4>\n                      <p className=\"text-sm text-morandi-secondary\">{module.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-morandi-secondary\">\n                    {module.stats}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </Link>\n        ))}\n      </div>\n\n      {/* 最近交易 */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-morandi-primary\">最近交易</h3>\n        <EnhancedTable\n          columns={transactionColumns}\n          data={recentPayments}\n        />\n      </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/payments/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useOrderStore } from '@/stores';\nimport { CreditCard, Plus, Trash2, ArrowLeft } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// 收款方式選項\nconst paymentMethods = [\n  { value: '現金', label: '現金' },\n  { value: '匯款', label: '匯款' },\n  { value: '刷卡', label: '刷卡' },\n  { value: '支票', label: '支票' }\n];\n\n// 帳戶選項\nconst bankAccounts = [\n  { value: 'bank1', label: '台灣銀行 - 001234567' },\n  { value: 'bank2', label: '國泰世華 - 987654321' },\n  { value: 'bank3', label: '玉山銀行 - 555666777' }\n];\n\ninterface PaymentItem {\n  id: string;\n  paymentMethod: string;\n  amount: number;\n  transactionDate: string;\n  handlerName?: string;\n  accountInfo?: string;\n  fees?: number;\n  cardLastFour?: string;\n  authCode?: string;\n  checkNumber?: string;\n  checkBank?: string;\n  note?: string;\n}\n\nexport default function NewReceiptPage() {\n  const router = useRouter();\n  const { items: orders } = useOrderStore();\n\n  // 基本表單狀態\n  const [selectedOrderId, setSelectedOrderId] = useState('');\n  const [receiptDate, setReceiptDate] = useState(new Date().toISOString().split('T')[0]);\n  const [note, setNote] = useState('');\n\n  // 收款項目\n  const [paymentItems, setPaymentItems] = useState<PaymentItem[]>([\n    {\n      id: '1',\n      paymentMethod: '現金',\n      amount: 0,\n      transactionDate: new Date().toISOString().split('T')[0]\n    }\n  ]);\n\n  // 過濾可用訂單（未收款或部分收款）\n  const availableOrders = useMemo(() => {\n    return orders.filter(order =>\n      order.payment_status === 'unpaid' || order.payment_status === 'partial'\n    );\n  }, [orders]);\n\n  // 選中的訂單資訊\n  const selectedOrder = useMemo(() => {\n    return orders.find(order => order.id === selectedOrderId);\n  }, [orders, selectedOrderId]);\n\n  // 計算總收款金額\n  const total_amount = useMemo(() => {\n    return paymentItems.reduce((sum, item) => sum + (item.amount || 0), 0);\n  }, [paymentItems]);\n\n  // 新增收款項目\n  const addPaymentItem = () => {\n    const newItem: PaymentItem = {\n      id: Date.now().toString(),\n      paymentMethod: '現金',\n      amount: 0,\n      transactionDate: new Date().toISOString().split('T')[0]\n    };\n    setPaymentItems(prev => [...prev, newItem]);\n  };\n\n  // 移除收款項目\n  const removePaymentItem = (id: string) => {\n    if (paymentItems.length > 1) {\n      setPaymentItems(prev => prev.filter(item => item.id !== id));\n    }\n  };\n\n  // 更新收款項目\n  const updatePaymentItem = (id: string, updates: Partial<PaymentItem>) => {\n    setPaymentItems(prev => prev.map(item =>\n      item.id === id ? { ...item, ...updates } : item\n    ));\n  };\n\n  // 處理儲存\n  const handleSave = () => {\n    if (!selectedOrderId || paymentItems.length === 0 || total_amount <= 0) {\n      alert('請填寫完整資訊');\n      return;\n    }\n\n    // 這裡應該要保存到 store 或 API\n    // TODO: 保存收款單到 store 或 API\n\n    // 儲存成功後回到列表頁\n    router.push('/finance/payments');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <ResponsiveHeader\n        title=\"新增收款單\"\n        icon={CreditCard}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '財務系統', href: '/finance' },\n          { label: '收款管理', href: '/finance/payments' },\n          { label: '新增收款單', href: '/finance/payments/new' }\n        ]}\n        showBackButton={true}\n        onBack={() => router.push('/finance/payments')}\n      />\n\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* 基本資訊 */}\n        <Card className=\"p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">基本資訊</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">選擇訂單</label>\n              <Select value={selectedOrderId} onValueChange={setSelectedOrderId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"請選擇待收款的訂單...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableOrders.map(order => (\n                    <SelectItem key={order.id} value={order.id}>\n                      <div>\n                        <div className=\"font-medium\">{order.order_number} - {order.tour_name}</div>\n                        <div className=\"text-sm text-morandi-secondary\">\n                          {order.contact_person} | 待收: NT$ {order.remaining_amount?.toLocaleString() || 0}\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款日期</label>\n              <Input\n                type=\"date\"\n                value={receiptDate}\n                onChange={(e) => setReceiptDate(e.target.value)}\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款單號</label>\n              <Input\n                value=\"REC-2024004（自動產生）\"\n                disabled\n                className=\"bg-morandi-container/30\"\n              />\n            </div>\n\n            {selectedOrder && (\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">待收金額</label>\n                <Input\n                  value={`NT$ ${selectedOrder.remaining_amount?.toLocaleString() || 0}`}\n                  disabled\n                  className=\"bg-morandi-container/30\"\n                />\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* 收款項目 */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">收款項目</h2>\n            <Button onClick={addPaymentItem} variant=\"outline\">\n              <Plus size={16} className=\"mr-2\" />\n              新增項目\n            </Button>\n          </div>\n\n          <div className=\"space-y-4\">\n            {paymentItems.map((item, index) => (\n              <div key={item.id} className=\"border border-border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-medium\">收款項目 {index + 1}</h3>\n                  {paymentItems.length > 1 && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removePaymentItem(item.id)}\n                      className=\"text-morandi-red hover:text-morandi-red/80\"\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款方式</label>\n                    <Select\n                      value={item.paymentMethod}\n                      onValueChange={(value) => updatePaymentItem(item.id, { paymentMethod: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {paymentMethods.map(method => (\n                          <SelectItem key={method.value} value={method.value}>\n                            {method.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">金額</label>\n                    <Input\n                      type=\"number\"\n                      value={item.amount || ''}\n                      onChange={(e) => updatePaymentItem(item.id, { amount: Number(e.target.value) })}\n                      placeholder=\"請輸入收款金額\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">交易日期</label>\n                    <Input\n                      type=\"date\"\n                      value={item.transactionDate}\n                      onChange={(e) => updatePaymentItem(item.id, { transactionDate: e.target.value })}\n                    />\n                  </div>\n\n                  {/* 根據收款方式顯示額外欄位 */}\n                  {item.paymentMethod === '現金' && (\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">經手人</label>\n                      <Input\n                        value={item.handlerName || ''}\n                        onChange={(e) => updatePaymentItem(item.id, { handlerName: e.target.value })}\n                        placeholder=\"請輸入經手人姓名\"\n                      />\n                    </div>\n                  )}\n\n                  {item.paymentMethod === '匯款' && (\n                    <>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">匯入帳戶</label>\n                        <Select\n                          value={item.accountInfo || ''}\n                          onValueChange={(value) => updatePaymentItem(item.id, { accountInfo: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"請選擇帳戶\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {bankAccounts.map(account => (\n                              <SelectItem key={account.value} value={account.label}>\n                                {account.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">手續費</label>\n                        <Input\n                          type=\"number\"\n                          value={item.fees || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { fees: Number(e.target.value) })}\n                          placeholder=\"手續費金額\"\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  {item.paymentMethod === '刷卡' && (\n                    <>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">卡號後四碼</label>\n                        <Input\n                          value={item.cardLastFour || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { cardLastFour: e.target.value })}\n                          placeholder=\"****\"\n                          maxLength={4}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">授權碼</label>\n                        <Input\n                          value={item.authCode || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { authCode: e.target.value })}\n                          placeholder=\"授權碼\"\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  {item.paymentMethod === '支票' && (\n                    <>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">支票號碼</label>\n                        <Input\n                          value={item.checkNumber || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { checkNumber: e.target.value })}\n                          placeholder=\"支票號碼\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">開票銀行</label>\n                        <Input\n                          value={item.checkBank || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { checkBank: e.target.value })}\n                          placeholder=\"開票銀行\"\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  <div className=\"md:col-span-3\">\n                    <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">備註</label>\n                    <Input\n                      value={item.note || ''}\n                      onChange={(e) => updatePaymentItem(item.id, { note: e.target.value })}\n                      placeholder=\"收款備註（選填）\"\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* 摘要和備註 */}\n        <Card className=\"p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">收款摘要</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">總收款金額</label>\n              <Input\n                value={`NT$ ${total_amount.toLocaleString()}`}\n                disabled\n                className=\"bg-morandi-container/30 text-lg font-medium\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款後狀態</label>\n              <Input\n                value={selectedOrder ?\n                  (total_amount >= (selectedOrder.remaining_amount || 0) ? '已收款' : '部分收款')\n                  : '請選擇訂單'}\n                disabled\n                className=\"bg-morandi-container/30\"\n              />\n            </div>\n\n            <div className=\"md:col-span-2\">\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款單備註</label>\n              <textarea\n                value={note}\n                onChange={(e) => setNote(e.target.value)}\n                placeholder=\"整張收款單的備註（選填）\"\n                className=\"w-full p-3 border border-border rounded-lg resize-none h-20\"\n              />\n            </div>\n          </div>\n        </Card>\n\n        {/* 操作按鈕 */}\n        <div className=\"flex justify-end gap-4 pb-6\">\n          <Button\n            variant=\"outline\"\n            onClick={() => router.push('/finance/payments')}\n          >\n            取消\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={!selectedOrderId || total_amount <= 0}\n            className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n          >\n            儲存收款單\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/payments/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CreditCard' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1415,1418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1415,1418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { EnhancedTable } from '@/components/ui/enhanced-table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useOrderStore } from '@/stores';\n// TODO: usePaymentStore deprecated - 收款記錄功能未實作\nimport { CreditCard, Calendar, Plus, Trash2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// 收款方式選項\nconst paymentMethods = [\n  { value: '現金', label: '現金' },\n  { value: '匯款', label: '匯款' },\n  { value: '刷卡', label: '刷卡' },\n  { value: '支票', label: '支票' }\n];\n\n// 帳戶選項\nconst bankAccounts = [\n  { value: 'bank1', label: '台灣銀行 - 001234567' },\n  { value: 'bank2', label: '國泰世華 - 987654321' },\n  { value: 'bank3', label: '玉山銀行 - 555666777' }\n];\n\ninterface PaymentItem {\n  id: string;\n  paymentMethod: string;\n  amount: number;\n  transactionDate: string;\n  handlerName?: string;\n  accountInfo?: string;\n  fees?: number;\n  cardLastFour?: string;\n  authCode?: string;\n  checkNumber?: string;\n  checkBank?: string;\n  note?: string;\n}\n\nexport default function PaymentsPage() {\n  const { items: orders } = useOrderStore();\n  const payments: any[] = []; // TODO: 實作收款記錄功能\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // 只取收款記錄\n  const paymentRecords = payments.filter(p => p.type === '收款');\n\n  // 表單狀態\n  const [selectedOrderId, setSelectedOrderId] = useState('');\n  const [receiptDate, setReceiptDate] = useState(new Date().toISOString().split('T')[0]);\n  const [note, setNote] = useState('');\n  const [paymentItems, setPaymentItems] = useState<PaymentItem[]>([\n    {\n      id: '1',\n      paymentMethod: '現金',\n      amount: 0,\n      transactionDate: new Date().toISOString().split('T')[0]\n    }\n  ]);\n\n  // 過濾可用訂單（未收款或部分收款）\n  const availableOrders = useMemo(() => {\n    return orders.filter(order =>\n      order.payment_status === 'unpaid' || order.payment_status === 'partial'\n    );\n  }, [orders]);\n\n  // 選中的訂單資訊\n  const selectedOrder = useMemo(() => {\n    return orders.find(order => order.id === selectedOrderId);\n  }, [orders, selectedOrderId]);\n\n  // 計算總收款金額\n  const total_amount = useMemo(() => {\n    return paymentItems.reduce((sum, item) => sum + (item.amount || 0), 0);\n  }, [paymentItems]);\n\n  // 新增收款項目\n  const addPaymentItem = () => {\n    const newItem: PaymentItem = {\n      id: Date.now().toString(),\n      paymentMethod: '現金',\n      amount: 0,\n      transactionDate: new Date().toISOString().split('T')[0]\n    };\n    setPaymentItems(prev => [...prev, newItem]);\n  };\n\n  // 移除收款項目\n  const removePaymentItem = (id: string) => {\n    if (paymentItems.length > 1) {\n      setPaymentItems(prev => prev.filter(item => item.id !== id));\n    }\n  };\n\n  // 更新收款項目\n  const updatePaymentItem = (id: string, updates: Partial<PaymentItem>) => {\n    setPaymentItems(prev => prev.map(item =>\n      item.id === id ? { ...item, ...updates } : item\n    ));\n  };\n\n  // 重置表單\n  const resetForm = () => {\n    setSelectedOrderId('');\n    setReceiptDate(new Date().toISOString().split('T')[0]);\n    setNote('');\n    setPaymentItems([\n      {\n        id: '1',\n        paymentMethod: '現金',\n        amount: 0,\n        transactionDate: new Date().toISOString().split('T')[0]\n      }\n    ]);\n  };\n\n  // 處理儲存\n  const handleSave = () => {\n    if (!selectedOrderId || paymentItems.length === 0 || total_amount <= 0) {\n      alert('請填寫完整資訊');\n      return;\n    }\n\n    // TODO: 保存收款單到 store 或 API\n    console.log('儲存收款單', {\n      order_id: selectedOrderId,\n      receiptDate,\n      paymentItems,\n      total_amount,\n      note\n    });\n\n    // 關閉對話框並重置表單\n    setIsDialogOpen(false);\n    resetForm();\n  };\n\n  // 定義表格欄位\n  const columns = [\n    {\n      key: 'created_at',\n      label: '日期',\n      sortable: true,\n      render: (value: string) => (\n        <div className=\"flex items-center text-sm\">\n          <Calendar size={14} className=\"mr-1 text-morandi-secondary\" />\n          {new Date(value).toLocaleDateString('zh-TW')}\n        </div>\n      )\n    },\n    {\n      key: 'amount',\n      label: '金額',\n      sortable: true,\n      render: (value: number) => (\n        <div className=\"text-sm font-medium text-morandi-green\">\n          NT$ {value.toLocaleString()}\n        </div>\n      )\n    },\n    {\n      key: 'description',\n      label: '說明',\n      sortable: false,\n      render: (value: string) => (\n        <div className=\"text-sm text-morandi-primary\">\n          {value}\n        </div>\n      )\n    },\n    {\n      key: 'order_id',\n      label: '訂單編號',\n      sortable: true,\n      render: (value: string) => (\n        <div className=\"text-sm text-morandi-primary\">\n          {value || '-'}\n        </div>\n      )\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      render: (value: string) => (\n        <span className={cn(\n          'text-sm font-medium',\n          value === '已確認' ? 'text-morandi-green' : 'text-morandi-gold'\n        )}>\n          {value}\n        </span>\n      )\n    }\n  ];\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"收款管理\"\n        actions={\n          <Button\n            onClick={() => setIsDialogOpen(true)}\n            className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n          >\n            <Plus size={16} className=\"mr-2\" />\n            新增收款\n          </Button>\n        }\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n          className=\"min-h-full\"\n          data={paymentRecords}\n          columns={columns}\n          defaultSort={{ key: 'created_at', direction: 'desc' }}\n          searchable\n          searchPlaceholder=\"搜尋說明或訂單編號...\"\n        />\n      </div>\n\n      {/* 新增收款對話框 */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-semibold\">新增收款單</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-6 py-4\">\n            {/* 基本資訊 */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">基本資訊</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">選擇訂單</label>\n                  <Select value={selectedOrderId} onValueChange={setSelectedOrderId}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"請選擇待收款的訂單...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableOrders.map(order => (\n                        <SelectItem key={order.id} value={order.id}>\n                          <div>\n                            <div className=\"font-medium\">{order.order_number} - {order.tour_name}</div>\n                            <div className=\"text-sm text-morandi-secondary\">\n                              {order.contact_person} | 待收: NT$ {order.remaining_amount?.toLocaleString() || 0}\n                            </div>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款日期</label>\n                  <Input\n                    type=\"date\"\n                    value={receiptDate}\n                    onChange={(e) => setReceiptDate(e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款單號</label>\n                  <Input\n                    value=\"REC-2024004（自動產生）\"\n                    disabled\n                    className=\"bg-morandi-container/30\"\n                  />\n                </div>\n\n                {selectedOrder && (\n                  <div>\n                    <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">待收金額</label>\n                    <Input\n                      value={`NT$ ${selectedOrder.remaining_amount?.toLocaleString() || 0}`}\n                      disabled\n                      className=\"bg-morandi-container/30\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* 收款項目 */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold\">收款項目</h3>\n                <Button onClick={addPaymentItem} variant=\"outline\" size=\"sm\">\n                  <Plus size={16} className=\"mr-2\" />\n                  新增項目\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {paymentItems.map((item, index) => (\n                  <div key={item.id} className=\"border border-border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h4 className=\"font-medium\">收款項目 {index + 1}</h4>\n                      {paymentItems.length > 1 && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removePaymentItem(item.id)}\n                          className=\"text-morandi-red hover:text-morandi-red/80\"\n                        >\n                          <Trash2 size={16} />\n                        </Button>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款方式</label>\n                        <Select\n                          value={item.paymentMethod}\n                          onValueChange={(value) => updatePaymentItem(item.id, { paymentMethod: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {paymentMethods.map(method => (\n                              <SelectItem key={method.value} value={method.value}>\n                                {method.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">金額</label>\n                        <Input\n                          type=\"number\"\n                          value={item.amount || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { amount: Number(e.target.value) })}\n                          placeholder=\"請輸入收款金額\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">交易日期</label>\n                        <Input\n                          type=\"date\"\n                          value={item.transactionDate}\n                          onChange={(e) => updatePaymentItem(item.id, { transactionDate: e.target.value })}\n                        />\n                      </div>\n\n                      {/* 根據收款方式顯示額外欄位 */}\n                      {item.paymentMethod === '現金' && (\n                        <div>\n                          <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">經手人</label>\n                          <Input\n                            value={item.handlerName || ''}\n                            onChange={(e) => updatePaymentItem(item.id, { handlerName: e.target.value })}\n                            placeholder=\"請輸入經手人姓名\"\n                          />\n                        </div>\n                      )}\n\n                      {item.paymentMethod === '匯款' && (\n                        <>\n                          <div>\n                            <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">匯入帳戶</label>\n                            <Select\n                              value={item.accountInfo || ''}\n                              onValueChange={(value) => updatePaymentItem(item.id, { accountInfo: value })}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"請選擇帳戶\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {bankAccounts.map(account => (\n                                  <SelectItem key={account.value} value={account.label}>\n                                    {account.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">手續費</label>\n                            <Input\n                              type=\"number\"\n                              value={item.fees || ''}\n                              onChange={(e) => updatePaymentItem(item.id, { fees: Number(e.target.value) })}\n                              placeholder=\"手續費金額\"\n                            />\n                          </div>\n                        </>\n                      )}\n\n                      {item.paymentMethod === '刷卡' && (\n                        <>\n                          <div>\n                            <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">卡號後四碼</label>\n                            <Input\n                              value={item.cardLastFour || ''}\n                              onChange={(e) => updatePaymentItem(item.id, { cardLastFour: e.target.value })}\n                              placeholder=\"****\"\n                              maxLength={4}\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">授權碼</label>\n                            <Input\n                              value={item.authCode || ''}\n                              onChange={(e) => updatePaymentItem(item.id, { authCode: e.target.value })}\n                              placeholder=\"授權碼\"\n                            />\n                          </div>\n                        </>\n                      )}\n\n                      {item.paymentMethod === '支票' && (\n                        <>\n                          <div>\n                            <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">支票號碼</label>\n                            <Input\n                              value={item.checkNumber || ''}\n                              onChange={(e) => updatePaymentItem(item.id, { checkNumber: e.target.value })}\n                              placeholder=\"支票號碼\"\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">開票銀行</label>\n                            <Input\n                              value={item.checkBank || ''}\n                              onChange={(e) => updatePaymentItem(item.id, { checkBank: e.target.value })}\n                              placeholder=\"開票銀行\"\n                            />\n                          </div>\n                        </>\n                      )}\n\n                      <div className=\"md:col-span-3\">\n                        <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">備註</label>\n                        <Input\n                          value={item.note || ''}\n                          onChange={(e) => updatePaymentItem(item.id, { note: e.target.value })}\n                          placeholder=\"收款備註（選填）\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* 摘要和備註 */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">收款摘要</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">總收款金額</label>\n                  <Input\n                    value={`NT$ ${total_amount.toLocaleString()}`}\n                    disabled\n                    className=\"bg-morandi-container/30 text-lg font-medium\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款後狀態</label>\n                  <Input\n                    value={selectedOrder ?\n                      (total_amount >= (selectedOrder.remaining_amount || 0) ? '已收款' : '部分收款')\n                      : '請選擇訂單'}\n                    disabled\n                    className=\"bg-morandi-container/30\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">收款單備註</label>\n                  <textarea\n                    value={note}\n                    onChange={(e) => setNote(e.target.value)}\n                    placeholder=\"整張收款單的備註（選填）\"\n                    className=\"w-full p-3 border border-border rounded-lg resize-none h-20\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 操作按鈕 */}\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsDialogOpen(false);\n                  resetForm();\n                }}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleSave}\n                disabled={!selectedOrderId || total_amount <= 0}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                儲存收款單\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/reports/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'orders' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[551,554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[551,554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { Card } from '@/components/ui/card';\nimport { useTourStore, useOrderStore } from '@/stores';\n// TODO: usePaymentStore deprecated - 財務報表功能未完整實作\nimport { BarChart3, TrendingUp, TrendingDown, DollarSign, PieChart } from 'lucide-react';\n\nexport default function ReportsPage() {\n  const { items: tours } = useTourStore();\n  const { items: orders } = useOrderStore();\n  const payments: any[] = []; // TODO: 實作完整財務報表\n\n  const total_revenue = payments.filter(p => p.type === '收款').reduce((sum, p) => sum + p.amount, 0);\n  const totalCosts = payments.filter(p => p.type === '請款').reduce((sum, p) => sum + p.amount, 0);\n  const netProfit = total_revenue - totalCosts;\n\n  return (\n    <div className=\"space-y-6 \">\n      <ResponsiveHeader\n        title=\"財務報表\"\n      />\n\n      {/* 財務概覽 */}\n      <ContentContainer>\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">財務概覽</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n          <Card className=\"p-4 border border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-morandi-secondary mb-1\">總收入</p>\n                <p className=\"text-2xl font-bold text-morandi-green\">\n                  NT$ {total_revenue.toLocaleString()}\n                </p>\n              </div>\n              <TrendingUp size={24} className=\"text-morandi-green\" />\n            </div>\n          </Card>\n\n          <Card className=\"p-4 border border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-morandi-secondary mb-1\">總支出</p>\n                <p className=\"text-2xl font-bold text-morandi-red\">\n                  NT$ {totalCosts.toLocaleString()}\n                </p>\n              </div>\n              <TrendingDown size={24} className=\"text-morandi-red\" />\n            </div>\n          </Card>\n\n          <Card className=\"p-4 border border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-morandi-secondary mb-1\">淨利潤</p>\n                <p className={`text-2xl font-bold ${netProfit >= 0 ? 'text-morandi-green' : 'text-morandi-red'}`}>\n                  NT$ {netProfit.toLocaleString()}\n                </p>\n              </div>\n              <DollarSign size={24} className={netProfit >= 0 ? 'text-morandi-green' : 'text-morandi-red'} />\n            </div>\n          </Card>\n        </div>\n      </ContentContainer>\n\n      {/* 旅遊團財務分析 */}\n      <ContentContainer>\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">旅遊團財務分析</h3>\n        <div className=\"space-y-4\">\n          {tours.map((tour) => (\n            <div key={tour.id} className=\"p-4 bg-card border border-border rounded-lg\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <div>\n                  <h4 className=\"font-medium text-morandi-primary\">{tour.name}</h4>\n                  <p className=\"text-sm text-morandi-secondary\">{tour.code}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className={`font-medium ${tour.profit >= 0 ? 'text-morandi-green' : 'text-morandi-red'}`}>\n                    利潤: NT$ {tour.profit.toLocaleString()}\n                  </p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-morandi-secondary\">收入</p>\n                  <p className=\"font-medium text-morandi-green\">NT$ {tour.total_revenue.toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-morandi-secondary\">支出</p>\n                  <p className=\"font-medium text-morandi-red\">NT$ {tour.total_cost.toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-morandi-secondary\">利潤率</p>\n                  <p className=\"font-medium text-morandi-primary\">\n                    {tour.total_revenue > 0 ? ((tour.profit / tour.total_revenue) * 100).toFixed(1) : 0}%\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {tours.length === 0 && (\n            <div className=\"text-center py-8 text-morandi-secondary\">\n              <BarChart3 size={48} className=\"mx-auto mb-4 opacity-50\" />\n              <p>暫無旅遊團財務數據</p>\n            </div>\n          )}\n        </div>\n      </ContentContainer>\n\n      {/* 報表功能 */}\n      <ContentContainer>\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">報表功能</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"p-4 bg-card border border-border rounded-lg text-center\">\n            <PieChart size={32} className=\"mx-auto mb-2 text-morandi-gold\" />\n            <p className=\"font-medium text-morandi-primary mb-2\">月度損益表</p>\n            <p className=\"text-sm text-morandi-secondary\">功能開發中...</p>\n          </div>\n          <div className=\"p-4 bg-card border border-border rounded-lg text-center\">\n            <BarChart3 size={32} className=\"mx-auto mb-2 text-morandi-primary\" />\n            <p className=\"font-medium text-morandi-primary mb-2\">現金流分析</p>\n            <p className=\"text-sm text-morandi-secondary\">功能開發中...</p>\n          </div>\n        </div>\n      </ContentContainer>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/requests/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7487,7490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7487,7490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":338,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10838,10841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10838,10841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12463,12466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12463,12466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":714,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":714,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":1044,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":1044,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo, useCallback } from 'react';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { EnhancedTable, TableColumn, useEnhancedTable } from '@/components/ui/enhanced-table';\nimport { usePayments } from '@/features/payments/hooks/usePayments';\nimport { useTours } from '@/features/tours/hooks/useTours';\nimport { useOrders } from '@/features/orders/hooks/useOrders';\nimport { useSupplierStore } from '@/stores';\nimport { PaymentRequest, PaymentRequestItem } from '@/stores/types';\nimport { FileText, Plus, Trash2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst statusLabels: Record<PaymentRequest['status'], string> = {\n  pending: '請款中',\n  processing: '處理中',\n  confirmed: '已確認',\n  paid: '已付款'\n};\n\nconst statusColors: Record<PaymentRequest['status'], string> = {\n  pending: 'bg-morandi-gold',\n  processing: 'bg-morandi-gold',\n  confirmed: 'bg-morandi-green',\n  paid: 'bg-morandi-primary'\n};\n\nconst categoryOptions = [\n  { value: '住宿', label: '🏨 住宿' },\n  { value: '交通', label: '🚌 交通' },\n  { value: '餐食', label: '🍽️ 餐食' },\n  { value: '門票', label: '🎫 門票' },\n  { value: '導遊', label: '👥 導遊' },\n  { value: '其他', label: '📦 其他' }\n];\n\nexport default function RequestsPage() {\n  const {\n    payment_requests,\n    createPaymentRequest,\n    addPaymentItem\n  } = usePayments();\n\n  const { tours } = useTours();\n  const { orders } = useOrders();\n  const { items: suppliers } = useSupplierStore();\n\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isBatchDialogOpen, setIsBatchDialogOpen] = useState(false);\n\n  const [newRequest, setNewRequest] = useState({\n    tour_id: '',\n    order_id: '',\n    request_date: '',\n    note: '',\n    is_special_billing: false, // 特殊出帳標記\n    created_by: '1' // 模擬當前用戶ID\n  });\n\n  // 批次請款狀態\n  const [selectedTourIds, setSelectedTourIds] = useState<string[]>([]);\n  const [batchRequest, setBatchRequest] = useState({\n    request_date: '',\n    note: '',\n    is_special_billing: false,\n    created_by: '1'\n  });\n  const [batchTourSearch, setBatchTourSearch] = useState('');\n  const [showBatchTourDropdown, setShowBatchTourDropdown] = useState(false);\n\n  // 搜尋相關狀態\n  const [tourSearchValue, setTourSearchValue] = useState('');\n  const [orderSearchValue, setOrderSearchValue] = useState('');\n  const [showTourDropdown, setShowTourDropdown] = useState(false);\n  const [showOrderDropdown, setShowOrderDropdown] = useState(false);\n\n  const [requestItems, setRequestItems] = useState<Array<{\n    id: string;\n    category: PaymentRequestItem['category'];\n    supplier_id: string;\n    supplierName: string;\n    description: string;\n    unit_price: number;\n    quantity: number;\n  }>>([]);\n\n  const [newItem, setNewItem] = useState({\n    category: '住宿' as PaymentRequestItem['category'],\n    supplier_id: '',\n    description: '',\n    unit_price: 0,\n    quantity: 1\n  });\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'request_number',\n      label: '請款單號',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <div className=\"font-medium text-morandi-primary\">{value}</div>\n      )\n    },\n    {\n      key: 'tour_name',\n      label: '團號',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <div className=\"font-medium text-morandi-primary\">{value}</div>\n      )\n    },\n    {\n      key: 'order_number',\n      label: '訂單編號',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-primary\">{value || '無'}</div>\n      )\n    },\n    {\n      key: 'request_date',\n      label: '請款日期',\n      sortable: true,\n      filterable: true,\n      filterType: 'date',\n      render: (value, row) => (\n        <div className=\"text-sm\">\n          <div className={row.is_special_billing ? 'text-morandi-gold font-medium' : 'text-morandi-secondary'}>\n            {value ? new Date(value).toLocaleDateString('zh-TW') : '未設定'}\n          </div>\n          {row.is_special_billing && (\n            <div className=\"text-xs text-morandi-gold\">⚠️ 特殊出帳</div>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'total_amount',\n      label: '金額',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <div className=\"font-semibold text-morandi-gold\">\n          NT$ {value.toLocaleString()}\n        </div>\n      )\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      filterable: true,\n      filterType: 'select',\n      filterOptions: [\n        { value: 'pending', label: '請款中' },\n        { value: 'processing', label: '處理中' },\n        { value: 'confirmed', label: '已確認' },\n        { value: 'paid', label: '已付款' }\n      ],\n      render: (value) => {\n        const statusBadge = getStatusBadge(value);\n        return (\n          <Badge className={cn('text-xs text-white', statusBadge.color)}>\n            {statusBadge.label}\n          </Badge>\n        );\n      }\n    }\n  ], []);\n\n  // 排序和篩選函數\n  const sortFunction = useCallback((data: PaymentRequest[], column: string, direction: 'asc' | 'desc') => {\n    return [...data].sort((a, b) => {\n      let aValue: string | number | Date, bValue: string | number | Date;\n\n      switch (column) {\n        case 'request_number':\n          aValue = a.request_number;\n          bValue = b.request_number;\n          break;\n        case 'tour_name':\n          aValue = a.tour_name || '';\n          bValue = b.tour_name || '';\n          break;\n        case 'order_number':\n          aValue = a.order_number || '';\n          bValue = b.order_number || '';\n          break;\n        case 'request_date':\n          aValue = new Date(a.request_date || 0);\n          bValue = new Date(b.request_date || 0);\n          break;\n        case 'total_amount':\n          aValue = a.total_amount;\n          bValue = b.total_amount;\n          break;\n        case 'status':\n          aValue = statusLabels[a.status];\n          bValue = statusLabels[b.status];\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, []);\n\n  const filterFunction = useCallback((data: PaymentRequest[], filters: Record<string, string>) => {\n    return data.filter(request => {\n      return (\n        (!filters.request_number || request.request_number.toLowerCase().includes(filters.request_number.toLowerCase())) &&\n        (!filters.tour_name || (request.tour_name || '').toLowerCase().includes(filters.tour_name.toLowerCase())) &&\n        (!filters.order_number || (request.order_number || '').toLowerCase().includes(filters.order_number.toLowerCase())) &&\n        (!filters.request_date || (request.request_date || '').includes(filters.request_date)) &&\n        (!filters.total_amount || request.total_amount.toString().includes(filters.total_amount)) &&\n        (!filters.status || request.status === filters.status)\n      );\n    });\n  }, []);\n\n  const { data: filteredAndSortedRequests, handleSort, handleFilter } = useEnhancedTable(\n    payment_requests as any, // 使用新的 Store 型別\n    sortFunction,\n    filterFunction\n  );\n\n  // 生成請款單號預覽（實際編號由 Store 自動生成）\n  const generateRequestNumber = useCallback(() => {\n    const year = new Date().getFullYear();\n    const count = payment_requests.length + 1;\n    return `PR${year}${count.toString().padStart(4, '0')}`;\n  }, [payment_requests.length]);\n\n  // 添加項目到列表\n  const addItemToList = useCallback(() => {\n    if (!newItem.supplier_id || !newItem.description) return;\n\n    const selectedSupplier = suppliers.find(s => s.id === newItem.supplier_id);\n    if (!selectedSupplier) return;\n\n    const itemId = Math.random().toString(36).substr(2, 9);\n    setRequestItems(prev => [...prev, {\n      id: itemId,\n      ...newItem,\n      supplierName: selectedSupplier.name,\n    }]);\n\n    setNewItem({\n      category: '住宿',\n      supplier_id: '',\n      description: '',\n      unit_price: 0,\n      quantity: 1\n    });\n  }, [newItem, suppliers]);\n\n  // 移除項目\n  const removeItem = useCallback((itemId: string) => {\n    setRequestItems(prev => prev.filter(item => item.id !== itemId));\n  }, []);\n\n  // 計算總金額\n  const total_amount = useMemo(() =>\n    requestItems.reduce((sum, item) => sum + (item.unit_price * item.quantity), 0)\n  , [requestItems]);\n\n  // 過濾旅遊團 - 可以搜尋團號、團名、出發日期\n  const filteredTours = useMemo(() =>\n    tours.filter(tour => {\n      const searchTerm = tourSearchValue.toLowerCase();\n      if (!searchTerm) return true;\n\n      const tourCode = tour.code?.toLowerCase() || '';\n      const tour_name = tour.name?.toLowerCase() || '';\n      const departure_date = tour.departure_date || '';\n\n      // 提取日期中的數字 (例如: 2024-08-20 -> \"0820\")\n      const dateNumbers = departure_date.replace(/\\D/g, '').slice(-4); // 取最後4位數字 (MMDD)\n\n      return tourCode.includes(searchTerm) ||\n             tour_name.includes(searchTerm) ||\n             dateNumbers.includes(searchTerm.replace(/\\D/g, '')); // 移除搜尋詞中的非數字字符\n    })\n  , [tours, tourSearchValue]);\n\n  // 過濾訂單 - 可以搜尋訂單號、聯絡人\n  const filteredOrders = useMemo(() =>\n    orders.filter(order => {\n      if (!newRequest.tour_id) return false; // 必須先選擇旅遊團\n      if (order.tour_id !== newRequest.tour_id) return false; // 只顯示當前團的訂單\n\n      const searchTerm = orderSearchValue.toLowerCase();\n      if (!searchTerm) return true;\n\n      const order_number = order.order_number?.toLowerCase() || '';\n      const contact_person = order.contact_person?.toLowerCase() || '';\n\n      return order_number.includes(searchTerm) || contact_person.includes(searchTerm);\n    })\n  , [orders, newRequest.tour_id, orderSearchValue]);\n\n\n  const handleAddRequest = async () => {\n    if (!newRequest.tour_id || requestItems.length === 0) return;\n\n    const selectedTour = tours.find(t => t.id === newRequest.tour_id);\n    const selectedOrder = orders.find(o => o.id === newRequest.order_id);\n\n    if (!selectedTour) return;\n\n    // 創建請款單（不包含 items，因為會透過 service 添加）\n    const request = await createPaymentRequest({\n      tour_id: newRequest.tour_id,\n      code: selectedTour.code,\n      tour_name: selectedTour.name,\n      order_id: newRequest.order_id || undefined,\n      order_number: selectedOrder?.order_number,\n      request_date: newRequest.request_date,\n      items: [], // 初始為空陣列\n      total_amount: 0, // 初始為 0，會在添加項目時自動計算\n      status: 'pending',\n      note: newRequest.note,\n      budget_warning: false\n      // created_by 會在 service 層自動填入\n    } as any);\n\n    // 依序添加所有項目（使用 for...of 確保順序執行）\n    for (let i = 0; i < requestItems.length; i++) {\n      const item = requestItems[i];\n      await addPaymentItem(request.id, {\n        category: item.category,\n        supplier_id: item.supplier_id,\n        supplier_name: item.supplierName,\n        description: item.description,\n        unit_price: item.unit_price,\n        quantity: item.quantity,\n        note: '',\n        sort_order: i + 1\n      });\n    }\n\n    // 重置表單\n    setNewRequest({\n      tour_id: '',\n      order_id: '',\n      request_date: '',\n      note: '',\n      is_special_billing: false,\n      created_by: '1'\n    });\n    setRequestItems([]);\n    setTourSearchValue('');\n    setOrderSearchValue('');\n    setShowTourDropdown(false);\n    setShowOrderDropdown(false);\n    setIsAddDialogOpen(false);\n  };\n\n\n  const getStatusBadge = (status: PaymentRequest['status']) => {\n    return {\n      label: statusLabels[status],\n      color: statusColors[status]\n    };\n  };\n\n  // 批次請款處理\n  const handleBatchRequest = async () => {\n    if (selectedTourIds.length === 0 || requestItems.length === 0) return;\n\n    // 為每個選中的旅遊團建立請款單\n    for (const tourId of selectedTourIds) {\n      const selectedTour = tours.find(t => t.id === tourId);\n      if (!selectedTour) continue;\n\n      // 創建請款單\n      const request = await createPaymentRequest({\n        tour_id: tourId,\n        code: selectedTour.code,\n        tour_name: selectedTour.name,\n        request_date: batchRequest.request_date,\n        items: [],\n        total_amount: 0,\n        status: 'pending',\n        note: batchRequest.note,\n        budget_warning: false\n      } as any);\n\n      // 添加所有項目\n      for (let i = 0; i < requestItems.length; i++) {\n        const item = requestItems[i];\n        await addPaymentItem(request.id, {\n          category: item.category,\n          supplier_id: item.supplier_id,\n          supplier_name: item.supplierName,\n          description: item.description,\n          unit_price: item.unit_price,\n          quantity: item.quantity,\n          note: '',\n          sort_order: i + 1\n        });\n      }\n    }\n\n    // 重置表單\n    setSelectedTourIds([]);\n    setBatchRequest({\n      request_date: '',\n      note: '',\n      is_special_billing: false,\n      created_by: '1'\n    });\n    setRequestItems([]);\n    setBatchTourSearch('');\n    setShowBatchTourDropdown(false);\n    setIsBatchDialogOpen(false);\n  };\n\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"請款管理\"\n        actions={\n          <>\n            <button\n              onClick={() => setIsAddDialogOpen(true)}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center transition-colors\"\n            >\n              <Plus size={16} className=\"mr-2\" />\n              新增請款\n            </button>\n            <button\n              onClick={() => setIsBatchDialogOpen(true)}\n              className=\"bg-morandi-primary hover:bg-morandi-primary/90 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center transition-colors\"\n            >\n              <FileText size={16} className=\"mr-2\" />\n              批次請款\n            </button>\n          </>\n        }\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n          className=\"min-h-full\"\n          columns={tableColumns}\n          data={filteredAndSortedRequests}\n          onSort={handleSort}\n          onFilter={handleFilter}\n          selection={undefined}\n        />\n      </div>\n\n      {/* 新增請款單對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-7xl max-h-[95vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>新增請款單</DialogTitle>\n            <p className=\"text-sm text-morandi-secondary\">\n              請款單號: {generateRequestNumber()} (自動生成)\n            </p>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* 基本資訊區塊 */}\n            <div className=\"border border-border rounded-lg p-4\">\n              <h3 className=\"text-sm font-medium text-morandi-primary mb-4\">基本資訊</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">選擇旅遊團 *</label>\n                  <div className=\"relative\">\n                    <Input\n                      placeholder=\"搜尋團號、團名或日期 (如: 0820)...\"\n                      value={tourSearchValue}\n                      onChange={(e) => setTourSearchValue(e.target.value)}\n                      onClick={() => setShowTourDropdown(true)}\n                      onBlur={() => setTimeout(() => setShowTourDropdown(false), 200)}\n                      className=\"mt-1 bg-background\"\n                    />\n                    {showTourDropdown && (\n                      <div className=\"absolute z-50 w-full mt-1 bg-background border border-border rounded-md shadow-lg max-h-[200px] overflow-y-auto\">\n                        {filteredTours.length > 0 ? (\n                          filteredTours.map((tour) => (\n                            <div\n                              key={tour.id}\n                              onClick={() => {\n                                setNewRequest(prev => ({\n                                  ...prev,\n                                  tour_id: tour.id,\n                                  order_id: '' // 重置訂單選擇\n                                }));\n                                setTourSearchValue(`${tour.code} - ${tour.name}`);\n                                setOrderSearchValue(''); // 重置訂單搜尋\n                                setShowTourDropdown(false);\n                              }}\n                              className=\"p-3 hover:bg-morandi-container/20 cursor-pointer border-b border-border last:border-b-0\"\n                            >\n                              <div className=\"font-medium\">{tour.code} - {tour.name}</div>\n                              <div className=\"text-sm text-morandi-secondary\">\n                                出發: {new Date(tour.departure_date).toLocaleDateString()}\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"p-3 text-sm text-morandi-secondary\">找不到相符的旅遊團</div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">選擇訂單（可選）</label>\n                  <div className=\"relative\">\n                    <Input\n                      placeholder={newRequest.tour_id ? \"搜尋訂單號或聯絡人...\" : \"請先選擇旅遊團\"}\n                      value={orderSearchValue}\n                      onChange={(e) => setOrderSearchValue(e.target.value)}\n                      onClick={() => newRequest.tour_id && setShowOrderDropdown(true)}\n                      onBlur={() => setTimeout(() => setShowOrderDropdown(false), 200)}\n                      className=\"mt-1 bg-background\"\n                      disabled={!newRequest.tour_id}\n                    />\n                    {showOrderDropdown && newRequest.tour_id && (\n                      <div className=\"absolute z-50 w-full mt-1 bg-background border border-border rounded-md shadow-lg max-h-[200px] overflow-y-auto\">\n                        {filteredOrders.length > 0 ? (\n                          filteredOrders.map((order) => (\n                            <div\n                              key={order.id}\n                              onClick={() => {\n                                setNewRequest(prev => ({\n                                  ...prev,\n                                  order_id: order.id\n                                }));\n                                setOrderSearchValue(`${order.order_number} - ${order.contact_person}`);\n                                setShowOrderDropdown(false);\n                              }}\n                              className=\"p-3 hover:bg-morandi-container/20 cursor-pointer border-b border-border last:border-b-0\"\n                            >\n                              <div className=\"font-medium\">{order.order_number}</div>\n                              <div className=\"text-sm text-morandi-secondary\">\n                                聯絡人: {order.contact_person}\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"p-3 text-sm text-morandi-secondary\">找不到相符的訂單</div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">請款日期</label>\n                  <Input\n                    type=\"date\"\n                    value={newRequest.request_date}\n                    onChange={(e) => {\n                      const selectedDate = e.target.value;\n                      const isThursday = selectedDate ? new Date(selectedDate + 'T00:00:00').getDay() === 4 : false;\n\n                      setNewRequest(prev => ({\n                        ...prev,\n                        request_date: selectedDate,\n                        is_special_billing: !isThursday // 非週四自動標記為特殊出帳\n                      }));\n                    }}\n                    className={cn(\n                      \"mt-1\",\n                      newRequest.request_date && new Date(newRequest.request_date + 'T00:00:00').getDay() !== 4\n                        ? \"bg-morandi-gold/10 border-morandi-gold/50\"\n                        : \"bg-background\"\n                    )}\n                  />\n                  {newRequest.request_date && (\n                    <p className={cn(\n                      \"text-xs mt-1\",\n                      new Date(newRequest.request_date + 'T00:00:00').getDay() === 4\n                        ? \"text-morandi-secondary\"\n                        : \"text-morandi-gold\"\n                    )}>\n                      {new Date(newRequest.request_date + 'T00:00:00').getDay() === 4\n                        ? \"💼 一般請款：週四出帳\"\n                        : \"⚠️ 特殊出帳：非週四請款\"}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">備註</label>\n                  <Input\n                    value={newRequest.note}\n                    onChange={(e) => setNewRequest(prev => ({ ...prev, note: e.target.value }))}\n                    placeholder=\"輸入備註（可選）\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 項目新增區塊 */}\n            <div className=\"border border-border rounded-lg p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-lg font-medium text-morandi-primary\">新增請款項目</h3>\n                <Button\n                  type=\"button\"\n                  onClick={addItemToList}\n                  disabled={!newItem.supplier_id || !newItem.description}\n                  className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-6\"\n                  size=\"lg\"\n                >\n                  <Plus size={18} className=\"mr-2\" />\n                  新增項目\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-12 gap-4\">\n                <div className=\"col-span-2\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">類別</label>\n                  <Select value={newItem.category} onValueChange={(value) => setNewItem(prev => ({ ...prev, category: value as PaymentRequestItem['category'] }))}>\n                    <SelectTrigger className=\"mt-2 bg-background\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background\">\n                      {categoryOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"col-span-3\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">供應商</label>\n                  <Select value={newItem.supplier_id} onValueChange={(value) => setNewItem(prev => ({ ...prev, supplier_id: value }))}>\n                    <SelectTrigger className=\"mt-2 bg-background\">\n                      <SelectValue placeholder=\"選擇供應商\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background\">\n                      {suppliers.map((supplier) => (\n                        <SelectItem key={supplier.id} value={supplier.id}>\n                          {supplier.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"col-span-4\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">項目描述</label>\n                  <Input\n                    value={newItem.description}\n                    onChange={(e) => setNewItem(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"輸入項目描述\"\n                    className=\"mt-2\"\n                  />\n                </div>\n\n                <div className=\"col-span-2\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">單價</label>\n                  <Input\n                    type=\"number\"\n                    value={newItem.unit_price}\n                    onChange={(e) => setNewItem(prev => ({ ...prev, unit_price: parseFloat(e.target.value) || 0 }))}\n                    placeholder=\"0\"\n                    className=\"mt-2\"\n                  />\n                </div>\n\n                <div className=\"col-span-1\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">數量</label>\n                  <Input\n                    type=\"number\"\n                    value={newItem.quantity}\n                    onChange={(e) => setNewItem(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}\n                    placeholder=\"1\"\n                    className=\"mt-2\"\n                  />\n                </div>\n              </div>\n\n              {/* 小計顯示 */}\n              <div className=\"mt-4 flex justify-end\">\n                <div className=\"bg-morandi-container/20 rounded px-4 py-2\">\n                  <span className=\"text-sm font-medium text-morandi-secondary mr-2\">小計:</span>\n                  <span className=\"text-lg font-semibold text-morandi-gold\">\n                    NT$ {(newItem.unit_price * newItem.quantity).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* 項目列表 */}\n            {requestItems.length > 0 && (\n              <div className=\"border border-border rounded-lg p-4\">\n                <h3 className=\"text-sm font-medium text-morandi-primary mb-4\">請款項目列表</h3>\n                <div className=\"space-y-2\">\n                  {requestItems.map((item, index) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-3 bg-morandi-container/10 rounded\">\n                      <div className=\"flex-1 grid grid-cols-6 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">類別:</span>\n                          <div className=\"font-medium\">{categoryOptions.find(c => c.value === item.category)?.label}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">供應商:</span>\n                          <div className=\"font-medium\">{item.supplierName}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">項目:</span>\n                          <div className=\"font-medium\">{item.description}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">單價:</span>\n                          <div className=\"font-medium\">NT$ {item.unit_price.toLocaleString()}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">數量:</span>\n                          <div className=\"font-medium\">{item.quantity}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">小計:</span>\n                          <div className=\"font-semibold text-morandi-gold\">NT$ {(item.unit_price * item.quantity).toLocaleString()}</div>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.id)}\n                        className=\"ml-4 text-morandi-red hover:bg-morandi-red/10\"\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n\n                {/* 總計 */}\n                <div className=\"mt-4 pt-4 border-t border-border\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-semibold text-morandi-primary\">總金額:</span>\n                    <span className=\"text-xl font-bold text-morandi-gold\">NT$ {total_amount.toLocaleString()}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* 底部操作按鈕 */}\n            <div className=\"flex justify-end space-x-2 pt-4 border-t border-border\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsAddDialogOpen(false);\n                  setRequestItems([]);\n                  setNewRequest({\n                    tour_id: '',\n                    order_id: '',\n                    request_date: '',\n                    note: '',\n                    is_special_billing: false,\n                    created_by: '1'\n                  });\n                  setTourSearchValue('');\n                  setOrderSearchValue('');\n                  setShowTourDropdown(false);\n                  setShowOrderDropdown(false);\n                }}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleAddRequest}\n                disabled={!newRequest.tour_id || requestItems.length === 0}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增請款單 (共 {requestItems.length} 項，NT$ {total_amount.toLocaleString()})\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* 批次請款對話框 */}\n      <Dialog open={isBatchDialogOpen} onOpenChange={setIsBatchDialogOpen}>\n        <DialogContent className=\"max-w-7xl max-h-[95vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>批次請款</DialogTitle>\n            <p className=\"text-sm text-morandi-secondary\">\n              為多個旅遊團建立相同內容的請款單\n            </p>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* 選擇旅遊團區塊 */}\n            <div className=\"border border-border rounded-lg p-4\">\n              <h3 className=\"text-sm font-medium text-morandi-primary mb-4\">選擇旅遊團</h3>\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"搜尋團號、團名或日期 (如: 0820)...\"\n                  value={batchTourSearch}\n                  onChange={(e) => setBatchTourSearch(e.target.value)}\n                  onClick={() => setShowBatchTourDropdown(true)}\n                  onBlur={() => setTimeout(() => setShowBatchTourDropdown(false), 200)}\n                  className=\"bg-background\"\n                />\n                {showBatchTourDropdown && (\n                  <div className=\"absolute z-50 w-full mt-1 bg-background border border-border rounded-md shadow-lg max-h-[300px] overflow-y-auto\">\n                    {filteredTours.length > 0 ? (\n                      filteredTours.map((tour) => {\n                        const isSelected = selectedTourIds.includes(tour.id);\n                        return (\n                          <div\n                            key={tour.id}\n                            onClick={() => {\n                              setSelectedTourIds(prev =>\n                                isSelected\n                                  ? prev.filter(id => id !== tour.id)\n                                  : [...prev, tour.id]\n                              );\n                            }}\n                            className={cn(\n                              \"p-3 hover:bg-morandi-container/20 cursor-pointer border-b border-border last:border-b-0 flex items-center\",\n                              isSelected && \"bg-morandi-gold/10\"\n                            )}\n                          >\n                            <input\n                              type=\"checkbox\"\n                              checked={isSelected}\n                              onChange={() => {}}\n                              className=\"mr-3\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium\">{tour.code} - {tour.name}</div>\n                              <div className=\"text-sm text-morandi-secondary\">\n                                出發: {new Date(tour.departure_date).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })\n                    ) : (\n                      <div className=\"p-3 text-sm text-morandi-secondary\">找不到相符的旅遊團</div>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* 已選擇的旅遊團 */}\n              {selectedTourIds.length > 0 && (\n                <div className=\"mt-4 p-3 bg-morandi-container/10 rounded\">\n                  <div className=\"text-sm font-medium text-morandi-primary mb-2\">\n                    已選擇 {selectedTourIds.length} 個旅遊團：\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedTourIds.map(tourId => {\n                      const tour = tours.find(t => t.id === tourId);\n                      if (!tour) return null;\n                      return (\n                        <Badge\n                          key={tourId}\n                          className=\"bg-morandi-gold text-white flex items-center gap-2\"\n                        >\n                          {tour.code}\n                          <button\n                            onClick={() => setSelectedTourIds(prev => prev.filter(id => id !== tourId))}\n                            className=\"hover:bg-morandi-gold-hover rounded-full\"\n                          >\n                            ✕\n                          </button>\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 基本資訊區塊 */}\n            <div className=\"border border-border rounded-lg p-4\">\n              <h3 className=\"text-sm font-medium text-morandi-primary mb-4\">基本資訊</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">請款日期</label>\n                  <Input\n                    type=\"date\"\n                    value={batchRequest.request_date}\n                    onChange={(e) => {\n                      const selectedDate = e.target.value;\n                      const isThursday = selectedDate ? new Date(selectedDate + 'T00:00:00').getDay() === 4 : false;\n\n                      setBatchRequest(prev => ({\n                        ...prev,\n                        request_date: selectedDate,\n                        is_special_billing: !isThursday\n                      }));\n                    }}\n                    className={cn(\n                      \"mt-1\",\n                      batchRequest.request_date && new Date(batchRequest.request_date + 'T00:00:00').getDay() !== 4\n                        ? \"bg-morandi-gold/10 border-morandi-gold/50\"\n                        : \"bg-background\"\n                    )}\n                  />\n                  {batchRequest.request_date && (\n                    <p className={cn(\n                      \"text-xs mt-1\",\n                      new Date(batchRequest.request_date + 'T00:00:00').getDay() === 4\n                        ? \"text-morandi-secondary\"\n                        : \"text-morandi-gold\"\n                    )}>\n                      {new Date(batchRequest.request_date + 'T00:00:00').getDay() === 4\n                        ? \"💼 一般請款：週四出帳\"\n                        : \"⚠️ 特殊出帳：非週四請款\"}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">備註</label>\n                  <Input\n                    value={batchRequest.note}\n                    onChange={(e) => setBatchRequest(prev => ({ ...prev, note: e.target.value }))}\n                    placeholder=\"輸入備註（可選）\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 項目新增區塊 - 與單一請款共用 */}\n            <div className=\"border border-border rounded-lg p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-lg font-medium text-morandi-primary\">新增請款項目</h3>\n                <Button\n                  type=\"button\"\n                  onClick={addItemToList}\n                  disabled={!newItem.supplier_id || !newItem.description}\n                  className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-6\"\n                  size=\"lg\"\n                >\n                  <Plus size={18} className=\"mr-2\" />\n                  新增項目\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-12 gap-4\">\n                <div className=\"col-span-2\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">類別</label>\n                  <Select value={newItem.category} onValueChange={(value) => setNewItem(prev => ({ ...prev, category: value as PaymentRequestItem['category'] }))}>\n                    <SelectTrigger className=\"mt-2 bg-background\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background\">\n                      {categoryOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"col-span-3\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">供應商</label>\n                  <Select value={newItem.supplier_id} onValueChange={(value) => setNewItem(prev => ({ ...prev, supplier_id: value }))}>\n                    <SelectTrigger className=\"mt-2 bg-background\">\n                      <SelectValue placeholder=\"選擇供應商\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-background\">\n                      {suppliers.map((supplier) => (\n                        <SelectItem key={supplier.id} value={supplier.id}>\n                          {supplier.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"col-span-4\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">項目描述</label>\n                  <Input\n                    value={newItem.description}\n                    onChange={(e) => setNewItem(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"輸入項目描述\"\n                    className=\"mt-2\"\n                  />\n                </div>\n\n                <div className=\"col-span-2\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">單價</label>\n                  <Input\n                    type=\"number\"\n                    value={newItem.unit_price}\n                    onChange={(e) => setNewItem(prev => ({ ...prev, unit_price: parseFloat(e.target.value) || 0 }))}\n                    placeholder=\"0\"\n                    className=\"mt-2\"\n                  />\n                </div>\n\n                <div className=\"col-span-1\">\n                  <label className=\"text-sm font-medium text-morandi-secondary\">數量</label>\n                  <Input\n                    type=\"number\"\n                    value={newItem.quantity}\n                    onChange={(e) => setNewItem(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}\n                    placeholder=\"1\"\n                    className=\"mt-2\"\n                  />\n                </div>\n              </div>\n\n              {/* 小計顯示 */}\n              <div className=\"mt-4 flex justify-end\">\n                <div className=\"bg-morandi-container/20 rounded px-4 py-2\">\n                  <span className=\"text-sm font-medium text-morandi-secondary mr-2\">小計:</span>\n                  <span className=\"text-lg font-semibold text-morandi-gold\">\n                    NT$ {(newItem.unit_price * newItem.quantity).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* 項目列表 */}\n            {requestItems.length > 0 && (\n              <div className=\"border border-border rounded-lg p-4\">\n                <h3 className=\"text-sm font-medium text-morandi-primary mb-4\">請款項目列表</h3>\n                <div className=\"space-y-2\">\n                  {requestItems.map((item, index) => (\n                    <div key={item.id} className=\"flex items-center justify-between p-3 bg-morandi-container/10 rounded\">\n                      <div className=\"flex-1 grid grid-cols-6 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">類別:</span>\n                          <div className=\"font-medium\">{categoryOptions.find(c => c.value === item.category)?.label}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">供應商:</span>\n                          <div className=\"font-medium\">{item.supplierName}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">項目:</span>\n                          <div className=\"font-medium\">{item.description}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">單價:</span>\n                          <div className=\"font-medium\">NT$ {item.unit_price.toLocaleString()}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">數量:</span>\n                          <div className=\"font-medium\">{item.quantity}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs text-morandi-secondary\">小計:</span>\n                          <div className=\"font-semibold text-morandi-gold\">NT$ {(item.unit_price * item.quantity).toLocaleString()}</div>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.id)}\n                        className=\"ml-4 text-morandi-red hover:bg-morandi-red/10\"\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n\n                {/* 總計 */}\n                <div className=\"mt-4 pt-4 border-t border-border\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-semibold text-morandi-primary\">\n                      單個團總金額:\n                    </span>\n                    <span className=\"text-xl font-bold text-morandi-gold\">NT$ {total_amount.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center mt-2 text-sm text-morandi-secondary\">\n                    <span>批次總金額 ({selectedTourIds.length} 個團):</span>\n                    <span className=\"font-semibold text-morandi-primary\">\n                      NT$ {(total_amount * selectedTourIds.length).toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* 底部操作按鈕 */}\n            <div className=\"flex justify-end space-x-2 pt-4 border-t border-border\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsBatchDialogOpen(false);\n                  setSelectedTourIds([]);\n                  setBatchRequest({\n                    request_date: '',\n                    note: '',\n                    is_special_billing: false,\n                    created_by: '1'\n                  });\n                  setRequestItems([]);\n                  setBatchTourSearch('');\n                  setShowBatchTourDropdown(false);\n                }}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleBatchRequest}\n                disabled={selectedTourIds.length === 0 || requestItems.length === 0}\n                className=\"bg-morandi-primary hover:bg-morandi-primary/90 text-white\"\n              >\n                建立批次請款 ({selectedTourIds.length} 個團，共 {requestItems.length} 項，總計 NT$ {(total_amount * selectedTourIds.length).toLocaleString()})\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/travel-invoice/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileEdit' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1265,1268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1265,1268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1608,1611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1608,1611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n/**\n * 發票詳情頁面\n */\n\nimport { useEffect, useState } from 'react'\n\nimport Link from 'next/link'\nimport { useParams, useRouter } from 'next/navigation'\n\nimport { ArrowLeft, FileX, FileEdit } from 'lucide-react'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useTravelInvoiceStore } from '@/stores/useTravelInvoiceStore'\n\nexport default function InvoiceDetailPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { currentInvoice, fetchInvoiceById, voidInvoice, isLoading } = useTravelInvoiceStore()\n\n  const [showVoidDialog, setShowVoidDialog] = useState(false)\n  const [voidReason, setVoidReason] = useState('')\n\n  useEffect(() => {\n    if (params.id) {\n      fetchInvoiceById(params.id as string)\n    }\n  }, [params.id, fetchInvoiceById])\n\n  const handleVoid = async () => {\n    if (!currentInvoice || !voidReason.trim()) return\n\n    try {\n      await voidInvoice(currentInvoice.id, voidReason, 'current_user') // TODO: 從登入狀態取得\n      setShowVoidDialog(false)\n      setVoidReason('')\n    } catch (error: any) {\n      alert(error.message)\n    }\n  }\n\n  if (isLoading || !currentInvoice) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <p className=\"text-center text-muted-foreground\">載入中...</p>\n      </div>\n    )\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusMap: Record<string, { label: string; variant: any }> = {\n      pending: { label: '待處理', variant: 'secondary' },\n      issued: { label: '已開立', variant: 'default' },\n      voided: { label: '已作廢', variant: 'destructive' },\n      allowance: { label: '已折讓', variant: 'outline' },\n      failed: { label: '失敗', variant: 'destructive' },\n    }\n    const config = statusMap[status] || { label: status, variant: 'secondary' }\n    return <Badge variant={config.variant}>{config.label}</Badge>\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* 標題列 */}\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/finance/travel-invoice\">\n            <Button variant=\"ghost\" size=\"icon\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold\">{currentInvoice.transactionNo}</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              {currentInvoice.invoice_number || '尚未取得發票號碼'}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          {getStatusBadge(currentInvoice.status)}\n          {currentInvoice.status === 'issued' && (\n            <Button variant=\"destructive\" onClick={() => setShowVoidDialog(true)}>\n              <FileX className=\"mr-2 h-4 w-4\" />\n              作廢發票\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* 基本資訊 */}\n      <Card>\n        <CardHeader>\n          <CardTitle>基本資訊</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">特店編號</p>\n            <p className=\"font-medium\">{currentInvoice.merchantId}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">開立日期</p>\n            <p className=\"font-medium\">{currentInvoice.invoice_date}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">課稅別</p>\n            <p className=\"font-medium\">\n              {currentInvoice.tax_type === 'dutiable'\n                ? '應稅'\n                : currentInvoice.tax_type === 'zero'\n                  ? '零稅率'\n                  : '免稅'}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">總金額</p>\n            <p className=\"font-medium text-lg\">NT$ {currentInvoice.total_amount.toLocaleString()}</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 買受人資訊 */}\n      <Card>\n        <CardHeader>\n          <CardTitle>買受人資訊</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-2 gap-6\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">名稱</p>\n            <p className=\"font-medium\">{currentInvoice.buyerInfo.buyerName || '-'}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">統一編號</p>\n            <p className=\"font-medium\">{currentInvoice.buyerInfo.buyerUBN || '-'}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Email</p>\n            <p className=\"font-medium\">{currentInvoice.buyerInfo.buyerEmail || '-'}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">手機</p>\n            <p className=\"font-medium\">{currentInvoice.buyerInfo.buyerMobile || '-'}</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 商品明細 */}\n      <Card>\n        <CardHeader>\n          <CardTitle>商品明細</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <table className=\"w-full\">\n            <thead className=\"border-b\">\n              <tr>\n                <th className=\"text-left py-2\">商品名稱</th>\n                <th className=\"text-center py-2\">數量</th>\n                <th className=\"text-center py-2\">單位</th>\n                <th className=\"text-right py-2\">單價</th>\n                <th className=\"text-right py-2\">金額</th>\n              </tr>\n            </thead>\n            <tbody>\n              {currentInvoice.items.map((item, index) => (\n                <tr key={index} className=\"border-b\">\n                  <td className=\"py-3\">{item.item_name}</td>\n                  <td className=\"text-center\">{item.item_count}</td>\n                  <td className=\"text-center\">{item.item_unit}</td>\n                  <td className=\"text-right\">NT$ {item.item_price.toLocaleString()}</td>\n                  <td className=\"text-right font-medium\">NT$ {item.itemAmt.toLocaleString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </CardContent>\n      </Card>\n\n      {/* 發票資訊 */}\n      {currentInvoice.status === 'issued' && currentInvoice.randomNum && (\n        <Card>\n          <CardHeader>\n            <CardTitle>發票資訊</CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-2 gap-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">隨機碼</p>\n              <p className=\"font-medium font-mono\">{currentInvoice.randomNum}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">條碼</p>\n              <p className=\"font-medium font-mono text-sm\">{currentInvoice.barcode || '-'}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 作廢資訊 */}\n      {currentInvoice.status === 'voided' && (\n        <Card className=\"border-destructive\">\n          <CardHeader>\n            <CardTitle>作廢資訊</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">作廢時間</p>\n                <p className=\"font-medium\">\n                  {currentInvoice.voidDate\n                    ? new Date(currentInvoice.voidDate).toLocaleString('zh-TW')\n                    : '-'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">作廢原因</p>\n                <p className=\"font-medium\">{currentInvoice.voidReason || '-'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 作廢對話框 */}\n      {showVoidDialog && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle>作廢發票</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"voidReason\">作廢原因 *</Label>\n                <Input\n                  id=\"voidReason\"\n                  value={voidReason}\n                  onChange={e => setVoidReason(e.target.value)}\n                  placeholder=\"請輸入作廢原因\"\n                />\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setShowVoidDialog(false)}>\n                  取消\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleVoid}\n                  disabled={!voidReason.trim() || isLoading}\n                >\n                  確認作廢\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/travel-invoice/create/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1827,1830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1827,1830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2888,2891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2888,2891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4487,4490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4487,4490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n/**\n * 開立代轉發票頁面\n */\n\nimport { useState } from 'react'\n\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\n\nimport { Plus, Trash2, ArrowLeft } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useTravelInvoiceStore, TravelInvoiceItem, BuyerInfo } from '@/stores/useTravelInvoiceStore'\n\nexport default function CreateInvoicePage() {\n  const router = useRouter()\n  const { issueInvoice, isLoading } = useTravelInvoiceStore()\n  const [error, setError] = useState<string | null>(null)\n\n  // 基本資訊\n  const [invoice_date, setInvoiceDate] = useState(new Date().toISOString().split('T')[0])\n  const [tax_type, setTaxType] = useState<'dutiable' | 'zero' | 'free'>('dutiable')\n\n  // 買受人資訊\n  const [buyerInfo, setBuyerInfo] = useState<BuyerInfo>({\n    buyerName: '',\n    buyerUBN: '',\n    buyerAddress: '',\n    buyerEmail: '',\n    buyerMobileCode: '+886',\n    buyerMobile: '',\n    carrierType: '',\n    carrierNum: '',\n    loveCode: '',\n    printFlag: 'Y',\n  })\n\n  // 商品明細\n  const [items, setItems] = useState<TravelInvoiceItem[]>([\n    {\n      item_name: '',\n      item_count: 1,\n      item_unit: '式',\n      item_price: 0,\n      itemAmt: 0,\n      itemWord: '',\n    },\n  ])\n\n  const addItem = () => {\n    setItems([\n      ...items,\n      {\n        item_name: '',\n        item_count: 1,\n        item_unit: '式',\n        item_price: 0,\n        itemAmt: 0,\n        itemWord: '',\n      },\n    ])\n  }\n\n  const removeItem = (index: number) => {\n    if (items.length > 1) {\n      setItems(items.filter((_, i) => i !== index))\n    }\n  }\n\n  const updateItem = (index: number, field: keyof TravelInvoiceItem, value: any) => {\n    const newItems = [...items]\n    newItems[index] = { ...newItems[index], [field]: value }\n\n    // 自動計算金額\n    if (field === 'item_price' || field === 'item_count') {\n      const price = field === 'item_price' ? value : newItems[index].item_price\n      const count = field === 'item_count' ? value : newItems[index].item_count\n      newItems[index].itemAmt = price * count\n    }\n\n    setItems(newItems)\n  }\n\n  const total_amount = items.reduce((sum, item) => sum + item.itemAmt, 0)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n\n    // 驗證\n    if (!buyerInfo.buyerName) {\n      setError('請輸入買受人名稱')\n      return\n    }\n\n    if (items.some(item => !item.item_name || item.item_price <= 0)) {\n      setError('請完整填寫商品資訊')\n      return\n    }\n\n    try {\n      await issueInvoice({\n        invoice_date,\n        total_amount,\n        tax_type,\n        buyerInfo,\n        items,\n        created_by: 'current_user', // TODO: 從登入狀態取得\n      })\n\n      router.push('/finance/travel-invoice')\n    } catch (error: any) {\n      setError(error.message)\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* 標題列 */}\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/finance/travel-invoice\">\n          <Button variant=\"ghost\" size=\"icon\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold\">開立新發票</h1>\n          <p className=\"text-muted-foreground mt-1\">填寫發票資訊並送出開立</p>\n        </div>\n      </div>\n\n      {/* 錯誤訊息 */}\n      {error && (\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-destructive\">{error}</p>\n          </CardContent>\n        </Card>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* 基本資訊 */}\n        <Card>\n          <CardHeader>\n            <CardTitle>基本資訊</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"invoice_date\">開立日期</Label>\n                <Input\n                  id=\"invoice_date\"\n                  type=\"date\"\n                  value={invoice_date}\n                  onChange={e => setInvoiceDate(e.target.value)}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"tax_type\">課稅別</Label>\n                <select\n                  id=\"tax_type\"\n                  value={tax_type}\n                  onChange={e => setTaxType(e.target.value as any)}\n                  className=\"w-full px-3 py-2 border rounded-md\"\n                >\n                  <option value=\"dutiable\">應稅</option>\n                  <option value=\"zero\">零稅率</option>\n                  <option value=\"free\">免稅</option>\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 買受人資訊 */}\n        <Card>\n          <CardHeader>\n            <CardTitle>買受人資訊</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"buyerName\">買受人名稱 *</Label>\n                <Input\n                  id=\"buyerName\"\n                  value={buyerInfo.buyerName}\n                  onChange={e => setBuyerInfo({ ...buyerInfo, buyerName: e.target.value })}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"buyerUBN\">統一編號</Label>\n                <Input\n                  id=\"buyerUBN\"\n                  value={buyerInfo.buyerUBN}\n                  onChange={e => setBuyerInfo({ ...buyerInfo, buyerUBN: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"buyerEmail\">Email</Label>\n                <Input\n                  id=\"buyerEmail\"\n                  type=\"email\"\n                  value={buyerInfo.buyerEmail}\n                  onChange={e => setBuyerInfo({ ...buyerInfo, buyerEmail: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"buyerMobile\">手機號碼</Label>\n                <Input\n                  id=\"buyerMobile\"\n                  value={buyerInfo.buyerMobile}\n                  onChange={e => setBuyerInfo({ ...buyerInfo, buyerMobile: e.target.value })}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 商品明細 */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle>商品明細</CardTitle>\n              <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addItem}>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                新增項目\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {items.map((item, index) => (\n              <div key={index} className=\"p-4 border rounded-lg space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <h4 className=\"font-medium\">項目 {index + 1}</h4>\n                  {items.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeItem(index)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-4 gap-4\">\n                  <div className=\"col-span-2\">\n                    <Label>商品名稱 *</Label>\n                    <Input\n                      value={item.item_name}\n                      onChange={e => updateItem(index, 'item_name', e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label>數量</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={item.item_count}\n                      onChange={e => updateItem(index, 'item_count', parseInt(e.target.value))}\n                    />\n                  </div>\n                  <div>\n                    <Label>單位</Label>\n                    <Input\n                      value={item.item_unit}\n                      onChange={e => updateItem(index, 'item_unit', e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label>單價</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      value={item.item_price}\n                      onChange={e => updateItem(index, 'item_price', parseFloat(e.target.value))}\n                    />\n                  </div>\n                  <div>\n                    <Label>金額</Label>\n                    <Input value={item.itemAmt} readOnly className=\"bg-muted\" />\n                  </div>\n                  <div className=\"col-span-2\">\n                    <Label>備註</Label>\n                    <Input\n                      value={item.itemWord}\n                      onChange={e => updateItem(index, 'itemWord', e.target.value)}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            <div className=\"flex justify-end items-center pt-4 border-t\">\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">總金額</p>\n                <p className=\"text-2xl font-bold\">NT$ {total_amount.toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 送出按鈕 */}\n        <div className=\"flex justify-end gap-4\">\n          <Link href=\"/finance/travel-invoice\">\n            <Button type=\"button\" variant=\"outline\">\n              取消\n            </Button>\n          </Link>\n          <Button type=\"submit\" disabled={isLoading}>\n            {isLoading ? '開立中...' : '開立發票'}\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/travel-invoice/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1341,1344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1341,1344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n/**\n * 代轉發票管理頁面\n */\n\nimport { useEffect, useState } from 'react'\n\nimport Link from 'next/link'\n\nimport { Plus, Search, FileText, Eye } from 'lucide-react'\n\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { useTravelInvoiceStore } from '@/stores/useTravelInvoiceStore'\n\nexport default function TravelInvoicePage() {\n  const { invoices, isLoading, error, fetchInvoices } = useTravelInvoiceStore()\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState<string>('')\n\n  useEffect(() => {\n    fetchInvoices()\n  }, [fetchInvoices])\n\n  const filteredInvoices = (invoices || []).filter(invoice => {\n    const matchesSearch =\n      invoice.transactionNo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.invoice_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.buyerInfo.buyerName?.toLowerCase().includes(searchTerm.toLowerCase())\n\n    const matchesStatus = statusFilter ? invoice.status === statusFilter : true\n\n    return matchesSearch && matchesStatus\n  })\n\n  const getStatusBadge = (status: string) => {\n    const statusMap: Record<string, { label: string; variant: any }> = {\n      pending: { label: '待處理', variant: 'secondary' },\n      issued: { label: '已開立', variant: 'default' },\n      voided: { label: '已作廢', variant: 'destructive' },\n      allowance: { label: '已折讓', variant: 'outline' },\n      failed: { label: '失敗', variant: 'destructive' },\n    }\n    const config = statusMap[status] || { label: status, variant: 'secondary' }\n    return <Badge variant={config.variant}>{config.label}</Badge>\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* 標題列 */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">代轉發票管理</h1>\n          <p className=\"text-muted-foreground mt-1\">藍新旅行業電子發票系統</p>\n        </div>\n        <Link href=\"/finance/travel-invoice/create\">\n          <Button>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            開立新發票\n          </Button>\n        </Link>\n      </div>\n\n      {/* 篩選區 */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"搜尋交易編號、發票號碼、買受人...\"\n                  value={searchTerm}\n                  onChange={e => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                />\n              </div>\n            </div>\n            <select\n              value={statusFilter}\n              onChange={e => setStatusFilter(e.target.value)}\n              className=\"px-4 py-2 border rounded-md\"\n            >\n              <option value=\"\">全部狀態</option>\n              <option value=\"pending\">待處理</option>\n              <option value=\"issued\">已開立</option>\n              <option value=\"voided\">已作廢</option>\n              <option value=\"allowance\">已折讓</option>\n              <option value=\"failed\">失敗</option>\n            </select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 錯誤訊息 */}\n      {error && (\n        <Card className=\"border-destructive\">\n          <CardContent className=\"pt-6\">\n            <p className=\"text-destructive\">{error}</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 發票列表 */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <p className=\"text-muted-foreground\">載入中...</p>\n            </CardContent>\n          </Card>\n        ) : filteredInvoices.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">尚無發票資料</p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredInvoices.map(invoice => (\n            <Card key={invoice.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"text-lg\">{invoice.transactionNo}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {invoice.invoice_number || '尚未取得發票號碼'}\n                    </p>\n                  </div>\n                  <div className=\"text-right space-y-2\">{getStatusBadge(invoice.status)}</div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">開立日期</p>\n                    <p className=\"font-medium\">{invoice.invoice_date}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">買受人</p>\n                    <p className=\"font-medium\">{invoice.buyerInfo.buyerName || '-'}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">金額</p>\n                    <p className=\"font-medium\">NT$ {invoice.total_amount.toLocaleString()}</p>\n                  </div>\n                  <div className=\"flex justify-end items-end\">\n                    <Link href={`/finance/travel-invoice/${invoice.id}`}>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        查看詳情\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n                {invoice.voidReason && (\n                  <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">作廢原因：</span>\n                      {invoice.voidReason}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/treasury/disbursement/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEnhancedTable' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DisbursementOrder' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Banknote' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2007,2010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2007,2010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'pendingRequests' conditional could make the dependencies of useMemo Hook (at line 119) change on every render. To fix this, wrap the initialization of 'pendingRequests' in its own useMemo() Hook.","line":90,"column":9,"nodeType":"VariableDeclarator","endLine":90,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'processingRequests' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":91,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSelectAll' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":131,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5356,5359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5356,5359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5366,5369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5366,5369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'pendingRequests'. Either exclude it or remove the dependency array.","line":223,"column":6,"nodeType":"ArrayExpression","endLine":223,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [selectedRequests]","fix":{"range":[6818,6853],"text":"[selectedRequests]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleRemoveFromDisbursement'. Either include it or remove the dependency array.","line":282,"column":6,"nodeType":"ArrayExpression","endLine":282,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [currentOrder?.status, handleRemoveFromDisbursement]","fix":{"range":[8356,8370],"text":"[currentOrder?.status, handleRemoveFromDisbursement]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10451,10454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10451,10454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nexport const dynamic = 'force-dynamic';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { EnhancedTable, TableColumn, useEnhancedTable } from '@/components/ui/enhanced-table';\n// TODO: usePaymentStore deprecated - import { usePaymentStore } from '@/stores';\nimport { DisbursementOrder, PaymentRequest } from '@/stores/types';\nimport { FileText, Calendar, Wallet, CheckCircle, Clock, Banknote, X, Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst statusLabels = {\n  pending: '已提交',\n  processing: '處理中',\n  confirmed: '已確認',\n  paid: '已付款'\n};\n\nconst statusColors = {\n  pending: 'bg-morandi-gold',\n  processing: 'bg-blue-500',\n  confirmed: 'bg-morandi-green',\n  paid: 'bg-morandi-primary'\n};\n\nconst disbursementStatusLabels = {\n  pending: '待確認',\n  confirmed: '已確認',\n  paid: '已付款'\n};\n\nconst disbursementStatusColors = {\n  pending: 'bg-morandi-gold',\n  confirmed: 'bg-morandi-green',\n  paid: 'bg-morandi-primary'\n};\n\nexport default function DisbursementPage() {\n  const searchParams = useSearchParams();\n\n  // TODO: 暫時使用空資料，等待 payment store 完整實作\n  const {\n    payment_requests = [],\n    disbursement_orders = [],\n    addToCurrentDisbursementOrder = () => {},\n    removeFromDisbursementOrder = () => {},\n    confirmDisbursementOrder = () => {},\n    getCurrentWeekDisbursementOrder = () => null,\n    getPendingPaymentRequests = () => [],\n    getProcessingPaymentRequests = () => [],\n    getNextThursday = () => new Date().toLocaleDateString('zh-TW'),\n    createDisbursementOrder = () => {},\n    generateDisbursementNumber = () => 'DISB-000001'\n  } = {} as any;\n\n  const [activeTab, setActiveTab] = useState<'pending' | 'current' | 'all'>('pending');\n  const [selectedRequests, setSelectedRequests] = useState<string[]>([]);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [selectedRequestsForNew, setSelectedRequestsForNew] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [dialogSearchTerm, setDialogSearchTerm] = useState('');\n\n  // 支援 URL 參數設定初始分頁\n  useEffect(() => {\n    const tab = searchParams.get('tab');\n    if (tab && ['pending', 'current', 'all'].includes(tab)) {\n      setActiveTab(tab as 'pending' | 'current' | 'all');\n    }\n  }, [searchParams]);\n\n  // 新增出納單\n  const handleCreateDisbursement = () => {\n    if (selectedRequestsForNew.length === 0) return;\n\n    createDisbursementOrder(selectedRequestsForNew);\n    setIsAddDialogOpen(false);\n    setSelectedRequestsForNew([]);\n    setDialogSearchTerm('');\n    setActiveTab('current'); // 切換到本週出帳查看新建的出納單\n  };\n\n  // 獲取數據 - 加上防禦性檢查，避免 deprecated store 導致崩潰\n  const pendingRequests = getPendingPaymentRequests ? getPendingPaymentRequests() : [];\n  const processingRequests = getProcessingPaymentRequests ? getProcessingPaymentRequests() : [];\n  const currentOrder = getCurrentWeekDisbursementOrder ? getCurrentWeekDisbursementOrder() : null;\n  const nextThursday = getNextThursday ? getNextThursday() : new Date();\n\n  // 新增出納單時的請款單勾選\n  const handleSelectRequestForNew = (requestId: string) => {\n    setSelectedRequestsForNew(prev =>\n      prev.includes(requestId)\n        ? prev.filter(id => id !== requestId)\n        : [...prev, requestId]\n    );\n  };\n\n  // 全選/取消全選（新增出納單用）\n  const handleSelectAllForNew = () => {\n    if (selectedRequestsForNew.length === pendingRequests.length) {\n      setSelectedRequestsForNew([]);\n    } else {\n      setSelectedRequestsForNew(pendingRequests.map((r: PaymentRequest) => r.id));\n    }\n  };\n\n  // 計算選中金額\n  const selectedAmount = useMemo(() => {\n    return selectedRequests.reduce((sum, requestId) => {\n      const request = pendingRequests.find((r: PaymentRequest) => r.id === requestId);\n      return sum + (request?.total_amount || 0);\n    }, 0);\n  }, [selectedRequests, pendingRequests]);\n\n  // 處理勾選\n  const handleSelectRequest = (requestId: string) => {\n    setSelectedRequests(prev =>\n      prev.includes(requestId)\n        ? prev.filter(id => id !== requestId)\n        : [...prev, requestId]\n    );\n  };\n\n  // 全選/取消全選\n  const handleSelectAll = () => {\n    if (selectedRequests.length === pendingRequests.length) {\n      setSelectedRequests([]);\n    } else {\n      setSelectedRequests(pendingRequests.map((r: PaymentRequest) => r.id));\n    }\n  };\n\n  // 加入出納單\n  const handleAddToDisbursement = () => {\n    if (selectedRequests.length === 0) return;\n\n    addToCurrentDisbursementOrder(selectedRequests);\n    setSelectedRequests([]);\n  };\n\n  // 從出納單移除\n  const handleRemoveFromDisbursement = (paymentRequestId: string) => {\n    if (!currentOrder) return;\n    removeFromDisbursementOrder(currentOrder.id, paymentRequestId);\n  };\n\n  // 確認出納單\n  const handleConfirmDisbursement = () => {\n    if (!currentOrder) return;\n    confirmDisbursementOrder(currentOrder.id, '1'); // TODO: 使用實際用戶ID\n  };\n\n  // 待出帳表格配置\n  const pendingColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'select',\n      label: '',\n      width: '50px',\n      render: (_value: any, row: any) => (\n        <input\n          type=\"checkbox\"\n          checked={selectedRequests.includes(row.id)}\n          onChange={() => handleSelectRequest(row.id)}\n          className=\"rounded border-morandi-secondary\"\n        />\n      )\n    },\n    {\n      key: 'request_number',\n      label: '請款單號',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium text-morandi-primary\">{value}</div>\n      )\n    },\n    {\n      key: 'code',\n      label: '團號',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium\">{value}</div>\n      )\n    },\n    {\n      key: 'tour_name',\n      label: '團體名稱',\n      sortable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-secondary truncate max-w-[200px]\">{value}</div>\n      )\n    },\n    {\n      key: 'total_amount',\n      label: '金額',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium text-right\">NT$ {value.toLocaleString()}</div>\n      )\n    },\n    {\n      key: 'request_date',\n      label: '請款日期',\n      sortable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-secondary\">{value}</div>\n      )\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      render: (value) => (\n        <Badge className={cn('text-white', statusColors[value as keyof typeof statusColors])}>\n          {statusLabels[value as keyof typeof statusLabels]}\n        </Badge>\n      )\n    }\n  ], [selectedRequests, pendingRequests]);\n\n  // 本週出帳表格配置\n  const currentOrderColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'request_number',\n      label: '請款單號',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium text-morandi-primary\">{value}</div>\n      )\n    },\n    {\n      key: 'code',\n      label: '團號',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium\">{value}</div>\n      )\n    },\n    {\n      key: 'tour_name',\n      label: '團體名稱',\n      sortable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-secondary truncate max-w-[200px]\">{value}</div>\n      )\n    },\n    {\n      key: 'total_amount',\n      label: '金額',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium text-right\">NT$ {value.toLocaleString()}</div>\n      )\n    },\n    {\n      key: 'request_date',\n      label: '請款日期',\n      sortable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-secondary\">{value}</div>\n      )\n    },\n    {\n      key: 'actions',\n      label: '操作',\n      width: '80px',\n      render: (_value, row) => (\n        <button\n          onClick={() => handleRemoveFromDisbursement(row.id)}\n          disabled={currentOrder?.status !== 'pending'}\n          className=\"p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          title=\"移除\"\n        >\n          <X size={14} />\n        </button>\n      )\n    }\n  ], [currentOrder]);\n\n  // 歷史記錄表格配置\n  const historyColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'order_number',\n      label: '出納單號',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium text-morandi-primary\">{value}</div>\n      )\n    },\n    {\n      key: 'disbursementDate',\n      label: '出帳日期',\n      sortable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-secondary\">{value}</div>\n      )\n    },\n    {\n      key: 'total_amount',\n      label: '總金額',\n      sortable: true,\n      render: (value) => (\n        <div className=\"font-medium text-right\">NT$ {value.toLocaleString()}</div>\n      )\n    },\n    {\n      key: 'paymentRequestIds',\n      label: '請款單數',\n      render: (value) => (\n        <div className=\"text-center\">{value.length} 筆</div>\n      )\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      render: (value) => (\n        <Badge className={cn('text-white', disbursementStatusColors[value as keyof typeof disbursementStatusColors])}>\n          {disbursementStatusLabels[value as keyof typeof disbursementStatusLabels]}\n        </Badge>\n      )\n    },\n    {\n      key: 'created_at',\n      label: '建立時間',\n      sortable: true,\n      render: (value) => (\n        <div className=\"text-sm text-morandi-secondary\">\n          {new Date(value).toLocaleDateString('zh-TW')}\n        </div>\n      )\n    }\n  ], []);\n\n  // 獲取本週出帳的請款單詳情\n  const currentOrderRequests = useMemo(() => {\n    if (!currentOrder) return [];\n    return currentOrder.payment_request_ids.map((id: string) =>\n      payment_requests.find((r: PaymentRequest) => r.id === id)\n    ).filter(Boolean) as PaymentRequest[];\n  }, [currentOrder, payment_requests]);\n\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"出納單管理\"\n        tabs={[\n          { value: 'pending', label: '待出帳', icon: FileText },\n          { value: 'current', label: '本週出帳', icon: Calendar },\n          { value: 'all', label: '出納單列表', icon: Wallet }\n        ]}\n        activeTab={activeTab}\n        onTabChange={(tab) => setActiveTab(tab as any)}\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增出納單\"\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋請款單號、團號或團名...\"\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        {/* 待出帳頁面 */}\n        {activeTab === 'pending' && (\n          <>\n            {/* 批次操作列 */}\n            {selectedRequests.length > 0 && (\n              <div className=\"bg-morandi-gold/10 border border-morandi-gold/20 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-morandi-secondary\">\n                    已選 {selectedRequests.length} 筆，總金額 NT$ {selectedAmount.toLocaleString()}\n                  </span>\n                  <Button\n                    onClick={handleAddToDisbursement}\n                    className=\"bg-morandi-gold hover:bg-morandi-gold/90\"\n                  >\n                    加入本週出帳\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* 表格 */}\n            {pendingRequests.length > 0 && (\n              <div className=\"mb-4 flex items-center justify-end\">\n                <div className=\"text-sm text-morandi-secondary\">\n                  {pendingRequests.length} 筆 • 下次出帳日：{nextThursday}\n                </div>\n              </div>\n            )}\n            <EnhancedTable\n              className=\"min-h-full\"\n              data={pendingRequests}\n              columns={pendingColumns}\n              searchableFields={['request_number', 'code', 'tour_name']}\n              initialPageSize={20}\n              searchTerm={searchTerm}\n            />\n          </>\n        )}\n\n        {/* 本週出帳頁面 */}\n        {activeTab === 'current' && (\n          <div className=\"space-y-4\">\n            {currentOrder ? (\n              <>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-morandi-primary\">\n                      {currentOrder.order_number}\n                    </h3>\n                    <p className=\"text-sm text-morandi-secondary\">\n                      出帳日期：{currentOrder.disbursement_date} • {currentOrder.payment_request_ids.length} 筆請款單\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-bold text-morandi-primary\">\n                        NT$ {currentOrder.total_amount.toLocaleString()}\n                      </p>\n                    </div>\n                    {currentOrder.status === 'pending' && (\n                      <Button\n                        onClick={handleConfirmDisbursement}\n                        className=\"bg-morandi-green hover:bg-morandi-green/90\"\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        確認出帳\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                <EnhancedTable\n                  className=\"min-h-full\"\n                  data={currentOrderRequests}\n                  columns={currentOrderColumns}\n                  searchableFields={['request_number', 'code', 'tour_name']}\n                  initialPageSize={20}\n                  searchTerm={searchTerm}\n                />\n              </>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Calendar className=\"h-16 w-16 text-morandi-secondary mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium text-morandi-primary mb-2\">\n                  本週尚無出帳計劃\n                </h3>\n                <p className=\"text-morandi-secondary mb-4\">\n                  請先到「待出帳」頁面勾選需要出帳的請款單\n                </p>\n                <Button\n                  onClick={() => setActiveTab('pending')}\n                  variant=\"outline\"\n                >\n                  前往選擇請款單\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 出納單列表頁面 */}\n        {activeTab === 'all' && (\n          <EnhancedTable\n            className=\"min-h-full\"\n            data={disbursement_orders}\n            columns={historyColumns}\n            searchableFields={['order_number']}\n            initialPageSize={20}\n            searchTerm={searchTerm}\n          />\n        )}\n      </div>\n\n      {/* 新增出納單對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogHeader className=\"pb-4\">\n            <DialogTitle className=\"text-xl\">新增出納單</DialogTitle>\n            <p className=\"text-sm text-morandi-secondary\">\n              {generateDisbursementNumber ? generateDisbursementNumber() : '載入中...'} • {nextThursday}\n            </p>\n          </DialogHeader>\n\n          <div className=\"flex-1 overflow-hidden flex flex-col\">\n            {pendingRequests.length === 0 ? (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <FileText className=\"h-16 w-16 mx-auto mb-4 text-morandi-secondary opacity-50\" />\n                  <p className=\"text-lg text-morandi-secondary\">目前沒有待出帳的請款單</p>\n                </div>\n              </div>\n            ) : (\n              <>\n                {/* 統計和搜尋 */}\n                <div className=\"flex items-center justify-between py-3 px-4 border-b bg-gray-50\">\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"font-medium\">共 {pendingRequests.length} 筆請款單</span>\n                    {selectedRequestsForNew.length > 0 && (\n                      <span className=\"text-sm text-morandi-secondary\">\n                        • 已選 {selectedRequestsForNew.length} 筆 •\n                        <span className=\"font-bold text-morandi-primary ml-1\">\n                          NT$ {selectedRequestsForNew.reduce((sum, id: string) => {\n                            const request = pendingRequests.find((r: PaymentRequest) => r.id === id);\n                            return sum + (request?.total_amount || 0);\n                          }, 0).toLocaleString()}\n                        </span>\n                      </span>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"搜尋請款單號、團號或團名...\"\n                      value={dialogSearchTerm}\n                      onChange={(e) => setDialogSearchTerm(e.target.value)}\n                      className=\"w-64 px-3 py-1 text-sm border border-border rounded-md focus:outline-none focus:ring-1 focus:ring-morandi-primary\"\n                    />\n                  </div>\n                </div>\n\n                {/* 表格 */}\n                <div className=\"flex-1 overflow-hidden\">\n                  <EnhancedTable\n                    data={pendingRequests}\n                    columns={[\n                      {\n                        key: 'select',\n                        label: (\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedRequestsForNew.length === pendingRequests.length && pendingRequests.length > 0}\n                            onChange={handleSelectAllForNew}\n                            className=\"rounded border-morandi-secondary\"\n                          />\n                        ),\n                        width: '50px',\n                        render: (_value, row) => (\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedRequestsForNew.includes(row.id)}\n                            onChange={() => handleSelectRequestForNew(row.id)}\n                            className=\"rounded border-morandi-secondary\"\n                          />\n                        )\n                      },\n                      {\n                        key: 'request_number',\n                        label: '請款單號',\n                        sortable: true,\n                        render: (value) => (\n                          <div className=\"font-medium text-morandi-primary\">{value}</div>\n                        )\n                      },\n                      {\n                        key: 'code',\n                        label: '團號',\n                        sortable: true,\n                        render: (value) => (\n                          <div className=\"font-medium\">{value}</div>\n                        )\n                      },\n                      {\n                        key: 'tour_name',\n                        label: '團名',\n                        sortable: true,\n                        render: (value) => (\n                          <div className=\"text-morandi-secondary\">{value}</div>\n                        )\n                      },\n                      {\n                        key: 'request_date',\n                        label: '請款日期',\n                        sortable: true,\n                        render: (value) => (\n                          <div className=\"text-sm text-morandi-secondary\">{value}</div>\n                        )\n                      },\n                      {\n                        key: 'total_amount',\n                        label: '金額',\n                        sortable: true,\n                        render: (value) => (\n                          <div className=\"font-bold text-morandi-primary text-right\">\n                            NT$ {value.toLocaleString()}\n                          </div>\n                        )\n                      }\n                    ]}\n                    searchableFields={['request_number', 'code', 'tour_name']}\n                    searchTerm={dialogSearchTerm}\n                    initialPageSize={15}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n\n          {/* 底部操作區 */}\n          <div className=\"border-t pt-4 mt-4\">\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsAddDialogOpen(false);\n                  setSelectedRequestsForNew([]);\n                  setDialogSearchTerm('');\n                }}\n                className=\"px-6\"\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleCreateDisbursement}\n                disabled={selectedRequestsForNew.length === 0}\n                className=\"bg-morandi-gold hover:bg-morandi-gold/90 px-6\"\n              >\n                建立出納單 ({selectedRequestsForNew.length} 筆)\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/finance/treasury/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/fix-database/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FixResult' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6717,6720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6717,6720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6722,6725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6722,6725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Wrench, AlertTriangle, CheckCircle, Info } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface FixResult {\n  success: boolean;\n  message: string;\n  details?: any;\n}\n\ninterface Issue {\n  id: string;\n  title: string;\n  description: string;\n  status: 'pending' | 'fixing' | 'success' | 'failed';\n  error?: string;\n}\n\nexport default function FixDatabasePage() {\n  const [isFixing, setIsFixing] = useState(false);\n  const [issues, setIssues] = useState<Issue[]>([\n    {\n      id: 'version',\n      title: '資料庫版本升級',\n      description: '檢查並升級到最新版本 (v2)',\n      status: 'pending'\n    },\n    {\n      id: 'regions',\n      title: '地區資料表',\n      description: '確保 regions 表存在並有正確結構',\n      status: 'pending'\n    },\n    {\n      id: 'duplicates',\n      title: '重複資料清理',\n      description: '移除 code 欄位的重複值',\n      status: 'pending'\n    },\n    {\n      id: 'validation',\n      title: '結構驗證',\n      description: '確認所有必要的表和索引都存在',\n      status: 'pending'\n    }\n  ]);\n  const [logs, setLogs] = useState<string[]>([]);\n\n  const addLog = (message: string) => {\n    setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);\n  };\n\n  const updateIssue = (id: string, updates: Partial<Issue>) => {\n    setIssues(prev => prev.map(issue => \n      issue.id === id ? { ...issue, ...updates } : issue\n    ));\n  };\n\n  const fixDatabase = async () => {\n    setIsFixing(true);\n    setLogs([]);\n    addLog('開始修復資料庫問題...');\n\n    try {\n      // 1. 版本升級\n      updateIssue('version', { status: 'fixing' });\n      addLog('檢查資料庫版本...');\n      await fixVersion();\n      updateIssue('version', { status: 'success' });\n      addLog('✅ 資料庫版本檢查完成');\n\n      // 2. 修復 regions 表\n      updateIssue('regions', { status: 'fixing' });\n      addLog('修復 regions 表...');\n      await fixRegionsTable();\n      updateIssue('regions', { status: 'success' });\n      addLog('✅ regions 表修復完成');\n\n      // 3. 清理重複資料\n      updateIssue('duplicates', { status: 'fixing' });\n      addLog('清理重複資料...');\n      const cleanedCount = await cleanupDuplicates();\n      updateIssue('duplicates', { status: 'success' });\n      addLog(`✅ 清理完成，移除 ${cleanedCount} 筆重複資料`);\n\n      // 4. 驗證結構\n      updateIssue('validation', { status: 'fixing' });\n      addLog('驗證資料庫結構...');\n      await validateStructure();\n      updateIssue('validation', { status: 'success' });\n      addLog('✅ 資料庫結構正常');\n\n      addLog('🎉 所有問題已修復！');\n    } catch (error) {\n      addLog(`❌ 修復失敗: ${error}`);\n      console.error('修復失敗:', error);\n    } finally {\n      setIsFixing(false);\n    }\n  };\n\n  const fixVersion = async (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      const DB_NAME = 'VenturoOfflineDB';\n      const CURRENT_VERSION = 2;\n      \n      const request = indexedDB.open(DB_NAME, CURRENT_VERSION);\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        // 如果 regions 表不存在，建立它\n        if (!db.objectStoreNames.contains('regions')) {\n          const regionsStore = db.createObjectStore('regions', {\n            keyPath: 'id',\n            autoIncrement: false,\n          });\n\n          // 建立索引\n          regionsStore.createIndex('code', 'code', { unique: true });\n          regionsStore.createIndex('name', 'name', { unique: false });\n          regionsStore.createIndex('status', 'status', { unique: false });\n          regionsStore.createIndex('is_active', 'is_active', { unique: false });\n          regionsStore.createIndex('created_at', 'created_at', { unique: false });\n          regionsStore.createIndex('updated_at', 'updated_at', { unique: false });\n          regionsStore.createIndex('sync_status', 'sync_status', { unique: false });\n        }\n      };\n\n      request.onsuccess = () => {\n        request.result.close();\n        resolve();\n      };\n\n      request.onerror = () => {\n        reject(new Error(`版本升級失敗: ${request.error?.message}`));\n      };\n    });\n  };\n\n  const fixRegionsTable = async (): Promise<void> => {\n    // 清除 localStorage 標記，允許重新初始化\n    localStorage.removeItem('regions_initialized');\n    \n    // 清空 regions 表的現有資料\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('VenturoOfflineDB');\n      \n      request.onsuccess = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        if (db.objectStoreNames.contains('regions')) {\n          const transaction = db.transaction(['regions'], 'readwrite');\n          const objectStore = transaction.objectStore('regions');\n          const clearRequest = objectStore.clear();\n\n          clearRequest.onsuccess = () => {\n            db.close();\n            resolve();\n          };\n\n          clearRequest.onerror = () => {\n            db.close();\n            reject(new Error('清空 regions 表失敗'));\n          };\n        } else {\n          db.close();\n          resolve();\n        }\n      };\n\n      request.onerror = () => {\n        reject(new Error('無法開啟資料庫'));\n      };\n    });\n  };\n\n  const cleanupDuplicates = async (): Promise<number> => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('VenturoOfflineDB');\n      let totalCleaned = 0;\n\n      request.onsuccess = async (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        const tablesToCheck = [\n          { table: 'regions', uniqueField: 'code' },\n          { table: 'tours', uniqueField: 'code' },\n          { table: 'orders', uniqueField: 'code' },\n          { table: 'customers', uniqueField: 'code' },\n        ];\n\n        for (const { table, uniqueField } of tablesToCheck) {\n          if (!db.objectStoreNames.contains(table)) continue;\n\n          try {\n            const cleaned = await cleanTableDuplicates(db, table, uniqueField);\n            totalCleaned += cleaned;\n            if (cleaned > 0) {\n              addLog(`  清理 ${table}: 移除 ${cleaned} 筆重複資料`);\n            }\n          } catch (error) {\n            console.error(`${table} 清理失敗:`, error);\n          }\n        }\n\n        db.close();\n        resolve(totalCleaned);\n      };\n\n      request.onerror = () => {\n        reject(new Error('無法開啟資料庫'));\n      };\n    });\n  };\n\n  const cleanTableDuplicates = (\n    db: IDBDatabase, \n    tableName: string, \n    uniqueField: string\n  ): Promise<number> => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([tableName], 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const getAllRequest = objectStore.getAll();\n\n      getAllRequest.onsuccess = () => {\n        const records = getAllRequest.result;\n        const seen = new Map<any, any>();\n        const duplicates: string[] = [];\n\n        // 找出重複資料\n        for (const record of records) {\n          const key = record[uniqueField];\n          if (key && seen.has(key)) {\n            const existing = seen.get(key);\n            const existingTime = new Date(existing.updated_at || existing.created_at || 0).getTime();\n            const currentTime = new Date(record.updated_at || record.created_at || 0).getTime();\n            \n            if (currentTime > existingTime) {\n              duplicates.push(existing.id);\n              seen.set(key, record);\n            } else {\n              duplicates.push(record.id);\n            }\n          } else if (key) {\n            seen.set(key, record);\n          }\n        }\n\n        // 刪除重複資料\n        if (duplicates.length > 0) {\n          for (const id of duplicates) {\n            objectStore.delete(id);\n          }\n        }\n\n        transaction.oncomplete = () => {\n          resolve(duplicates.length);\n        };\n\n        transaction.onerror = () => {\n          reject(new Error('刪除重複資料失敗'));\n        };\n      };\n\n      getAllRequest.onerror = () => {\n        reject(new Error(`讀取 ${tableName} 失敗`));\n      };\n    });\n  };\n\n  const validateStructure = async (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('VenturoOfflineDB');\n\n      request.onsuccess = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        const requiredTables = ['regions', 'tours', 'orders', 'customers', 'employees'];\n        const missingTables: string[] = [];\n\n        for (const table of requiredTables) {\n          if (!db.objectStoreNames.contains(table)) {\n            missingTables.push(table);\n          }\n        }\n\n        db.close();\n\n        if (missingTables.length > 0) {\n          reject(new Error(`缺少資料表: ${missingTables.join(', ')}`));\n        } else {\n          resolve();\n        }\n      };\n\n      request.onerror = () => {\n        reject(new Error('無法開啟資料庫'));\n      };\n    });\n  };\n\n  const clearDatabase = async () => {\n    if (!confirm('確定要完全重置資料庫嗎？所有資料將被刪除！')) {\n      return;\n    }\n\n    try {\n      addLog('正在刪除資料庫...');\n      await indexedDB.deleteDatabase('VenturoOfflineDB');\n      localStorage.clear();\n      addLog('✅ 資料庫已完全重置');\n      addLog('請重新整理頁面');\n      \n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (error) {\n      addLog(`❌ 重置失敗: ${error}`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold flex items-center gap-3 mb-2\">\n            <Wrench className=\"text-morandi-gold\" />\n            資料庫問題修復工具\n          </h1>\n          <p className=\"text-morandi-secondary\">\n            自動檢測並修復 IndexedDB 相關問題\n          </p>\n        </div>\n\n        {/* Issues List */}\n        <div className=\"bg-card border border-border rounded-lg p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n            <AlertTriangle className=\"text-yellow-500\" size={20} />\n            檢測到的問題\n          </h2>\n          <div className=\"space-y-3\">\n            {issues.map(issue => (\n              <div \n                key={issue.id}\n                className={cn(\n                  \"flex items-center justify-between p-3 rounded-lg border\",\n                  issue.status === 'success' && \"bg-green-50 border-green-200 dark:bg-green-900/20\",\n                  issue.status === 'failed' && \"bg-red-50 border-red-200 dark:bg-red-900/20\",\n                  issue.status === 'fixing' && \"bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20\",\n                  issue.status === 'pending' && \"bg-gray-50 border-gray-200 dark:bg-gray-800\"\n                )}\n              >\n                <div>\n                  <div className=\"font-medium\">{issue.title}</div>\n                  <div className=\"text-sm text-morandi-secondary\">{issue.description}</div>\n                  {issue.error && (\n                    <div className=\"text-sm text-red-600 mt-1\">{issue.error}</div>\n                  )}\n                </div>\n                <div>\n                  {issue.status === 'pending' && <Info className=\"text-gray-400\" size={20} />}\n                  {issue.status === 'fixing' && (\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-2 border-yellow-500 border-t-transparent\"></div>\n                  )}\n                  {issue.status === 'success' && <CheckCircle className=\"text-green-500\" size={20} />}\n                  {issue.status === 'failed' && <AlertTriangle className=\"text-red-500\" size={20} />}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-3 mb-6\">\n          <Button \n            onClick={fixDatabase} \n            disabled={isFixing}\n            className=\"flex-1\"\n          >\n            {isFixing ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                修復中...\n              </>\n            ) : (\n              <>\n                <Wrench className=\"mr-2\" size={16} />\n                開始修復\n              </>\n            )}\n          </Button>\n          <Button \n            variant=\"destructive\"\n            onClick={clearDatabase}\n            disabled={isFixing}\n          >\n            完全重置資料庫\n          </Button>\n        </div>\n\n        {/* Logs */}\n        {logs.length > 0 && (\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-3\">執行記錄</h3>\n            <div className=\"font-mono text-sm space-y-1 max-h-96 overflow-auto\">\n              {logs.map((log, index) => (\n                <div \n                  key={index}\n                  className={cn(\n                    \"text-gray-600 dark:text-gray-400\",\n                    log.includes('✅') && \"text-green-600 dark:text-green-400\",\n                    log.includes('❌') && \"text-red-600 dark:text-red-400\",\n                    log.includes('🎉') && \"text-blue-600 dark:text-blue-400 font-semibold\"\n                  )}\n                >\n                  {log}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/hr/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Briefcase' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreVertical' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":95},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchAll' and 'users.length'. Either include them or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAll, users.length]","fix":{"range":[1474,1476],"text":"[fetchAll, users.length]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2889,2892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2889,2892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3483,3486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3483,3486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3848,3851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3848,3851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7682,7685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7682,7685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useUserStore, userStoreHelpers } from '@/stores/user-store';\nimport { Employee } from '@/stores/types';\nimport { EmployeeExpandedView } from '@/components/hr/employee-expanded-view';\nimport { AddEmployeeForm } from '@/components/hr/add-employee-form';\nimport { User, Building, Phone, Mail, UserCheck, UserX, Clock, Briefcase, Trash2, MoreVertical } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst statusFilters = [\n  { value: 'all', label: '全部' },\n  { value: 'active', label: '在職' },\n  { value: 'probation', label: '試用期' },\n  { value: 'leave', label: '請假' },\n  { value: 'terminated', label: '離職' }\n];\n\nexport default function HRPage() {\n  const { items: users, fetchAll, loading: isLoading, update: updateUser, delete: deleteUser } = useUserStore();\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [expandedEmployee, setExpandedEmployee] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  // 初始化時載入員工資料（只在沒有資料時載入）\n  useEffect(() => {\n    if (users.length === 0) {\n      fetchAll();\n    }\n  }, []);\n\n  const filteredEmployees = useMemo(() => {\n    if (statusFilter === 'all') {\n      return searchTerm ? userStoreHelpers.searchUsers(searchTerm) : users;\n    } else {\n      return userStoreHelpers.getUsersByStatus(statusFilter as Employee['status']).filter((emp: Employee) =>\n        !searchTerm || userStoreHelpers.searchUsers(searchTerm).includes(emp)\n      );\n    }\n  }, [users, statusFilter, searchTerm]);\n\n  const getStatusColor = (status: Employee['status']) => {\n    const colorMap = {\n      active: 'text-green-600',\n      probation: 'text-yellow-600',\n      leave: 'text-blue-600',\n      terminated: 'text-morandi-red'\n    };\n    return colorMap[status];\n  };\n\n  const getStatusLabel = (status: Employee['status']) => {\n    const statusMap = {\n      active: '在職',\n      probation: '試用期',\n      leave: '請假',\n      terminated: '離職'\n    };\n    return statusMap[status];\n  };\n\n  const getStatusIcon = (status: Employee['status']) => {\n    const iconMap = {\n      active: UserCheck,\n      probation: Clock,\n      leave: UserX,\n      terminated: UserX\n    };\n    return iconMap[status];\n  };\n\n  const handleEmployeeClick = (employee: Employee) => {\n    setExpandedEmployee(employee.id);\n  };\n\n  const handleTerminateEmployee = async (employee: Employee, e?: React.MouseEvent) => {\n    if (e) {\n      e.stopPropagation();\n    }\n\n    const confirmMessage = `⚠️ 確定要將員工「${employee.display_name || (employee as any).chinese_name || '未命名員工'}」辦理離職嗎？\\n\\n離職後將無法登入系統，但歷史記錄會保留。`;\n\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      await updateUser(employee.id, { status: 'terminated' });\n      if (expandedEmployee === employee.id) {\n        setExpandedEmployee(null);\n      }\n    } catch (err) {\n      console.error('辦理離職失敗:', err);\n      alert('操作失敗，請稍後再試');\n    }\n  };\n\n  const handleDeleteEmployee = async (employee: Employee, e?: React.MouseEvent) => {\n    if (e) {\n      e.stopPropagation();\n    }\n\n    const confirmMessage = `⚠️⚠️⚠️ 確定要刪除員工「${employee.display_name || (employee as any).chinese_name || '未命名員工'}」嗎？\\n\\n此操作會：\\n- 永久刪除員工所有資料\\n- 移除所有歷史記錄\\n- 無法復原\\n\\n建議使用「辦理離職」功能來保留歷史記錄。\\n\\n真的要刪除嗎？`;\n\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      await deleteUser(employee.id);\n      if (expandedEmployee === employee.id) {\n        setExpandedEmployee(null);\n      }\n      alert(`✅ 員工「${employee.display_name || (employee as any).chinese_name || '未命名員工'}」已成功刪除`);\n    } catch (err) {\n      console.error('刪除員工失敗:', err);\n      const errorMessage = err instanceof Error ? err.message : '未知錯誤';\n      alert(`❌ 刪除失敗：${errorMessage}`);\n    }\n  };\n\n  return (\n    <>\n      <ResponsiveHeader\n        title=\"人資管理\"\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋員工...\"\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增員工\"\n      >\n        {/* 狀態篩選 */}\n        <div className=\"flex gap-2\">\n          {statusFilters.map((filter) => (\n            <button\n              key={filter.value}\n              onClick={() => setStatusFilter(filter.value)}\n              className={cn(\n                'px-3 py-1 rounded-lg text-sm font-medium transition-colors',\n                statusFilter === filter.value\n                  ? 'bg-morandi-gold text-white'\n                  : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/30'\n              )}\n            >\n              {filter.label}\n            </button>\n          ))}\n        </div>\n      </ResponsiveHeader>\n\n      {/* 員工卡片網格 */}\n      <div className=\"mt-6\">\n        {/* 載入中狀態 */}\n        {isLoading && (\n          <div className=\"text-center py-12 text-morandi-muted\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-morandi-gold border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p>載入員工資料中...</p>\n          </div>\n        )}\n\n        {/* 員工卡片 */}\n        {!isLoading && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredEmployees.map((employee) => {\n            const StatusIcon = getStatusIcon(employee.status);\n            return (\n              <div\n                key={employee.id}\n                onClick={() => handleEmployeeClick(employee)}\n                className=\"bg-white rounded-lg border border-border p-4 hover:shadow-md transition-shadow cursor-pointer relative group\"\n              >\n                {/* 右上角操作按鈕 */}\n                <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n                  {employee.status !== 'terminated' && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => handleTerminateEmployee(employee, e)}\n                      className=\"h-7 w-7 p-0 text-orange-600 hover:bg-orange-100\"\n                      title=\"辦理離職\"\n                    >\n                      <UserX size={14} />\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => handleDeleteEmployee(employee, e)}\n                    className=\"h-7 w-7 p-0 text-morandi-red hover:bg-morandi-red/10\"\n                    title=\"刪除（不建議）\"\n                  >\n                    <Trash2 size={14} />\n                  </Button>\n                </div>\n\n                {/* 員工頭像與基本資訊 */}\n                <div className=\"flex flex-col items-center mb-4\">\n                  <div className=\"w-16 h-16 rounded-full bg-morandi-container/30 flex items-center justify-center mb-2\">\n                    {employee.avatar ? (\n                      <img\n                        src={employee.avatar}\n                        alt={employee.display_name}\n                        className=\"w-16 h-16 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <User size={32} className=\"text-morandi-secondary\" />\n                    )}\n                  </div>\n                  <h3 className=\"font-semibold text-morandi-primary text-center\">\n                    {employee.display_name || (employee as any).chinese_name || '未命名員工'}\n                  </h3>\n                  <p className=\"text-sm text-morandi-muted\">\n                    {employee.employee_number}\n                  </p>\n                </div>\n\n                {/* 聯絡資訊 */}\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Phone size={14} className=\"text-morandi-secondary\" />\n                    <span className=\"text-morandi-primary\">{employee.personal_info?.phone || '未提供'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Mail size={14} className=\"text-morandi-secondary\" />\n                    <span className=\"text-morandi-primary truncate\">{employee.personal_info?.email || '未提供'}</span>\n                  </div>\n                </div>\n\n                {/* 狀態標示 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className={cn('flex items-center gap-1 text-sm font-medium', getStatusColor(employee.status))}>\n                    <StatusIcon size={14} />\n                    <span>{getStatusLabel(employee.status)}</span>\n                  </div>\n\n                  {/* 權限數量 */}\n                  <div className=\"text-xs text-morandi-muted\">\n                    {employee.permissions?.length || 0} 項權限\n                  </div>\n                </div>\n\n                {/* 入職日期 */}\n                <div className=\"mt-2 pt-2 border-t border-border/50\">\n                  <p className=\"text-xs text-morandi-muted\">\n                    入職：{employee.job_info?.hire_date ? new Date(employee.job_info.hire_date).toLocaleDateString() : '未設定'}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n          </div>\n        )}\n\n        {/* 無資料狀態 */}\n        {!isLoading && filteredEmployees.length === 0 && (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <User size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p className=\"text-lg font-medium text-morandi-primary mb-2\">\n              {statusFilter === 'all' ? '還沒有任何員工' : `沒有找到「${statusFilters.find(f => f.value === statusFilter)?.label}」狀態的員工`}\n            </p>\n            <p className=\"text-sm text-morandi-secondary\">\n              {statusFilter === 'all' ? '點擊右上角「新增員工」開始建立' : '嘗試調整篩選條件或新增員工'}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* 員工詳細資料展開視圖 */}\n      {expandedEmployee && (\n        <EmployeeExpandedView\n          employee_id={expandedEmployee}\n          onClose={() => setExpandedEmployee(null)}\n        />\n      )}\n\n      {/* 新增員工對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>新增員工</DialogTitle>\n          </DialogHeader>\n          <AddEmployeeForm\n            onSubmit={() => setIsAddDialogOpen(false)}\n            onCancel={() => setIsAddDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/itinerary/[slug]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[598,601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[598,601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1120,1123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1120,1123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1872,1875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1872,1875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { ResponsiveHeader } from \"@/components/layout/responsive-header\";\nimport { TourForm } from \"@/components/editor/TourForm\";\nimport { TourPreview } from \"@/components/editor/TourPreview\";\nimport { PublishButton } from \"@/components/editor/PublishButton\";\nimport { useItineraryStore } from \"@/stores\";\nimport {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n} from \"@tabler/icons-react\";\n\n// Icon mapping\nconst iconMap: any = {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n};\n\nexport default function EditItineraryPage() {\n  const params = useParams();\n  const router = useRouter();\n  const slug = params.slug as string;\n  const { fetchById } = useItineraryStore();\n\n  const [viewMode, setViewMode] = useState<'desktop' | 'mobile'>('desktop');\n  const [scale, setScale] = useState(1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [itineraryData, setItineraryData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  // 載入行程資料\n  useEffect(() => {\n    const loadItinerary = async () => {\n      try {\n        const itinerary = await fetchById(slug);\n        if (itinerary) {\n          setItineraryData(itinerary);\n        } else {\n          alert('找不到此行程');\n          router.push('/itinerary');\n        }\n      } catch (error) {\n        console.error('載入行程失敗:', error);\n        alert('載入行程失敗');\n        router.push('/itinerary');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadItinerary();\n  }, [slug, fetchById, router]);\n\n  // Convert icon strings to components for preview\n  const processedData = itineraryData ? {\n    ...itineraryData,\n    features: itineraryData.features?.map((f: any) => ({\n      ...f,\n      iconComponent: iconMap[f.icon] || IconSparkles,\n    })) || [],\n  } : null;\n\n  // 計算縮放比例\n  useEffect(() => {\n    const calculateScale = () => {\n      if (!containerRef.current) return;\n\n      const container = containerRef.current;\n      const containerWidth = container.clientWidth;\n      const containerHeight = container.clientHeight;\n\n      // 目標尺寸\n      const targetWidth = viewMode === 'mobile' ? 400 : 1200; // 手機含框架\n      const targetHeight = viewMode === 'mobile' ? 850 : 800;\n\n      // 計算縮放比例（寬高都要考慮）\n      const scaleX = containerWidth / targetWidth;\n      const scaleY = containerHeight / targetHeight;\n\n      // 取較小值確保完全顯示\n      const finalScale = Math.min(scaleX, scaleY, 1);\n\n      setScale(finalScale);\n    };\n\n    calculateScale();\n    window.addEventListener('resize', calculateScale);\n    return () => window.removeEventListener('resize', calculateScale);\n  }, [viewMode]);\n\n  // 載入中狀態\n  if (loading || !itineraryData) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-lg text-morandi-secondary\">載入中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* ========== 頁面頂部區域 ========== */}\n      <ResponsiveHeader\n        title=\"編輯行程\"\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '行程管理', href: '/itinerary' },\n          { label: '編輯行程', href: '#' }\n        ]}\n        showBackButton={true}\n        onBack={() => router.push('/itinerary')}\n        actions={<PublishButton data={itineraryData} />}\n      />\n\n      {/* ========== 主要內容區域 ========== */}\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full flex\">\n          {/* 左側：輸入表單 */}\n          <div className=\"w-1/2 bg-white border-r border-border flex flex-col\">\n            <div className=\"h-14 bg-morandi-gold text-white px-6 flex items-center border-b border-border\">\n              <h2 className=\"text-lg font-semibold\">編輯表單</h2>\n            </div>\n            <div className=\"flex-1 overflow-y-auto\">\n              <TourForm data={itineraryData} onChange={setItineraryData} />\n            </div>\n          </div>\n\n          {/* 右側：即時預覽 */}\n          <div className=\"w-1/2 bg-gray-100 flex flex-col\">\n            {/* 標題列 */}\n            <div className=\"h-14 bg-white border-b px-6 flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <h2 className=\"text-lg font-semibold text-morandi-primary\">即時預覽</h2>\n                <div className=\"flex gap-2 bg-morandi-container/30 rounded-lg p-1\">\n                  <button\n                    onClick={() => setViewMode('desktop')}\n                    className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                      viewMode === 'desktop'\n                        ? 'bg-morandi-gold text-white'\n                        : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/50'\n                    }`}\n                  >\n                    💻 電腦\n                  </button>\n                  <button\n                    onClick={() => setViewMode('mobile')}\n                    className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                      viewMode === 'mobile'\n                        ? 'bg-morandi-gold text-white'\n                        : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/50'\n                    }`}\n                  >\n                    📱 手機\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* 預覽容器 */}\n            <div className=\"flex-1 overflow-hidden p-8\" ref={containerRef}>\n              <div className=\"w-full h-full flex items-center justify-center\">\n                {/* 縮放容器 */}\n                <div\n                  style={{\n                    transform: `scale(${scale})`,\n                    transformOrigin: 'center center'\n                  }}\n                >\n                  {viewMode === 'mobile' ? (\n                    // 手機框架和內容\n                    <div className=\"relative\">\n                      <div className=\"bg-black rounded-[40px] p-2 shadow-2xl\">\n                        <div className=\"bg-black rounded-[32px] p-2\">\n                          <div\n                            className=\"bg-white rounded-[28px] overflow-hidden relative\"\n                            style={{ width: '375px', height: '812px' }}\n                          >\n                            {/* iPhone 動態島 */}\n                            <div className=\"absolute top-0 left-1/2 -translate-x-1/2 z-50\">\n                              <div className=\"bg-black rounded-full w-[120px] h-[30px] mt-2\" />\n                            </div>\n\n                            <div className=\"w-full h-full overflow-y-auto\">\n                              <TourPreview data={processedData} viewMode=\"mobile\" />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    // 電腦版\n                    <div\n                      className=\"bg-white shadow-2xl rounded-lg overflow-hidden\"\n                      style={{\n                        width: '1200px',\n                        height: '800px'\n                      }}\n                    >\n                      <div className=\"w-full h-full overflow-y-auto\">\n                        <TourPreview data={processedData} viewMode=\"desktop\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/itinerary/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { ResponsiveHeader } from \"@/components/layout/responsive-header\";\nimport { TourForm } from \"@/components/editor/TourForm\";\nimport { TourPreview } from \"@/components/editor/TourPreview\";\nimport { PublishButton } from \"@/components/editor/PublishButton\";\nimport {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n} from \"@tabler/icons-react\";\n\n// Icon mapping\nconst iconMap: any = {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n};\n\nexport default function NewItineraryPage() {\n  const router = useRouter();\n  const [viewMode, setViewMode] = useState<'desktop' | 'mobile'>('desktop');\n  const [scale, setScale] = useState(1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mobileContentRef = useRef<HTMLDivElement>(null);\n  const [tourData, setTourData] = useState({\n    // 封面資訊\n    tagline: \"Corner Travel 2025\",\n    title: \"漫遊福岡\",\n    subtitle: \"半自由行\",\n    description: \"2日市區自由活動 · 保證入住溫泉飯店 · 柳川遊船 · 阿蘇火山\",\n    departureDate: \"2025/10/21\",\n    tourCode: \"25JFO21CIG\",\n    coverImage: \"https://images.unsplash.com/photo-1564349683136-77e08dba1ef7?w=1200&q=75&auto=format&fit=crop\",\n    country: \"日本\",\n    city: \"福岡\",\n    status: \"草稿\",\n\n    // 航班資訊\n    outboundFlight: {\n      airline: \"中華航空\",\n      flightNumber: \"CI110\",\n      departureAirport: \"TPE\",\n      departureTime: \"06:50\",\n      departureDate: \"10/21\",\n      arrivalAirport: \"FUK\",\n      arrivalTime: \"09:55\",\n      duration: \"2小時5分\",\n    },\n    returnFlight: {\n      airline: \"中華航空\",\n      flightNumber: \"CI111\",\n      departureAirport: \"FUK\",\n      departureTime: \"11:00\",\n      departureDate: \"10/25\",\n      arrivalAirport: \"TPE\",\n      arrivalTime: \"12:30\",\n      duration: \"2小時30分\",\n    },\n\n    // 行程特色\n    features: [\n      {\n        icon: \"IconBuilding\",\n        title: \"溫泉飯店體驗\",\n        description: \"保證入住阿蘇溫泉飯店，享受日式溫泉文化\",\n      },\n      {\n        icon: \"IconToolsKitchen2\",\n        title: \"美食饗宴\",\n        description: \"博多拉麵、柳川鰻魚飯、長腳蟹自助餐\",\n      },\n      {\n        icon: \"IconSparkles\",\n        title: \"精選體驗\",\n        description: \"柳川遊船、阿蘇火山、太宰府天滿宮\",\n      },\n      {\n        icon: \"IconCalendar\",\n        title: \"自由活動時間\",\n        description: \"2日福岡市區自由探索，彈性安排個人行程\",\n      },\n      {\n        icon: \"IconPlane\",\n        title: \"直飛航班\",\n        description: \"中華航空桃園直飛福岡，省時便利\",\n      },\n      {\n        icon: \"IconMapPin\",\n        title: \"專業領隊\",\n        description: \"經驗豐富的領隊全程陪同，貼心服務\",\n      },\n    ],\n\n    // 精選景點\n    focusCards: [\n      {\n        title: \"由布院溫泉街\",\n        src: \"https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=400&q=75&auto=format\",\n      },\n      {\n        title: \"阿蘇火山口\",\n        src: \"https://images.unsplash.com/photo-1578469550956-0e16b69c6a3d?w=400&q=75&auto=format\",\n      },\n      {\n        title: \"柳川水鄉\",\n        src: \"https://images.unsplash.com/photo-1528360983277-13d401cdc186?w=400&q=75&auto=format\",\n      },\n      {\n        title: \"太宰府神社\",\n        src: \"https://images.unsplash.com/photo-1624253321033-c4eb104e7462?w=400&q=75&auto=format\",\n      },\n    ],\n\n    // 領隊資訊\n    leader: {\n      name: \"鍾惠如 小姐\",\n      domesticPhone: \"+886 0928402897\",\n      overseasPhone: \"+81 08074371189\",\n    },\n\n    // 集合資訊\n    meetingInfo: {\n      time: \"2025/10/21 04:50\",\n      location: \"桃園機場華航第二航廈 7號櫃台\",\n    },\n\n    // 行程副標題\n    itinerarySubtitle: \"5天4夜精彩旅程規劃\",\n\n    // 逐日行程\n    dailyItinerary: [\n      {\n        dayLabel: \"Day 1\",\n        date: \"10/21 (二)\",\n        title: \"台北 ✈ 福岡空港 → 由布院 · 金麟湖 → 阿蘇溫泉\",\n        highlight: \"✨ 特別安排：由布院 · 金麟湖 ～ 日本 OL 人氣 NO.1 散策地\",\n        description: \"集合於台灣桃園國際機場，由專人辦理出境手續，搭乘豪華客機，飛往日本九州玄關──福岡。\",\n        activities: [],\n        recommendations: [],\n        meals: {\n          breakfast: \"溫暖的家\",\n          lunch: \"博多拉麵 (¥1000)\",\n          dinner: \"長腳蟹自助餐\",\n        },\n        accommodation: \"ASO RESORT GRANDVRIO HOTEL\",\n      },\n      {\n        dayLabel: \"Day 2\",\n        date: \"10/22 (三)\",\n        title: \"阿蘇火山 → 柳川遊船 → 旅人列車 → 太宰府天滿宮\",\n        highlight: \"\",\n        description: \"\",\n        activities: [\n          { icon: \"🌋\", title: \"阿蘇火山\", description: \"近距離觀賞活火山壯麗景觀\" },\n          { icon: \"🚣\", title: \"柳川遊船\", description: \"乘船遊覽水鄉風情\" },\n          { icon: \"🚃\", title: \"旅人列車\", description: \"體驗日式風情列車\" },\n          { icon: \"⛩️\", title: \"太宰府天滿宮\", description: \"參拜學問之神\" },\n        ],\n        recommendations: [],\n        meals: {\n          breakfast: \"飯店內早餐\",\n          lunch: \"柳川鰻魚飯 (¥2400)\",\n          dinner: \"涮涮鍋吃到飽\",\n        },\n        accommodation: \"QUINTESSA HOTEL FUKUOKA TENJIN MINAMI\",\n      },\n      {\n        dayLabel: \"Day 3-4\",\n        date: \"10/23-10/24\",\n        title: \"福岡全日自由活動\",\n        highlight: \"\",\n        description: \"\",\n        activities: [],\n        recommendations: [\n          \"天神商圈購物\",\n          \"福岡塔\",\n          \"雅虎巨蛋\",\n          \"鳥栖 PREMIUM OUTLET\",\n          \"門司港懷舊街道\",\n        ],\n        meals: {\n          breakfast: \"飯店內早餐\",\n          lunch: \"敬請自理\",\n          dinner: \"敬請自理\",\n        },\n        accommodation: \"QUINTESSA HOTEL FUKUOKA TENJIN MINAMI\",\n      },\n      {\n        dayLabel: \"Day 5\",\n        date: \"10/25 (六)\",\n        title: \"福岡空港 ✈ 台北\",\n        highlight: \"\",\n        description: \"享受一個沒有 MORNING CALL 的早晨，悠閒的飯店用完早餐後，接著前往福岡空港，搭乘豪華客機返回台北，結束了愉快的九州之旅。\",\n        activities: [],\n        recommendations: [],\n        meals: {\n          breakfast: \"飯店內早餐\",\n          lunch: \"機上餐食\",\n          dinner: \"溫暖的家\",\n        },\n        accommodation: \"\",\n      },\n    ],\n  });\n\n  // Convert icon strings to components for preview\n  const processedData = {\n    ...tourData,\n    features: tourData.features.map((f) => ({\n      ...f,\n      iconComponent: iconMap[f.icon] || IconSparkles,\n    })),\n  };\n\n  // 計算縮放比例\n  useEffect(() => {\n    const calculateScale = () => {\n      if (!containerRef.current) return;\n\n      const container = containerRef.current;\n      const containerWidth = container.clientWidth;\n      const containerHeight = container.clientHeight;\n\n      // 調整目標尺寸（含手機框架）\n      const targetWidth = viewMode === 'mobile' ? 410 : 1200;  // 390 + 邊框\n      const targetHeight = viewMode === 'mobile' ? 880 : 800;  // 844 + 邊框\n\n      // 計算縮放，留一些邊距\n      const scaleX = (containerWidth - 40) / targetWidth;\n      const scaleY = (containerHeight - 40) / targetHeight;\n\n      const finalScale = Math.min(scaleX, scaleY, 0.9); // 最大 0.9 避免太大\n\n      setScale(finalScale);\n    };\n\n    calculateScale();\n    window.addEventListener('resize', calculateScale);\n    return () => window.removeEventListener('resize', calculateScale);\n  }, [viewMode]);\n\n  // 切換到手機模式時，滾動到標題區域\n  useEffect(() => {\n    if (viewMode === 'mobile' && mobileContentRef.current) {\n      // 延遲執行確保內容已渲染\n      setTimeout(() => {\n        if (mobileContentRef.current) {\n          // 滾動到讓「探索」按鈕剛好在底部可見\n          const heroHeight = window.innerHeight * 0.7; // 預估 hero 區域高度\n          mobileContentRef.current.scrollTop = heroHeight - 400;\n        }\n      }, 100);\n    }\n  }, [viewMode]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* ========== 頁面頂部區域 ========== */}\n      <ResponsiveHeader\n        title=\"新增行程\"\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '行程管理', href: '/itinerary' },\n          { label: '新增行程', href: '#' }\n        ]}\n        showBackButton={true}\n        onBack={() => router.push('/itinerary')}\n        actions={<PublishButton data={tourData} />}\n      />\n\n      {/* ========== 主要內容區域 ========== */}\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full flex\">\n          {/* 左側：輸入表單 */}\n          <div className=\"w-1/2 bg-white border-r border-border flex flex-col\">\n            <div className=\"h-14 bg-morandi-gold text-white px-6 flex items-center border-b border-border\">\n              <h2 className=\"text-lg font-semibold\">編輯表單</h2>\n            </div>\n            <div className=\"flex-1 overflow-y-auto\">\n              <TourForm data={tourData} onChange={setTourData} />\n            </div>\n          </div>\n\n          {/* 右側：即時預覽 */}\n          <div className=\"w-1/2 bg-gray-100 flex flex-col\">\n            {/* 標題列 */}\n            <div className=\"h-14 bg-white border-b px-6 flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <h2 className=\"text-lg font-semibold text-morandi-primary\">即時預覽</h2>\n                <div className=\"flex gap-2 bg-morandi-container/30 rounded-lg p-1\">\n                  <button\n                    onClick={() => setViewMode('desktop')}\n                    className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                      viewMode === 'desktop'\n                        ? 'bg-morandi-gold text-white'\n                        : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/50'\n                    }`}\n                  >\n                    💻 電腦\n                  </button>\n                  <button\n                    onClick={() => setViewMode('mobile')}\n                    className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                      viewMode === 'mobile'\n                        ? 'bg-morandi-gold text-white'\n                        : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/50'\n                    }`}\n                  >\n                    📱 手機\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* 預覽容器 */}\n            <div className=\"flex-1 overflow-hidden p-8\" ref={containerRef}>\n              <div className=\"w-full h-full flex items-center justify-center\">\n                {/* 縮放容器 */}\n                <div\n                  style={{\n                    transform: `scale(${scale})`,\n                    transformOrigin: 'center center'\n                  }}\n                >\n                  {viewMode === 'mobile' ? (\n                    // 手機框架和內容\n                    <div className=\"relative\">\n                      {/* iPhone 14 Pro 尺寸 */}\n                      <div className=\"bg-black rounded-[45px] p-[8px] shadow-2xl\">\n                        {/* 頂部凹槽 (Dynamic Island) */}\n                        <div className=\"absolute top-[20px] left-1/2 -translate-x-1/2 z-10\">\n                          <div className=\"bg-black w-[120px] h-[34px] rounded-full\"></div>\n                        </div>\n\n                        {/* 螢幕 */}\n                        <div\n                          className=\"bg-black rounded-[37px] overflow-hidden relative\"\n                          style={{\n                            width: '390px',\n                            height: '844px'\n                          }}\n                        >\n                          {/* 狀態列安全區 */}\n                          <div className=\"absolute top-0 left-0 right-0 h-[50px] bg-transparent z-10\"></div>\n\n                          {/* 內容區域 */}\n                          <div\n                            className=\"w-full h-full overflow-y-auto\"\n                            ref={mobileContentRef}\n                            style={{\n                              scrollBehavior: 'smooth'\n                            }}\n                          >\n                            <TourPreview data={processedData} viewMode=\"mobile\" />\n                          </div>\n\n                          {/* 底部指示條 */}\n                          <div className=\"absolute bottom-2 left-1/2 -translate-x-1/2 z-10\">\n                            <div className=\"w-32 h-1 bg-black/30 rounded-full\"></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    // 電腦版\n                    <div\n                      className=\"bg-white shadow-2xl rounded-lg overflow-hidden\"\n                      style={{\n                        width: '1200px',\n                        height: '800px'\n                      }}\n                    >\n                      <div className=\"w-full h-full overflow-y-auto\">\n                        <TourPreview data={processedData} viewMode=\"desktop\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/itinerary/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'router'. Either exclude it or remove the dependency array.","line":154,"column":6,"nodeType":"ArrayExpression","endLine":154,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [handleDelete, handleDuplicate]","fix":{"range":[4763,4802],"text":"[handleDelete, handleDuplicate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { EnhancedTable, TableColumn } from '@/components/ui/enhanced-table';\nimport { MapPin, Calendar, Trash2, Copy, Eye } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useItineraryStore, type Itinerary } from '@/stores';\n\nconst statusFilters = ['全部', '草稿', '已發布'];\n\nexport default function ItineraryPage() {\n  const router = useRouter();\n  const { items: itineraries, delete: deleteItinerary } = useItineraryStore();\n  const [statusFilter, setStatusFilter] = useState<string>('全部');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // 複製行程\n  const handleDuplicate = async (id: string) => {\n    // TODO: 實作複製邏輯\n    console.log('複製行程:', id);\n  };\n\n  // 刪除行程\n  const handleDelete = async (id: string) => {\n    if (confirm('確定要刪除這個行程嗎？')) {\n      try {\n        await deleteItinerary(id);\n        alert('✅ 刪除成功！');\n        // Store 會自動更新，不需要重新載入\n      } catch (error) {\n        console.error('刪除失敗:', error);\n        alert('❌ 刪除失敗，請稍後再試');\n      }\n    }\n  };\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'tourCode',\n      label: '行程編號',\n      sortable: true,\n      render: (value, itinerary: Itinerary) => (\n        <span className=\"text-sm text-morandi-secondary font-mono\">\n          {itinerary.tourCode || '-'}\n        </span>\n      ),\n    },\n    {\n      key: 'title',\n      label: '行程名稱',\n      sortable: true,\n      render: (value, itinerary: Itinerary) => (\n        <span className=\"text-sm font-medium text-morandi-primary\">{itinerary.title}</span>\n      ),\n    },\n    {\n      key: 'destination',\n      label: '目的地',\n      sortable: true,\n      render: (value, itinerary: Itinerary) => (\n        <div className=\"flex items-center text-sm text-morandi-secondary\">\n          <MapPin size={14} className=\"mr-1\" />\n          {itinerary.country} · {itinerary.city}\n        </div>\n      ),\n    },\n    {\n      key: 'days',\n      label: '天數',\n      sortable: true,\n      render: (value, itinerary: Itinerary) => (\n        <span className=\"text-sm text-morandi-secondary\">\n          {itinerary.dailyItinerary?.length || 0} 天 {Math.max(0, (itinerary.dailyItinerary?.length || 0) - 1)} 夜\n        </span>\n      ),\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      render: (value, itinerary: Itinerary) => (\n        <span className={cn(\n          'text-sm font-medium',\n          itinerary.status === 'published'\n            ? 'text-green-600'\n            : 'text-gray-600'\n        )}>\n          {itinerary.status === 'published' ? '已發布' : '草稿'}\n        </span>\n      ),\n    },\n    {\n      key: 'created_at',\n      label: '建立時間',\n      sortable: true,\n      render: (value, itinerary: Itinerary) => (\n        <span className=\"text-sm text-morandi-muted\">\n          {new Date(itinerary.created_at).toLocaleDateString('zh-TW')}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      label: '操作',\n      render: (value, itinerary: Itinerary) => (\n        <div className=\"flex items-center gap-1\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              // 固定使用 ngrok 網址（給外部分享用）\n              const baseUrl = 'https://frisky-masonic-mellissa.ngrok-free.dev';\n              const shareUrl = `${baseUrl}/view/${itinerary.id}`;\n\n              // 複製到剪貼簿\n              navigator.clipboard.writeText(shareUrl).then(() => {\n                alert('✅ 分享連結已複製！\\n\\n' + shareUrl);\n              }).catch(err => {\n                console.error('複製失敗:', err);\n                alert('❌ 複製失敗，請手動複製：\\n' + shareUrl);\n              });\n            }}\n            className=\"p-1 text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/30 rounded transition-colors\"\n            title=\"產生分享連結\"\n          >\n            <Eye size={14} />\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleDuplicate(itinerary.id);\n            }}\n            className=\"p-1 text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/30 rounded transition-colors\"\n            title=\"複製行程\"\n          >\n            <Copy size={14} />\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleDelete(itinerary.id);\n            }}\n            className=\"p-1 text-morandi-red/60 hover:text-morandi-red hover:bg-morandi-red/10 rounded transition-colors\"\n            title=\"刪除行程\"\n          >\n            <Trash2 size={14} />\n          </button>\n        </div>\n      ),\n    },\n  ], [router, handleDelete, handleDuplicate]);\n\n  // 過濾資料\n  const filteredItineraries = useMemo(() => {\n    let filtered = itineraries;\n\n    // 狀態篩選\n    if (statusFilter !== '全部') {\n      filtered = filtered.filter(item => item.status === statusFilter);\n    }\n\n    // 搜尋 - 搜尋所有文字欄位\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter(item =>\n        item.title.toLowerCase().includes(searchLower) ||\n        item.country.toLowerCase().includes(searchLower) ||\n        item.city.toLowerCase().includes(searchLower) ||\n        item.tourCode.toLowerCase().includes(searchLower) ||\n        item.status.toLowerCase().includes(searchLower) ||\n        item.description?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    return filtered;\n  }, [itineraries, statusFilter, searchTerm]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"行程管理\"\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋行程...\"\n        onAdd={() => router.push('/itinerary/new')}\n        addLabel=\"新增行程\"\n      >\n        {/* 狀態篩選 */}\n        <div className=\"flex gap-2\">\n          {statusFilters.map((filter) => (\n            <button\n              key={filter}\n              onClick={() => setStatusFilter(filter)}\n              className={cn(\n                'px-3 py-1 rounded-lg text-sm font-medium transition-colors',\n                statusFilter === filter\n                  ? 'bg-morandi-gold text-white'\n                  : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/30'\n              )}\n            >\n              {filter}\n            </button>\n          ))}\n        </div>\n      </ResponsiveHeader>\n\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n          columns={tableColumns}\n          data={filteredItineraries}\n          onRowClick={(itinerary: Itinerary) => router.push(`/itinerary/${itinerary.id}`)}\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/login/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[805,808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[805,808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[874,877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[874,877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { useLocalAuthStore } from '@/lib/auth/local-auth-manager';\nimport { User, Lock, AlertCircle, Eye, EyeOff, LogIn, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showProfileCards, setShowProfileCards] = useState(true);\n  const [profileCards, setProfileCards] = useState<any[]>([]);\n  const [selectedProfile, setSelectedProfile] = useState<any | null>(null);\n  const router = useRouter();\n  const { validateLogin, switchProfile } = useAuthStore();\n  const localAuthStore = useLocalAuthStore();\n\n  // 在 client 端載入角色卡\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const cards = localAuthStore.getProfileCards();\n      setProfileCards(cards);\n    }\n  }, [localAuthStore]);\n  \n  // 取得登入後要跳轉的頁面\n  const getRedirectPath = (): string => {\n    // 從 localStorage 讀取最後訪問的頁面\n    const lastPath = localStorage.getItem('last-visited-path');\n    // 排除登入頁面\n    if (lastPath && lastPath !== '/login') {\n      return lastPath;\n    }\n    // 預設跳到首頁\n    return '/';\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const result = await validateLogin(username, password);\n\n      if (result.success) {\n        // 登入成功\n        console.log('✅ 登入成功');\n        const redirectPath = getRedirectPath();\n        router.push(redirectPath);\n      } else {\n        // 登入失敗\n        setError(result.message || '帳號或密碼錯誤');\n      }\n    } catch (error) {\n      console.error('登入錯誤:', error);\n      setError('系統錯誤，請稍後再試');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 角色卡點擊 - 直接登入（已經驗證過了）\n  const handleProfileCardClick = async (profileId: string) => {\n    const profile = localAuthStore.profiles.find(p => p.id === profileId);\n    if (!profile) return;\n\n    setError('');\n    setIsLoading(true);\n\n    try {\n      // 直接切換角色（使用 switchProfile）\n      const success = switchProfile(profileId);\n\n      if (success) {\n        console.log('✅ 角色卡快速登入成功');\n        const redirectPath = getRedirectPath();\n        router.push(redirectPath);\n      } else {\n        setError('切換角色失敗，請使用密碼登入');\n        setShowProfileCards(false);\n      }\n    } catch (error) {\n      console.error('快速登入錯誤:', error);\n      setError('快速登入失敗，請使用密碼登入');\n      setShowProfileCards(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 刪除角色卡\n  const handleDeleteProfile = (e: React.MouseEvent, profileId: string) => {\n    e.stopPropagation(); // 防止觸發登入\n\n    const profile = localAuthStore.profiles.find(p => p.id === profileId);\n    if (!profile) return;\n\n    if (confirm(`確定要移除「${profile.display_name}」的角色卡嗎？\\n\\n移除後需要重新從網路登入。`)) {\n      localAuthStore.removeProfile(profileId);\n      // 重新載入角色卡列表\n      const cards = localAuthStore.getProfileCards();\n      setProfileCards(cards);\n      console.log('🗑️ 角色卡已刪除:', profile.display_name);\n    }\n  };\n\n\n  return (\n    <div className=\"flex items-center justify-center h-screen bg-gradient-to-br from-morandi-light via-white to-morandi-container/20\">\n      <div className=\"bg-white p-8 rounded-xl shadow-lg max-w-md w-full\">\n        {/* Logo 區域 */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-morandi-gold rounded-full mb-4\">\n            <User size={32} className=\"text-white\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-morandi-primary\">Venturo 系統登入</h2>\n          <p className=\"text-sm text-morandi-secondary mt-2\">請輸入您的員工帳號</p>\n        </div>\n        \n        {/* 角色卡區域 */}\n        {showProfileCards && profileCards.length > 0 && (\n          <div className=\"mb-6\">\n            <p className=\"text-sm text-morandi-secondary mb-3\">選擇角色快速登入：</p>\n            <div className=\"space-y-2\">\n              {profileCards.map((card) => (\n                <div key={card.id} className=\"relative group\">\n                  <button\n                    type=\"button\"\n                    onClick={() => handleProfileCardClick(card.id)}\n                    className=\"w-full p-3 rounded-lg border border-gray-200 hover:border-morandi-gold hover:bg-morandi-light/20 transition-all flex items-center gap-3 text-left\"\n                  >\n                    <div className=\"w-10 h-10 rounded-full bg-morandi-gold/10 flex items-center justify-center group-hover:bg-morandi-gold/20\">\n                      <User size={20} className=\"text-morandi-gold\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-morandi-primary\">{card.display_name}</div>\n                      <div className=\"text-xs text-morandi-secondary\">{card.english_name} · {card.role}</div>\n                    </div>\n                    <LogIn size={18} className=\"text-morandi-secondary group-hover:text-morandi-gold\" />\n                  </button>\n\n                  {/* 刪除按鈕 - 右上角 */}\n                  <button\n                    type=\"button\"\n                    onClick={(e) => handleDeleteProfile(e, card.id)}\n                    className=\"absolute -top-2 -right-2 w-6 h-6 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity shadow-md\"\n                    title=\"移除角色卡\"\n                  >\n                    <X size={14} />\n                  </button>\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-4 pt-4 border-t border-gray-200\">\n              <button\n                type=\"button\"\n                onClick={() => setShowProfileCards(false)}\n                className=\"text-sm text-morandi-secondary hover:text-morandi-primary\"\n              >\n                使用其他帳號登入 →\n              </button>\n            </div>\n          </div>\n        )}\n\n\n        {/* 錯誤訊息 */}\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2\">\n            <AlertCircle size={18} className=\"text-red-500 mt-0.5\" />\n            <span className=\"text-sm text-red-700\">{error}</span>\n          </div>\n        )}\n\n        {/* 登入表單 */}\n        {(!showProfileCards || profileCards.length === 0) && (\n          <>\n            {/* 顯示選中的角色 */}\n            {selectedProfile && (\n              <div className=\"mb-6 p-4 rounded-lg bg-morandi-light/30 border border-morandi-gold/20\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-12 h-12 rounded-full bg-morandi-gold/20 flex items-center justify-center\">\n                    <User size={24} className=\"text-morandi-gold\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-morandi-primary\">{selectedProfile.display_name}</div>\n                    <div className=\"text-sm text-morandi-secondary\">{selectedProfile.english_name} · {selectedProfile.role}</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-2\">\n                  員工編號\n                </label>\n                <div className=\"relative\">\n                  <User size={18} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" />\n                  <Input\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    className=\"pl-10\"\n                    placeholder=\"例：admin 或 john01\"\n                    required\n                    autoComplete=\"username\"\n                    autoFocus={!selectedProfile}\n                    readOnly={!!selectedProfile}\n                  />\n                </div>\n              </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-2\">\n              密碼\n            </label>\n            <div className=\"relative\">\n              <Lock size={18} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" />\n              <Input\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                placeholder=\"輸入密碼\"\n                required\n                autoComplete=\"current-password\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-morandi-secondary hover:text-morandi-primary\"\n              >\n                {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n              </button>\n            </div>\n          </div>\n          \n          <Button\n            type=\"submit\"\n            className=\"w-full bg-morandi-gold hover:bg-morandi-gold/90\"\n            disabled={isLoading}\n          >\n            {isLoading ? '登入中...' : '登入'}\n          </Button>\n        </form>\n          </>\n        )}\n\n        {/* 返回角色卡選擇 */}\n        {!showProfileCards && profileCards.length > 0 && (\n          <div className=\"mt-4\">\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowProfileCards(true);\n                setSelectedProfile(null);\n                setUsername('');\n                setPassword('');\n                setError('');\n              }}\n              className=\"text-sm text-morandi-secondary hover:text-morandi-primary\"\n            >\n              ← 返回角色選擇\n            </button>\n          </div>\n        )}\n\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/orders/[orderId]/documents/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":28},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":68,"column":39,"nodeType":"Identifier","endLine":68,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'row' is defined but never used. Allowed unused args must match /^_/u.","line":134,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4276,4279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4276,4279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4820,4823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4820,4823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useEnhancedTable\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":188,"column":74,"nodeType":"Identifier","endLine":188,"endColumn":90}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useMemo } from 'react';\nimport { useRouter, useParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { Button } from '@/components/ui/button';\nimport { EnhancedTable, TableColumn, useEnhancedTable } from '@/components/ui/enhanced-table';\nimport { useOrderStore } from '@/stores';\nimport { ArrowLeft, FileText, Upload, Download, Eye, Trash2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport default function DocumentsDetailPage() {\n  const router = useRouter();\n  const params = useParams();\n  const order_id = params.order_id as string;\n  const { items: orders } = useOrderStore();\n\n  const order = orders.find(o => o.id === order_id);\n\n  if (!order) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-morandi-secondary mb-4\">找不到該訂單</p>\n          <Button onClick={() => router.push('/orders')} variant=\"outline\">\n            <ArrowLeft size={16} className=\"mr-1\" />\n            返回訂單列表\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // 模擬文件數據\n  const documents = [\n    {\n      id: '1',\n      name: '行程確認書.pdf',\n      type: 'PDF',\n      size: '2.4 MB',\n      uploadDate: '2024-11-15',\n      category: '合約文件'\n    },\n    {\n      id: '2',\n      name: '保險清單.xlsx',\n      type: 'Excel',\n      size: '1.2 MB',\n      uploadDate: '2024-11-14',\n      category: '保險文件'\n    },\n    {\n      id: '3',\n      name: '成員名單.docx',\n      type: 'Word',\n      size: '0.8 MB',\n      uploadDate: '2024-11-13',\n      category: '成員資料'\n    }\n  ];\n\n  const getFileIcon = (type: string) => {\n    return <FileText size={16} className=\"text-morandi-gold\" />;\n  };\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'name',\n      label: '文件名稱',\n      sortable: true,\n      filterable: true,\n      render: (value, row) => (\n        <div className=\"flex items-center space-x-2\">\n          {getFileIcon(row.type)}\n          <span className=\"font-medium text-morandi-primary\">{value}</span>\n        </div>\n      )\n    },\n    {\n      key: 'category',\n      label: '分類',\n      sortable: true,\n      filterable: true,\n      filterType: 'select',\n      filterOptions: [\n        { value: '合約文件', label: '合約文件' },\n        { value: '保險文件', label: '保險文件' },\n        { value: '成員資料', label: '成員資料' }\n      ],\n      render: (value) => (\n        <span className={cn(\n          'inline-flex items-center px-2 py-1 rounded text-xs font-medium',\n          'bg-morandi-container text-morandi-primary'\n        )}>\n          {value}\n        </span>\n      )\n    },\n    {\n      key: 'type',\n      label: '類型',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">{value}</span>\n      )\n    },\n    {\n      key: 'size',\n      label: '大小',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">{value}</span>\n      )\n    },\n    {\n      key: 'uploadDate',\n      label: '上傳日期',\n      sortable: true,\n      filterable: true,\n      filterType: 'date',\n      render: (value) => (\n        <span className=\"text-morandi-secondary\">{value}</span>\n      )\n    },\n    {\n      key: 'actions',\n      label: '操作',\n      sortable: false,\n      filterable: false,\n      render: (_, row) => (\n        <div className=\"flex items-center space-x-2\">\n          <button\n            className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n            title=\"預覽文件\"\n          >\n            <Eye size={14} className=\"text-morandi-secondary\" />\n          </button>\n          <button\n            className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n            title=\"下載文件\"\n          >\n            <Download size={14} className=\"text-morandi-secondary\" />\n          </button>\n          <button\n            className=\"p-1 hover:bg-morandi-red/10 rounded transition-colors\"\n            title=\"刪除文件\"\n          >\n            <Trash2 size={14} className=\"text-morandi-red\" />\n          </button>\n        </div>\n      )\n    }\n  ], []);\n\n  // 排序和篩選函數\n  const sortFunction = (data: any[], column: string, direction: 'asc' | 'desc') => {\n    return [...data].sort((a, b) => {\n      let aValue: string | number | Date = a[column as keyof typeof a];\n      let bValue: string | number | Date = b[column as keyof typeof b];\n\n      if (column === 'uploadDate') {\n        aValue = new Date(aValue);\n        bValue = new Date(bValue);\n      }\n\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  };\n\n  const filterFunction = (data: any[], filters: Record<string, string>) => {\n    return data.filter(doc => {\n      return (\n        (!filters.name || doc.name.toLowerCase().includes(filters.name.toLowerCase())) &&\n        (!filters.category || doc.category === filters.category) &&\n        (!filters.type || doc.type.toLowerCase().includes(filters.type.toLowerCase())) &&\n        (!filters.size || doc.size.includes(filters.size)) &&\n        (!filters.uploadDate || doc.uploadDate.includes(filters.uploadDate))\n      );\n    });\n  };\n\n  const { data: filteredAndSortedDocuments, handleSort, handleFilter } = useEnhancedTable(\n    documents,\n    sortFunction,\n    filterFunction\n  );\n\n  return (\n    <div className=\"space-y-6 \">\n      <ResponsiveHeader\n        title={`文件管理 - ${order.order_number}`}\n        onAdd={() => {/* TODO: 上傳文件 */}}\n        addLabel=\"上傳文件\"\n      >\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-sm text-morandi-secondary\">\n            旅遊團: <span className=\"text-morandi-primary font-medium\">{order.tour_name}</span>\n          </div>\n          <Button\n            onClick={() => router.push('/orders')}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-2\"\n          >\n            <ArrowLeft size={16} />\n          </Button>\n        </div>\n      </ResponsiveHeader>\n\n      <ContentContainer>\n        <EnhancedTable\n          columns={tableColumns}\n          data={filteredAndSortedDocuments}\n          onSort={handleSort}\n          onFilter={handleFilter}\n        />\n\n        {filteredAndSortedDocuments.length === 0 && (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <FileText size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p>尚未上傳任何文件</p>\n            <p className=\"text-sm mt-1\">點擊上方「上傳文件」按鈕開始上傳</p>\n          </div>\n        )}\n      </ContentContainer>\n\n      {/* 上傳區域 */}\n      <div className=\"mt-8 border border-dashed border-morandi-container rounded-lg p-8 text-center bg-morandi-container/5\">\n        <Upload size={48} className=\"mx-auto mb-4 text-morandi-secondary opacity-50\" />\n        <p className=\"text-morandi-secondary mb-2\">拖拽文件至此處或點擊上傳</p>\n        <p className=\"text-sm text-morandi-secondary/70\">支援 PDF, DOC, DOCX, XLS, XLSX, JPG, PNG 等格式</p>\n        <Button className=\"mt-4 bg-morandi-gold hover:bg-morandi-gold-hover text-white\">\n          <Upload size={16} className=\"mr-1\" />\n          選擇文件\n        </Button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/orders/[orderId]/members/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useRef } from 'react';\nimport { useRouter, useParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { useOrderStore, useTourStore } from '@/stores';\nimport { ArrowLeft, Plus } from 'lucide-react';\nimport { ExcelMemberTable, MemberTableRef } from '@/components/members/excel-member-table';\n\nexport default function MemberDetailPage() {\n  const router = useRouter();\n  const params = useParams();\n  const orderId = params.orderId as string;\n  const { items: orders } = useOrderStore()\n  const { items: tours } = useTourStore();\n  const memberTableRef = useRef<MemberTableRef | null>(null);\n\n  const order = orders.find(o => o.id === orderId);\n  const tour = tours.find(t => t.id === order?.tour_id);\n\n  if (!order) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-morandi-secondary mb-4\">找不到該訂單</p>\n          <Button onClick={() => router.push('/orders')} variant=\"outline\">\n            <ArrowLeft size={16} className=\"mr-1\" />\n            返回訂單列表\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 \">\n      <ResponsiveHeader\n        title={`成員管理 - ${order.order_number}`}\n        onAdd={() => memberTableRef.current?.addRow()}\n        addLabel=\"新增成員\"\n      >\n        {/* 訂單資訊 */}\n        <div className=\"flex items-center space-x-6 text-sm text-morandi-secondary\">\n          <div className=\"flex items-center space-x-2\">\n            <span>旅遊團:</span>\n            <span className=\"text-morandi-primary font-medium\">{order.tour_name}</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span>聯絡人:</span>\n            <span className=\"text-morandi-primary font-medium\">{order.contact_person}</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span>預定人數:</span>\n            <span className=\"text-morandi-primary font-medium\">{order.member_count}人</span>\n          </div>\n          <Button\n            onClick={() => router.push('/orders')}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-2 ml-auto\"\n          >\n            <ArrowLeft size={16} />\n          </Button>\n        </div>\n      </ResponsiveHeader>\n\n      {/* 成員管理表格 */}\n      <div className=\"px-6 pb-6\">\n        <div className=\"border border-border rounded-lg overflow-hidden bg-card\">\n          <ExcelMemberTable\n            ref={memberTableRef}\n            order_id={orderId}\n            departure_date={tour?.departure_date || ''}\n            member_count={order.member_count}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/orders/[orderId]/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/orders/[orderId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/orders/[orderId]/payment/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[925,928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[925,928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[987,990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[987,990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1049,1052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1049,1052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1144,1147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1144,1147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPaymentStatusBadge' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPaymentTypeIcon' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":27},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":58,"column":39,"nodeType":"Identifier","endLine":58,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4101,4104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4101,4104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4647,4650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4647,4650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useEnhancedTable\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":163,"column":73,"nodeType":"Identifier","endLine":163,"endColumn":89}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useMemo } from 'react';\nimport { useRouter, useParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { Button } from '@/components/ui/button';\nimport { EnhancedTable, TableColumn, useEnhancedTable } from '@/components/ui/enhanced-table';\nimport { useOrderStore } from '@/stores';\n// TODO: usePaymentStore deprecated\nimport { ArrowLeft, CreditCard, Plus, TrendingUp, TrendingDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport default function PaymentDetailPage() {\n  const router = useRouter();\n  const params = useParams();\n  const orderId = params.orderId as string;\n  const orderStore = useOrderStore();\n  const paymentStore = { payment_requests: [] }; // TODO: usePaymentStore deprecated\n\n  // 等待 store 載入\n  const orders = (orderStore as any).orders || [];\n  const paymentRequests = (paymentStore as any).payment_requests || [];\n\n  const order = orders.find((o: any) => o.id === orderId);\n  // 找出此訂單相關的請款單\n  const orderPayments = paymentRequests.filter((p: any) => p.order_id === orderId);\n\n  if (!order) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-morandi-secondary mb-4\">找不到該訂單</p>\n          <Button onClick={() => router.push('/orders')} variant=\"outline\">\n            <ArrowLeft size={16} className=\"mr-1\" />\n            返回訂單列表\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getPaymentStatusBadge = (status: string) => {\n    const badges: Record<string, string> = {\n      '已確認': 'bg-morandi-green text-white',\n      '待確認': 'bg-morandi-gold text-white',\n      '已完成': 'bg-morandi-container text-morandi-primary'\n    };\n    return badges[status] || 'bg-morandi-container text-morandi-secondary';\n  };\n\n  const getPaymentTypeIcon = () => {\n    // PaymentRequest 都是請款類型\n    return <TrendingDown size={16} className=\"text-morandi-red\" />;\n  };\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'request_number',\n      label: '請款單號',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <span className=\"text-morandi-primary font-medium\">{value}</span>\n      )\n    },\n    {\n      key: 'request_date',\n      label: '請款日期',\n      sortable: true,\n      filterable: true,\n      filterType: 'date',\n      render: (value) => (\n        <span className=\"text-morandi-primary\">\n          {new Date(value).toLocaleDateString()}\n        </span>\n      )\n    },\n    {\n      key: 'tour_name',\n      label: '團體名稱',\n      sortable: true,\n      filterable: true,\n      render: (value) => (\n        <span className=\"text-morandi-primary\">{value}</span>\n      )\n    },\n    {\n      key: 'total_amount',\n      label: '請款金額',\n      sortable: true,\n      filterable: true,\n      filterType: 'number',\n      render: (value) => (\n        <span className=\"font-medium text-morandi-red\">\n          NT$ {value.toLocaleString()}\n        </span>\n      )\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      filterable: true,\n      filterType: 'select',\n      filterOptions: [\n        { value: 'pending', label: '待處理' },\n        { value: 'processing', label: '處理中' },\n        { value: 'confirmed', label: '已確認' },\n        { value: 'paid', label: '已付款' }\n      ],\n      render: (value) => {\n        const statusMap = {\n          'pending': '待處理',\n          'processing': '處理中',\n          'confirmed': '已確認',\n          'paid': '已付款'\n        };\n        return (\n          <span className={cn(\n            'inline-flex items-center px-2 py-1 rounded text-xs font-medium',\n            value === 'paid' ? 'bg-morandi-green text-white' :\n            value === 'confirmed' ? 'bg-morandi-container text-morandi-primary' :\n            'bg-morandi-gold text-white'\n          )}>\n            {statusMap[value as keyof typeof statusMap] || value}\n          </span>\n        );\n      }\n    }\n  ], []);\n\n  // 排序和篩選函數\n  const sortFunction = (data: any[], column: string, direction: 'asc' | 'desc') => {\n    return [...data].sort((a, b) => {\n      let aValue: string | number | Date = a[column as keyof typeof a];\n      let bValue: string | number | Date = b[column as keyof typeof b];\n\n      if (column === 'request_date') {\n        aValue = new Date(aValue);\n        bValue = new Date(bValue);\n      }\n\n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  };\n\n  const filterFunction = (data: any[], filters: Record<string, string>) => {\n    return data.filter(payment => {\n      return (\n        (!filters.request_number || payment.request_number.includes(filters.request_number)) &&\n        (!filters.request_date || new Date(payment.request_date).toLocaleDateString().includes(filters.request_date)) &&\n        (!filters.tour_name || payment.tour_name.toLowerCase().includes(filters.tour_name.toLowerCase())) &&\n        (!filters.total_amount || payment.total_amount.toString().includes(filters.total_amount)) &&\n        (!filters.status || payment.status === filters.status)\n      );\n    });\n  };\n\n  const { data: filteredAndSortedPayments, handleSort, handleFilter } = useEnhancedTable(\n    orderPayments,\n    sortFunction,\n    filterFunction\n  );\n\n  return (\n    <div className=\"space-y-6 \">\n      <ResponsiveHeader\n        title={`請款記錄 - ${order.order_number}`}\n        onAdd={() => router.push('/finance/requests')}\n        addLabel=\"前往請款管理\"\n      >\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-sm text-morandi-secondary\">\n            聯絡人: <span className=\"text-morandi-primary font-medium\">{order.contact_person}</span>\n          </div>\n          <Button\n            onClick={() => router.push('/orders')}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-2\"\n          >\n            <ArrowLeft size={16} />\n          </Button>\n        </div>\n      </ResponsiveHeader>\n\n      <ContentContainer>\n        <EnhancedTable\n          columns={tableColumns}\n          data={filteredAndSortedPayments}\n          onSort={handleSort}\n          onFilter={handleFilter}\n          selection={undefined}\n        />\n\n        {filteredAndSortedPayments.length === 0 && (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <CreditCard size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p>此訂單尚無請款記錄</p>\n            <p className=\"text-sm mt-1\">請前往財務管理建立請款單</p>\n          </div>\n        )}\n      </ContentContainer>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/orders/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Combobox' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setTourFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1944,1947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1944,1947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sevenDaysLater' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4590,4593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4590,4593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4782,4785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4782,4785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Combobox } from '@/components/ui/combobox';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useOrderStore, useTourStore } from '@/stores';\nimport { ShoppingCart, AlertCircle, CheckCircle, Clock } from 'lucide-react';\nimport { SimpleOrderTable } from '@/components/orders/simple-order-table';\nimport { AddOrderForm } from '@/components/orders/add-order-form';\nimport { cn } from '@/lib/utils';\n\nexport default function OrdersPage() {\n  const router = useRouter();\n  const { items: orders, create: addOrder } = useOrderStore();\n  const { items: tours } = useTourStore();\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [tourFilter, setTourFilter] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const filteredOrders = orders.filter(order => {\n    const matchesStatus = statusFilter === 'all' || order.payment_status === statusFilter;\n    const matchesTour = !tourFilter || order.tour_id === tourFilter;\n\n    const searchLower = searchQuery.toLowerCase();\n    const matchesSearch = !searchQuery ||\n      order.order_number.toLowerCase().includes(searchLower) ||\n      order.code?.toLowerCase().includes(searchLower) ||\n      order.tour_name?.toLowerCase().includes(searchLower) ||\n      order.contact_person.toLowerCase().includes(searchLower) ||\n      order.sales_person?.toLowerCase().includes(searchLower) ||\n      order.assistant?.toLowerCase().includes(searchLower);\n\n    return matchesStatus && matchesTour && matchesSearch;\n  });\n\n  // 計算待辦事項\n  const todos = React.useMemo(() => {\n    const result: any[] = [];\n    const today = new Date();\n    const sevenDaysLater = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n\n    orders.forEach(order => {\n      const tour = tours.find(t => t.id === order.tour_id);\n      if (!tour) return;\n\n      const departure_date = new Date(tour.departure_date);\n      const daysUntilDeparture = Math.ceil((departure_date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n\n      // 1. 即將出發但未收齊款項\n      if (daysUntilDeparture <= 7 && daysUntilDeparture >= 0 && order.payment_status !== 'paid') {\n        result.push({\n          type: 'payment',\n          priority: 'high',\n          message: `${order.order_number} - ${daysUntilDeparture}天後出發，尚未收齊款項`,\n          order_id: order.id\n        });\n      }\n\n      // 2. 未收款超過30天\n      if (order.payment_status === 'unpaid') {\n        const orderDate = new Date(order.created_at || today);\n        const daysOverdue = Math.ceil((today.getTime() - orderDate.getTime()) / (1000 * 60 * 60 * 24));\n        if (daysOverdue > 30) {\n          result.push({\n            type: 'overdue',\n            priority: 'high',\n            message: `${order.order_number} - 訂單已${daysOverdue}天未收款`,\n            order_id: order.id\n          });\n        }\n      }\n\n      // 3. 部分收款提醒\n      if (order.payment_status === 'partial' && daysUntilDeparture <= 14 && daysUntilDeparture >= 0) {\n        result.push({\n          type: 'partial',\n          priority: 'medium',\n          message: `${order.order_number} - 尚有 NT$ ${order.remaining_amount.toLocaleString()} 未收`,\n          order_id: order.id\n        });\n      }\n    });\n\n    return result;\n  }, [orders, tours]);\n\n\n  const handleAddOrder = (orderData: {\n    tour_id: string;\n    contact_person: string;\n    sales_person: string;\n    assistant: string;\n    member_count: number;\n    total_amount: number;\n  }) => {\n    const selectedTour = tours.find(t => t.id === orderData.tour_id);\n    if (!selectedTour) return;\n\n    // 計算該團的訂單序號\n    const tourOrders = orders.filter(o => o.tour_id === orderData.tour_id);\n    const nextOrderNumber = tourOrders.length + 1;\n    const orderNumber = `${selectedTour.code}-${nextOrderNumber.toString().padStart(2, '0')}`;\n\n    addOrder({\n      order_number: orderNumber,\n      tour_id: orderData.tour_id,\n      code: selectedTour.code,\n      tour_name: selectedTour.name,\n      contact_person: orderData.contact_person,\n      sales_person: orderData.sales_person,\n      assistant: orderData.assistant,\n      member_count: orderData.member_count,\n      total_amount: orderData.total_amount,\n      paid_amount: 0,\n      payment_status: 'unpaid',\n      remaining_amount: orderData.total_amount\n    } as any);\n\n    setIsAddDialogOpen(false);\n  };\n\n\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        {...{\n        title: \"訂單管理\",\n        icon: ShoppingCart} as any}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '訂單管理', href: '/orders' }\n        ]}\n        showSearch={true}\n        searchTerm={searchQuery}\n        onSearchChange={setSearchQuery}\n        searchPlaceholder=\"搜尋訂單...\"\n        tabs={[\n          { value: 'all', label: '全部', icon: ShoppingCart },\n          { value: 'unpaid', label: '未收款', icon: AlertCircle },\n          { value: 'partial', label: '部分收款', icon: Clock },\n          { value: 'paid', label: '已收款', icon: CheckCircle }\n        ]}\n        activeTab={statusFilter}\n        onTabChange={setStatusFilter}\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增訂單\"\n        actions={\n          todos.length > 0 && (\n            <div className=\"flex items-center gap-2 px-3 py-1.5 bg-morandi-red/10 text-morandi-red rounded-lg\">\n              <AlertCircle size={16} />\n              <span className=\"text-sm font-medium\">{todos.length} 個待辦</span>\n            </div>\n          )\n        }\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        {/* 待辦事項提醒 */}\n        {todos.length > 0 && (\n        <div className=\"mb-6\">\n          <div className=\"bg-morandi-red/5 border border-morandi-red/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <AlertCircle size={20} className=\"text-morandi-red\" />\n              <h3 className=\"font-semibold text-morandi-primary\">待辦事項</h3>\n            </div>\n            <div className=\"space-y-2\">\n              {todos.map((todo, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-start gap-3 p-3 bg-white rounded-lg hover:bg-morandi-container/20 transition-colors cursor-pointer\"\n                  onClick={() => {\n                    const order = orders.find(o => o.id === todo.order_id);\n                    if (order) {\n                      router.push(`/orders/${order.id}`);\n                    }\n                  }}\n                >\n                  <div className={cn(\n                    \"w-2 h-2 rounded-full mt-1.5 flex-shrink-0\",\n                    todo.priority === 'high' ? \"bg-morandi-red\" : \"bg-morandi-gold\"\n                  )} />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-morandi-primary\">{todo.message}</p>\n                    <p className=\"text-xs text-morandi-secondary mt-1\">\n                      {todo.type === 'payment' && '💰 收款提醒'}\n                      {todo.type === 'overdue' && '⚠️ 逾期提醒'}\n                      {todo.type === 'partial' && '💵 尾款提醒'}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n        {/* 訂單列表 */}\n        <SimpleOrderTable\n          className=\"min-h-full\"\n          orders={filteredOrders}\n          showTourInfo={true}\n        />\n      </div>\n\n      {/* 新增訂單對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>新增訂單</DialogTitle>\n          </DialogHeader>\n          <AddOrderForm\n            onSubmit={handleAddOrder}\n            onCancel={() => setIsAddDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[886,889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[886,889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\/.","line":128,"column":15,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":128,"endColumn":16,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3644,3645],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3644,3644],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":147,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'DEFAULT_RATES'. Either include it or remove the dependency array.","line":337,"column":6,"nodeType":"ArrayExpression","endLine":337,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [DEFAULT_RATES, selectedCurrency, useCustomRate]","fix":{"range":[11227,11260],"text":"[DEFAULT_RATES, selectedCurrency, useCustomRate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'calculateForeign', 'calculateTWD', 'direction', 'foreignAmount', and 'twdAmount'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setForeignAmount' needs the current value of 'twdAmount'.","line":375,"column":6,"nodeType":"ArrayExpression","endLine":375,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [calculateForeign, calculateTWD, customRate, direction, foreignAmount, twdAmount]","fix":{"range":[12267,12279],"text":"[calculateForeign, calculateTWD, customRate, direction, foreignAmount, twdAmount]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'calculateForeign' and 'twdAmount'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setForeignAmount' needs the current value of 'twdAmount'.","line":380,"column":6,"nodeType":"ArrayExpression","endLine":380,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [calculateForeign, twdAmount]","fix":{"range":[12372,12374],"text":"[calculateForeign, twdAmount]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":527,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":527,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18328,18331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18328,18331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Settings } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card } from '@/components/ui/card';\nimport { Calculator, DollarSign, Clock, Clipboard, BarChart3, CheckSquare, TrendingUp, Briefcase, Calendar } from 'lucide-react';\nimport { useTourStore, useOrderStore } from '@/stores';\n\n// 可用的小工具類型\ntype WidgetType = 'calculator' | 'currency' | 'timer' | 'notes' | 'stats';\n\ninterface WidgetConfig {\n  id: WidgetType;\n  name: string;\n  icon: any;\n  component: React.ComponentType;\n  span?: number; // 佔據的列數（1 或 2）\n}\n\n// 簡易計算機組件（iPhone 風格）\nfunction CalculatorWidget() {\n  const [inputValue, setInputValue] = useState('');\n  const [sequentialMode, setSequentialMode] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // 清理輸入：移除中文、轉換全形為半形、移除空白\n  const cleanInput = (text: string): string => {\n    let result = text;\n\n    // 移除中文字符\n    result = result.replace(/[\\u4e00-\\u9fa5]/g, '');\n\n    // 轉換全形數字為半形\n    result = result.replace(/[\\uff10-\\uff19]/g, (char) =>\n      String.fromCharCode(char.charCodeAt(0) - 0xfee0)\n    );\n\n    // 轉換全形符號為半形\n    result = result.replace(/[\\uff0b\\uff0d\\uff0a\\uff0f\\uff08\\uff09\\uff0e]/g, (char) => {\n      const fullToHalf: Record<string, string> = {\n        '＋': '+', '－': '-', '＊': '*', '／': '/',\n        '（': '(', '）': ')', '．': '.'\n      };\n      return fullToHalf[char] || char;\n    });\n\n    // 移除所有空白\n    result = result.replace(/\\s/g, '');\n\n    // 只保留數字、運算符號、小數點、括號\n    result = result.replace(/[^0-9+\\-*/.()]/g, '');\n\n    return result;\n  };\n\n  // 順序計算（從左到右）\n  const calculateSequential = (expression: string): number => {\n    // 移除括號（順序計算不支援括號）\n    const expr = expression.replace(/[()]/g, '');\n\n    // 拆分數字和運算符號\n    const tokens: (number | string)[] = [];\n    let currentNumber = '';\n\n    for (let i = 0; i < expr.length; i++) {\n      const char = expr[i];\n      if (char >= '0' && char <= '9' || char === '.') {\n        currentNumber += char;\n      } else if (['+', '-', '*', '/'].includes(char)) {\n        // 處理負號：如果是第一個字符或前一個是運算符號，視為負號\n        if (char === '-' && (i === 0 || ['+', '-', '*', '/'].includes(expr[i - 1]))) {\n          currentNumber += char;\n        } else {\n          if (currentNumber) {\n            tokens.push(parseFloat(currentNumber));\n            currentNumber = '';\n          }\n          tokens.push(char);\n        }\n      }\n    }\n    if (currentNumber) {\n      tokens.push(parseFloat(currentNumber));\n    }\n\n    // 從左到右計算\n    if (tokens.length === 0) return 0;\n    let result = tokens[0] as number;\n    for (let i = 1; i < tokens.length; i += 2) {\n      const operator = tokens[i] as string;\n      const nextNum = tokens[i + 1] as number;\n\n      if (operator === '+') result += nextNum;\n      else if (operator === '-') result -= nextNum;\n      else if (operator === '*') result *= nextNum;\n      else if (operator === '/') result /= nextNum;\n    }\n\n    return result;\n  };\n\n  // 即時計算結果\n  const calculateResult = (): string => {\n    if (!inputValue.trim()) return '0';\n\n    try {\n      const sanitized = inputValue.replace(/[^0-9+\\-*/.()]/g, '');\n      if (!sanitized) return '0';\n\n      // 檢查是否只有運算符號，沒有數字\n      if (!/\\d/.test(sanitized)) {\n        return '0';\n      }\n\n      // 檢查是否以運算符號開頭或結尾（除了負號）\n      if (/[+*\\/]$/.test(sanitized)) {\n        return inputValue; // 顯示原始輸入\n      }\n\n      let calculationResult: number;\n\n      if (sequentialMode) {\n        // 順序計算模式\n        calculationResult = calculateSequential(sanitized);\n      } else {\n        // 數學優先模式\n        calculationResult = Function('\"use strict\"; return (' + sanitized + ')')();\n      }\n\n      if (typeof calculationResult === 'number' && !isNaN(calculationResult)) {\n        // 格式化數字，最多顯示 8 位小數\n        return parseFloat(calculationResult.toFixed(8)).toString();\n      }\n      return inputValue;\n    } catch (error) {\n      // 如果計算失敗，返回原始輸入而不是「錯誤」\n      return inputValue;\n    }\n  };\n\n  // 處理輸入變更\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const cleaned = cleanInput(e.target.value);\n    setInputValue(cleaned);\n  };\n\n  // 處理貼上事件\n  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const pastedText = e.clipboardData.getData('text');\n    const cleaned = cleanInput(pastedText);\n    setInputValue(cleaned);\n  };\n\n  // 處理按鍵事件\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      const result = calculateResult();\n      setInputValue(result);\n    } else if (e.key === 'Escape') {\n      setInputValue('');\n    }\n  };\n\n  // 快速插入按鈕點擊\n  const handleButtonClick = (value: string) => {\n    if (value === '=') {\n      const result = calculateResult();\n      setInputValue(result);\n    } else if (value === 'C') {\n      setInputValue('');\n    } else {\n      setInputValue(prev => prev + value);\n    }\n  };\n\n  const displayResult = calculateResult();\n\n  return (\n    <Card className=\"overflow-hidden flex flex-col h-full border border-[#E6DDD4] shadow-sm rounded-2xl hover:shadow-md hover:border-morandi-gold/50 transition-all duration-200\">\n      <div className=\"bg-morandi-container px-4 py-3 border-b border-[#E6DDD4] flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Calculator className=\"h-4 w-4 text-morandi-gold\" />\n            <h3 className=\"font-semibold text-sm text-morandi-primary\">計算機</h3>\n          </div>\n          <label className=\"flex items-center gap-1.5 cursor-pointer group\">\n            <input\n              type=\"checkbox\"\n              checked={sequentialMode}\n              onChange={(e) => setSequentialMode(e.target.checked)}\n              className=\"w-3.5 h-3.5 rounded border-morandi-gold/30 text-morandi-gold focus:ring-morandi-gold/20 cursor-pointer\"\n            />\n            <span className=\"text-xs text-morandi-secondary group-hover:text-morandi-primary transition-colors\">順序計算</span>\n          </label>\n        </div>\n      </div>\n      <div className=\"p-4 flex-1 flex flex-col overflow-hidden\">\n        <div className=\"space-y-3 flex-1 flex flex-col min-h-0\">\n        {/* iPhone 風格顯示區 */}\n        <div\n          className=\"bg-white rounded-xl p-4 min-h-[80px] flex flex-col justify-end border border-[#E6DDD4] cursor-text shadow-sm\"\n          onClick={() => inputRef.current?.focus()}\n        >\n          {/* 算式輸入（小字灰色） */}\n          <input\n            ref={inputRef}\n            type=\"text\"\n            inputMode=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            onPaste={handlePaste}\n            onKeyDown={handleKeyDown}\n            autoComplete=\"off\"\n            className=\"w-full bg-transparent border-none outline-none text-right font-mono text-sm text-morandi-secondary mb-1 placeholder:text-morandi-muted/40\"\n            placeholder=\"直接輸入或點擊按鈕\"\n          />\n          {/* 即時結果（大字黑色） */}\n          <div className=\"text-right text-2xl font-bold text-morandi-primary font-mono tracking-tight\">\n            {displayResult}\n          </div>\n        </div>\n\n        {/* 快速按鈕 */}\n        <div className=\"grid grid-cols-4 gap-1.5 flex-shrink-0\">\n          {['7', '8', '9', '/'].map((btn) => (\n            <Button\n              key={btn}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleButtonClick(btn)}\n              className=\"h-9 text-sm font-medium bg-white border-[#E6DDD4] hover:border-morandi-gold transition-all rounded-xl\"\n            >\n              {btn}\n            </Button>\n          ))}\n          {['4', '5', '6', '*'].map((btn) => (\n            <Button\n              key={btn}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleButtonClick(btn)}\n              className=\"h-9 text-sm font-medium bg-white border-[#E6DDD4] hover:border-morandi-gold transition-all rounded-xl\"\n            >\n              {btn}\n            </Button>\n          ))}\n          {['1', '2', '3', '-'].map((btn) => (\n            <Button\n              key={btn}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleButtonClick(btn)}\n              className=\"h-9 text-sm font-medium bg-white border-[#E6DDD4] hover:border-morandi-gold transition-all rounded-xl\"\n            >\n              {btn}\n            </Button>\n          ))}\n          {['0', '.', '(', ')'].map((btn) => (\n            <Button\n              key={btn}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleButtonClick(btn)}\n              className=\"h-9 text-sm font-medium bg-white border-[#E6DDD4] hover:border-morandi-gold transition-all rounded-xl\"\n            >\n              {btn}\n            </Button>\n          ))}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleButtonClick('+')}\n            className=\"h-9 text-sm font-medium bg-white/80 border-[#E6DDD4]/50 hover:bg-white hover:border-morandi-gold hover:scale-105 transition-all rounded-xl\"\n          >\n            +\n          </Button>\n          <Button\n            size=\"sm\"\n            onClick={() => handleButtonClick('=')}\n            className=\"h-9 text-sm font-medium bg-gradient-to-r from-[#B5986A] to-[#D4C4A8] border-0 text-white shadow-lg transition-all duration-200 active:scale-95 rounded-xl\"\n          >\n            =\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleButtonClick('C')}\n            className=\"h-9 text-sm font-medium col-span-2 bg-white/80 border-[#E6DDD4]/50 hover:bg-red-50 hover:text-red-600 hover:border-red-300 hover:scale-105 transition-all rounded-xl\"\n          >\n            清除\n          </Button>\n        </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\n// 匯率轉換組件（雙向轉換）\nfunction CurrencyWidget() {\n  // 預設匯率（1 外幣 = ? 台幣）\n  const DEFAULT_RATES = {\n    USD: { rate: 31.5, symbol: '$', name: '美金' },\n    JPY: { rate: 0.21, symbol: '¥', name: '日幣' },\n    KRW: { rate: 0.024, symbol: '₩', name: '韓元' },\n    CNY: { rate: 4.35, symbol: '¥', name: '人民幣' },\n    VND: { rate: 0.00127, symbol: '₫', name: '越南盾' },\n    IDR: { rate: 0.002, symbol: 'Rp', name: '印尼盾' },\n  };\n\n  const [twdAmount, setTwdAmount] = useState('10000');\n  const [foreignAmount, setForeignAmount] = useState('');\n  const [selectedCurrency, setSelectedCurrency] = useState<keyof typeof DEFAULT_RATES>('USD');\n  const [customRate, setCustomRate] = useState(DEFAULT_RATES.USD.rate.toString());\n  const [useCustomRate, setUseCustomRate] = useState(false);\n  const [direction, setDirection] = useState<'twd-to-foreign' | 'foreign-to-twd'>('twd-to-foreign');\n\n  // 當切換貨幣時，更新匯率\n  useEffect(() => {\n    if (!useCustomRate) {\n      setCustomRate(DEFAULT_RATES[selectedCurrency].rate.toString());\n    }\n  }, [selectedCurrency, useCustomRate]);\n\n  // 計算外幣金額（台幣 → 外幣）\n  const calculateForeign = (twd: string): string => {\n    const amount = parseFloat(twd) || 0;\n    const rate = parseFloat(customRate) || 0;\n    if (rate === 0) return '0';\n    return (amount / rate).toFixed(2);\n  };\n\n  // 計算台幣金額（外幣 → 台幣）\n  const calculateTWD = (foreign: string): string => {\n    const amount = parseFloat(foreign) || 0;\n    const rate = parseFloat(customRate) || 0;\n    return (amount * rate).toFixed(2);\n  };\n\n  // 當台幣金額變更\n  const handleTwdChange = (value: string) => {\n    setTwdAmount(value);\n    setDirection('twd-to-foreign');\n    setForeignAmount(calculateForeign(value));\n  };\n\n  // 當外幣金額變更\n  const handleForeignChange = (value: string) => {\n    setForeignAmount(value);\n    setDirection('foreign-to-twd');\n    setTwdAmount(calculateTWD(value));\n  };\n\n  // 當匯率變更時，重新計算\n  useEffect(() => {\n    if (direction === 'twd-to-foreign') {\n      setForeignAmount(calculateForeign(twdAmount));\n    } else {\n      setTwdAmount(calculateTWD(foreignAmount));\n    }\n  }, [customRate]);\n\n  // 初始化外幣金額\n  useEffect(() => {\n    setForeignAmount(calculateForeign(twdAmount));\n  }, []);\n\n  const currencyInfo = DEFAULT_RATES[selectedCurrency];\n\n  // 切換方向\n  const swapDirection = () => {\n    setDirection(prev => prev === 'twd-to-foreign' ? 'foreign-to-twd' : 'twd-to-foreign');\n  };\n\n  return (\n    <Card className=\"overflow-hidden flex flex-col h-full border border-[#E6DDD4] shadow-sm rounded-2xl hover:shadow-md hover:border-morandi-gold/50 transition-all duration-200\">\n      <div className=\"bg-morandi-container px-4 py-3 border-b border-[#E6DDD4] flex-shrink-0\">\n        <div className=\"flex items-center gap-2\">\n          <DollarSign className=\"h-4 w-4 text-morandi-gold\" />\n          <h3 className=\"font-semibold text-sm text-morandi-primary\">匯率換算</h3>\n        </div>\n      </div>\n      <div className=\"p-4 space-y-3 flex-1 overflow-y-auto min-h-0\">\n        {/* 貨幣選擇 */}\n        <div>\n          <label className=\"text-xs font-medium text-morandi-primary mb-1.5 block\">選擇貨幣</label>\n          <select\n            value={selectedCurrency}\n            onChange={(e) => {\n              setSelectedCurrency(e.target.value as keyof typeof DEFAULT_RATES);\n              setUseCustomRate(false);\n            }}\n            className=\"w-full px-3 py-2 text-sm border border-[#E6DDD4] rounded-xl bg-white hover:border-morandi-gold focus:border-morandi-gold focus:ring-2 focus:ring-morandi-gold/10 transition-all outline-none\"\n          >\n            {Object.entries(DEFAULT_RATES).map(([code, info]) => (\n              <option key={code} value={code}>\n                {info.symbol} {info.name} ({code})\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* 台幣和外幣輸入（左右並排） */}\n        <div className=\"flex items-end gap-2\">\n          {/* 台幣輸入 */}\n          <div className=\"flex-1\">\n            <label className=\"text-xs font-medium text-morandi-primary mb-1.5 block\">台幣 (TWD)</label>\n            <div className=\"relative\">\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-muted text-xs font-medium\">NT$</span>\n              <input\n                type=\"number\"\n                value={twdAmount}\n                onChange={(e) => handleTwdChange(e.target.value)}\n                className=\"w-full px-3 py-2 pl-[42px] border border-[#E6DDD4] rounded-xl font-mono text-sm bg-white hover:border-morandi-gold focus:border-morandi-gold focus:ring-2 focus:ring-morandi-gold/10 transition-all outline-none\"\n                placeholder=\"10000\"\n              />\n            </div>\n          </div>\n\n          {/* 雙向箭頭 */}\n          <button\n            onClick={swapDirection}\n            className=\"p-2 hover:bg-morandi-gold/10 rounded-xl transition-all group mb-0.5\"\n            title=\"切換方向\"\n          >\n            <svg\n              className=\"h-4 w-4 text-morandi-gold group-hover:scale-110 transition-transform\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"\n              />\n            </svg>\n          </button>\n\n          {/* 外幣輸入 */}\n          <div className=\"flex-1\">\n            <label className=\"text-xs font-medium text-morandi-primary mb-1.5 block\">\n              {currencyInfo.name} ({selectedCurrency})\n            </label>\n            <div className=\"relative\">\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-muted text-xs font-medium\">\n                {currencyInfo.symbol}\n              </span>\n              <input\n                type=\"number\"\n                value={foreignAmount}\n                onChange={(e) => handleForeignChange(e.target.value)}\n                className=\"w-full px-3 py-2 pl-[42px] border border-[#E6DDD4] rounded-xl font-mono text-sm bg-white hover:border-morandi-gold focus:border-morandi-gold focus:ring-2 focus:ring-morandi-gold/10 transition-all outline-none\"\n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 匯率設定 */}\n        <div className=\"pt-4 border-t border-morandi-container/20\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <label className=\"text-sm font-medium text-morandi-primary\">\n              匯率 (1 {selectedCurrency} = ? TWD)\n            </label>\n            <button\n              onClick={() => {\n                setUseCustomRate(false);\n                setCustomRate(DEFAULT_RATES[selectedCurrency].rate.toString());\n              }}\n              className=\"text-xs text-morandi-gold hover:text-morandi-gold/80 font-medium transition-colors\"\n            >\n              重設預設值\n            </button>\n          </div>\n          <input\n            type=\"number\"\n            step=\"0.001\"\n            value={customRate}\n            onChange={(e) => {\n              setCustomRate(e.target.value);\n              setUseCustomRate(true);\n            }}\n            className=\"w-full px-4 py-2.5 border border-[#E6DDD4] rounded-xl font-mono text-sm bg-white hover:border-morandi-gold focus:border-morandi-gold focus:ring-2 focus:ring-morandi-gold/10 transition-all outline-none\"\n            placeholder=\"輸入匯率\"\n          />\n          <p className=\"text-xs text-morandi-muted mt-2 flex items-center gap-1.5\">\n            {useCustomRate ? (\n              <>\n                <span className=\"w-1.5 h-1.5 rounded-full bg-morandi-gold\"></span>\n                已自訂匯率\n              </>\n            ) : (\n              <>\n                <span className=\"w-1.5 h-1.5 rounded-full bg-morandi-muted\"></span>\n                使用預設匯率: {DEFAULT_RATES[selectedCurrency].rate}\n              </>\n            )}\n          </p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\n// 計時器組件\nfunction TimerWidget() {\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    let interval: any;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setSeconds((s) => s + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  const formatTime = (s: number) => {\n    const hrs = Math.floor(s / 3600);\n    const mins = Math.floor((s % 3600) / 60);\n    const secs = s % 60;\n    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Card className=\"overflow-hidden flex flex-col h-full border border-[#E6DDD4] shadow-sm rounded-2xl hover:shadow-md hover:border-morandi-gold/50 transition-all duration-200\">\n      <div className=\"bg-morandi-container px-4 py-3 border-b border-[#E6DDD4] flex-shrink-0\">\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"h-4 w-4 text-morandi-gold\" />\n          <h3 className=\"font-semibold text-sm text-morandi-primary\">計時器</h3>\n        </div>\n      </div>\n      <div className=\"p-6 flex-1 flex flex-col justify-center min-h-0\">\n        <div className=\"bg-white rounded-2xl p-8 border border-[#E6DDD4] shadow-sm mb-6\">\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-mono font-bold text-morandi-primary tracking-wider\">\n              {formatTime(seconds)}\n            </div>\n            <div className=\"text-xs text-morandi-muted mt-3 font-medium\">\n              {isRunning ? '計時中...' : '已暫停'}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex gap-3 flex-shrink-0\">\n          <Button\n            size=\"lg\"\n            className={`flex-1 rounded-xl transition-all duration-200 ${\n              isRunning\n                ? 'bg-white border border-[#E6DDD4] text-morandi-primary hover:border-morandi-gold'\n                : 'bg-gradient-to-r from-[#B5986A] to-[#D4C4A8] text-white border-0 shadow-lg active:scale-95'\n            }`}\n            onClick={() => setIsRunning(!isRunning)}\n          >\n            {isRunning ? '暫停' : '開始'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            onClick={() => {\n              setSeconds(0);\n              setIsRunning(false);\n            }}\n            className=\"bg-white border-[#E6DDD4] hover:bg-red-50 hover:text-red-600 hover:border-red-300 transition-all rounded-xl\"\n          >\n            重設\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\n// 便條紙組件（支援分頁）\nfunction NotesWidget() {\n  const STORAGE_KEY = 'homepage-notes-tabs';\n  const MAX_TABS = 5;\n\n  // 載入分頁資料\n  const loadTabs = () => {\n    const saved = localStorage.getItem(STORAGE_KEY);\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return [{ id: '1', name: '筆記', content: '' }];\n  };\n\n  const [tabs, setTabs] = useState<{ id: string; name: string; content: string }[]>(loadTabs);\n  const [activeTabId, setActiveTabId] = useState(tabs[0].id);\n  const [isEditingTab, setIsEditingTab] = useState<string | null>(null);\n  const [editingName, setEditingName] = useState('');\n\n  // 儲存到 localStorage\n  const saveTabs = (newTabs: typeof tabs) => {\n    setTabs(newTabs);\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(newTabs));\n  };\n\n  // 更新內容\n  const updateContent = (tabId: string, content: string) => {\n    const newTabs = tabs.map(tab =>\n      tab.id === tabId ? { ...tab, content } : tab\n    );\n    saveTabs(newTabs);\n  };\n\n  // 新增分頁\n  const addTab = () => {\n    if (tabs.length >= MAX_TABS) return;\n    const newTab = {\n      id: Date.now().toString(),\n      name: `筆記 ${tabs.length + 1}`,\n      content: ''\n    };\n    const newTabs = [...tabs, newTab];\n    saveTabs(newTabs);\n    setActiveTabId(newTab.id);\n  };\n\n  // 刪除分頁\n  const deleteTab = (tabId: string) => {\n    if (tabs.length === 1) return; // 至少保留一個\n    const newTabs = tabs.filter(tab => tab.id !== tabId);\n    saveTabs(newTabs);\n    if (activeTabId === tabId) {\n      setActiveTabId(newTabs[0].id);\n    }\n  };\n\n  // 重新命名分頁\n  const renameTab = (tabId: string, newName: string) => {\n    const newTabs = tabs.map(tab =>\n      tab.id === tabId ? { ...tab, name: newName.trim() || tab.name } : tab\n    );\n    saveTabs(newTabs);\n    setIsEditingTab(null);\n  };\n\n  const activeTab = tabs.find(tab => tab.id === activeTabId) || tabs[0];\n\n  return (\n    <Card className=\"overflow-hidden flex flex-col h-full border border-[#E6DDD4] shadow-sm rounded-2xl hover:shadow-md hover:border-morandi-gold/50 transition-all duration-200\">\n      <div className=\"bg-morandi-container px-4 py-3 border-b border-[#E6DDD4] flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Clipboard className=\"h-4 w-4 text-morandi-gold\" />\n            <h3 className=\"font-semibold text-sm text-morandi-primary\">便條紙</h3>\n          </div>\n\n          {/* 分頁標籤 */}\n          <div className=\"flex items-center gap-1\">\n            {tabs.map((tab) => (\n              <div\n                key={tab.id}\n                className={`group relative flex items-center gap-1 px-2 py-1 rounded-lg text-xs font-medium transition-all cursor-pointer ${\n                  activeTabId === tab.id\n                    ? 'bg-[#B5986A]/10 text-morandi-gold scale-105'\n                    : 'text-morandi-muted hover:bg-morandi-gold/5 hover:text-morandi-primary'\n                }`}\n              >\n                {isEditingTab === tab.id ? (\n                  <input\n                    type=\"text\"\n                    value={editingName}\n                    onChange={(e) => setEditingName(e.target.value)}\n                    onBlur={() => renameTab(tab.id, editingName)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') renameTab(tab.id, editingName);\n                      if (e.key === 'Escape') setIsEditingTab(null);\n                    }}\n                    className=\"w-16 px-1 bg-white border border-morandi-gold rounded outline-none\"\n                    autoFocus\n                  />\n                ) : (\n                  <span\n                    onClick={() => setActiveTabId(tab.id)}\n                    onDoubleClick={() => {\n                      setIsEditingTab(tab.id);\n                      setEditingName(tab.name);\n                    }}\n                    className=\"truncate max-w-[60px]\"\n                  >\n                    {tab.name}\n                  </span>\n                )}\n\n                {/* 刪除按鈕（只在多於一個分頁時顯示） */}\n                {tabs.length > 1 && (\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      deleteTab(tab.id);\n                    }}\n                    className=\"opacity-0 group-hover:opacity-100 ml-0.5 text-morandi-muted hover:text-red-500 transition-opacity\"\n                  >\n                    <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            ))}\n\n            {/* 新增分頁按鈕 */}\n            {tabs.length < MAX_TABS && (\n              <button\n                onClick={addTab}\n                className=\"p-1 rounded-lg text-morandi-muted hover:bg-morandi-gold/10 hover:text-morandi-gold transition-all\"\n                title=\"新增分頁\"\n              >\n                <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n                </svg>\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 flex-1 flex flex-col min-h-0\">\n        <textarea\n          value={activeTab.content}\n          onChange={(e) => updateContent(activeTab.id, e.target.value)}\n          className=\"w-full h-full p-4 border border-[#E6DDD4] rounded-xl resize-none bg-white hover:border-morandi-gold focus:border-morandi-gold focus:ring-2 focus:ring-morandi-gold/10 transition-all outline-none font-mono text-sm leading-relaxed\"\n          placeholder=\"在這裡寫下你的筆記...\"\n        />\n        <p className=\"text-xs text-morandi-muted mt-2\">自動儲存 • 雙擊分頁名稱可重新命名</p>\n      </div>\n    </Card>\n  );\n}\n\n// 統計報表組件\nfunction StatsWidget() {\n  const { items: tours } = useTourStore();\n  const { items: orders } = useOrderStore();\n\n  // 載入使用者設定\n  const loadStatsConfig = () => {\n    const saved = localStorage.getItem('homepage-stats-config');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return ['todos', 'paymentsThisWeek', 'paymentsNextWeek', 'depositsThisWeek', 'toursThisWeek', 'toursThisMonth'];\n  };\n\n  const [activeStats, setActiveStats] = useState<string[]>(loadStatsConfig);\n  const [isConfigOpen, setIsConfigOpen] = useState(false);\n\n  // 儲存設定\n  const toggleStat = (statId: string) => {\n    const newStats = activeStats.includes(statId)\n      ? activeStats.filter(id => id !== statId)\n      : [...activeStats, statId];\n    setActiveStats(newStats);\n    localStorage.setItem('homepage-stats-config', JSON.stringify(newStats));\n  };\n\n  // 過濾掉特殊團\n  const normalTours = tours.filter(t => t.status !== 'special');\n\n  // 計算本週時間範圍\n  const today = new Date();\n  const dayOfWeek = today.getDay();\n  const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;\n  const weekStart = new Date(today);\n  weekStart.setDate(today.getDate() + mondayOffset);\n  weekStart.setHours(0, 0, 0, 0);\n\n  const weekEnd = new Date(weekStart);\n  weekEnd.setDate(weekStart.getDate() + 6);\n  weekEnd.setHours(23, 59, 59, 999);\n\n  // 下週時間範圍\n  const nextWeekStart = new Date(weekStart);\n  nextWeekStart.setDate(weekStart.getDate() + 7);\n  const nextWeekEnd = new Date(nextWeekStart);\n  nextWeekEnd.setDate(nextWeekStart.getDate() + 6);\n\n  // 本月時間範圍\n  const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);\n  const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59, 999);\n\n  // 本週出團數量（排除特殊團）\n  const toursThisWeek = normalTours.filter(tour => {\n    const departureDate = new Date(tour.departure_date);\n    return departureDate >= weekStart && departureDate <= weekEnd;\n  }).length;\n\n  // 本月出團數量（排除特殊團）\n  const toursThisMonth = normalTours.filter(tour => {\n    const departureDate = new Date(tour.departure_date);\n    return departureDate >= monthStart && departureDate <= monthEnd;\n  }).length;\n\n  // 本週請款金額（本週出發的團，排除特殊團）\n  const paymentsThisWeek = orders\n    .filter(order => {\n      const tour = normalTours.find(t => t.id === order.tour_id);\n      if (!tour) return false;\n      const departureDate = new Date(tour.departure_date);\n      return departureDate >= weekStart && departureDate <= weekEnd;\n    })\n    .reduce((sum, order) => sum + (order.total_amount || 0), 0);\n\n  // 下週請款金額（下週出發的團，排除特殊團）\n  const paymentsNextWeek = orders\n    .filter(order => {\n      const tour = normalTours.find(t => t.id === order.tour_id);\n      if (!tour) return false;\n      const departureDate = new Date(tour.departure_date);\n      return departureDate >= nextWeekStart && departureDate <= nextWeekEnd;\n    })\n    .reduce((sum, order) => sum + (order.total_amount || 0), 0);\n\n  // 本週甲存金額（本週出發的團已付款，排除特殊團）\n  const depositsThisWeek = orders\n    .filter(order => {\n      const tour = normalTours.find(t => t.id === order.tour_id);\n      if (!tour) return false;\n      const departureDate = new Date(tour.departure_date);\n      return departureDate >= weekStart && departureDate <= weekEnd;\n    })\n    .reduce((sum, order) => sum + (order.paid_amount || 0), 0);\n\n  // 待辦事項數量（簡化版：未收齊款且即將出發的訂單，排除特殊團）\n  const todosCount = orders.filter(order => {\n    if (order.payment_status === 'paid') return false;\n    const tour = normalTours.find(t => t.id === order.tour_id);\n    if (!tour) return false;\n    const departureDate = new Date(tour.departure_date);\n    const daysUntilDeparture = Math.ceil((departureDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    return daysUntilDeparture <= 14 && daysUntilDeparture >= 0;\n  }).length;\n\n  const allStats = [\n    {\n      id: 'todos',\n      label: '待辦事項',\n      value: todosCount,\n      icon: CheckSquare,\n      color: 'text-morandi-gold',\n      bgColor: 'bg-morandi-gold/10',\n    },\n    {\n      id: 'paymentsThisWeek',\n      label: '本週請款',\n      value: `NT$ ${paymentsThisWeek.toLocaleString()}`,\n      icon: TrendingUp,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n    },\n    {\n      id: 'paymentsNextWeek',\n      label: '下週請款',\n      value: `NT$ ${paymentsNextWeek.toLocaleString()}`,\n      icon: TrendingUp,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n    },\n    {\n      id: 'depositsThisWeek',\n      label: '本週甲存',\n      value: `NT$ ${depositsThisWeek.toLocaleString()}`,\n      icon: Briefcase,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n    },\n    {\n      id: 'toursThisWeek',\n      label: '本週出團',\n      value: `${toursThisWeek} 團`,\n      icon: Calendar,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n    },\n    {\n      id: 'toursThisMonth',\n      label: '本月出團',\n      value: `${toursThisMonth} 團`,\n      icon: Calendar,\n      color: 'text-pink-600',\n      bgColor: 'bg-pink-50',\n    },\n  ];\n\n  // 只顯示使用者選擇的統計\n  const stats = allStats.filter(stat => activeStats.includes(stat.id));\n\n  return (\n    <Card className=\"overflow-hidden flex flex-col h-full border border-[#E6DDD4] shadow-sm rounded-2xl hover:shadow-md hover:border-morandi-gold/50 transition-all duration-200\">\n      <div className=\"bg-morandi-container px-4 py-3 border-b border-[#E6DDD4] flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4 text-morandi-gold\" />\n            <h3 className=\"font-semibold text-sm text-morandi-primary\">統計資訊</h3>\n          </div>\n          <button\n            onClick={() => setIsConfigOpen(!isConfigOpen)}\n            className=\"p-1 rounded-lg text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-gold/10 transition-all\"\n            title=\"統計設定\"\n          >\n            <Settings className=\"h-3.5 w-3.5\" />\n          </button>\n        </div>\n\n        {/* 設定面板 */}\n        {isConfigOpen && (\n          <div className=\"mt-3 pt-3 border-t border-[#E6DDD4]/50\">\n            <div className=\"text-xs text-morandi-secondary mb-2\">選擇要顯示的統計項目</div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {allStats.map((stat) => (\n                <label\n                  key={stat.id}\n                  className=\"flex items-center gap-2 cursor-pointer text-xs p-2 rounded-lg hover:bg-white/50 transition-all\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={activeStats.includes(stat.id)}\n                    onChange={() => toggleStat(stat.id)}\n                    className=\"w-3 h-3 rounded border-morandi-gold/30 text-morandi-gold focus:ring-morandi-gold/20\"\n                  />\n                  <span className=\"text-morandi-primary\">{stat.label}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"p-4 flex-1 overflow-auto min-h-0\">\n        {stats.length === 0 ? (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center text-morandi-muted text-sm\">\n              <Settings className=\"h-8 w-8 mx-auto mb-2 opacity-30\" />\n              <p>尚未選擇任何統計項目</p>\n              <p className=\"text-xs mt-1\">點擊右上角設定圖示選擇</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n            {stats.map((stat) => {\n              const Icon = stat.icon;\n              return (\n                <div\n                  key={stat.id}\n                  className=\"bg-white rounded-xl p-4 border border-[#E6DDD4] hover:border-morandi-gold/50 transition-all\"\n                >\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <div className={`p-2 rounded-lg ${stat.bgColor}`}>\n                      <Icon className={`h-4 w-4 ${stat.color}`} />\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-morandi-secondary mb-1\">{stat.label}</div>\n                  <div className=\"text-lg font-bold text-morandi-primary\">{stat.value}</div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n\n// 小工具配置\nconst AVAILABLE_WIDGETS: WidgetConfig[] = [\n  { id: 'stats', name: '統計資訊', icon: BarChart3, component: StatsWidget, span: 2 },\n  { id: 'calculator', name: '計算機', icon: Calculator, component: CalculatorWidget },\n  { id: 'currency', name: '匯率換算', icon: DollarSign, component: CurrencyWidget },\n  { id: 'timer', name: '計時器', icon: Clock, component: TimerWidget },\n  { id: 'notes', name: '便條紙', icon: Clipboard, component: NotesWidget },\n];\n\nexport default function Home() {\n  const router = useRouter();\n  const { isAuthenticated } = useAuthStore();\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeWidgets, setActiveWidgets] = useState<WidgetType[]>([\n    'calculator',\n    'currency',\n  ]);\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      router.replace('/login');\n    } else {\n      setIsLoading(false);\n      // 從 localStorage 載入小工具設定\n      const saved = localStorage.getItem('homepage-widgets');\n      if (saved) {\n        setActiveWidgets(JSON.parse(saved));\n      }\n    }\n  }, [isAuthenticated, router]);\n\n  const toggleWidget = (widgetId: WidgetType) => {\n    const newWidgets = activeWidgets.includes(widgetId)\n      ? activeWidgets.filter((id) => id !== widgetId)\n      : [...activeWidgets, widgetId];\n    setActiveWidgets(newWidgets);\n    localStorage.setItem('homepage-widgets', JSON.stringify(newWidgets));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-morandi-gold mx-auto\"></div>\n          <p className=\"mt-4 text-morandi-muted\">載入中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"首頁\"\n        breadcrumb={[{ label: '首頁', href: '/' }]}\n        actions={\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2 bg-white border-[#E6DDD4] hover:border-morandi-gold transition-all rounded-xl\">\n                <Settings className=\"h-4 w-4\" />\n                小工具設定\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md border-[#E6DDD4] shadow-lg rounded-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl text-morandi-primary\">選擇要顯示的小工具</DialogTitle>\n                <p className=\"text-sm text-morandi-muted mt-1\">勾選你想在首頁顯示的小工具</p>\n              </DialogHeader>\n              <div className=\"space-y-2 py-4\">\n                {AVAILABLE_WIDGETS.map((widget) => {\n                  const Icon = widget.icon;\n                  return (\n                    <div\n                      key={widget.id}\n                      className=\"flex items-center space-x-3 p-4 rounded-xl border border-[#E6DDD4] bg-white hover:border-morandi-gold cursor-pointer transition-all shadow-sm\"\n                      onClick={() => toggleWidget(widget.id)}\n                    >\n                      <Checkbox\n                        checked={activeWidgets.includes(widget.id)}\n                        onCheckedChange={() => toggleWidget(widget.id)}\n                      />\n                      <div className=\"flex items-center gap-3 flex-1\">\n                        <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-[#B5986A]/10 to-[#D4C4A8]/10 flex items-center justify-center shadow-sm\">\n                          <Icon className=\"h-5 w-5 text-morandi-gold\" />\n                        </div>\n                        <span className=\"font-medium text-morandi-primary\">{widget.name}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </DialogContent>\n          </Dialog>\n        }\n      />\n\n      <div className=\"flex-1 overflow-auto min-h-0\">\n        {activeWidgets.length === 0 ? (\n          <Card className=\"p-12 text-center border-[#E6DDD4] shadow-sm rounded-2xl bg-white\">\n            <div className=\"max-w-md mx-auto\">\n              <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-r from-[#B5986A]/10 to-[#D4C4A8]/10 flex items-center justify-center mx-auto mb-4 shadow-sm\">\n                <Settings className=\"h-8 w-8 text-morandi-gold\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-morandi-primary mb-2\">尚未選擇任何小工具</h3>\n              <p className=\"text-sm text-morandi-muted mb-6\">\n                點擊右上角「小工具設定」來新增你需要的工具\n              </p>\n            </div>\n          </Card>\n        ) : (\n          <div className=\"h-full grid md:grid-cols-2 xl:grid-cols-3 md:grid-rows-3 xl:grid-rows-2 gap-6 auto-rows-fr\">\n            {AVAILABLE_WIDGETS.filter((w) => activeWidgets.includes(w.id)).map(\n              (widget) => {\n                const Component = widget.component;\n                return (\n                  <div key={widget.id} className={`h-full ${widget.span === 2 ? 'md:col-span-2' : ''}`}>\n                    <Component />\n                  </div>\n                );\n              }\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/quotes/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResponsiveHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Copy' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Combobox' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QuoteItem' is defined but never used. Allowed unused vars must match /^_/u.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedCountry' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":141,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5621,5624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5621,5624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showVersionHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":195,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowVersionHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":195,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6737,6740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6737,6740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getCitiesByCountryCode'. Either include it or remove the dependency array.","line":236,"column":6,"nodeType":"ArrayExpression","endLine":236,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [selectedCountry, relatedTour, getCitiesByCountryCode]","fix":{"range":[7515,7545],"text":"[selectedCountry, relatedTour, getCitiesByCountryCode]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleAddAccommodationRoomType'. Either include it or remove the dependency array.","line":333,"column":6,"nodeType":"ArrayExpression","endLine":333,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleAddAccommodationRoomType]","fix":{"range":[10794,10796],"text":"[handleAddAccommodationRoomType]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":493,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":493,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14441,14444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14441,14444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":603,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":603,"endColumn":30},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":644,"column":37,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":644,"endColumn":39},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":644,"column":42,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":644,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'transportGroupSummary' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":678,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":678,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'guideCostPerPerson' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":696,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":696,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleOptionSelect' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":702,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":702,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":702,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":702,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22375,22378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22375,22378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'regionOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":723,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":723,"endColumn":22},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":735,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":735,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":898,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":898,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29153,29156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29153,29156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":906,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":906,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29475,29478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29475,29478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":907,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":907,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29502,29505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29502,29505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":918,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":918,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29886,29889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29886,29889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":952,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":952,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30778,30781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30778,30781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":959,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":959,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31029,31032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31029,31032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1000,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1000,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32262,32265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32262,32265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1048,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1048,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34049,34052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34049,34052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1476,"column":43,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1476,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":1561,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":1561,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu';\nimport {\n  Plus,\n  Car,\n  Home,\n  UtensilsCrossed,\n  MapPin,\n  MoreHorizontal,\n  Users,\n  Trash2,\n  Edit,\n  ArrowLeft,\n  Save,\n  History,\n  Plane,\n  Copy,\n  CheckCircle\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useQuotes } from '@/features/quotes/hooks/useQuotes';\nimport { useTourStore, useRegionStore } from '@/stores';\nimport { generateTourCode } from '@/lib/utils';\nimport { Combobox } from '@/components/ui/combobox';\nimport { getRegionOptions, type RegionName } from '@/data/region-options';\nimport { logger } from '@/lib/utils/logger';\n\ninterface CostItem {\n  id: string;\n  name: string;\n  quantity: number;\n  unit_price: number;\n  total: number;\n  note?: string;\n  // 住宿專用：天數和房型數據\n  day?: number; // 第幾天\n  room_type?: string; // 房型名稱（如：雙人房、三人房）\n  // 交通和領隊導遊專用：團體分攤\n  is_group_cost?: boolean; // 是否為團體費用\n  // 多身份計價：機票專用\n  pricing_type?: 'uniform' | 'by_identity'; // uniform: 統一價格, by_identity: 依身份計價\n  adult_price?: number; // 成人價\n  child_price?: number; // 小朋友價\n  infant_price?: number; // 嬰兒價\n}\n\n// CostCategory 與 QuoteCategory 結構相同，CostItem 與 QuoteItem 也相同\ninterface CostCategory {\n  id: string;\n  name: string;\n  items: CostItem[];\n  total: number;\n}\n\n// Import QuoteItem from store types for type casting\nimport { QuoteItem } from '@/stores/types';\n\nconst costCategories: CostCategory[] = [\n  { id: 'transport', name: '交通', items: [], total: 0 },\n  { id: 'group-transport', name: '團體分攤', items: [], total: 0 },\n  { id: 'accommodation', name: '住宿', items: [], total: 0 },\n  { id: 'meals', name: '餐飲', items: [], total: 0 },\n  { id: 'activities', name: '活動', items: [], total: 0 },\n  { id: 'others', name: '其他', items: [], total: 0 },\n  { id: 'guide', name: '領隊導遊', items: [], total: 0 }\n];\n\n// 圖標映射\nconst categoryIcons: Record<string, React.ElementType> = {\n  transport: Car,\n  'group-transport': Users,\n  accommodation: Home,\n  meals: UtensilsCrossed,\n  activities: MapPin,\n  others: MoreHorizontal,\n  guide: Users\n};\n\nexport default function QuoteDetailPage() {\n  const params = useParams();\n  const router = useRouter();\n  const { quotes, updateQuote } = useQuotes();\n  const { items: tours, create: addTour } = useTourStore();\n  const regionStore = useRegionStore();\n  const { items: regions } = regionStore;\n\n  const quote_id = params.id as string;\n  const quote = quotes.find(q => q.id === quote_id);\n\n  // 檢查是否為特殊團報價單\n  const relatedTour = quote?.tour_id ? tours.find(t => t.id === quote.tour_id) : null;\n  const isSpecialTour = relatedTour?.status === 'special';\n  const isReadOnly = isSpecialTour; // 特殊團報價單設為唯讀\n\n  // 懶載入 regions（只在報價單頁面才載入）\n  React.useEffect(() => {\n    if (regions.length === 0) {\n      regionStore.fetchAll();\n    }\n  }, [regions.length, regionStore]);\n\n  // 從 regions 取得啟用的國家清單\n  const activeCountries = React.useMemo(() => {\n    return regions\n      .filter(r => r.type === 'country' && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [regions]);\n\n  // 根據國家代碼取得城市清單\n  const getCitiesByCountryCode = React.useCallback((countryCode: string) => {\n    return regions\n      .filter(r => r.type === 'city' && r.country_code === countryCode && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [regions]);\n\n  // 從旅遊團的 location 反查國家和城市代碼\n  const getCountryAndCityFromLocation = (location: string) => {\n    for (const country of activeCountries) {\n      const cities = getCitiesByCountryCode(country.code);\n      const matchedCity = cities.find(city => city.name === location);\n      if (matchedCity) {\n        return { countryCode: country.code, cityCode: matchedCity.code };\n      }\n    }\n    return { countryCode: '', cityCode: '' };\n  };\n\n  // 國家和城市選擇 state\n  const [selectedCountry, setSelectedCountry] = useState<string>(() => {\n    if (relatedTour) {\n      return getCountryAndCityFromLocation(relatedTour.location).countryCode;\n    }\n    return activeCountries[0]?.code || '';\n  });\n\n  const [selectedCity, setSelectedCity] = useState<string>(() => {\n    if (relatedTour) {\n      return getCountryAndCityFromLocation(relatedTour.location).cityCode;\n    }\n    const defaultCities = selectedCountry ? getCitiesByCountryCode(selectedCountry) : [];\n    return defaultCities[0]?.code || '';\n  });\n\n  const [availableCities, setAvailableCities] = useState(() => {\n    return selectedCountry ? getCitiesByCountryCode(selectedCountry) : [];\n  });\n\n  const [categories, setCategories] = useState<CostCategory[]>(() => {\n    const initialCategories = quote?.categories || costCategories;\n    // 確保每個分類的總計都正確計算\n    return initialCategories.map(cat => ({\n      ...cat,\n      total: cat.items.reduce((sum, item) => sum + (item.total || 0), 0)\n    }));\n  });\n  const [accommodationDays, setAccommodationDays] = useState<number>(quote?.accommodation_days || 0);\n\n  // 多身份人數統計\n  const [participantCounts, setParticipantCounts] = useState<{\n    adult: number;          // 成人（雙人房）\n    child_with_bed: number; // 小朋友（佔床）\n    child_no_bed: number;   // 不佔床\n    single_room: number;    // 單人房\n    infant: number;         // 嬰兒\n  }>((quote as any)?.participant_counts || {\n    adult: 1,\n    child_with_bed: 0,\n    child_no_bed: 0,\n    single_room: 0,\n    infant: 0\n  });\n\n  // 總人數（向下相容）\n  const groupSize = participantCounts.adult + participantCounts.child_with_bed +\n                    participantCounts.child_no_bed + participantCounts.single_room +\n                    participantCounts.infant;\n\n  // 導遊費用分攤人數（不含嬰兒）\n  const groupSizeForGuide = participantCounts.adult + participantCounts.child_with_bed +\n                            participantCounts.child_no_bed + participantCounts.single_room;\n\n  const [quoteName, setQuoteName] = useState<string>(quote?.name || '');\n  const [showVersionHistory, setShowVersionHistory] = useState<boolean>(false);\n  const [saveSuccess, setSaveSuccess] = useState<boolean>(false);\n  const [isSaveDialogOpen, setIsSaveDialogOpen] = useState<boolean>(false);\n  const [versionName, setVersionName] = useState<string>('');\n\n  // 多身份售價\n  const [sellingPrices, setSellingPrices] = useState<{\n    adult: number;\n    child_with_bed: number;\n    child_no_bed: number;\n    single_room: number;\n    infant: number;\n  }>((quote as any)?.selling_prices || {\n    adult: 0,\n    child_with_bed: 0,\n    child_no_bed: 0,\n    single_room: 0,\n    infant: 0\n  });\n  // 舊的 selectedRegion 保留用於 getRegionOptions\n  const [selectedRegion, setSelectedRegion] = useState<RegionName>(\n    relatedTour?.location as RegionName || '清邁'\n  );\n\n  // 如果找不到報價單，返回列表頁（只有在資料已載入時才判斷）\n  useEffect(() => {\n    // 只有當 quotes 陣列有資料（表示已載入）且找不到對應的 quote 時，才跳轉\n    if (quotes.length > 0 && !quote) {\n      router.push('/quotes');\n    }\n  }, [quote, quotes.length, router]);\n\n  // 當國家改變時，更新城市清單\n  useEffect(() => {\n    if (selectedCountry && !relatedTour) {\n      const cities = getCitiesByCountryCode(selectedCountry);\n      setAvailableCities(cities);\n      if (cities.length > 0) {\n        setSelectedCity(cities[0].code);\n      }\n    }\n  }, [selectedCountry, relatedTour]);\n\n  // 當人數改變時，重新計算所有團體分攤項目\n  useEffect(() => {\n    setCategories(prevCategories => {\n      return prevCategories.map(category => {\n        if (category.id === 'group-transport' || category.id === 'transport' || category.id === 'guide') {\n          const updatedItems = category.items.map(item => {\n            const effectiveQuantity = (item.quantity && item.quantity !== 1) ? item.quantity : 1;\n            let total = 0;\n\n            if (category.id === 'group-transport') {\n              // 團體分攤分類：自動執行團體分攤邏輯\n              if (item.name === '領隊分攤') {\n                // 領隊分攤：(單價 × 數量) ÷ 人數（不含嬰兒）\n                const guideTotalCost = (item.unit_price || 0) * effectiveQuantity;\n                total = groupSizeForGuide > 0 ? Math.ceil(guideTotalCost / groupSizeForGuide) : 0;\n              } else if (groupSizeForGuide > 1) {\n                // 其他團體分攤項目：執行一般團體分攤邏輯（不含嬰兒）\n                const total_cost = effectiveQuantity * (item.unit_price || 0);\n                total = Math.ceil(total_cost / groupSizeForGuide);\n              } else {\n                // 人數為1時，不分攤\n                total = Math.ceil(effectiveQuantity * (item.unit_price || 0));\n              }\n            } else if ((category.id === 'transport' || category.id === 'guide') && item.is_group_cost && groupSize > 1) {\n              // 交通和領隊導遊的團體分攤邏輯：小計 = (數量 × 單價) ÷ 團體人數\n              const total_cost = effectiveQuantity * (item.unit_price || 0);\n              total = Math.ceil(total_cost / groupSize);\n            } else {\n              // 維持原有的 total 值\n              total = item.total || 0;\n            }\n\n            return { ...item, total };\n          });\n\n          const categoryTotal = updatedItems.reduce((sum, item) => sum + (item.total || 0), 0);\n          return { ...category, items: updatedItems, total: categoryTotal };\n        }\n        return category;\n      });\n    });\n  }, [participantCounts, groupSize, groupSizeForGuide]); // 監聽人數變化\n\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const scrollTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (scrollRef.current) {\n        scrollRef.current.classList.add('scrolling');\n\n        if (scrollTimeoutRef.current) {\n          clearTimeout(scrollTimeoutRef.current);\n        }\n\n        scrollTimeoutRef.current = setTimeout(() => {\n          if (scrollRef.current) {\n            scrollRef.current.classList.remove('scrolling');\n          }\n        }, 1000);\n      }\n    };\n\n    const element = scrollRef.current;\n    if (element) {\n      element.addEventListener('scroll', handleScroll);\n      return () => element.removeEventListener('scroll', handleScroll);\n    }\n  }, []);\n\n  const handleAddRow = useCallback((category_id: string) => {\n    if (category_id === 'accommodation') {\n      // 住宿用專用函數\n      handleAddAccommodationRoomType();\n      return;\n    }\n\n    const newItem: CostItem = {\n      id: Date.now().toString(),\n      name: '',\n      quantity: 0,\n      unit_price: 0,\n      total: 0,\n      note: ''\n    };\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === category_id) {\n        return {\n          ...cat,\n          items: [...cat.items, newItem]\n        };\n      }\n      return cat;\n    }));\n  }, []);\n\n  // 新增導遊項目\n  const handleAddGuideRow = (category_id: string) => {\n    const totalGuideCost = calculateGuideWithCategories(categories);\n\n    const newItem: CostItem = {\n      id: Date.now().toString(),\n      name: '領隊分攤',\n      quantity: 1,\n      unit_price: totalGuideCost,\n      total: groupSizeForGuide > 0 ? Math.ceil(totalGuideCost / groupSizeForGuide) : 0,\n      note: '自動計算：住宿第一房型 + 成人機票'\n    };\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === category_id) {\n        return {\n          ...cat,\n          items: [...cat.items, newItem]\n        };\n      }\n      return cat;\n    }));\n  };\n\n  // 新增成人機票\n  const handleAddAdultTicket = (category_id: string) => {\n    const newItem: CostItem = {\n      id: Date.now().toString(),\n      name: '成人機票',\n      quantity: 0,\n      unit_price: 0,\n      total: 0,\n      note: '',\n      pricing_type: 'by_identity',\n      adult_price: 0\n    };\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === category_id) {\n        return {\n          ...cat,\n          items: [...cat.items, newItem]\n        };\n      }\n      return cat;\n    }));\n  };\n\n  // 新增小孩機票\n  const handleAddChildTicket = (category_id: string) => {\n    const newItem: CostItem = {\n      id: Date.now().toString(),\n      name: '小孩機票',\n      quantity: 0,\n      unit_price: 0,\n      total: 0,\n      note: '',\n      pricing_type: 'by_identity',\n      child_price: 0\n    };\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === category_id) {\n        return {\n          ...cat,\n          items: [...cat.items, newItem]\n        };\n      }\n      return cat;\n    }));\n  };\n\n  // 新增嬰兒機票\n  const handleAddInfantTicket = (category_id: string) => {\n    const newItem: CostItem = {\n      id: Date.now().toString(),\n      name: '嬰兒機票',\n      quantity: 0,\n      unit_price: 0,\n      total: 0,\n      note: '',\n      pricing_type: 'by_identity',\n      infant_price: 0\n    };\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === category_id) {\n        return {\n          ...cat,\n          items: [...cat.items, newItem]\n        };\n      }\n      return cat;\n    }));\n  };\n\n  // 住宿：新增天數\n  const handleAddAccommodationDay = useCallback(() => {\n    const newDayCount = accommodationDays + 1;\n    setAccommodationDays(newDayCount);\n\n    // 新增一天，預設加一個空房型\n    const timestamp = Date.now();\n    const newItem: CostItem = {\n      id: `accommodation-day${newDayCount}-${timestamp}`,\n      name: '',\n      quantity: 0,\n      unit_price: 0,\n      total: 0,\n      note: '',\n      day: newDayCount,\n      room_type: ''\n    };\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === 'accommodation') {\n        return {\n          ...cat,\n          items: [...cat.items, newItem]\n        };\n      }\n      return cat;\n    }));\n  }, [accommodationDays]);\n\n  // 住宿：新增房型（在所有現有天數都新增同樣的房型）\n  const handleAddAccommodationRoomType = useCallback(() => {\n    if (accommodationDays === 0) return; // 必須先有天數\n\n    const timestamp = Date.now();\n    const newItems: CostItem[] = [];\n\n    // 為每一天都新增同樣的房型\n    for (let day = 1; day <= accommodationDays; day++) {\n      newItems.push({\n        id: `accommodation-day${day}-${timestamp}`,\n        name: '',\n        quantity: 0,\n        unit_price: 0,\n        total: 0,\n        note: '',\n        day: day,\n        room_type: ''\n      });\n    }\n\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === 'accommodation') {\n        return {\n          ...cat,\n          items: [...cat.items, ...newItems]\n        };\n      }\n      return cat;\n    }));\n  }, [accommodationDays]);\n\n\n  const handleUpdateItem = (category_id: string, itemId: string, field: keyof CostItem, value: any) => {\n    setCategories(prev => {\n      const newCategories = prev.map(cat => {\n        if (cat.id === category_id) {\n          const updatedItems = cat.items.map(item => {\n            if (item.id === itemId) {\n              const updatedItem = { ...item, [field]: value };\n              // 自動計算總價\n              if (field === 'quantity' || field === 'unit_price' || field === 'is_group_cost' || field === 'adult_price' || field === 'child_price' || field === 'infant_price') {\n                // 數量預設為 1，只有當用戶輸入時才使用輸入值\n                const effectiveQuantity = updatedItem.quantity === 0 ? 1 : (updatedItem.quantity || 1);\n\n                // 成人、小孩、嬰兒機票：顯示對應票價在小計欄位\n                if (updatedItem.name === '成人機票') {\n                  updatedItem.total = updatedItem.adult_price || 0;\n                } else if (updatedItem.name === '小孩機票') {\n                  updatedItem.total = updatedItem.child_price || 0;\n                } else if (updatedItem.name === '嬰兒機票') {\n                  updatedItem.total = updatedItem.infant_price || 0;\n                }\n                else if (category_id === 'accommodation') {\n                  // 住宿特殊邏輯：小計 = 單價 ÷ 人數\n                  updatedItem.total = effectiveQuantity > 0 ? Math.ceil((updatedItem.unit_price || 0) / effectiveQuantity) : 0;\n                } else if ((category_id === 'transport' || category_id === 'guide') && updatedItem.is_group_cost && groupSize > 1) {\n                  // 交通和領隊導遊的團體分攤邏輯：小計 = (數量 × 單價) ÷ 團體人數\n                  const total_cost = effectiveQuantity * (updatedItem.unit_price || 0);\n                  updatedItem.total = Math.ceil(total_cost / groupSize);\n                } else if (category_id === 'group-transport') {\n                  // 團體分攤分類：自動執行團體分攤邏輯\n                  if (updatedItem.name === '領隊分攤') {\n                    // 領隊分攤：(單價 × 數量) ÷ 人數（不含嬰兒）\n                    const guideTotalCost = (updatedItem.unit_price || 0) * effectiveQuantity;\n                    updatedItem.total = groupSizeForGuide > 0 ? Math.ceil(guideTotalCost / groupSizeForGuide) : 0;\n                  } else if (groupSizeForGuide > 1) {\n                    // 其他團體分攤項目：執行一般團體分攤邏輯（不含嬰兒）\n                    const total_cost = effectiveQuantity * (updatedItem.unit_price || 0);\n                    updatedItem.total = Math.ceil(total_cost / groupSizeForGuide);\n                  } else {\n                    // 人數為1時，不分攤\n                    updatedItem.total = Math.ceil(effectiveQuantity * (updatedItem.unit_price || 0));\n                  }\n                } else {\n                  // 一般邏輯：小計 = 數量 × 單價\n                  updatedItem.total = Math.ceil(effectiveQuantity * (updatedItem.unit_price || 0));\n                }\n              }\n              return updatedItem;\n            }\n            return item;\n          });\n\n          return {\n            ...cat,\n            items: updatedItems,\n            total: updatedItems.reduce((sum, item) => sum + item.total, 0)\n          };\n        }\n        return cat;\n      });\n\n      // 如果有住宿或交通數據變更，需要更新所有領隊分攤項目\n      if (category_id === 'accommodation' || category_id === 'transport') {\n        return updateGuideItems(newCategories);\n      }\n\n      return newCategories;\n    });\n  };\n\n  // 更新所有領隊分攤項目\n  const updateGuideItems = (categories: CostCategory[]) => {\n    // 重新計算領隊費用\n    const totalGuideCost = calculateGuideWithCategories(categories);\n\n    return categories.map(cat => {\n      if (cat.id === 'group-transport') {\n        const updatedItems = cat.items.map(item => {\n          if (item.name === '領隊分攤') {\n            const effectiveQuantity = (item.quantity && item.quantity !== 1) ? item.quantity : 1;\n            return {\n              ...item,\n              unit_price: totalGuideCost,\n              total: groupSizeForGuide > 0 ? Math.ceil(totalGuideCost * effectiveQuantity / groupSizeForGuide) : 0\n            };\n          }\n          return item;\n        });\n\n        return {\n          ...cat,\n          items: updatedItems,\n          total: updatedItems.reduce((sum, item) => sum + item.total, 0)\n        };\n      }\n      return cat;\n    });\n  };\n\n  // 使用特定的 categories 來計算領隊費用\n  const calculateGuideWithCategories = (categories: CostCategory[]) => {\n    // 1. 計算住宿每日第一個房型的單價總和\n    const accommodationCategory = categories.find(cat => cat.id === 'accommodation');\n    let dailyFirstRoomCost = 0;\n\n    if (accommodationCategory && accommodationCategory.items.length > 0) {\n      const accommodationItems = accommodationCategory.items.filter(item => item.day !== undefined);\n      const groupedByDay: Record<number, CostItem[]> = {};\n\n      // 按天分組\n      accommodationItems.forEach(item => {\n        const day = item.day!;\n        if (!groupedByDay[day]) groupedByDay[day] = [];\n        groupedByDay[day].push(item);\n      });\n\n      // 計算每天第一個房型的單價\n      Object.keys(groupedByDay).forEach(dayStr => {\n        const dayItems = groupedByDay[Number(dayStr)];\n        if (dayItems.length > 0) {\n          dailyFirstRoomCost += dayItems[0].unit_price || 0;\n        }\n      });\n    }\n\n    // 2. 計算成人機票費用\n    const transportCategory = categories.find(cat => cat.id === 'transport');\n    let adultTicketCost = 0;\n\n    if (transportCategory && transportCategory.items.length > 0) {\n      const adultTicket = transportCategory.items.find(item => item.name === '成人機票');\n      if (adultTicket) {\n        adultTicketCost = adultTicket.adult_price || 0;\n      }\n    }\n\n    // 3. 領隊總成本 = 住宿第一房型總和 + 成人機票費用（不除法）\n    const totalGuideCost = dailyFirstRoomCost + adultTicketCost;\n\n    return totalGuideCost;\n  };\n\n\n  const handleRemoveItem = useCallback((category_id: string, itemId: string) => {\n    setCategories(prev => prev.map(cat => {\n      if (cat.id === category_id) {\n        const updatedItems = cat.items.filter(item => item.id !== itemId);\n\n        // 如果是住宿類別，需要重新計算天數並重新編號\n        if (category_id === 'accommodation' && updatedItems.length > 0) {\n          // 取得所有唯一的天數\n          const uniqueDays = Array.from(new Set(updatedItems.map(item => item.day).filter(d => d !== undefined)));\n          uniqueDays.sort((a, b) => a! - b!);\n\n          // 重新編號天數（從 1 開始）\n          const reorderedItems = updatedItems.map(item => {\n            const oldDay = item.day;\n            const newDay = uniqueDays.findIndex(d => d === oldDay) + 1;\n            return {\n              ...item,\n              day: newDay\n            };\n          });\n\n          // 更新 accommodationDays 為實際天數\n          const actualDays = Math.max(...reorderedItems.map(item => item.day || 0));\n          setAccommodationDays(actualDays);\n\n          return {\n            ...cat,\n            items: reorderedItems,\n            total: reorderedItems.reduce((sum, item) => sum + item.total, 0)\n          };\n        }\n\n        return {\n          ...cat,\n          items: updatedItems,\n          total: updatedItems.reduce((sum, item) => sum + item.total, 0)\n        };\n      }\n      return cat;\n    }));\n  }, []);\n\n  // 計算交通團體分攤信息\n  const transportGroupSummary = useMemo(() => {\n    const transportCategory = categories.find(cat => cat.id === 'transport');\n    if (!transportCategory || transportCategory.items.length === 0) return null;\n\n    const groupCostItems = transportCategory.items.filter(item => item.is_group_cost);\n    if (groupCostItems.length === 0) return null;\n\n    const totalGroupCost = groupCostItems.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);\n    const perPersonCost = groupSize > 0 ? totalGroupCost / groupSize : 0;\n\n    return {\n      totalGroupCost,\n      perPersonCost,\n      item_count: groupCostItems.length\n    };\n  }, [categories, groupSize]);\n\n  // 計算領隊分攤金額\n  const guideCostPerPerson = useMemo(() => {\n    const totalGuideCost = calculateGuideWithCategories(categories);\n    return groupSizeForGuide > 0 ? Math.ceil(totalGuideCost / groupSizeForGuide) : 0;\n  }, [categories, groupSizeForGuide]);\n\n  // 處理下拉選單項目選擇\n  const handleOptionSelect = (category_id: string, itemId: string, option: any) => {\n    // 更新項目名稱\n    handleUpdateItem(category_id, itemId, 'name', option.name);\n\n    // 根據選項類型設定價格和團體分攤狀態\n    if (option.pricePerGroup && option.is_group_cost) {\n      // 團體費用\n      handleUpdateItem(category_id, itemId, 'unit_price', option.pricePerGroup);\n      handleUpdateItem(category_id, itemId, 'is_group_cost', true);\n    } else if (option.price_per_person) {\n      // 個人費用\n      handleUpdateItem(category_id, itemId, 'unit_price', option.price_per_person);\n      handleUpdateItem(category_id, itemId, 'is_group_cost', false);\n    } else if (option.adultPrice !== undefined) {\n      // 活動門票 (使用成人價格)\n      handleUpdateItem(category_id, itemId, 'unit_price', option.adultPrice);\n      handleUpdateItem(category_id, itemId, 'is_group_cost', false);\n    }\n  };\n\n  // 取得當前地區的選項\n  const regionOptions = getRegionOptions(selectedRegion);\n\n  // 計算住宿的房型位置平均費用\n  const accommodationSummary = useMemo(() => {\n    const accommodationCategory = categories.find(cat => cat.id === 'accommodation');\n    if (!accommodationCategory || accommodationCategory.items.length === 0) return [];\n\n    const accommodationItems = accommodationCategory.items.filter(item => item.day !== undefined);\n    const groupedByDay: Record<number, CostItem[]> = {};\n\n    // 按天分組\n    accommodationItems.forEach(item => {\n      const day = item.day!;\n      if (!groupedByDay[day]) groupedByDay[day] = [];\n      groupedByDay[day].push(item);\n    });\n\n    const days = Object.keys(groupedByDay).map(d => Number(d)).sort((a, b) => a - b);\n    if (days.length === 0) return [];\n\n    // 找出最大房型數量\n    const maxRoomTypes = Math.max(...days.map(day => groupedByDay[day].length));\n    const roomTypeSummaries = [];\n\n    // 按房型位置計算\n    for (let roomIndex = 0; roomIndex < maxRoomTypes; roomIndex++) {\n      let total_cost = 0;\n      let roomTypeName = '';\n      let validDays = 0;\n\n      days.forEach(day => {\n        const dayItems = groupedByDay[day];\n        if (dayItems[roomIndex]) {\n          total_cost += dayItems[roomIndex].total;\n          validDays++;\n          if (!roomTypeName && dayItems[roomIndex].name) {\n            roomTypeName = dayItems[roomIndex].name;\n          }\n        }\n      });\n\n      if (validDays > 0) {\n        roomTypeSummaries.push({\n          name: roomTypeName || `房型${roomIndex + 1}`,\n          total_cost,\n          averageCost: total_cost / validDays,\n          days: validDays\n        });\n      }\n    }\n\n    return roomTypeSummaries;\n  }, [categories]);\n  // 住宿總成本 = 房型一總成本 + 房型二總成本 + ...\n  const accommodationTotal = useMemo(() =>\n    accommodationSummary.reduce((sum, room) => sum + room.total_cost, 0)\n  , [accommodationSummary]);\n\n  // 更新住宿分類的總計為房型加總\n  const updatedCategories = useMemo(() =>\n    categories.map(cat => {\n      if (cat.id === 'accommodation') {\n        return { ...cat, total: accommodationTotal };\n      }\n      return cat;\n    })\n  , [categories, accommodationTotal]);\n\n  // 計算各身份的總成本\n  const identityCosts = useMemo(() => {\n    const costs = {\n      adult: 0,\n      child_with_bed: 0,\n      child_no_bed: 0,\n      single_room: 0,\n      infant: 0\n    };\n\n    updatedCategories.forEach(category => {\n      category.items.forEach(item => {\n        if (category.id === 'transport') {\n          // 交通類別：依照項目名稱區分身份\n          if (item.name === '成人機票') {\n            // 成人機票：只加給成人和單人房\n            costs.adult += (item.adult_price || 0);\n            costs.single_room += (item.adult_price || 0);\n          } else if (item.name === '小孩機票') {\n            // 小孩機票：只加給小孩（佔床、不佔床）\n            costs.child_with_bed += (item.child_price || 0);\n            costs.child_no_bed += (item.child_price || 0);\n          } else if (item.name === '嬰兒機票') {\n            // 嬰兒機票：只加給嬰兒\n            costs.infant += (item.infant_price || 0);\n          } else {\n            // 其他交通費用（遊覽車等統一價）：成人、小孩佔床、單人房\n            const itemCost = item.unit_price || 0;\n            costs.adult += itemCost;\n            costs.child_with_bed += itemCost;\n            costs.single_room += itemCost;\n            // 不佔床和嬰兒不含一般交通\n          }\n        } else if (category.id === 'accommodation') {\n          // 住宿：成人和小朋友佔床是÷2，單人房是全額\n          const roomPrice = item.unit_price || 0;\n          costs.adult += Math.ceil(roomPrice / 2);\n          costs.child_with_bed += Math.ceil(roomPrice / 2);\n          // 不佔床不含住宿\n          costs.single_room += roomPrice; // 單人房全額\n          // 嬰兒不含住宿\n        } else if (category.id === 'meals' || category.id === 'activities' || category.id === 'others') {\n          // 餐飲、活動、其他：成人、小朋友佔床、單人房有，不佔床和嬰兒沒有\n          const itemCost = item.unit_price || 0;\n          costs.adult += itemCost;\n          costs.child_with_bed += itemCost;\n          // 不佔床不含餐飲和活動\n          costs.single_room += itemCost;\n          // 嬰兒不含餐飲和活動\n        } else if (category.id === 'group-transport' || category.id === 'guide') {\n          // 團體分攤、領隊導遊：不含嬰兒的身份分攤\n          const itemCost = item.total || 0;\n          costs.adult += itemCost;\n          costs.child_with_bed += itemCost;\n          costs.child_no_bed += itemCost;\n          costs.single_room += itemCost;\n          // 嬰兒不分攤導遊費用\n        }\n      });\n    });\n\n    return costs;\n  }, [updatedCategories]);\n\n  // 計算總成本（每個身份成本 × 人數）\n  const total_cost = useMemo(() =>\n    identityCosts.adult * participantCounts.adult +\n    identityCosts.child_with_bed * participantCounts.child_with_bed +\n    identityCosts.child_no_bed * participantCounts.child_no_bed +\n    identityCosts.single_room * participantCounts.single_room +\n    identityCosts.infant * participantCounts.infant\n  , [identityCosts, participantCounts]);\n\n  // 計算各身份的利潤\n  const identityProfits = useMemo(() => ({\n    adult: sellingPrices.adult - identityCosts.adult,\n    child_with_bed: sellingPrices.child_with_bed - identityCosts.child_with_bed,\n    child_no_bed: sellingPrices.child_no_bed - identityCosts.child_no_bed,\n    single_room: sellingPrices.single_room - identityCosts.single_room,\n    infant: sellingPrices.infant - identityCosts.infant\n  }), [sellingPrices, identityCosts]);\n\n  // 保存版本\n  const handleSaveVersion = useCallback((note?: string) => {\n    if (!quote) return;\n\n    try {\n      // 創建新的版本記錄\n      const currentVersion = quote.version || 1;\n      const newVersionRecord = {\n        id: Date.now().toString(),\n        version: currentVersion,\n        categories: updatedCategories,\n        total_cost,\n        group_size: groupSize,\n        accommodation_days: accommodationDays,\n        participant_counts: participantCounts,\n        selling_prices: sellingPrices,\n        note: note || versionName || `版本 ${currentVersion}`,\n        created_at: new Date().toISOString()\n      };\n\n      // 取得現有的版本歷史\n      const existingVersions = quote.versions || [];\n\n      // 更新報價單：增加版本號，將當前狀態加入版本歷史\n      updateQuote(quote.id, {\n        categories: updatedCategories as any,\n        total_cost,\n        group_size: groupSize,\n        name: quoteName,\n        accommodation_days: accommodationDays,\n        participant_counts: participantCounts,\n        selling_prices: sellingPrices,\n        version: currentVersion + 1, // 版本號 +1\n        versions: [...existingVersions, newVersionRecord] as any // 加入新版本到歷史\n      } as any);\n\n      // 顯示成功提示\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 2000);\n    } catch (error) {\n      logger.error('保存版本失敗:', error);\n    }\n  }, [quote, updatedCategories, total_cost, groupSize, quoteName, accommodationDays, participantCounts, sellingPrices, versionName, updateQuote]);\n\n  // 載入特定版本\n  const handleLoadVersion = useCallback((versionData: any) => {\n    setCategories(versionData.categories);\n    setAccommodationDays(versionData.accommodation_days || 0);\n    if (versionData.participant_counts) {\n      setParticipantCounts(versionData.participant_counts);\n    }\n    if (versionData.selling_prices) {\n      setSellingPrices(versionData.selling_prices);\n    }\n    // 版本切換不改變基本資訊（名稱、狀態等），只改變費用結構和人數\n  }, []);\n\n  // 格式化時間\n  const formatDateTime = useCallback((dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleString('zh-TW', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }, []);\n\n  // 轉為最終版本\n  const handleFinalize = () => {\n    if (!quote) return;\n\n    // 先保存當前版本\n    handleSaveVersion('轉為最終版本前的狀態');\n\n    // 更新狀態為最終版本\n    updateQuote(quote.id, {\n      status: 'approved',\n      categories: updatedCategories as any, // CostCategory[] 與 QuoteCategory[] 結構相同\n      total_cost,\n      group_size: groupSize,\n      name: quoteName,\n      accommodation_days: accommodationDays,\n      participant_counts: participantCounts,\n      selling_prices: sellingPrices\n    } as any);\n\n    // 自動跳轉到旅遊團新增頁面，並帶上報價單ID\n    router.push(`/tours?fromQuote=${quote.id}`);\n  };\n\n  // 開旅遊團\n  const handleCreateTour = async () => {\n    if (!quote) return;\n\n    // 先保存目前的報價單狀態\n    handleSaveVersion('轉為旅遊團前的版本');\n\n    // 更新報價單狀態為最終版本\n    updateQuote(quote.id, { status: 'approved' });\n\n    // 創建旅遊團（使用報價單選擇的城市）\n    const departure_date = new Date();\n    departure_date.setDate(departure_date.getDate() + 30); // 預設30天後出發\n    const return_date = new Date(departure_date);\n    return_date.setDate(return_date.getDate() + 5); // 預設5天行程\n\n    // 取得選擇的城市名稱\n    const selectedCityObj = availableCities.find(c => c.code === selectedCity);\n    const cityName = selectedCityObj?.name || selectedCity;\n\n    // 從選擇的地區生成團號\n    const tourCode = generateTourCode(selectedCity, departure_date, false);\n\n    const newTour = await addTour({\n      name: quoteName,\n      location: cityName, // 使用城市名稱\n      departure_date: departure_date.toISOString().split('T')[0],\n      return_date: return_date.toISOString().split('T')[0],\n      price: Math.round(total_cost / groupSize), // 每人單價\n      status: 'draft',\n      code: tourCode,\n      contract_status: 'pending',\n      total_revenue: 0,\n      total_cost: total_cost,\n      profit: 0,\n    } as any);\n\n    // 更新報價單的 tour_id\n    if (newTour?.id) {\n      await updateQuote(quote.id, { tour_id: newTour.id });\n    }\n\n    // 跳轉到旅遊團管理頁面，並高亮新建的團\n    router.push(`/tours?highlight=${newTour?.id}`);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 特殊團鎖定警告 */}\n      {isSpecialTour && (\n        <div className=\"fixed top-18 right-0 left-16 bg-orange-50 border-b border-orange-200 z-30 px-6 py-2\">\n          <div className=\"flex items-center space-x-2 text-orange-800\">\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"text-sm font-medium\">此為特殊團報價單，所有欄位已鎖定無法編輯</span>\n          </div>\n        </div>\n      )}\n\n      {/* 正確的兩區域標題設計 */}\n      <div className={cn(\n        \"fixed top-0 right-0 left-16 h-18 bg-background border-b border-border z-40 flex items-center justify-between px-6\",\n        isSpecialTour && \"border-b-0\"\n      )}>\n        {/* 左區：內容標題區域 - 緊湊排列 */}\n        <div className=\"flex items-center space-x-3 flex-shrink-0\">\n          <button\n            onClick={() => router.push('/quotes')}\n            className=\"p-2 hover:bg-morandi-container rounded-lg transition-colors\"\n            title=\"返回報價單列表\"\n          >\n            <ArrowLeft size={20} className=\"text-morandi-secondary\" />\n          </button>\n\n          {/* 顯示編號 */}\n          <div className=\"text-sm font-mono text-morandi-secondary\">\n            {relatedTour ? (\n              <span className=\"text-morandi-gold\" title=\"旅遊團編號\">\n                {relatedTour.code || '-'}\n              </span>\n            ) : (\n              <span>\n                {(quote as any)?.code || '-'}\n              </span>\n            )}\n          </div>\n\n          <input\n            type=\"text\"\n            value={quoteName}\n            onChange={(e) => setQuoteName(e.target.value)}\n            disabled={isReadOnly}\n            className={cn(\n              \"text-lg font-bold text-morandi-primary bg-transparent border-0 focus:outline-none focus:bg-white px-2 py-1 rounded w-[180px]\",\n              isReadOnly && \"cursor-not-allowed opacity-60\"\n            )}\n            placeholder=\"輸入團體名稱\"\n          />\n\n        </div>\n\n        {/* 右區：功能區域 (原中+右合併) */}\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex items-center space-x-1 whitespace-nowrap\">\n            <span className=\"text-sm text-morandi-secondary\">地區:</span>\n            {relatedTour ? (\n              // 有關聯旅遊團：顯示旅遊團地區（唯讀）\n              <input\n                type=\"text\"\n                value={relatedTour.location}\n                readOnly\n                className=\"px-2 py-1 text-sm border border-border rounded bg-morandi-container/30 text-morandi-secondary cursor-not-allowed\"\n                title=\"從旅遊團自動帶入\"\n              />\n            ) : (\n              // 沒有關聯旅遊團：可選擇地區\n              <select\n                value={selectedRegion}\n                onChange={(e) => setSelectedRegion(e.target.value as RegionName)}\n                disabled={isReadOnly}\n                className={cn(\n                  \"px-2 py-1 text-sm border border-border rounded bg-background text-morandi-primary\",\n                  isReadOnly && \"cursor-not-allowed opacity-60\"\n                )}\n              >\n                <option value=\"清邁\">清邁</option>\n                <option value=\"曼谷\">曼谷</option>\n                <option value=\"東京\">東京</option>\n              </select>\n            )}\n          </div>\n\n          {/* 人數統計 - 5個身份 */}\n          <div className=\"flex items-center space-x-2 whitespace-nowrap text-xs\">\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-morandi-secondary\">成人:</span>\n              <input\n                type=\"number\"\n                value={participantCounts.adult}\n                onChange={(e) => setParticipantCounts(prev => ({ ...prev, adult: Number(e.target.value) || 0 }))}\n                disabled={isReadOnly}\n                className={cn(\"w-12 px-1 py-1 text-xs text-center border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                min=\"0\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-morandi-secondary\">小孩:</span>\n              <input\n                type=\"number\"\n                value={participantCounts.child_with_bed}\n                onChange={(e) => setParticipantCounts(prev => ({ ...prev, child_with_bed: Number(e.target.value) || 0 }))}\n                disabled={isReadOnly}\n                className={cn(\"w-12 px-1 py-1 text-xs text-center border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                min=\"0\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-morandi-secondary\">不佔床:</span>\n              <input\n                type=\"number\"\n                value={participantCounts.child_no_bed}\n                onChange={(e) => setParticipantCounts(prev => ({ ...prev, child_no_bed: Number(e.target.value) || 0 }))}\n                disabled={isReadOnly}\n                className={cn(\"w-12 px-1 py-1 text-xs text-center border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                min=\"0\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-morandi-secondary\">單人房:</span>\n              <input\n                type=\"number\"\n                value={participantCounts.single_room}\n                onChange={(e) => setParticipantCounts(prev => ({ ...prev, single_room: Number(e.target.value) || 0 }))}\n                disabled={isReadOnly}\n                className={cn(\"w-12 px-1 py-1 text-xs text-center border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                min=\"0\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-morandi-secondary\">嬰兒:</span>\n              <input\n                type=\"number\"\n                value={participantCounts.infant}\n                onChange={(e) => setParticipantCounts(prev => ({ ...prev, infant: Number(e.target.value) || 0 }))}\n                disabled={isReadOnly}\n                className={cn(\"w-12 px-1 py-1 text-xs text-center border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                min=\"0\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-1 whitespace-nowrap\">\n            <span className=\"text-sm text-morandi-secondary\">狀態:</span>\n            <span className={cn(\n              'inline-flex items-center px-2 py-1 rounded text-sm font-medium',\n              quote && quote.status === 'proposed'\n                ? 'bg-morandi-gold text-white'\n                : 'bg-morandi-green text-white'\n            )}>\n              {quote?.status === 'proposed' ? '提案' : quote?.status === 'approved' ? '已核准' : quote?.status || '提案'}\n            </span>\n          </div>\n\n          <Button\n            onClick={() => setIsSaveDialogOpen(true)}\n            disabled={isReadOnly}\n            className={cn(\n              \"h-8 px-3 text-sm transition-all duration-200\",\n              saveSuccess\n                ? \"bg-morandi-green hover:bg-morandi-green text-white\"\n                : \"bg-morandi-green hover:bg-morandi-green-hover text-white\",\n              isReadOnly && \"cursor-not-allowed opacity-60\"\n            )}\n          >\n            <Save size={14} className=\"mr-1.5\" />\n            {saveSuccess ? '已保存' : '保存版本'}\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger\n              disabled={isReadOnly}\n              className={cn(\n                \"h-8 px-3 text-sm border-morandi-container text-morandi-secondary hover:bg-morandi-container\",\n                isReadOnly && \"cursor-not-allowed opacity-60\"\n              )}\n            >\n              <History size={14} className=\"mr-1.5\" />\n              版本 {quote?.version || 1}\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-64\">\n              <div className=\"px-2 py-1 text-sm font-medium text-morandi-primary border-b border-border\">\n                版本歷史\n              </div>\n\n              {/* 當前版本 */}\n              <DropdownMenuItem className=\"flex items-center justify-between py-2\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-medium\">版本 {quote?.version || 1} (當前)</span>\n                  <span className=\"text-xs text-morandi-secondary\">\n                    {quote?.updated_at ? formatDateTime(quote.updated_at) : ''}\n                  </span>\n                </div>\n                <div className=\"text-xs bg-morandi-gold text-white px-2 py-1 rounded\">\n                  當前\n                </div>\n              </DropdownMenuItem>\n\n              {/* 歷史版本 */}\n              {quote?.versions && quote.versions.length > 0 && (\n                <>\n                  {quote.versions\n                    .sort((a, b) => b.version - a.version)\n                    .map((version) => (\n                      <DropdownMenuItem\n                        key={version.id}\n                        className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-morandi-container/30\"\n                        onClick={() => handleLoadVersion(version)}\n                      >\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{version.note || `版本 ${version.version}`}</span>\n                          <span className=\"text-xs text-morandi-secondary\">\n                            {formatDateTime(version.created_at)}\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-morandi-secondary\">\n                          NT$ {version.total_cost.toLocaleString()}\n                        </div>\n                      </DropdownMenuItem>\n                    ))\n                  }\n                </>\n              )}\n\n              {(!quote?.versions || quote.versions.length === 0) && (\n                <div className=\"px-2 py-3 text-sm text-morandi-secondary text-center\">\n                  尚無歷史版本\n                </div>\n              )}\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {quote && quote.status === 'proposed' && (\n            <Button\n              onClick={handleFinalize}\n              disabled={isReadOnly}\n              className={cn(\n                \"h-8 px-3 text-sm bg-morandi-primary hover:bg-morandi-primary/90 text-white\",\n                isReadOnly && \"cursor-not-allowed opacity-60\"\n              )}\n            >\n              <CheckCircle size={14} className=\"mr-1.5\" />\n              轉為最終版本\n            </Button>\n          )}\n\n          {quote && quote.status === 'approved' && (\n            relatedTour ? (\n              // 已有關聯旅遊團：前往該旅遊團\n              <Button\n                onClick={() => router.push(`/tours?highlight=${relatedTour.id}`)}\n                className=\"h-8 px-3 text-sm bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                <Plane size={14} className=\"mr-1.5\" />\n                前往旅遊團\n              </Button>\n            ) : (\n              // 沒有關聯旅遊團：建立新旅遊團\n              <Button\n                onClick={handleCreateTour}\n                disabled={isReadOnly}\n                className={cn(\n                  \"h-8 px-3 text-sm bg-morandi-gold hover:bg-morandi-gold-hover text-white\",\n                  isReadOnly && \"cursor-not-allowed opacity-60\"\n                )}\n              >\n                <Plane size={14} className=\"mr-1.5\" />\n                開旅遊團\n              </Button>\n            )\n          )}\n        </div>\n      </div>\n\n      <div className=\"px-6 pb-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-10 gap-6\">\n          {/* 左側內容區 - 70% */}\n          <div className={cn(\n            \"lg:col-span-7\",\n            isReadOnly && \"opacity-70 pointer-events-none select-none\"\n          )}>\n            <div className=\"border border-border bg-card rounded-lg overflow-hidden shadow-sm\">\n              <div ref={scrollRef} className=\"scrollable-content overflow-x-auto\">\n                <table className=\"w-full min-w-[800px] border-collapse\">\n                <thead className=\"bg-morandi-container/50\">\n                  <tr className=\"border-b-2 border-border\">\n                    <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary w-12 table-divider\">分類</th>\n                    <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary w-70 table-divider\">項目</th>\n                    <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary w-8 table-divider\">數量</th>\n                    <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary w-28 table-divider\">單價</th>\n                    <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary w-28 table-divider whitespace-nowrap\">小計</th>\n                    <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary w-32 table-divider\">備註</th>\n                    <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary w-24\">操作</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {categories.map((category) => {\n                    const Icon = categoryIcons[category.id];\n\n                    return (\n                      <React.Fragment key={category.id}>\n                        {/* 分類標題行 */}\n                        <tr className=\"bg-morandi-container/20 border-b border-border\">\n                          <td colSpan={2} className=\"py-2 px-4 font-medium text-morandi-primary\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Icon size={16} className=\"text-morandi-gold\" />\n                              <span>{category.name}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-2 px-4\"></td>\n                          <td className=\"py-2 px-4\"></td>\n                          <td className=\"py-2 px-4 font-medium text-morandi-primary text-center whitespace-nowrap\">\n                            NT$ {category.id === 'accommodation' ? accommodationTotal.toLocaleString() :\n                                 category.items.reduce((sum, item) => sum + (item.total || 0), 0).toLocaleString()}\n                          </td>\n                          <td colSpan={2} className=\"py-2 px-4 text-right\">\n                            {category.id === 'accommodation' ? (\n                              <div className=\"flex gap-1 justify-end\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={handleAddAccommodationDay}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-gold hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  新增天數\n                                </Button>\n                                {accommodationDays > 0 && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleAddRow(category.id)}\n                                    disabled={isReadOnly}\n                                    className={cn(\n                                      \"h-6 px-2 text-xs text-morandi-secondary hover:bg-morandi-gold/10\",\n                                      isReadOnly && \"cursor-not-allowed opacity-60\"\n                                    )}\n                                  >\n                                    <Plus size={12} className=\"mr-1\" />\n                                    新增\n                                  </Button>\n                                )}\n                              </div>\n                            ) : category.id === 'group-transport' ? (\n                              <div className=\"flex gap-1 justify-end\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddRow(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-gold hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  新增\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddGuideRow(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-secondary hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Users size={12} className=\"mr-1\" />\n                                  新增\n                                </Button>\n                              </div>\n                            ) : category.id === 'transport' ? (\n                              <div className=\"flex gap-1 justify-end\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddAdultTicket(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-gold hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  成人機票\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddChildTicket(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-secondary hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  小孩機票\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddInfantTicket(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-secondary hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  嬰兒機票\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddRow(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-secondary hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  其他\n                                </Button>\n                              </div>\n                            ) : (\n                              <div className=\"flex justify-end\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleAddRow(category.id)}\n                                  disabled={isReadOnly}\n                                  className={cn(\n                                    \"h-6 px-2 text-xs text-morandi-gold hover:bg-morandi-gold/10\",\n                                    isReadOnly && \"cursor-not-allowed opacity-60\"\n                                  )}\n                                >\n                                  <Plus size={12} className=\"mr-1\" />\n                                  新增\n                                </Button>\n                              </div>\n                            )}\n                          </td>\n                        </tr>\n\n\n                        {/* 項目明細行 */}\n                        {category.id === 'accommodation' ? (\n                          // 住宿特殊渲染：按天分組，每天內顯示各房型\n                          (() => {\n                            const accommodationItems = category.items.filter(item => item.day !== undefined);\n                            const groupedByDay: Record<number, CostItem[]> = {};\n\n                            // 按天分組\n                            accommodationItems.forEach(item => {\n                              const day = item.day!;\n                              if (!groupedByDay[day]) groupedByDay[day] = [];\n                              groupedByDay[day].push(item);\n                            });\n\n                            return Object.keys(groupedByDay)\n                              .sort((a, b) => Number(a) - Number(b))\n                              .map(dayStr => {\n                                const day = Number(dayStr);\n                                const dayItems = groupedByDay[day];\n\n                                return dayItems.map((item, roomIndex) => (\n                                  <tr\n                                    key={item.id}\n                                    className=\"border-b border-border hover:bg-morandi-container/10 transition-colors\"\n                                  >\n                                    {/* 分類欄：第一個房型顯示天數 */}\n                                    <td className=\"py-2 px-4 text-sm text-morandi-primary text-center table-divider\">\n                                      {roomIndex === 0 ? `DAY${day}` : ''}\n                                    </td>\n\n                                    {/* 項目欄：房型名稱 */}\n                                    <td className=\"py-2 px-4 text-sm text-morandi-primary text-center table-divider\">\n                                      <input\n                                        type=\"text\"\n                                        value={item.name}\n                                        onChange={(e) => handleUpdateItem(category.id, item.id, 'name', e.target.value)}\n                                        className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white\"\n                                        placeholder=\"房型名稱\"\n                                      />\n                                    </td>\n\n                                    {/* 人數欄 */}\n                                    <td className=\"py-2 px-4 text-sm text-morandi-secondary text-center table-divider\">\n                                      <input\n                                        type=\"number\"\n                                        value={item.quantity && item.quantity !== 1 ? item.quantity : ''}\n                                        onChange={(e) => handleUpdateItem(category.id, item.id, 'quantity', Number(e.target.value) || 0)}\n                                        className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                        placeholder=\"人數\"\n                                      />\n                                    </td>\n\n                                    {/* 單價欄 */}\n                                    <td className=\"py-2 px-4 text-sm text-morandi-secondary text-center table-divider\">\n                                      <input\n                                        type=\"number\"\n                                        value={item.unit_price || ''}\n                                        onChange={(e) => handleUpdateItem(category.id, item.id, 'unit_price', Number(e.target.value) || 0)}\n                                        className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                        placeholder=\"單價\"\n                                      />\n                                    </td>\n\n                                    {/* 小計欄 */}\n                                    <td className=\"py-2 px-4 text-sm text-morandi-primary text-center font-medium table-divider whitespace-nowrap\">\n                                      {item.total.toLocaleString()}\n                                    </td>\n\n\n                                    {/* 備註 / 操作合併欄 */}\n                                    <td colSpan={2} className=\"py-2 px-4 text-sm text-morandi-secondary\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <input\n                                          type=\"text\"\n                                          value={item.note || ''}\n                                          onChange={(e) => handleUpdateItem(category.id, item.id, 'note', e.target.value)}\n                                          className=\"flex-1 px-1 py-1 text-sm bg-transparent border-0 focus:outline-none focus:bg-white\"\n                                          placeholder=\"備註\"\n                                        />\n                                        <button\n                                          onClick={() => handleRemoveItem(category.id, item.id)}\n                                          className=\"ml-2 w-4 h-4 flex items-center justify-center text-xs text-morandi-secondary hover:text-morandi-red hover:bg-morandi-red/10 rounded transition-all flex-shrink-0\"\n                                          title=\"刪除\"\n                                        >\n                                          ×\n                                        </button>\n                                      </div>\n                                    </td>\n                                  </tr>\n                                ));\n                              });\n                          })()\n                        ) : (\n                          // 一般分類的渲染\n                          category.items.map((item, index) => (\n                            <tr\n                              key={item.id}\n                              className=\"border-b border-border hover:bg-morandi-container/10 transition-colors\"\n                            >\n                              <td colSpan={2} className={`py-2 px-4 text-sm text-morandi-primary text-center ${(item.quantity && item.quantity !== 1) ? 'table-divider' : ''}`}>\n                                <input\n                                  type=\"text\"\n                                  value={item.name}\n                                  onChange={(e) => handleUpdateItem(category.id, item.id, 'name', e.target.value)}\n                                  className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white\"\n                                  placeholder=\"輸入項目名稱\"\n                                />\n                              </td>\n                              <td className=\"py-2 px-4 text-sm text-morandi-secondary text-center table-divider\">\n                                <input\n                                  type=\"number\"\n                                  value={item.quantity && item.quantity !== 1 ? item.quantity : ''}\n                                  onChange={(e) => handleUpdateItem(category.id, item.id, 'quantity', Number(e.target.value) || 0)}\n                                  className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                />\n                              </td>\n                              <td className=\"py-2 px-4 text-sm text-morandi-secondary text-center table-divider\">\n                                {item.name === '成人機票' ? (\n                                  <input\n                                    type=\"number\"\n                                    value={item.adult_price || ''}\n                                    onChange={(e) => handleUpdateItem(category.id, item.id, 'adult_price', Number(e.target.value) || 0)}\n                                    className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                    placeholder=\"成人票價\"\n                                  />\n                                ) : item.name === '小孩機票' ? (\n                                  <input\n                                    type=\"number\"\n                                    value={item.child_price || ''}\n                                    onChange={(e) => handleUpdateItem(category.id, item.id, 'child_price', Number(e.target.value) || 0)}\n                                    className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                    placeholder=\"小孩票價\"\n                                  />\n                                ) : item.name === '嬰兒機票' ? (\n                                  <input\n                                    type=\"number\"\n                                    value={item.infant_price || ''}\n                                    onChange={(e) => handleUpdateItem(category.id, item.id, 'infant_price', Number(e.target.value) || 0)}\n                                    className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                    placeholder=\"嬰兒票價\"\n                                  />\n                                ) : (\n                                  <input\n                                    type=\"number\"\n                                    value={item.unit_price || ''}\n                                    onChange={(e) => handleUpdateItem(category.id, item.id, 'unit_price', Number(e.target.value) || 0)}\n                                    className=\"w-full px-1 py-1 text-sm text-center bg-transparent border-0 focus:outline-none focus:bg-white [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                                  />\n                                )}\n                              </td>\n                              <td className=\"py-2 px-4 text-sm text-morandi-primary text-center font-medium table-divider whitespace-nowrap\">\n                                {item.total.toLocaleString()}\n                              </td>\n\n\n                              {/* 備註 / 操作合併欄 */}\n                              <td colSpan={2} className=\"py-2 px-4 text-sm text-morandi-secondary\">\n                                <div className=\"flex items-center justify-between\">\n                                  <input\n                                    type=\"text\"\n                                    value={item.note || ''}\n                                    onChange={(e) => handleUpdateItem(category.id, item.id, 'note', e.target.value)}\n                                    className=\"flex-1 px-1 py-1 text-sm bg-transparent border-0 focus:outline-none focus:bg-white\"\n                                    placeholder=\"備註\"\n                                  />\n                                  <button\n                                    onClick={() => handleRemoveItem(category.id, item.id)}\n                                    className=\"ml-2 w-4 h-4 flex items-center justify-center text-xs text-morandi-secondary hover:text-morandi-red hover:bg-morandi-red/10 rounded transition-all flex-shrink-0\"\n                                    title=\"刪除\"\n                                  >\n                                    ×\n                                  </button>\n                                </div>\n                              </td>\n                          </tr>\n                        )))}\n\n\n                      </React.Fragment>\n                    );\n                  })}\n\n                  {/* 總計行 - 顯示各身份成本 */}\n                  <tr className=\"bg-morandi-gold/10 border-t-2 border-morandi-gold\">\n                    <td colSpan={2} className=\"py-3 px-4 font-bold text-morandi-primary\">身份成本</td>\n                    <td colSpan={5} className=\"py-3 px-4\">\n                      <div className=\"flex flex-wrap gap-4 text-sm\">\n                        {participantCounts.adult > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-morandi-secondary\">成人:</span>\n                            <span className=\"font-bold text-morandi-primary\">\n                              NT$ {identityCosts.adult.toLocaleString()}\n                            </span>\n                          </div>\n                        )}\n                        {participantCounts.child_with_bed > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-morandi-secondary\">小孩:</span>\n                            <span className=\"font-bold text-morandi-primary\">\n                              NT$ {identityCosts.child_with_bed.toLocaleString()}\n                            </span>\n                          </div>\n                        )}\n                        {participantCounts.child_no_bed > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-morandi-secondary\">不佔床:</span>\n                            <span className=\"font-bold text-morandi-primary\">\n                              NT$ {identityCosts.child_no_bed.toLocaleString()}\n                            </span>\n                          </div>\n                        )}\n                        {participantCounts.single_room > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-morandi-secondary\">單人房:</span>\n                            <span className=\"font-bold text-morandi-primary\">\n                              NT$ {identityCosts.single_room.toLocaleString()}\n                            </span>\n                          </div>\n                        )}\n                        {participantCounts.infant > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-morandi-secondary\">嬰兒:</span>\n                            <span className=\"font-bold text-morandi-primary\">\n                              NT$ {identityCosts.infant.toLocaleString()}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n          {/* 右側售價顯示區 - 30% */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-card border border-border rounded-lg overflow-hidden shadow-sm sticky top-6\">\n              <div className=\"px-4 py-3 border-b border-border bg-morandi-container/50\">\n                <h3 className=\"font-medium text-morandi-primary\">價格總覽</h3>\n              </div>\n\n              <table className=\"w-full text-xs\">\n                <tbody>\n                  {/* 成人 */}\n                  {participantCounts.adult > 0 && (\n                    <>\n                      <tr className=\"border-b-2 border-morandi-gold bg-morandi-container/20\">\n                        <td colSpan={2} className=\"py-2 px-4 font-medium text-morandi-primary\">\n                          成人 ({participantCounts.adult}人)\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">成本</td>\n                        <td className=\"py-1 px-4 text-right text-morandi-primary\">\n                          {identityCosts.adult.toLocaleString()}\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">售價</td>\n                        <td className=\"py-1 px-4 text-right\">\n                          <input\n                            type=\"number\"\n                            value={sellingPrices.adult || ''}\n                            onChange={(e) => setSellingPrices(prev => ({ ...prev, adult: Number(e.target.value) || 0 }))}\n                            disabled={isReadOnly}\n                            className={cn(\"w-full px-2 py-1 text-xs text-right border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border bg-morandi-container/10\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">利潤</td>\n                        <td className={cn(\"py-1 px-4 text-right font-medium\", identityProfits.adult >= 0 ? \"text-morandi-green\" : \"text-morandi-red\")}>\n                          {identityProfits.adult.toLocaleString()}\n                        </td>\n                      </tr>\n                    </>\n                  )}\n\n                  {/* 小朋友（佔床） */}\n                  {participantCounts.child_with_bed > 0 && (\n                    <>\n                      <tr className=\"border-b-2 border-morandi-gold bg-morandi-container/20\">\n                        <td colSpan={2} className=\"py-2 px-4 font-medium text-morandi-primary\">\n                          小朋友（佔床） ({participantCounts.child_with_bed}人)\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">成本</td>\n                        <td className=\"py-1 px-4 text-right text-morandi-primary\">\n                          {identityCosts.child_with_bed.toLocaleString()}\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">售價</td>\n                        <td className=\"py-1 px-4 text-right\">\n                          <input\n                            type=\"number\"\n                            value={sellingPrices.child_with_bed || ''}\n                            onChange={(e) => setSellingPrices(prev => ({ ...prev, child_with_bed: Number(e.target.value) || 0 }))}\n                            disabled={isReadOnly}\n                            className={cn(\"w-full px-2 py-1 text-xs text-right border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border bg-morandi-container/10\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">利潤</td>\n                        <td className={cn(\"py-1 px-4 text-right font-medium\", identityProfits.child_with_bed >= 0 ? \"text-morandi-green\" : \"text-morandi-red\")}>\n                          {identityProfits.child_with_bed.toLocaleString()}\n                        </td>\n                      </tr>\n                    </>\n                  )}\n\n                  {/* 不佔床 */}\n                  {participantCounts.child_no_bed > 0 && (\n                    <>\n                      <tr className=\"border-b-2 border-morandi-gold bg-morandi-container/20\">\n                        <td colSpan={2} className=\"py-2 px-4 font-medium text-morandi-primary\">\n                          不佔床 ({participantCounts.child_no_bed}人)\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">成本</td>\n                        <td className=\"py-1 px-4 text-right text-morandi-primary\">\n                          {identityCosts.child_no_bed.toLocaleString()}\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">售價</td>\n                        <td className=\"py-1 px-4 text-right\">\n                          <input\n                            type=\"number\"\n                            value={sellingPrices.child_no_bed || ''}\n                            onChange={(e) => setSellingPrices(prev => ({ ...prev, child_no_bed: Number(e.target.value) || 0 }))}\n                            disabled={isReadOnly}\n                            className={cn(\"w-full px-2 py-1 text-xs text-right border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border bg-morandi-container/10\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">利潤</td>\n                        <td className={cn(\"py-1 px-4 text-right font-medium\", identityProfits.child_no_bed >= 0 ? \"text-morandi-green\" : \"text-morandi-red\")}>\n                          {identityProfits.child_no_bed.toLocaleString()}\n                        </td>\n                      </tr>\n                    </>\n                  )}\n\n                  {/* 單人房 */}\n                  {participantCounts.single_room > 0 && (\n                    <>\n                      <tr className=\"border-b-2 border-morandi-gold bg-morandi-container/20\">\n                        <td colSpan={2} className=\"py-2 px-4 font-medium text-morandi-primary\">\n                          單人房 ({participantCounts.single_room}人)\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">成本</td>\n                        <td className=\"py-1 px-4 text-right text-morandi-primary\">\n                          {identityCosts.single_room.toLocaleString()}\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">售價</td>\n                        <td className=\"py-1 px-4 text-right\">\n                          <input\n                            type=\"number\"\n                            value={sellingPrices.single_room || ''}\n                            onChange={(e) => setSellingPrices(prev => ({ ...prev, single_room: Number(e.target.value) || 0 }))}\n                            disabled={isReadOnly}\n                            className={cn(\"w-full px-2 py-1 text-xs text-right border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border bg-morandi-container/10\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">利潤</td>\n                        <td className={cn(\"py-1 px-4 text-right font-medium\", identityProfits.single_room >= 0 ? \"text-morandi-green\" : \"text-morandi-red\")}>\n                          {identityProfits.single_room.toLocaleString()}\n                        </td>\n                      </tr>\n                    </>\n                  )}\n\n                  {/* 嬰兒 */}\n                  {participantCounts.infant > 0 && (\n                    <>\n                      <tr className=\"border-b-2 border-morandi-gold bg-morandi-container/20\">\n                        <td colSpan={2} className=\"py-2 px-4 font-medium text-morandi-primary\">\n                          嬰兒 ({participantCounts.infant}人)\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">成本</td>\n                        <td className=\"py-1 px-4 text-right text-morandi-primary\">\n                          {identityCosts.infant.toLocaleString()}\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">售價</td>\n                        <td className=\"py-1 px-4 text-right\">\n                          <input\n                            type=\"number\"\n                            value={sellingPrices.infant || ''}\n                            onChange={(e) => setSellingPrices(prev => ({ ...prev, infant: Number(e.target.value) || 0 }))}\n                            disabled={isReadOnly}\n                            className={cn(\"w-full px-2 py-1 text-xs text-right border border-border rounded\", isReadOnly && \"cursor-not-allowed opacity-60\")}\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-border bg-morandi-container/10\">\n                        <td className=\"py-1 px-4 text-morandi-secondary\">利潤</td>\n                        <td className={cn(\"py-1 px-4 text-right font-medium\", identityProfits.infant >= 0 ? \"text-morandi-green\" : \"text-morandi-red\")}>\n                          {identityProfits.infant.toLocaleString()}\n                        </td>\n                      </tr>\n                    </>\n                  )}\n                </tbody>\n              </table>\n\n              <div className=\"p-4\">\n                <Button className=\"w-full bg-morandi-gold hover:bg-morandi-gold-hover text-white\">\n                  產生報價單\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 保存版本對話框 */}\n      <Dialog open={isSaveDialogOpen} onOpenChange={setIsSaveDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>保存版本</DialogTitle>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSaveVersion(versionName);\n              setIsSaveDialogOpen(false);\n              setVersionName('');\n            }}\n            className=\"space-y-4\"\n          >\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">版本名稱</label>\n              <Input\n                value={versionName}\n                onChange={(e) => setVersionName(e.target.value)}\n                placeholder=\"例如：初版、修正版、最終版等\"\n                className=\"mt-1\"\n                autoFocus\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsSaveDialogOpen(false);\n                  setVersionName('');\n                }}\n              >\n                取消\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-morandi-green hover:bg-morandi-green-hover text-white\"\n              >\n                保存 <span className=\"ml-1 text-xs opacity-70\">(Enter)</span>\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/quotes/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'statusFilters' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadQuotes'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadQuotes]","fix":{"range":[1724,1726],"text":"[loadQuotes]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3293,3296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3293,3296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'tours'. Either include it or remove the dependency array.","line":151,"column":6,"nodeType":"ArrayExpression","endLine":151,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [tours]","fix":{"range":[4705,4707],"text":"[tours]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6731,6734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6731,6734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7000,7003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7000,7003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7076,7079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7076,7079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { EnhancedTable, TableColumn } from '@/components/ui/enhanced-table';\nimport { useQuotes } from '@/features/quotes/hooks/useQuotes';\nimport { useTourStore } from '@/stores';\nimport { Calculator, FileText, Users, Trash2, Copy } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { logger } from '@/lib/utils/logger';\nimport { QUOTE_STATUS_LABELS } from '@/constants/quote-status';\n\nconst statusFilters = ['all', 'proposed', 'approved'];\n\nexport default function QuotesPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { items: tours } = useTourStore();\n  const { quotes, addQuote, deleteQuote, duplicateQuote, loadQuotes } = useQuotes();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [newQuote, setNewQuote] = useState<{\n    name: string;\n    status: 'proposed' | 'approved';\n    group_size: number;\n  }>({\n    name: '',\n    status: 'proposed',\n    group_size: 1,\n  });\n\n  // 載入報價單資料 - 延遲載入優化\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      loadQuotes();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []); // ✅ 只在組件掛載時執行一次\n\n  // 檢查 URL 參數，自動開啟新增對話框\n  useEffect(() => {\n    const tourId = searchParams.get('tour_id');\n    // 只在有 tour_id 且對話框未開啟時檢查（避免新增完後重複觸發）\n    if (tourId && !isAddDialogOpen) {\n      // 檢查該團是否已有報價單\n      const existingQuote = quotes.find(q => q.tour_id === tourId);\n      if (!existingQuote) {\n        // 沒有報價單，找到旅遊團資料並開啟對話框\n        const tour = tours.find(t => t.id === tourId);\n        if (tour) {\n          console.log('📋 自動開啟新增對話框，團名:', tour.name);\n          setNewQuote({\n            name: tour.name,\n            status: 'proposed',\n            group_size: tour.max_participants || 1,\n          });\n          setIsAddDialogOpen(true);\n        }\n      } else {\n        // 已有報價單，直接跳轉到該報價單\n        console.log('🔄 該團已有報價單，跳轉到:', existingQuote.id);\n        router.replace(`/quotes/${existingQuote.id}`);\n      }\n    }\n  }, [searchParams, quotes, tours, router, isAddDialogOpen]);\n\n  // 表格配置\n  const tableColumns: TableColumn[] = useMemo(() => [\n    {\n      key: 'quote_number',\n      label: '編號',\n      sortable: true,\n      render: (value, quote) => {\n        // 如果有關聯旅遊團，顯示旅遊團編號\n        if (quote.tour_id) {\n          const relatedTour = tours.find(t => t.id === quote.tour_id);\n          if (relatedTour?.code) {\n            return (\n              <span className=\"text-sm text-morandi-gold font-mono\" title=\"旅遊團編號\">\n                {relatedTour.code}\n              </span>\n            );\n          }\n        }\n        // 否則顯示報價單自己的編號\n        return (\n          <span className=\"text-sm text-morandi-secondary font-mono\">\n            {(quote as any).code || '-'}\n          </span>\n        );\n      },\n    },\n    {\n      key: 'name',\n      label: '團體名稱',\n      sortable: true,\n      render: (value, quote) => (\n        <span className=\"text-sm font-medium text-morandi-primary\">{quote.name}</span>\n      ),\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      render: (value, quote) => (\n        <span className={cn(\n          'text-sm font-medium',\n          getStatusColor(quote.status)\n        )}>\n          {QUOTE_STATUS_LABELS[quote.status as keyof typeof QUOTE_STATUS_LABELS] || quote.status}\n        </span>\n      ),\n    },\n    {\n      key: 'group_size',\n      label: '人數',\n      sortable: true,\n      render: (value, quote) => (\n        <div className=\"flex items-center text-sm text-morandi-secondary\">\n          <Users size={14} className=\"mr-1\" />\n          {quote.group_size}人\n        </div>\n      ),\n    },\n    {\n      key: 'total_cost',\n      label: '總成本',\n      sortable: true,\n      render: (value, quote) => (\n        <span className=\"text-sm text-morandi-secondary\">\n          NT$ {quote.total_cost.toLocaleString()}\n        </span>\n      ),\n    },\n    {\n      key: 'created_at',\n      label: '建立時間',\n      sortable: true,\n      render: (value, quote) => (\n        <span className=\"text-sm text-morandi-secondary\">\n          {new Date(quote.created_at).toLocaleDateString()}\n        </span>\n      ),\n    },\n  ], []);\n\n  const filteredQuotes = quotes.filter(quote => {\n    const matchesStatus = statusFilter === 'all' || quote.status === statusFilter;\n\n    // 搜尋 - 搜尋所有文字欄位\n    const searchLower = searchTerm.toLowerCase();\n    const matchesSearch = !searchTerm ||\n      quote.name.toLowerCase().includes(searchLower) ||\n      quote.quote_number?.toLowerCase().includes(searchLower) ||\n      quote.status.toLowerCase().includes(searchLower);\n\n    return matchesStatus && matchesSearch;\n  });\n\n  const handleAddQuote = async () => {\n    if (!newQuote.name.trim()) return;\n\n    const defaultCategories = [\n      { id: 'transport', name: '交通', items: [], total: 0 },\n      { id: 'group-transport', name: '團體分攤', items: [], total: 0 },\n      { id: 'accommodation', name: '住宿', items: [], total: 0 },\n      { id: 'meals', name: '餐飲', items: [], total: 0 },\n      { id: 'activities', name: '活動', items: [], total: 0 },\n      { id: 'others', name: '其他', items: [], total: 0 },\n      { id: 'guide', name: '領隊導遊', items: [], total: 0 }\n    ];\n\n    try {\n      // 從 URL 取得 tour_id（如果有）\n      const tourId = searchParams.get('tour_id');\n\n      // 新增報價單並取得完整物件\n      const newQuoteObj = await addQuote({\n        ...newQuote,\n        ...(tourId && { tour_id: tourId }), // 如果有 tour_id，加入報價單資料\n        accommodation_days: 0,\n        categories: defaultCategories,\n        total_cost: 0,\n      });\n\n      console.log('✅ 新增報價單完成:', newQuoteObj);\n      console.log('報價單 ID:', newQuoteObj?.id);\n\n      // 重置表單並關閉對話框\n      setNewQuote({\n        name: '',\n        status: 'proposed',\n        group_size: 1,\n      });\n      setIsAddDialogOpen(false);\n\n      // 直接跳轉到詳細頁面開始編輯\n      if (newQuoteObj?.id) {\n        console.log('🔄 準備跳轉到:', `/quotes/${newQuoteObj.id}`);\n        // 使用 replace 避免返回時回到帶參數的列表頁\n        router.replace(`/quotes/${newQuoteObj.id}`);\n      } else {\n        console.error('❌ 報價單 ID 不存在，無法跳轉');\n      }\n    } catch (error) {\n      logger.error('新增報價單失敗:', error);\n      alert('新增報價單失敗，請重試');\n    }\n  };\n\n  const handleQuoteClick = (quote: any) => {\n    router.push(`/quotes/${quote.id}`);\n  };\n\n  const handleDuplicateQuote = async (quote_id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    try {\n      const duplicated = await duplicateQuote(quote_id);\n      if (duplicated && (duplicated as any).id) {\n        // 跳轉到新報價單\n        router.push(`/quotes/${(duplicated as any).id}`);\n      } else {\n        alert('複製報價單失敗，請重試');\n      }\n    } catch (error) {\n      logger.error('❌ 複製報價單失敗:', error);\n      alert('複製報價單失敗，請重試');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      'proposed': 'text-morandi-gold',\n      'approved': 'text-green-600'\n    };\n    return colors[status] || 'text-morandi-secondary';\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"報價單管理\"\n        icon={Calculator}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '報價單管理', href: '/quotes' }\n        ]}\n        tabs={[\n          { value: 'all', label: '全部', icon: Calculator },\n          { value: 'proposed', label: '提案', icon: FileText },\n          { value: 'approved', label: '已核准', icon: FileText }\n        ]}\n        activeTab={statusFilter}\n        onTabChange={setStatusFilter}\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋報價單名稱...\"\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增報價單\"\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n        className=\"min-h-full\"\n        columns={tableColumns}\n        data={filteredQuotes}\n        searchableFields={['name']}\n        searchTerm={searchTerm}\n        onRowClick={(quote) => handleQuoteClick(quote)}\n        bordered={true}\n        actions={(quote) => (\n          <div className=\"flex items-center gap-1\">\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleQuoteClick(quote);\n              }}\n              className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n              title=\"編輯報價單\"\n            >\n              <Calculator size={14} className=\"text-morandi-gold\" />\n            </button>\n            <button\n              onClick={(e) => handleDuplicateQuote(quote.id, e)}\n              className=\"p-1 hover:bg-morandi-blue/10 rounded transition-colors\"\n              title=\"複製報價單\"\n            >\n              <Copy size={14} className=\"text-morandi-blue\" />\n            </button>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                deleteQuote(quote.id);\n              }}\n              className=\"p-1 hover:bg-morandi-red/10 rounded transition-colors\"\n              title=\"刪除報價單\"\n            >\n              <Trash2 size={14} className=\"text-morandi-red\" />\n            </button>\n          </div>\n        )}\n      />\n      </div>\n\n      {/* 新增報價單對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>新增報價單</DialogTitle>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              if (newQuote.name.trim()) {\n                handleAddQuote();\n              }\n            }}\n            className=\"space-y-4\"\n          >\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">團體名稱</label>\n              <Input\n                value={newQuote.name}\n                onChange={(e) => setNewQuote(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"輸入團體名稱\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">人數</label>\n              <Input\n                type=\"number\"\n                value={newQuote.group_size}\n                onChange={(e) => setNewQuote(prev => ({ ...prev, group_size: Number(e.target.value) || 0 }))}\n                placeholder=\"1\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">狀態</label>\n              <Select\n                value={newQuote.status}\n                onValueChange={(value) => setNewQuote(prev => ({ ...prev, status: value as 'proposed' | 'approved' }))}\n              >\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"proposed\">提案</SelectItem>\n                  <SelectItem value=\"approved\">已核准</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsAddDialogOpen(false)}\n              >\n                取消\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!newQuote.name.trim()}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增 <span className=\"ml-1 text-xs opacity-70\">(Enter)</span>\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/settings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Monitor' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isPageReady' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2656,2659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2656,2659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2913,2916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2913,2916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2938,2941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2938,2941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3913,3916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3913,3916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useThemeStore } from '@/stores/theme-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Palette, Monitor, Moon, Sun, Check, LogOut, User, Lock, Eye, EyeOff } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { logger } from '@/lib/utils/logger';\n\n// 強制客戶端渲染，不預取伺服器資料\nexport const dynamic = 'force-dynamic';\nexport const fetchCache = 'force-no-store';\n\nexport default function SettingsPage() {\n  const { currentTheme, setTheme } = useThemeStore();\n  const { user, logout } = useAuthStore();\n  const [isPageReady, setIsPageReady] = useState(false);\n\n  // 快速載入頁面（不等待任何非同步操作）\n  useEffect(() => {\n    setIsPageReady(true);\n  }, []);\n\n  // 密碼修改狀態\n  const [showPasswordSection, setShowPasswordSection] = useState(false);\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [passwordUpdateLoading, setPasswordUpdateLoading] = useState(false);\n\n  const handleLogout = () => {\n    logout();\n    window.location.href = '/login';\n  };\n\n  const handlePasswordUpdate = async () => {\n    if (!user) {\n      alert('請先登入');\n      return;\n    }\n\n    if (!passwordData.currentPassword) {\n      alert('請輸入目前密碼！');\n      return;\n    }\n\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      alert('新密碼與確認密碼不符！');\n      return;\n    }\n\n    if (passwordData.newPassword.length < 8) {\n      alert('密碼長度至少需要8個字元！');\n      return;\n    }\n\n    // 檢查網路狀態\n    if (!navigator.onLine) {\n      alert('⚠️ 目前離線，無法修改密碼。請連接網路後再試。');\n      return;\n    }\n\n    setPasswordUpdateLoading(true);\n\n    try {\n      // 動態導入（只在需要時載入）\n      const [authModule, supabaseModule] = await Promise.all([\n        import('@/lib/auth'),\n        import('@/lib/supabase/client')\n      ]);\n\n      const { hashPassword, verifyPassword } = authModule;\n      const { supabase } = supabaseModule;\n\n      // 1. 驗證目前密碼\n      const { data: userData, error: fetchError } = await supabase\n        .from('employees')\n        .select('password_hash')\n        .eq('employee_number', user.employee_number)\n        .single();\n\n      if (fetchError || !userData) {\n        alert('驗證失敗，請稍後再試');\n        setPasswordUpdateLoading(false);\n        return;\n      }\n\n      const isPasswordValid = await verifyPassword(passwordData.currentPassword, (userData as any).password_hash);\n      if (!isPasswordValid) {\n        alert('目前密碼錯誤！');\n        setPasswordUpdateLoading(false);\n        return;\n      }\n\n      // 2. 更新新密碼\n      const hashedPassword = await hashPassword(passwordData.newPassword);\n\n      const result: any = await (supabase as any)\n        .from('employees')\n        .update({ password_hash: hashedPassword })\n        .eq('employee_number', user.employee_number);\n\n      const { error } = result;\n\n      if (error) {\n        logger.error('密碼更新失敗:', error);\n        alert('密碼更新失敗：' + error.message);\n        setPasswordUpdateLoading(false);\n        return;\n      }\n\n      // 3. 清除角色卡（重要！否則舊密碼還能登入）\n      try {\n        const { useLocalAuthStore } = await import('@/lib/auth/local-auth-manager');\n        const localAuthStore = useLocalAuthStore.getState();\n\n        // 刪除當前用戶的角色卡\n        localAuthStore.removeProfile(user.id);\n        logger.log('🗑️ 已刪除角色卡，下次登入需從網路驗證');\n      } catch (profileError) {\n        logger.warn('⚠️ 清除角色卡失敗（不影響密碼更新）:', profileError);\n      }\n\n      // 4. 同步更新 IndexedDB 的密碼\n      try {\n        const { localDB } = await import('@/lib/db');\n        const { TABLES } = await import('@/lib/db/schemas');\n\n        const employee = await localDB.read(TABLES.EMPLOYEES, user.id) as any;\n        if (employee) {\n          await localDB.put(TABLES.EMPLOYEES, {\n            ...employee,\n            password_hash: hashedPassword,\n            last_password_change: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          });\n          logger.log('✅ IndexedDB 密碼已更新');\n        }\n      } catch (dbError) {\n        logger.warn('⚠️ IndexedDB 更新失敗（不影響主要功能）:', dbError);\n      }\n\n      alert('✅ 密碼更新成功！下次登入需重新驗證。');\n      setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });\n      setShowPasswordSection(false);\n    } catch (error) {\n      logger.error('密碼更新過程中發生錯誤:', error);\n      alert('密碼更新失敗，請稍後再試');\n    } finally {\n      setPasswordUpdateLoading(false);\n    }\n  };\n\n  const themes = [\n    {\n      id: 'morandi' as const,\n      name: '莫蘭迪優雅',\n      description: '柔和的色彩，溫暖的米色背景，適合長時間使用',\n      icon: Sun,\n      preview: {\n        bg: '#F6F4F1',\n        primary: '#3A3633',\n        secondary: '#8B8680',\n        accent: '#C4A572',\n        card: '#FFFFFF',\n      },\n    },\n    {\n      id: 'modern-dark' as const,\n      name: '現代深色',\n      description: '深色背景，高對比度，現代感十足的設計',\n      icon: Moon,\n      preview: {\n        bg: '#36393f',           // Discord 深灰背景\n        primary: '#dcddde',      // 主文字色（柔和白）\n        secondary: '#b9bbbe',    // 次文字色（灰白）\n        accent: '#5865f2',       // Discord 紫藍色\n        card: '#2f3136',         // 卡片背景\n      },\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <ResponsiveHeader\n        title=\"系統設定\"\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '設定', href: '/settings' },\n        ]}\n        actions={\n          <div className=\"flex items-center gap-3\">\n            {/* 用戶資訊 */}\n            {user && (\n              <div className=\"flex items-center gap-2 px-3 py-2 bg-morandi-container rounded-lg\">\n                <User className=\"h-4 w-4 text-morandi-secondary\" />\n                <span className=\"text-sm font-medium text-morandi-primary\">\n                  {user.display_name}\n                </span>\n              </div>\n            )}\n\n            {/* 登出按鈕 */}\n            <Button\n              variant=\"outline\"\n              onClick={handleLogout}\n              className=\"flex items-center gap-2 text-morandi-red border-morandi-red hover:bg-morandi-red hover:text-white\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              登出\n            </Button>\n          </div>\n        }\n      />\n\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        {/* 主題設定區塊 */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <Palette className=\"h-6 w-6 text-morandi-gold\" />\n            <h2 className=\"text-xl font-semibold\">主題設定</h2>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {themes.map((theme) => {\n              const Icon = theme.icon;\n              const is_active = currentTheme === theme.id;\n\n              return (\n                <button\n                  key={theme.id}\n                  onClick={() => setTheme(theme.id)}\n                  className={cn(\n                    'relative group text-left transition-all duration-300',\n                    'border-2 rounded-xl overflow-hidden',\n                    is_active\n                      ? 'border-morandi-gold shadow-lg scale-[1.02]'\n                      : 'border-border hover:border-morandi-gold/50 hover:shadow-md'\n                  )}\n                >\n                  {/* 選中標記 */}\n                  {is_active && (\n                    <div className=\"absolute top-3 right-3 z-10 bg-morandi-gold text-white rounded-full p-1\">\n                      <Check className=\"h-4 w-4\" />\n                    </div>\n                  )}\n\n                  {/* 預覽區域 */}\n                  <div\n                    className=\"h-32 p-4 relative overflow-hidden\"\n                    style={{\n                      background: theme.preview.bg,\n                    }}\n                  >\n                    {/* 模擬介面元素 */}\n                    <div className=\"space-y-2\">\n                      {/* 模擬導航欄 */}\n                      <div className=\"flex gap-2\">\n                        <div\n                          className=\"h-2 w-16 rounded-full opacity-80\"\n                          style={{ backgroundColor: theme.preview.accent }}\n                        />\n                        <div\n                          className=\"h-2 w-12 rounded-full opacity-60\"\n                          style={{ backgroundColor: theme.preview.secondary }}\n                        />\n                      </div>\n                      \n                      {/* 模擬卡片 */}\n                      <div\n                        className=\"p-2 rounded-lg shadow-sm\"\n                        style={{ backgroundColor: theme.preview.card }}\n                      >\n                        <div\n                          className=\"h-1.5 w-20 rounded-full mb-1\"\n                          style={{ backgroundColor: theme.preview.primary }}\n                        />\n                        <div\n                          className=\"h-1 w-16 rounded-full opacity-60\"\n                          style={{ backgroundColor: theme.preview.secondary }}\n                        />\n                      </div>\n\n                      {/* 模擬按鈕 */}\n                      <div className=\"flex gap-2\">\n                        <div\n                          className=\"h-6 w-14 rounded-md\"\n                          style={{ backgroundColor: theme.preview.accent }}\n                        />\n                        <div\n                          className=\"h-6 w-14 rounded-md border\"\n                          style={{ borderColor: theme.preview.secondary }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* 主題資訊 */}\n                  <div className=\"p-4 bg-card\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Icon className=\"h-5 w-5 text-morandi-gold\" />\n                      <h3 className=\"font-semibold text-base\">{theme.name}</h3>\n                    </div>\n                    <p className=\"text-sm text-morandi-secondary\">\n                      {theme.description}\n                    </p>\n                  </div>\n                </button>\n              );\n            })}\n          </div>\n\n          <div className=\"mt-6 p-4 bg-morandi-container/20 rounded-lg\">\n            <p className=\"text-sm text-morandi-secondary\">\n              <strong>提示：</strong>主題設定會立即生效並自動儲存。\n              不同主題適合不同的使用場景和個人喜好。\n            </p>\n          </div>\n        </Card>\n\n        {/* 帳號安全設定 */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <Lock className=\"h-6 w-6 text-morandi-gold\" />\n            <h2 className=\"text-xl font-semibold\">帳號安全</h2>\n          </div>\n\n          <div className=\"space-y-4\">\n            {/* 修改密碼區塊 */}\n            <div className=\"p-4 border border-border rounded-lg\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div>\n                  <h3 className=\"font-medium mb-1\">修改密碼</h3>\n                  <p className=\"text-sm text-morandi-secondary\">定期更換密碼以保護您的帳號安全</p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPasswordSection(!showPasswordSection)}\n                >\n                  {showPasswordSection ? '取消' : '修改密碼'}\n                </Button>\n              </div>\n\n              {showPasswordSection && (\n                <div className=\"mt-4 space-y-4 pt-4 border-t border-border\">\n                  {/* 目前密碼 */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                      目前密碼\n                    </label>\n                    <div className=\"relative\">\n                      <Input\n                        type={showPassword ? \"text\" : \"password\"}\n                        value={passwordData.currentPassword}\n                        onChange={(e) => setPasswordData({\n                          ...passwordData,\n                          currentPassword: e.target.value\n                        })}\n                        placeholder=\"請輸入目前密碼\"\n                        className=\"pr-10\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary hover:text-morandi-primary\"\n                      >\n                        {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* 新密碼 */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                      新密碼\n                    </label>\n                    <Input\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={passwordData.newPassword}\n                      onChange={(e) => setPasswordData({\n                        ...passwordData,\n                        newPassword: e.target.value\n                      })}\n                      placeholder=\"至少8個字元\"\n                    />\n                  </div>\n\n                  {/* 確認新密碼 */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                      確認新密碼\n                    </label>\n                    <Input\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={passwordData.confirmPassword}\n                      onChange={(e) => setPasswordData({\n                        ...passwordData,\n                        confirmPassword: e.target.value\n                      })}\n                      placeholder=\"再次輸入新密碼\"\n                    />\n                  </div>\n\n                  {/* 密碼確認提示 */}\n                  {passwordData.newPassword && passwordData.confirmPassword && (\n                    <div className=\"text-sm\">\n                      {passwordData.newPassword === passwordData.confirmPassword ? (\n                        <span className=\"text-green-600\">✓ 密碼確認一致</span>\n                      ) : (\n                        <span className=\"text-red-600\">✗ 密碼確認不一致</span>\n                      )}\n                    </div>\n                  )}\n\n                  {/* 操作按鈕 */}\n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      onClick={handlePasswordUpdate}\n                      disabled={\n                        passwordUpdateLoading ||\n                        !passwordData.currentPassword ||\n                        !passwordData.newPassword ||\n                        passwordData.newPassword !== passwordData.confirmPassword ||\n                        passwordData.newPassword.length < 8\n                      }\n                      className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n                    >\n                      {passwordUpdateLoading ? '更新中...' : '更新密碼'}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setShowPasswordSection(false);\n                        setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });\n                      }}\n                    >\n                      取消\n                    </Button>\n                  </div>\n\n                  {/* 密碼要求提示 */}\n                  <div className=\"text-xs text-morandi-muted bg-morandi-container/30 p-3 rounded\">\n                    <p className=\"font-medium mb-1\">📝 密碼要求：</p>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      <li>至少8個字元</li>\n                      <li>建議包含數字和字母</li>\n                      <li>需要先輸入目前密碼進行驗證</li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </Card>\n\n        {/* 其他設定區塊 */}\n        <Card className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">其他設定</h2>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 border border-border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">語言設定</h3>\n              <p className=\"text-sm text-morandi-secondary\">繁體中文（預設）</p>\n            </div>\n            <div className=\"p-4 border border-border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">通知設定</h3>\n              <p className=\"text-sm text-morandi-secondary\">系統通知：開啟</p>\n            </div>\n            <div className=\"p-4 border border-border rounded-lg\">\n              <h3 className=\"font-medium mb-2\">資料備份</h3>\n              <p className=\"text-sm text-morandi-secondary\">自動備份：每日凌晨 2:00</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/templates/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronLeft' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { use, useState, useRef } from 'react'\n\nimport { useRouter } from 'next/navigation'\n\nimport { Save, Eye, Download, ChevronLeft } from 'lucide-react'\n\nimport { ResponsiveHeader } from '@/components/layout/responsive-header'\nimport { TemplateExcelEditor } from '@/components/templates/template-excel-editor'\nimport { TemplatePDFPreview } from '@/components/templates/template-pdf-preview'\nimport { Button } from '@/components/ui/button'\nimport { useTemplateStore } from '@/stores/template-store'\n\ninterface PageProps {\n  params: Promise<{ id: string }>\n}\n\nexport default function TemplateEditorPage({ params }: PageProps) {\n  const { id } = use(params)\n  const router = useRouter()\n  const { getTemplate, updateTemplate } = useTemplateStore()\n  const template = getTemplate(id)\n\n  const [excelData, setExcelData] = useState(template?.excel_structure || null)\n  const [isSaving, setIsSaving] = useState(false)\n  const [columnWidths, setColumnWidths] = useState<number[]>([\n    80, 100, 150, 120, 100, 100, 100, 100, 100, 100, 100, 100,\n  ])\n\n  if (!template) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-screen\">\n        <div className=\"text-6xl mb-4\">📄</div>\n        <h2 className=\"text-xl font-bold text-morandi-primary mb-2\">找不到此模板</h2>\n        <Button onClick={() => router.push('/templates')}>返回列表</Button>\n      </div>\n    )\n  }\n\n  const handleSave = async () => {\n    setIsSaving(true)\n    try {\n      await updateTemplate(id, {\n        excel_structure: excelData || undefined,\n      })\n      alert('儲存成功！')\n    } catch (error) {\n      console.error('儲存失敗:', error)\n      alert('儲存失敗，請稍後再試')\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handlePreview = () => {\n    // TODO: 實作預覽功能\n    alert('PDF 預覽功能即將推出')\n  }\n\n  const handleExport = () => {\n    // TODO: 實作匯出功能\n    alert('PDF 匯出功能即將推出')\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title={template.name}\n        showBackButton={true}\n        onBack={() => router.push('/templates')}\n        actions={\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handlePreview}>\n              <Eye size={16} className=\"mr-2\" />\n              預覽\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n              <Download size={16} className=\"mr-2\" />\n              匯出 PDF\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={handleSave}\n              disabled={isSaving}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n            >\n              <Save size={16} className=\"mr-2\" />\n              {isSaving ? '儲存中...' : '儲存'}\n            </Button>\n          </div>\n        }\n      />\n\n      {/* 主要編輯區：左右分割（固定 50/50） */}\n      <div className=\"flex-1 flex gap-4 overflow-hidden\">\n        {/* 左側：Excel 編輯器 */}\n        <div className=\"flex-1 overflow-hidden\">\n          <TemplateExcelEditor\n            data={excelData}\n            onChange={setExcelData}\n            onColumnWidthChange={setColumnWidths}\n            field_mappings={template.field_mappings}\n          />\n        </div>\n\n        {/* 分隔線 */}\n        <div className=\"w-px bg-morandi-muted/70\" />\n\n        {/* 右側：即時 PDF 預覽 */}\n        <div className=\"flex-1 overflow-hidden\">\n          <TemplatePDFPreview\n            data={excelData}\n            columnWidths={columnWidths}\n            fieldMappings={template.field_mappings}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/templates/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Template' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addTemplate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\n\nimport { useRouter } from 'next/navigation'\n\nimport { Plus } from 'lucide-react'\n\nimport { ResponsiveHeader } from '@/components/layout/responsive-header'\nimport { TemplateCard } from '@/components/templates/template-card'\nimport { TemplateEditorDialog } from '@/components/templates/template-editor-dialog'\nimport { Button } from '@/components/ui/button'\nimport { useTemplateStore } from '@/stores/template-store'\n\nimport { Template } from '@/types/template'\n\nexport default function TemplatesPage() {\n  const router = useRouter()\n  const { templates, addTemplate } = useTemplateStore()\n  const [createDialogOpen, setCreateDialogOpen] = useState(false)\n\n  // 只顯示未刪除的模板\n  const activeTemplates = templates.filter(t => !t.is_deleted)\n\n  return (\n    <div className=\"space-y-6\">\n      <ResponsiveHeader\n        title=\"模板管理\"\n        actions={\n          <Button onClick={() => setCreateDialogOpen(true)}>\n            <Plus size={16} className=\"mr-2\" />\n            新增模板\n          </Button>\n        }\n      />\n\n      {/* 模板列表 */}\n      {activeTemplates.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <div className=\"text-6xl mb-4\">📄</div>\n            <h3 className=\"text-lg font-bold text-morandi-primary mb-2\">尚未建立任何模板</h3>\n            <p className=\"text-sm text-morandi-secondary mb-6\">\n              建立模板以快速產生報價單、行程表等文件\n            </p>\n            <Button onClick={() => setCreateDialogOpen(true)}>\n              <Plus size={16} className=\"mr-2\" />\n              建立第一個模板\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {activeTemplates.map(template => (\n            <TemplateCard\n              key={template.id}\n              template={template}\n              onEdit={template => {\n                // 導航到完整的編輯頁面\n                router.push(`/templates/${template.id}`)\n              }}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* 新增模板對話框 */}\n      <TemplateEditorDialog\n        open={createDialogOpen}\n        onOpenChange={setCreateDialogOpen}\n        template={null}\n      />\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/box-dialogs/basic-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/box-dialogs/reminder-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/box-dialogs/workout-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'allCompleted' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":172,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":172,"endColumn":21},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":377,"column":51,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":377,"endColumn":88}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\n\nimport { Check, Clock, Dumbbell, Trash2, Plus, Edit2, X } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Input } from '@/components/ui/input'\nimport { useTimeboxStore, WorkoutData, WorkoutExercise, ScheduledBox } from '@/stores/timebox-store'\n\ninterface WorkoutDialogProps {\n  scheduledBox: ScheduledBox\n  onClose: () => void\n}\n\nexport default function WorkoutDialog({ scheduledBox, onClose }: WorkoutDialogProps) {\n  const {\n    boxes,\n    toggleBoxCompletion,\n    removeScheduledBox,\n    addWorkoutExercise,\n    removeWorkoutExercise,\n    updateWorkoutExercise,\n    toggleSetCompletion,\n    scheduledBoxes\n  } = useTimeboxStore()\n\n  const [showAddExercise, setShowAddExercise] = useState(false)\n  const [editingExerciseId, setEditingExerciseId] = useState<string | null>(null)\n  const [isAdding, setIsAdding] = useState(false)\n  const [exerciseForm, setExerciseForm] = useState({\n    equipment: '',\n    weight: 0,\n    reps: 0,\n    sets: 3,\n  })\n\n  const box = boxes.find(b => b.id === scheduledBox.boxId)\n\n  // 即時獲取最新的 scheduledBox 資料\n  const currentScheduledBox = scheduledBoxes.find(sb => sb.id === scheduledBox.id) || scheduledBox\n  const workoutData = (currentScheduledBox.data as WorkoutData) || { exercises: [] }\n\n  // 重置表單\n  const resetForm = () => {\n    setExerciseForm({\n      equipment: '',\n      weight: 0,\n      reps: 0,\n      sets: 3,\n    })\n    setShowAddExercise(false)\n    setEditingExerciseId(null)\n  }\n\n  // 新增動作\n  const handleAddExercise = () => {\n    if (!exerciseForm.equipment.trim()) return\n\n    setIsAdding(true)\n    addWorkoutExercise(scheduledBox.id, {\n      ...exerciseForm,\n      setsCompleted: Array(exerciseForm.sets).fill(false),\n      completedSetsTime: Array(exerciseForm.sets).fill(null)\n    })\n\n    // 延遲關閉表單，讓用戶看到確認動畫\n    setTimeout(() => {\n      resetForm()\n      setIsAdding(false)\n    }, 300)\n  }\n\n  // 編輯動作\n  const handleEditExercise = (exercise: WorkoutExercise) => {\n    setExerciseForm({\n      equipment: exercise.equipment,\n      weight: exercise.weight,\n      reps: exercise.reps,\n      sets: exercise.sets,\n    })\n    setEditingExerciseId(exercise.id)\n    setShowAddExercise(true)\n  }\n\n  // 儲存編輯\n  const handleSaveEdit = () => {\n    if (!editingExerciseId) return\n\n    setIsAdding(true)\n    updateWorkoutExercise(scheduledBox.id, editingExerciseId, exerciseForm)\n\n    // 延遲關閉表單，讓用戶看到確認動畫\n    setTimeout(() => {\n      resetForm()\n      setIsAdding(false)\n    }, 300)\n  }\n\n  // 刪除動作\n  const handleDeleteExercise = (exerciseId: string) => {\n    if (!confirm('確定要刪除此動作嗎？')) return\n    removeWorkoutExercise(scheduledBox.id, exerciseId)\n  }\n\n  // 點擊組數時的處理（自動檢查是否全部完成）\n  const handleSetClick = (exerciseId: string, setIndex: number) => {\n    toggleSetCompletion(scheduledBox.id, exerciseId, setIndex)\n\n    // 延遲檢查以確保狀態更新\n    setTimeout(() => {\n      const updatedBox = scheduledBoxes.find(sb => sb.id === scheduledBox.id)\n      if (!updatedBox) return\n\n      const updatedData = updatedBox.data as WorkoutData\n      if (!updatedData?.exercises || updatedData.exercises.length === 0) return\n\n      // 檢查是否所有動作的所有組都完成了\n      const allCompleted = updatedData.exercises.every(ex =>\n        ex.setsCompleted.every(completed => completed === true)\n      )\n\n      // 如果全部完成且尚未標記完成，自動標記\n      if (allCompleted && !updatedBox.completed) {\n        toggleBoxCompletion(scheduledBox.id)\n      }\n    }, 100)\n  }\n\n  // 刪除排程\n  const handleDelete = () => {\n    if (!confirm(`確定要移除此訓練排程嗎？\\n\\n箱子：${box?.name}`)) return\n    removeScheduledBox(scheduledBox.id)\n    onClose()\n  }\n\n  // 計算總訓練量\n  const getTotalVolume = () => {\n    if (!workoutData.exercises) return 0\n    return workoutData.exercises.reduce((total, exercise) => {\n      const completedSets = exercise.setsCompleted.filter(Boolean).length\n      return total + (completedSets * exercise.weight * exercise.reps)\n    }, 0)\n  }\n\n  // 計算總完成組數\n  const getTotalCompletedSets = () => {\n    if (!workoutData.exercises) return 0\n    return workoutData.exercises.reduce((total, exercise) => {\n      return total + exercise.setsCompleted.filter(Boolean).length\n    }, 0)\n  }\n\n  // 計算總組數\n  const getTotalSets = () => {\n    if (!workoutData.exercises) return 0\n    return workoutData.exercises.reduce((total, exercise) => {\n      return total + exercise.sets\n    }, 0)\n  }\n\n  if (!box) return null\n\n  const formatDateTime = (dayOfWeek: number, start_time: string) => {\n    const days = ['週日', '週一', '週二', '週三', '週四', '週五', '週六']\n    return `${days[dayOfWeek]} ${start_time}`\n  }\n\n  const totalCompletedSets = getTotalCompletedSets()\n  const totalSets = getTotalSets()\n  const allCompleted = totalSets > 0 && totalCompletedSets === totalSets\n  const isBoxCompleted = currentScheduledBox.completed\n\n  return (\n    <Dialog open={true} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-2xl max-h-[85vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Dumbbell className=\"h-5 w-5\" />\n            <span>{box.name}</span>\n          </DialogTitle>\n          <p className=\"text-sm text-gray-500\">\n            {formatDateTime(scheduledBox.dayOfWeek, scheduledBox.start_time)}\n          </p>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* 動作列表 */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"font-medium\">訓練動作</h3>\n              {!showAddExercise && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowAddExercise(true)}\n                  className=\"text-morandi-gold border-morandi-gold hover:bg-morandi-gold/10\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  新增動作\n                </Button>\n              )}\n            </div>\n\n            {/* 新增/編輯表單 */}\n            {showAddExercise && (\n              <div className=\"bg-morandi-container/10 rounded-lg p-4 mb-4 border-2 border-morandi-gold/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"text-sm font-medium text-morandi-gold\">\n                    {editingExerciseId ? '編輯動作' : '新增動作'}\n                  </h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={resetForm}\n                    className=\"h-6 w-6 p-0\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                <div className=\"grid grid-cols-4 gap-3 mb-3\">\n                  <div className=\"col-span-2\">\n                    <label className=\"text-xs text-morandi-secondary\">動作名稱 *</label>\n                    <Input\n                      value={exerciseForm.equipment}\n                      onChange={(e) => setExerciseForm(prev => ({ ...prev, equipment: e.target.value }))}\n                      placeholder=\"例: 槓鈴臥推\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"text-xs text-morandi-secondary\">重量 (kg)</label>\n                    <Input\n                      type=\"number\"\n                      value={exerciseForm.weight}\n                      onChange={(e) => setExerciseForm(prev => ({\n                        ...prev,\n                        weight: e.target.value === '' ? 0 : Number(e.target.value)\n                      }))}\n                      className=\"mt-1\"\n                      min={0}\n                      step={0.5}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <label className=\"text-xs text-morandi-secondary\">次數</label>\n                      <Input\n                        type=\"number\"\n                        value={exerciseForm.reps}\n                        onChange={(e) => setExerciseForm(prev => ({\n                          ...prev,\n                          reps: e.target.value === '' ? 0 : Number(e.target.value)\n                        }))}\n                        className=\"mt-1\"\n                        min={0}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-xs text-morandi-secondary\">組數</label>\n                      <Input\n                        type=\"number\"\n                        value={exerciseForm.sets}\n                        onChange={(e) => setExerciseForm(prev => ({\n                          ...prev,\n                          sets: e.target.value === '' ? 1 : Number(e.target.value)\n                        }))}\n                        min={1}\n                        max={10}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={editingExerciseId ? handleSaveEdit : handleAddExercise}\n                  disabled={!exerciseForm.equipment.trim() || isAdding}\n                  className={`w-full transition-all duration-300 ${\n                    isAdding\n                      ? 'bg-morandi-green border-morandi-green scale-105'\n                      : 'bg-morandi-gold hover:bg-morandi-gold/90'\n                  }`}\n                  size=\"sm\"\n                >\n                  {isAdding ? (\n                    <span className=\"flex items-center gap-2\">\n                      <Check className=\"h-4 w-4 animate-in zoom-in\" />\n                      已新增！\n                    </span>\n                  ) : (\n                    editingExerciseId ? '儲存修改' : '新增'\n                  )}\n                </Button>\n              </div>\n            )}\n\n            {/* 動作列表 */}\n            {!workoutData.exercises || workoutData.exercises.length === 0 ? (\n              <div className=\"text-center py-8 text-morandi-secondary\">\n                <Dumbbell className=\"h-12 w-12 mx-auto mb-2 opacity-30\" />\n                <p>尚未新增任何訓練動作</p>\n                <p className=\"text-sm\">點擊上方「新增動作」開始記錄</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {workoutData.exercises.map((exercise, index) => {\n                  const completedSets = exercise.setsCompleted.filter(Boolean).length\n                  return (\n                    <div\n                      key={exercise.id}\n                      className=\"bg-white rounded-lg border border-border p-4 hover:border-morandi-gold/50 transition-colors\"\n                    >\n                      {/* 動作標題 */}\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-xs text-morandi-secondary font-medium\">\n                              動作 {index + 1}\n                            </span>\n                            <h4 className=\"font-medium\">{exercise.equipment}</h4>\n                          </div>\n                          <p className=\"text-sm text-morandi-secondary mt-1\">\n                            {exercise.weight}kg × {exercise.reps}次 × {exercise.sets}組\n                          </p>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditExercise(exercise)}\n                            className=\"h-8 w-8 p-0 text-morandi-secondary hover:text-morandi-gold\"\n                          >\n                            <Edit2 className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteExercise(exercise.id)}\n                            className=\"h-8 w-8 p-0 text-morandi-secondary hover:text-morandi-red\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* 組數進度 */}\n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-xs text-morandi-secondary\">\n                            完成進度: {completedSets}/{exercise.sets} 組\n                          </span>\n                          <span className=\"text-xs text-morandi-secondary\">\n                            訓練量: {(completedSets * exercise.weight * exercise.reps).toLocaleString()} kg\n                          </span>\n                        </div>\n\n                        <div className=\"flex items-center gap-2 flex-wrap\">\n                          {exercise.setsCompleted.map((completed, setIndex) => (\n                            <button\n                              key={setIndex}\n                              onClick={() => handleSetClick(exercise.id, setIndex)}\n                              className={`\n                                relative w-12 h-12 rounded-lg border-2 transition-all duration-200\n                                flex flex-col items-center justify-center\n                                active:scale-95\n                                ${completed\n                                  ? 'bg-morandi-green border-morandi-green text-white shadow-lg scale-105 animate-pulse'\n                                  : 'border-morandi-container hover:border-morandi-gold hover:bg-morandi-gold/5 bg-white hover:scale-105'\n                                }\n                              `}\n                              title={exercise.completedSetsTime[setIndex]\n                                ? `完成於 ${new Date(exercise.completedSetsTime[setIndex]!).toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' })}`\n                                : `點擊完成第 ${setIndex + 1} 組`\n                              }\n                            >\n                              {completed ? (\n                                <Check className=\"h-5 w-5 animate-in zoom-in duration-200\" />\n                              ) : (\n                                <span className=\"text-sm font-semibold text-morandi-secondary\">\n                                  {setIndex + 1}\n                                </span>\n                              )}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n          </div>\n\n          {/* 統計 */}\n          {workoutData.exercises && workoutData.exercises.length > 0 && (\n            <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n              <h3 className=\"font-medium mb-3\">本次統計</h3>\n              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-morandi-secondary\">總動作數:</span>\n                  <p className=\"font-medium text-lg\">{workoutData.exercises.length}</p>\n                </div>\n                <div>\n                  <span className=\"text-morandi-secondary\">完成組數:</span>\n                  <p className=\"font-medium text-lg\">{totalCompletedSets}/{totalSets}</p>\n                </div>\n                <div>\n                  <span className=\"text-morandi-secondary\">總訓練量:</span>\n                  <p className=\"font-medium text-lg\">{getTotalVolume().toLocaleString()} kg</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* 按鈕與完成狀態 */}\n          <div className=\"pt-4 border-t space-y-3\">\n            {/* 完成狀態提示 */}\n            {isBoxCompleted && (\n              <div className=\"bg-morandi-green/10 border border-morandi-green/30 rounded-lg p-3 flex items-center justify-center gap-2\">\n                <Check className=\"h-5 w-5 text-morandi-green\" />\n                <span className=\"text-morandi-green font-medium\">\n                  此訓練已完成 ✓\n                </span>\n              </div>\n            )}\n\n            <div className=\"flex justify-between\">\n              <Button\n                variant=\"outline\"\n                onClick={handleDelete}\n                className=\"text-morandi-red border-morandi-red hover:bg-morandi-red/10\"\n              >\n                <Trash2 size={16} className=\"mr-1\" />\n                移除排程\n              </Button>\n              <Button variant=\"outline\" onClick={onClose}>\n                關閉\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/box-manager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1833,1836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1833,1836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { useTimeboxStore, morandiColors } from '@/stores/timebox-store'\nimport { useAuthStore } from '@/stores/auth-store'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport ColorPicker from '@/components/ui/color-picker'\nimport { Plus, Dumbbell, MessageSquare, Package, Edit, Trash2 } from 'lucide-react'\n\nconst typeIcons = {\n  workout: Dumbbell,\n  reminder: MessageSquare,\n  basic: Package,\n}\n\nconst typeLabels = {\n  workout: '重訓箱子',\n  reminder: '文字提示箱子',\n  basic: '普通箱子',\n}\n\nexport default function BoxManager() {\n  const { boxes, createBox, updateBox, deleteBox } = useTimeboxStore()\n  const { user } = useAuthStore()\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [editingBox, setEditingBox] = useState<string | null>(null)\n\n  // 新增/編輯表單狀態\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'basic' as 'workout' | 'reminder' | 'basic',\n    color: morandiColors[0].value,\n  })\n\n  const handleSubmit = () => {\n    if (!formData.name.trim()) return\n\n    if (editingBox) {\n      updateBox(editingBox, {\n        name: formData.name,\n        type: formData.type,\n        color: formData.color,\n      })\n      setEditingBox(null)\n    } else {\n      createBox({\n        name: formData.name,\n        type: formData.type,\n        color: formData.color,\n        user_id: user?.employee_number || 'guest',\n      })\n    }\n\n    setFormData({\n      name: '',\n      type: 'basic',\n      color: morandiColors[0].value,\n    })\n    setIsCreateDialogOpen(false)\n  }\n\n  const handleEdit = (box: any) => {\n    setFormData({\n      name: box.name,\n      type: box.type,\n      color: box.color,\n    })\n    setEditingBox(box.id)\n    setIsCreateDialogOpen(true)\n  }\n\n  const handleDelete = (id: string) => {\n    if (confirm('確定要刪除這個箱子嗎？')) {\n      deleteBox(id)\n    }\n  }\n\n  return (\n    <div className=\"w-full bg-white flex flex-col\">\n      {/* 標題與新增按鈕 */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">我的箱子</h2>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                新增箱子\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingBox ? '編輯箱子' : '新增箱子'}\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                {/* 箱子名稱 */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    箱子名稱 *\n                  </label>\n                  <Input\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"請輸入箱子名稱\"\n                  />\n                </div>\n\n                {/* 箱子類型 */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    箱子類型\n                  </label>\n                  <Select\n                    value={formData.type}\n                    onValueChange={(value: 'workout' | 'reminder' | 'basic') =>\n                      setFormData({ ...formData, type: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"basic\">普通箱子</SelectItem>\n                      <SelectItem value=\"workout\">重訓箱子</SelectItem>\n                      <SelectItem value=\"reminder\">文字提示箱子</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* 顏色選擇 */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    顏色選擇\n                  </label>\n                  <ColorPicker\n                    value={formData.color}\n                    onChange={(color) => setFormData({ ...formData, color })}\n                  />\n                </div>\n\n                {/* 按鈕 */}\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsCreateDialogOpen(false)\n                      setEditingBox(null)\n                      setFormData({\n                        name: '',\n                        type: 'basic',\n                        color: morandiColors[0].value,\n                      })\n                    }}\n                  >\n                    取消\n                  </Button>\n                  <Button onClick={handleSubmit} disabled={!formData.name.trim()}>\n                    {editingBox ? '更新' : '建立'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* 箱子列表 */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {boxes.length === 0 ? (\n          <div className=\"text-center text-gray-500 py-8\">\n            還沒有建立任何箱子\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {boxes.map((box) => {\n              const Icon = typeIcons[box.type]\n              return (\n                <div\n                  key={box.id}\n                  className=\"group relative p-3 rounded-lg border border-gray-200 hover:border-gray-300 hover:shadow-md transition-all duration-200 cursor-move transform hover:scale-105\"\n                  style={{ borderLeftColor: box.color, borderLeftWidth: '4px' }}\n                  draggable\n                  onDragStart={(e) => {\n                    e.dataTransfer.setData('application/json', JSON.stringify({\n                      type: 'box',\n                      boxId: box.id,\n                    }))\n                  }}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    {/* 圖示 */}\n                    <div\n                      className=\"w-8 h-8 rounded-md flex items-center justify-center text-white\"\n                      style={{ backgroundColor: box.color }}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                    </div>\n\n                    {/* 箱子資訊 */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium text-gray-900 truncate\">\n                        {box.name}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {typeLabels[box.type]}\n                      </div>\n                    </div>\n\n                    {/* 操作按鈕 */}\n                    <div className=\"opacity-0 group-hover:opacity-100 transition-opacity flex space-x-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          handleEdit(box)\n                        }}\n                      >\n                        <Edit className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation()\n                          handleDelete(box.id)\n                        }}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/box-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/create-box-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/review-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/scheduled-box-item.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/statistics-panel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { memo } from 'react'\nimport { useTimeboxStore } from '@/stores/timebox-store'\nimport { Card } from '@/components/ui/card'\n\nfunction StatisticsPanel() {\n  const { getWeekStatistics } = useTimeboxStore()\n  const stats = getWeekStatistics()\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60)\n    const mins = minutes % 60\n    if (hours > 0) {\n      return `${hours}小時${mins > 0 ? ` ${mins}分鐘` : ''}`\n    }\n    return `${mins}分鐘`\n  }\n\n  const completionRate = stats?.completionRate ?? 0\n  const totalWorkoutTime = stats?.totalWorkoutTime ?? 0\n  const completedByType = stats?.completedByType ?? { workout: 0, reminder: 0, basic: 0 }\n  const totalWorkoutVolume = stats?.totalWorkoutVolume ?? 0\n  const totalWorkoutSessions = stats?.totalWorkoutSessions ?? 0\n\n  const hasWorkoutStats = totalWorkoutSessions > 0 && totalWorkoutVolume > 0\n\n  return (\n    <div className=\"bg-card border-b border-border px-6 py-4\">\n      <div className={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-${hasWorkoutStats ? '4' : '3'} gap-4`}>\n        {/* 完成率 */}\n        <div className=\"morandi-card p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs sm:text-sm font-medium text-morandi-secondary\">本週完成率</p>\n              <p className=\"text-lg sm:text-2xl font-bold text-morandi-primary\">\n                {Math.round(completionRate * 100)}%\n              </p>\n            </div>\n            <div className=\"w-8 h-8 sm:w-12 sm:h-12 rounded-full bg-morandi-container flex items-center justify-center\">\n              <div className=\"text-morandi-gold font-semibold text-xs sm:text-base\">\n                {Math.round(completionRate * 100)}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 運動時間 */}\n        <div className=\"morandi-card p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs sm:text-sm font-medium text-morandi-secondary\">運動時間</p>\n              <p className=\"text-lg sm:text-2xl font-bold text-morandi-primary\">\n                <span className=\"hidden sm:inline\">{formatTime(totalWorkoutTime)}</span>\n                <span className=\"sm:hidden\">{Math.floor(totalWorkoutTime / 60)}h</span>\n              </p>\n            </div>\n            <div className=\"w-8 h-8 sm:w-12 sm:h-12 rounded-full bg-morandi-container flex items-center justify-center\">\n              <div className=\"text-morandi-green font-semibold text-xs sm:text-sm\">\n                {Math.floor(totalWorkoutTime / 60)}h\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 完成項目分布 */}\n        <div className=\"morandi-card p-4\">\n          <div>\n            <p className=\"text-xs sm:text-sm font-medium text-morandi-secondary mb-2\">完成項目</p>\n            <div className=\"space-y-1.5\">\n              <div className=\"flex justify-between text-xs sm:text-sm\">\n                <span className=\"text-morandi-secondary\">運動</span>\n                <span className=\"font-medium text-morandi-primary\">{completedByType.workout} 次</span>\n              </div>\n              <div className=\"flex justify-between text-xs sm:text-sm\">\n                <span className=\"text-morandi-secondary\">保養</span>\n                <span className=\"font-medium text-morandi-primary\">{completedByType.reminder} 次</span>\n              </div>\n              <div className=\"flex justify-between text-xs sm:text-sm\">\n                <span className=\"text-morandi-secondary\">其他</span>\n                <span className=\"font-medium text-morandi-primary\">{completedByType.basic} 次</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 重訓統計 */}\n        {hasWorkoutStats && (\n          <div className=\"morandi-card p-4\">\n            <div>\n              <p className=\"text-xs sm:text-sm font-medium text-morandi-secondary mb-2\">重訓統計</p>\n              <div className=\"space-y-1.5\">\n                <div className=\"flex justify-between text-xs sm:text-sm\">\n                  <span className=\"text-morandi-secondary\">本週訓練量</span>\n                  <span className=\"font-medium text-morandi-primary\">{totalWorkoutVolume.toLocaleString()} kg</span>\n                </div>\n                <div className=\"flex justify-between text-xs sm:text-sm\">\n                  <span className=\"text-morandi-secondary\">訓練次數</span>\n                  <span className=\"font-medium text-morandi-primary\">{totalWorkoutSessions} 次</span>\n                </div>\n                <div className=\"flex justify-between text-xs sm:text-sm\">\n                  <span className=\"text-morandi-secondary\">平均每次</span>\n                  <span className=\"font-medium text-morandi-primary\">\n                    {Math.round(totalWorkoutVolume / (totalWorkoutSessions || 1)).toLocaleString()} kg\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default memo(StatisticsPanel)","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/time-grid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isTimeSlotOccupied' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":149,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4958,4961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4958,4961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hour' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":204,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":204,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useTimeboxStore } from '@/stores/timebox-store'\n\nimport ScheduledBoxItem from './scheduled-box-item'\nimport { logger } from '@/lib/utils/logger'\n\ninterface TimeGridProps {\n  weekDays: Date[]\n  timeInterval: 30 | 60\n}\n\nexport default function TimeGrid({ weekDays, timeInterval }: TimeGridProps) {\n  const { scheduledBoxes, addScheduledBox, currentWeek, initializeCurrentWeek, boxes, createBox } = useTimeboxStore()\n\n  // 生成時間段 - 根據 timeInterval 動態生成\n  const timeSlots: string[] = []\n  for (let hour = 6; hour < 24; hour++) {\n    timeSlots.push(`${hour.toString().padStart(2, '0')}:00`)\n    if (timeInterval === 30) {\n      timeSlots.push(`${hour.toString().padStart(2, '0')}:30`)\n    }\n  }\n\n  // 檢查時間衝突\n  const hasConflict = (dayOfWeek: number, start_time: string, duration: number) => {\n    const startMinutes = timeToMinutes(start_time)\n    const endMinutes = startMinutes + duration\n\n    return scheduledBoxes.some(box => {\n      if (box.dayOfWeek !== dayOfWeek) return false\n\n      const boxStartMinutes = timeToMinutes(box.start_time)\n      const boxEndMinutes = boxStartMinutes + box.duration\n\n      return (startMinutes < boxEndMinutes && endMinutes > boxStartMinutes)\n    })\n  }\n\n  const timeToMinutes = (time: string) => {\n    const [hours, minutes] = time.split(':').map(Number)\n    return hours * 60 + minutes\n  }\n\n  const minutesToTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60)\n    const mins = minutes % 60\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`\n  }\n\n  // 週開始計算函數（與頁面中的保持一致）\n  const getWeekStart = (date: Date) => {\n    const d = new Date(date)\n    const day = d.getDay()\n    const diff = d.getDate() - day + (day === 0 ? -6 : 1) // 調整為週一開始\n    return new Date(d.setDate(diff))\n  }\n\n  // 簡單的 ID 生成器\n  const generateId = () => {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2)\n  }\n\n  // 獲取或創建預設的普通箱子\n  const getDefaultBasicBox = () => {\n    // 尋找已存在的普通箱子\n    let basicBox = boxes.find(box => box.type === 'basic')\n\n    // 如果沒有，創建一個預設的普通箱子\n    if (!basicBox) {\n      createBox({\n        name: '日常安排',\n        color: '#D4D4D4', // 雲石灰\n        type: 'basic',\n        user_id: 'current-user',\n      })\n      // 重新獲取\n      basicBox = boxes.find(box => box.type === 'basic')\n    }\n\n    return basicBox\n  }\n\n  // 直接新增普通箱子到時間格\n  const handleAddBasicBox = (dayOfWeek: number, start_time: string) => {\n    // 確保有 currentWeek\n    let weekId = currentWeek?.id\n    if (!currentWeek) {\n      const weekDays = []\n      const today = new Date()\n      const weekStart = getWeekStart(today)\n\n      for (let i = 0; i < 7; i++) {\n        const day = new Date(weekStart)\n        day.setDate(weekStart.getDate() + i)\n        weekDays.push(day)\n      }\n\n      initializeCurrentWeek(weekDays[0])\n      weekId = generateId()\n    }\n\n    // 獲取預設普通箱子\n    const basicBox = getDefaultBasicBox()\n    if (!basicBox) return\n\n    // 預設時長使用當前的時間間隔\n    const defaultDuration = timeInterval\n\n    // 檢查衝突\n    if (hasConflict(dayOfWeek, start_time, defaultDuration)) {\n      alert('此時段已有其他箱子，請選擇其他時間')\n      return\n    }\n\n    // 直接新增箱子\n    addScheduledBox({\n      boxId: basicBox.id,\n      weekId: weekId || generateId(),\n      dayOfWeek,\n      start_time,\n      duration: defaultDuration,\n      completed: false,\n    })\n  }\n\n  // 獲取單元格中的箱子（起始時段）\n  const getBoxesInCell = (dayOfWeek: number, timeSlot: string) => {\n    // 30 分鐘視圖：只返回精確匹配的箱子\n    if (timeInterval === 30) {\n      const box = scheduledBoxes.find(box =>\n        box.dayOfWeek === dayOfWeek && box.start_time === timeSlot\n      )\n      return box ? [box] : []\n    }\n\n    // 60 分鐘視圖：返回這個小時內所有開始的箱子\n    const currentMinutes = timeToMinutes(timeSlot)\n    const nextHourMinutes = currentMinutes + 60\n\n    return scheduledBoxes.filter(box => {\n      if (box.dayOfWeek !== dayOfWeek) return false\n      const boxStartMinutes = timeToMinutes(box.start_time)\n      return boxStartMinutes >= currentMinutes && boxStartMinutes < nextHourMinutes\n    })\n  }\n\n  // 檢查時段是否被任何箱子佔用\n  const isTimeSlotOccupied = (dayOfWeek: number, timeSlot: string) => {\n    const currentMinutes = timeToMinutes(timeSlot)\n\n    return scheduledBoxes.some(box => {\n      if (box.dayOfWeek !== dayOfWeek) return false\n\n      const boxStartMinutes = timeToMinutes(box.start_time)\n      const boxEndMinutes = boxStartMinutes + box.duration\n\n      return currentMinutes >= boxStartMinutes && currentMinutes < boxEndMinutes\n    })\n  }\n\n  // 獲取佔用此時段的箱子\n  const getOccupyingBox = (dayOfWeek: number, timeSlot: string) => {\n    const currentMinutes = timeToMinutes(timeSlot)\n\n    return scheduledBoxes.find(box => {\n      if (box.dayOfWeek !== dayOfWeek) return false\n\n      const boxStartMinutes = timeToMinutes(box.start_time)\n      const boxEndMinutes = boxStartMinutes + box.duration\n\n      return currentMinutes >= boxStartMinutes && currentMinutes < boxEndMinutes\n    })\n  }\n\n  // 判斷箱子在此時段的位置類型\n  const getBoxPositionType = (scheduledBox: any, timeSlot: string) => {\n    const currentMinutes = timeToMinutes(timeSlot)\n    const boxStartMinutes = timeToMinutes(scheduledBox.start_time)\n    const boxEndMinutes = boxStartMinutes + scheduledBox.duration\n\n    if (currentMinutes === boxStartMinutes) return 'start'\n    if (currentMinutes + timeInterval === boxEndMinutes) return 'end'\n    return 'middle'\n  }\n\n  // 計算箱子高度\n  const getBoxHeight = (duration: number) => {\n    // 每格的高度（根據視圖模式）\n    const slotHeight = timeInterval === 30 ? 32 : 64 // 30分=32px, 60分=64px\n\n    // 計算佔用幾格\n    const slotsNeeded = duration / timeInterval\n\n    return slotsNeeded * slotHeight\n  }\n\n  // 計算箱子在格子內的 top 偏移量\n  const getBoxTopOffset = (start_time: string) => {\n    // 在 30 分鐘視圖下，每個箱子都在格子頂部\n    if (timeInterval === 30) return 0\n\n    // 在 60 分鐘視圖下，需要計算箱子在整點格子內的偏移\n    const [hour, minute] = start_time.split(':').map(Number)\n\n    // 如果是整點（:00），在格子頂部\n    if (minute === 0) return 0\n\n    // 如果是半點（:30），在格子中間（偏移 32px）\n    if (minute === 30) return 32\n\n    // 其他情況按比例計算\n    return (minute / 60) * 64\n  }\n\n  return (\n    <div className=\"relative\">\n      <div className=\"grid grid-cols-8 min-h-[600px]\">\n        {/* 時間軸 */}\n        <div className=\"border-r border-border bg-morandi-container/10\">\n          {timeSlots.map((timeSlot) => (\n            <div\n              key={timeSlot}\n              className={`${timeInterval === 30 ? 'h-8' : 'h-16'} flex items-center justify-center text-xs sm:text-sm text-morandi-secondary border-b border-border/50`}\n            >\n              {timeSlot}\n            </div>\n          ))}\n        </div>\n\n        {/* 日期列 */}\n        {weekDays.map((day, dayIndex) => (\n          <div key={dayIndex} className=\"border-r border-border last:border-r-0 relative bg-card\">\n            {timeSlots.map((timeSlot, timeIndex) => {\n              const boxesInCell = getBoxesInCell(dayIndex, timeSlot)\n              const occupyingBox = getOccupyingBox(dayIndex, timeSlot)\n              const isOccupied = !!occupyingBox\n              const hasBoxes = boxesInCell.length > 0\n\n              // 如果時段被佔用但不是起始格（30分鐘視圖的中間部分），渲染佔位\n              if (isOccupied && !hasBoxes && timeInterval === 30) {\n                const baseBox = boxes.find(b => b.id === occupyingBox.boxId)\n                const positionType = getBoxPositionType(occupyingBox, timeSlot)\n\n                const borderRadius = positionType === 'start' ? 'rounded-t-md' :\n                                    positionType === 'end' ? 'rounded-b-md' : ''\n\n                return (\n                  <div\n                    key={`${dayIndex}-${timeIndex}`}\n                    className={`h-8 border-b border-border/50 relative cursor-pointer ${borderRadius}`}\n                    style={{ backgroundColor: baseBox?.color }}\n                    onClick={() => {\n                      // 點擊中間部分，通過 window 事件通知打開對話框\n                      window.dispatchEvent(new CustomEvent('openBoxDialog', {\n                        detail: { scheduledBoxId: occupyingBox.id }\n                      }))\n                    }}\n                  >\n                    {/* 中間和結尾部分可以顯示簡化資訊 */}\n                    {positionType === 'end' && (\n                      <div className=\"absolute bottom-1 right-2 text-xs text-white opacity-75\">\n                        {minutesToTime(timeToMinutes(occupyingBox.start_time) + occupyingBox.duration)}\n                      </div>\n                    )}\n                  </div>\n                )\n              }\n\n              return (\n                <div\n                  key={`${dayIndex}-${timeIndex}`}\n                  className={`${timeInterval === 30 ? 'h-8' : 'h-16'} border-b border-border/50 relative cursor-pointer hover:bg-morandi-container/20 transition-colors duration-150`}\n                  onClick={() => {\n                    if (!isOccupied) {\n                      handleAddBasicBox(dayIndex, timeSlot)\n                    }\n                  }}\n                >\n                  {/* 渲染這個格子內所有的箱子 */}\n                  {boxesInCell.map((box) => (\n                    <ScheduledBoxItem\n                      key={box.id}\n                      scheduledBox={box}\n                      height={getBoxHeight(box.duration)}\n                      topOffset={getBoxTopOffset(box.start_time)}\n                    />\n                  ))}\n                </div>\n              )\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/components/week-view.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/timebox/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/todos/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Suspense' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Star' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Receipt' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":86},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":88,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserPlus' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":100,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":108},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":110,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":121},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid3x3' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":138,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":145},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'List' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":147,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":151},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":153,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":159},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cloud' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":161,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":166},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CloudOff' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":168,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":176},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RefreshCw' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":178,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":187},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":189,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":193},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7123,7126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7123,7126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7935,7938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7935,7938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9767,9770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9767,9770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":387,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":387,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":408,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13584,13587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13584,13587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useMemo, useCallback, Suspense } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from '@/components/ui/dialog';\nimport { useTodoStore } from '@/stores';\nimport { useUserStore } from '@/stores/user-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { CheckCircle, Clock, Calendar, ChevronDown, X, Star, Receipt, FileText, Users, DollarSign, UserPlus, AlertCircle, Trash2, Edit2, Grid3x3, List, Search, Cloud, CloudOff, RefreshCw, Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { logger } from '@/lib/utils/logger';\nimport { EnhancedTable } from '@/components/ui/enhanced-table';\nimport { TodoExpandedView } from '@/components/todos/todo-expanded-view';\nimport { StarRating } from '@/components/ui/star-rating';\nimport { Todo } from '@/stores/types';\n\nexport const dynamic = 'force-dynamic';\n\n\nconst statusFilters = [\n  { value: 'all', label: '全部' },\n  { value: 'pending', label: '待辦' },\n  { value: 'in_progress', label: '進行中' },\n  { value: 'completed', label: '完成' }\n];\n\nexport default function TodosPage() {\n  const todoStore = useTodoStore();\n  const todos = todoStore.items;\n  const { create: addTodo, update: updateTodo, delete: deleteTodo, fetchAll } = todoStore;\n  const { user } = useAuthStore(); // 取得當前登入用戶\n  const searchParams = useSearchParams();\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [expandedTodo, setExpandedTodo] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false); // 使用快取資料，不需要載入\n  const [isSubmitting, setIsSubmitting] = useState(false); // 防止重複提交\n  const [isComposing, setIsComposing] = useState(false); // 中文輸入法狀態\n\n  // 載入待辦事項資料\n  useEffect(() => {\n    fetchAll();\n  }, [fetchAll]);\n\n  // 處理從其他頁面跳轉來的情況\n  useEffect(() => {\n    const expandId = searchParams.get('expand');\n    if (expandId) {\n      setExpandedTodo(expandId);\n    }\n  }, [searchParams]);\n\n  // 篩選待辦 - 使用 useMemo 優化\n  const filteredTodos = useMemo(() => {\n    if (!todos || !Array.isArray(todos)) return [];\n    const currentUserId = user?.id;\n\n    return todos.filter(todo => {\n      // ✅ 可見性篩選 - 只顯示當前用戶相關的待辦\n      if (currentUserId) {\n        const isCreator = todo.creator === currentUserId;\n        const isAssignee = todo.assignee === currentUserId;\n        const inVisibility = todo.visibility?.includes(currentUserId);\n\n        // 必須是建立者、被指派者或在可見列表中\n        if (!isCreator && !isAssignee && !inVisibility) {\n          return false;\n        }\n      }\n\n      // 狀態篩選\n      if (statusFilter !== 'all' && todo.status !== statusFilter) return false;\n\n      // 搜尋篩選\n      if (searchTerm && !todo.title.toLowerCase().includes(searchTerm.toLowerCase())) return false;\n\n      return true;\n    });\n  }, [todos, statusFilter, searchTerm, user?.id]);\n\n  // 狀態標籤 - 使用 useCallback 優化\n  const getStatusLabel = useCallback((status: Todo['status']) => {\n    const statusMap = {\n      pending: '待辦',\n      in_progress: '進行中',\n      completed: '完成',\n      cancelled: '取消'\n    };\n    return statusMap[status];\n  }, []);\n\n  // 狀態顏色 - 使用 useCallback 優化\n  const getStatusColor = useCallback((status: Todo['status']) => {\n    const colorMap = {\n      pending: 'text-morandi-muted',\n      in_progress: 'text-blue-600',\n      completed: 'text-green-600',\n      cancelled: 'text-morandi-red'\n    };\n    return colorMap[status];\n  }, []);\n\n  // 截止日期顏色 - 使用 useCallback 優化\n  const getDeadlineColor = useCallback((deadline?: string) => {\n    if (!deadline) return 'text-morandi-secondary';\n\n    const deadlineDate = new Date(deadline);\n    const today = new Date();\n    const diffDays = Math.ceil((deadlineDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (diffDays < 0) return 'text-morandi-red'; // 逾期\n    if (diffDays === 0) return 'text-orange-500'; // 今天\n    if (diffDays <= 3) return 'text-yellow-600'; // 3天內\n    return 'text-morandi-secondary'; // 充裕\n  }, []);\n\n  const columns = [\n    {\n      key: 'title',\n      label: '任務標題',\n      sortable: true,\n      render: (value: string, todo: Todo) => (\n        <div>\n          <div className=\"text-sm font-medium text-morandi-primary\">{value}</div>\n          {todo.related_items && todo.related_items.length > 0 && (\n            <div className=\"flex gap-1 mt-1\">\n              {todo.related_items.map((item, index) => (\n                <button\n                  key={index}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    const basePath = {\n                      'group': '/tours',\n                      'quote': '/quotes',\n                      'order': '/orders',\n                      'invoice': '/finance/treasury/disbursement',\n                      'receipt': '/finance/payments'\n                    }[item.type];\n                    if (basePath) {\n                      window.location.href = `${basePath}?highlight=${item.id}`;\n                    }\n                  }}\n                  className=\"text-xs bg-morandi-gold/20 text-morandi-primary px-2 py-0.5 rounded hover:bg-morandi-gold/30 transition-colors\"\n                >\n                  {item.title}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      key: 'priority',\n      label: '優先級',\n      sortable: true,\n      render: (value: number, todo: Todo) => (\n        <StarRating value={todo.priority} readonly size=\"sm\" />\n      )\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      render: (value: Todo['status']) => (\n        <span className={cn('text-sm font-medium', getStatusColor(value))}>\n          {getStatusLabel(value)}\n        </span>\n      )\n    },\n    {\n      key: 'deadline',\n      label: '期限',\n      sortable: true,\n      render: (value: string) => (\n        <div className=\"flex items-center gap-2\">\n          <Calendar size={14} className=\"text-morandi-secondary\" />\n          <span className={cn('text-sm', getDeadlineColor(value))}>\n            {value ? new Date(value).toLocaleDateString() : '未設定'}\n          </span>\n        </div>\n      )\n    }\n  ];\n\n  const handleRowClick = useCallback((todo: Todo) => {\n    setExpandedTodo(todo.id);\n  }, []);\n\n  const handleDeleteTodo = useCallback((todo: Todo, e?: React.MouseEvent) => {\n    if (e) e.stopPropagation();\n\n    const confirmMessage = `確定要刪除待辦事項「${todo.title}」嗎？\\n\\n此操作無法復原。`;\n\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      deleteTodo(todo.id);\n      // 如果正在顯示該待辦的詳細檢視，關閉它\n      if (expandedTodo === todo.id) {\n        setExpandedTodo(null);\n      }\n    } catch (err) {\n      logger.error('刪除待辦事項失敗:', err);\n      alert('刪除失敗，請稍後再試');\n    }\n  }, [deleteTodo, expandedTodo]);\n\n  const handleAddTodo = useCallback(async (formData: any) => {\n    if (!user?.id) {\n      alert('請先登入');\n      return;\n    }\n\n    try {\n      // 計算 visibility - 包含建立者和被指派者\n      const visibilityList = [user.id];\n      if (formData.assignee && formData.assignee !== user.id) {\n        visibilityList.push(formData.assignee);\n      }\n\n      const newTodoData = {\n        title: formData.title,\n        priority: formData.priority,\n        deadline: formData.deadline,\n        status: 'pending' as const,\n        completed: false,\n        creator: user.id, // ✅ 使用當前登入用戶\n        assignee: formData.assignee || null,\n        visibility: visibilityList, // ✅ 包含建立者和被指派者\n        related_items: [],\n        sub_tasks: [],\n        notes: [],\n        enabled_quick_actions: formData.enabled_quick_actions || ['receipt', 'quote']\n      };\n\n      await addTodo(newTodoData as any);\n      setIsAddDialogOpen(false);\n    } catch (error) {\n      logger.error('新增待辦事項失敗:', error);\n      alert('新增失敗，請稍後再試');\n    }\n  }, [addTodo, user?.id]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        title=\"待辦事項\"\n        showSearch={true}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        searchPlaceholder=\"搜尋任務...\"\n        onAdd={() => setIsAddDialogOpen(true)}\n        addLabel=\"新增任務\"\n        actions={\n          <Input\n            placeholder=\"快速新增... (Enter)\"\n            className=\"w-64\"\n            onCompositionStart={() => setIsComposing(true)}\n            onCompositionEnd={() => setIsComposing(false)}\n            onKeyDown={async (e) => {\n              // 如果正在使用輸入法（如注音、拼音），不要觸發新增\n              if (e.key === 'Enter' && e.currentTarget.value.trim() && !isSubmitting && !isComposing) {\n                e.preventDefault();\n                if (!user?.id) {\n                  alert('請先登入');\n                  return;\n                }\n                const title = e.currentTarget.value.trim();\n                const inputElement = e.currentTarget;\n                inputElement.value = '';\n                setIsSubmitting(true);\n\n                const newTodoData = {\n                  title,\n                  priority: 3 as 1 | 2 | 3 | 4 | 5,\n                  deadline: '',\n                  status: 'pending' as const,\n                  completed: false,\n                  creator: user.id,\n                  assignee: null,\n                  visibility: [user.id],\n                  related_items: [],\n                  sub_tasks: [],\n                  notes: [],\n                  enabled_quick_actions: ['receipt', 'quote'] as ('receipt' | 'quote')[]\n                };\n\n                try {\n                  await addTodo(newTodoData as any);\n                  logger.log('✅ 待辦事項新增成功');\n                } catch (error) {\n                  logger.error('快速新增失敗:', error);\n                  if (inputElement) {\n                    inputElement.value = title;\n                  }\n                  alert('新增失敗，請稍後再試');\n                } finally {\n                  setIsSubmitting(false);\n                }\n              }\n            }}\n          />\n        }\n      >\n        {/* 狀態篩選 */}\n        <div className=\"flex gap-2\">\n          {statusFilters.map((filter) => (\n            <button\n              key={filter.value}\n              onClick={() => setStatusFilter(filter.value)}\n              className={cn(\n                'px-3 py-1 rounded-lg text-sm font-medium transition-colors',\n                statusFilter === filter.value\n                  ? 'bg-morandi-gold text-white'\n                  : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/30'\n              )}\n            >\n              {filter.label}\n            </button>\n          ))}\n        </div>\n      </ResponsiveHeader>\n\n      {/* 待辦事項列表 */}\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n          columns={columns}\n          data={filteredTodos}\n          onRowClick={handleRowClick}\n          actions={(todo: Todo) => (\n            <div className=\"flex items-center gap-1\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  const newStatus = todo.status === 'completed' ? 'pending' : 'completed';\n                  updateTodo(todo.id, {\n                    status: newStatus,\n                    completed: newStatus === 'completed'\n                  });\n                }}\n                className={cn(\n                  \"p-1 rounded transition-colors\",\n                  todo.status === 'completed'\n                    ? \"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                    : \"text-morandi-secondary hover:text-green-600 hover:bg-green-50\"\n                )}\n                title={todo.status === 'completed' ? '取消完成' : '標記完成'}\n              >\n                <CheckCircle size={14} />\n              </button>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setExpandedTodo(todo.id);\n                }}\n                className=\"p-1 hover:bg-morandi-gold/10 rounded transition-colors\"\n                title=\"編輯\"\n              >\n                <Edit2 size={14} />\n              </button>\n              <button\n                onClick={(e) => handleDeleteTodo(todo, e)}\n                className=\"p-1 text-morandi-red hover:bg-morandi-red/10 rounded transition-colors\"\n                title=\"刪除\"\n              >\n                <Trash2 size={14} />\n              </button>\n            </div>\n          )}\n          searchableFields={['title']}\n          searchTerm={searchTerm}\n          showFilters={false}\n          initialPageSize={15}\n        />\n      </div>\n\n      {/* 展開的待辦事項視圖 */}\n      {expandedTodo && (\n        <TodoExpandedView\n          todo={todos.find(t => t.id === expandedTodo)!}\n          onUpdate={(updates) => updateTodo(expandedTodo, updates)}\n          onClose={() => setExpandedTodo(null)}\n        />\n      )}\n\n      {/* 新增待辦事項對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>新增待辦事項</DialogTitle>\n            <DialogDescription>建立新的待辦任務，設定優先級和截止日期</DialogDescription>\n          </DialogHeader>\n          <AddTodoForm onSubmit={handleAddTodo} onCancel={() => setIsAddDialogOpen(false)} />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// 新增待辦事項表單組件\nfunction AddTodoForm({ onSubmit, onCancel }: { onSubmit: (data: any) => void; onCancel: () => void }) {\n  const { items: users, fetchAll: loadUsersFromDatabase } = useUserStore();\n  const [isLoadingUsers, setIsLoadingUsers] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    priority: 3 as 1 | 2 | 3 | 4 | 5,\n    deadline: '',\n    assignee: '',\n    enabled_quick_actions: ['receipt', 'quote'] as ('receipt' | 'invoice' | 'group' | 'quote' | 'assign')[]\n  });\n\n  // 當點擊或聚焦指派選單時，才載入員工資料\n  const handleAssigneeDropdownFocus = async () => {\n    if (users.length === 0 && !isLoadingUsers) {\n      setIsLoadingUsers(true);\n      try {\n        await loadUsersFromDatabase();\n      } catch (error) {\n        logger.error('載入員工資料失敗:', error);\n      } finally {\n        setIsLoadingUsers(false);\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.title.trim()) return;\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-morandi-primary mb-1\">任務標題</label>\n        <Input\n          value={formData.title}\n          onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n          placeholder=\"輸入任務標題...\"\n          required\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-morandi-primary mb-1\">緊急度</label>\n        <StarRating\n          value={formData.priority}\n          onChange={(value) => setFormData({ ...formData, priority: value as 1 | 2 | 3 | 4 | 5 })}\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-morandi-primary mb-1\">期限</label>\n        <Input\n          type=\"date\"\n          value={formData.deadline}\n          onChange={(e) => setFormData({ ...formData, deadline: e.target.value })}\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-morandi-primary mb-1\">指派給（可選）</label>\n        <select\n          value={formData.assignee}\n          onChange={(e) => setFormData({ ...formData, assignee: e.target.value })}\n          onFocus={handleAssigneeDropdownFocus}\n          className=\"w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-1 focus:ring-morandi-primary\"\n          disabled={isLoadingUsers}\n        >\n          <option value=\"\">\n            {isLoadingUsers ? '載入員工資料中...' : '不指派（個人任務）'}\n          </option>\n          {users && users.map((user) => (\n            <option key={user.id} value={user.id}>\n              {user.display_name} ({user.employee_number})\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"flex gap-2 pt-4\">\n        <Button type=\"submit\" className=\"flex-1\">\n          建立任務\n        </Button>\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          取消\n        </Button>\n      </div>\n    </form>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/tours/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1670,1673],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1670,1673],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { useTourStore } from '@/stores';\nimport { TourOverview } from '@/components/tours/tour-overview';\nimport { TourOrders } from '@/components/tours/tour-orders';\nimport { TourMembers } from '@/components/tours/tour-members';\nimport { TourOperations } from '@/components/tours/tour-operations';\nimport { TourPayments } from '@/components/tours/tour-payments';\nimport { TourCosts } from '@/components/tours/tour-costs';\nimport { TourDocuments } from '@/components/tours/tour-documents';\nimport { TourAddOns } from '@/components/tours/tour-add-ons';\nimport { TourRefunds } from '@/components/tours/tour-refunds';\n\nconst tabs = [\n  { value: 'overview', label: '總覽' },\n  { value: 'orders', label: '訂單管理' },\n  { value: 'members', label: '團員名單' },\n  { value: 'operations', label: '團務' },\n  { value: 'addons', label: '加購' },\n  { value: 'refunds', label: '退費' },\n  { value: 'payments', label: '收款紀錄' },\n  { value: 'costs', label: '成本支出' },\n  { value: 'documents', label: '文件確認' },\n];\n\nexport default function TourDetailPage() {\n  const params = useParams();\n  const router = useRouter();\n  const { items: tours } = useTourStore();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [triggerAddOnAdd, setTriggerAddOnAdd] = useState(false);\n  const [triggerPaymentAdd, setTriggerPaymentAdd] = useState(false);\n  const [triggerRefundAdd, setTriggerRefundAdd] = useState(false);\n\n  const tour = tours.find((t: any) => t.id === params.id);\n\n  if (!tour) {\n    return (\n      <div className=\"p-6\">\n        <ContentContainer>\n          <div className=\"text-center py-12\">\n            <p className=\"text-morandi-secondary\">找不到指定的旅遊團</p>\n          </div>\n        </ContentContainer>\n      </div>\n    );\n  }\n\n  // 統一的按鈕配置\n  const getButtonConfig = () => {\n    // 根據分頁決定按鈕文字和功能\n    const getButtonLabel = () => {\n      switch (activeTab) {\n        case 'overview':\n          return '編輯';\n        case 'operations':\n          return '新增欄位';\n        case 'addons':\n          return '新增加購';\n        case 'payments':\n          return '新增收款';\n        case 'costs':\n          return '新增成本';\n        case 'refunds':\n          return '新增退費';\n        case 'orders':\n          return '新增訂單';\n        case 'members':\n          return '新增團員';\n        default:\n          return null; // 不顯示按鈕\n      }\n    };\n\n    const buttonLabel = getButtonLabel();\n    if (!buttonLabel) return null;\n\n    return {\n      onAdd: () => {\n        // 根據不同分頁執行不同的邏輯\n        switch (activeTab) {\n          case 'overview':\n            // TODO: 編輯旅遊團基本資料\n            console.log('編輯旅遊團:', tour.id);\n            break;\n          case 'operations':\n            // TODO: 新增團務欄位\n            break;\n          case 'addons':\n            setTriggerAddOnAdd(true);\n            break;\n          case 'payments':\n            setTriggerPaymentAdd(true);\n            break;\n          case 'costs':\n            // TODO: 新增成本支出\n            break;\n          case 'refunds':\n            setTriggerRefundAdd(true);\n            break;\n          case 'orders':\n            // TODO: 新增訂單\n            break;\n          case 'members':\n            // TODO: 新增團員\n            break;\n        }\n      },\n      addLabel: buttonLabel\n    };\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'overview':\n        return <TourOverview tour={tour} />;\n      case 'orders':\n        return <TourOrders tour={tour} />;\n      case 'members':\n        return <TourMembers tour={tour} />;\n      case 'operations':\n        return <TourOperations tour={tour} />;\n      case 'addons':\n        return <TourAddOns tour={tour} triggerAdd={triggerAddOnAdd} onTriggerAddComplete={() => setTriggerAddOnAdd(false)} />;\n      case 'refunds':\n        return <TourRefunds tour={tour} triggerAdd={triggerRefundAdd} onTriggerAddComplete={() => setTriggerRefundAdd(false)} />;\n      case 'payments':\n        return <TourPayments tour={tour} triggerAdd={triggerPaymentAdd} onTriggerAddComplete={() => setTriggerPaymentAdd(false)} />;\n      case 'costs':\n        return <TourCosts tour={tour} />;\n      case 'documents':\n        return <TourDocuments tour={tour} />;\n      default:\n        return <TourOverview tour={tour} />;\n    }\n  };\n\n  const buttonConfig = getButtonConfig();\n\n  return (\n    <>\n      <ResponsiveHeader\n        title={`${tour.name} (${tour.code})`}\n        tabs={tabs}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        showBackButton={true}\n        onBack={() => router.push('/tours')}\n        {...(buttonConfig ? { onAdd: buttonConfig.onAdd, addLabel: buttonConfig.addLabel } : {})}\n      />\n\n      <ContentContainer>\n        {renderTabContent()}\n      </ContentContainer>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/tours/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileX' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":143,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":148},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":167,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":173},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid3x3' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":175,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":182},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'List' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":184,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":188},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Combobox' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TourCard' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tourStore' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3802,3805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3802,3805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTour' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":92,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedRows' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":98,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedRows' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":98,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'viewMode' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":101,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setViewMode' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":101,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":116,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":116,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6801,6804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6801,6804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":372,"column":11,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":372,"endColumn":34},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":375,"column":11,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":375,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":533,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":533,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18155,18158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18155,18158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":534,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":534,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18245,18248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18245,18248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":535,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":535,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18287,18290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18287,18290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handlePaginationChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":561,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":561,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pageSize' is defined but never used. Allowed unused args must match /^_/u.","line":561,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":561,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":763,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":763,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26306,26309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26306,26309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":801,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":801,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27816,27819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27816,27819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":853,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":853,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29401,29404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29401,29404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1151,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1151,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41605,41608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41605,41608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1152,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1152,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41713,41716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41713,41716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1155,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1155,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41810,41813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41810,41813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1156,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1156,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41896,41899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41896,41899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1156,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1156,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41908,41911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41908,41911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1159,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1159,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42013,42016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42013,42016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1160,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1160,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42049,42052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42049,42052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1177,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1177,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42846,42849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42846,42849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1183,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1183,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43025,43028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43025,43028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1184,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1184,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43094,43097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43094,43097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1184,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1184,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43108,43111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43108,43111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1185,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1185,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43175,43178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43175,43178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1186,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1186,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43273,43276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43273,43276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1186,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1186,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43284,43287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43284,43287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1463,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1463,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[56742,56745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[56742,56745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1464,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1464,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[56821,56824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[56821,56824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tourStore' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1466,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":1466,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1472,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1472,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57081,57084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57081,57084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1475,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1475,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57189,57192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57189,57192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1476,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1476,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57225,57228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57225,57228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1480,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1480,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[57339,57342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[57339,57342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1516,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1516,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[58353,58356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[58353,58356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1517,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1517,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[58432,58435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[58432,58435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":1559,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":1559,"endColumn":46,"suggestions":[{"messageId":"addBrackets","fix":{"range":[59287,59748],"text":"{ const fieldName = prompt('請輸入欄位名稱:');\n        if (fieldName && fieldName.trim()) {\n          const fieldId = Date.now().toString();\n          setTourExtraFields(prev => ({\n            ...prev,\n            [tour_id]: {\n              ...prev[tour_id],\n              customFields: [\n                ...(prev[tour_id]?.customFields || []),\n                { id: fieldId, name: fieldName.trim() }\n              ]\n            }\n          }));\n        }\n        break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'activeCountries', 'getCitiesByCountryCode', and 'newTour.countryCode'. Either include them or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [activeCountries, getCitiesByCountryCode, newTour.countryCode]","fix":{"range":[7336,7338],"text":"[activeCountries, getCitiesByCountryCode, newTour.countryCode]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { SmartDateInput } from '@/components/ui/smart-date-input';\nimport { useTours } from '@/features/tours/hooks/useTours-advanced';\nimport { tourService } from '@/features/tours/services/tour.service';\nimport { PageRequest } from '@/core/types/common';\nimport { Calendar, FileText, MapPin, Calculator, BarChart3, ShoppingCart, Users, FileCheck, AlertCircle, Clipboard, Plus, Package, RefreshCw, FileX, Edit2, UserPlus, Search, Grid3x3, List, Trash2, Archive, ArchiveRestore } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { logger } from '@/lib/utils/logger';\nimport { ExpandableOrderTable } from '@/components/orders/expandable-order-table';\nimport { AddOrderForm, type OrderFormData } from '@/components/orders/add-order-form';\nimport { useTourStore, useOrderStore, useMemberStore, useEmployeeStore, useRegionStore } from '@/stores';\nimport { useQuotes } from '@/features/quotes/hooks/useQuotes';\nimport { Combobox } from '@/components/ui/combobox';\n// TODO: usePaymentStore deprecated - import { usePaymentStore } from '@/stores';\nimport { Tour } from '@/stores/types';\nimport { EnhancedTable, TableColumn } from '@/components/ui/enhanced-table';\nimport { useDialog } from '@/hooks/useDialog';\nimport { TourMembers } from '@/components/tours/tour-members';\nimport { TourOperations } from '@/components/tours/tour-operations';\nimport { TourAddOns } from '@/components/tours/tour-add-ons';\nimport { TourRefunds } from '@/components/tours/tour-refunds';\nimport { TourPayments } from '@/components/tours/tour-payments';\nimport { TourCosts } from '@/components/tours/tour-costs';\nimport { TourTaskAssignment } from '@/components/tours/tour-task-assignment';\nimport { TourCard } from '@/components/tours/tour-card';\n\n// 使用與詳細模式相同的標籤定義\nconst tourTabs = [\n  { id: 'overview', label: '總覽', icon: BarChart3 },\n  { id: 'orders', label: '訂單管理', icon: ShoppingCart },\n  { id: 'members', label: '團員名單', icon: Users },\n  { id: 'operations', label: '團務', icon: Clipboard },\n  { id: 'addons', label: '加購', icon: Package },\n  { id: 'refunds', label: '退費', icon: RefreshCw },\n  { id: 'payments', label: '收款紀錄', icon: Calculator },\n  { id: 'costs', label: '成本支出', icon: AlertCircle },\n  { id: 'documents', label: '文件確認', icon: FileCheck },\n  { id: 'tasks', label: '指派任務', icon: UserPlus },\n];\n\ninterface NewTourData {\n  name: string;\n  countryCode: string;       // 國家代碼 (如: JPN, THI)\n  cityCode: string;          // 城市代碼 (如: TYO, BKK)\n  customCountry?: string;    // 自訂國家名稱\n  customLocation?: string;   // 自訂城市名稱\n  customCityCode?: string;   // 自訂城市代號\n  departure_date: string;\n  return_date: string;\n  price: number;\n  status: Tour['status'];\n  isSpecial: boolean;\n  max_participants: number;\n  description?: string;\n}\n\nexport default function ToursPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const tourStore = useTourStore();\n  const orderStore = useOrderStore();\n  const { items: orders } = orderStore;\n  const addOrder = orderStore.create;\n  const { items: members } = useMemberStore();\n  const employeeStore = useEmployeeStore();\n  const { items: employees } = employeeStore;\n  const regionStore = useRegionStore();\n  const { items: regions } = regionStore;\n  const { quotes, updateQuote } = useQuotes();\n  const { dialog, openDialog, closeDialog } = useDialog();\n\n  // 懶載入：打開新增對話框時才載入地區和員工資料\n  const handleOpenCreateDialog = useCallback(async (tour: any = null, fromQuoteId?: string) => {\n    // 只在資料為空時才載入（避免重複）\n    if (regions.length === 0) {\n      await regionStore.fetchAll();\n    }\n    if (employees.length === 0) {\n      await employeeStore.fetchAll();\n    }\n    openDialog('create', tour, fromQuoteId);\n  }, [regions.length, employees.length, regionStore, employeeStore, openDialog]);\n\n  // 選中的旅遊團\n  const [selectedTour, setSelectedTour] = useState<Tour | null>(null);\n\n  // 分頁和篩選狀態\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortBy, setSortBy] = useState('created_at');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [selectedRows, setSelectedRows] = useState<string[]>([]);\n  const [expandedRows, setExpandedRows] = useState<string[]>([]);\n  const [activeStatusTab, setActiveStatusTab] = useState('all');\n  const [viewMode, setViewMode] = useState<'card' | 'list'>('list');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [deleteConfirm, setDeleteConfirm] = useState<{ isOpen: boolean; tour: Tour | null }>({ isOpen: false, tour: null });\n  const pageSize = 10;\n\n  // 建立 PageRequest 參數\n  const pageRequest: PageRequest = {\n    page: currentPage,\n    pageSize,\n    search: '',\n    sortBy,\n    sortOrder,\n  };\n\n  // 使用新的 hook\n  const { data: tours, totalCount, loading, error, actions } = useTours(pageRequest);\n\n  // UI 狀態\n  const [activeTabs, setActiveTabs] = useState<Record<string, string>>({});\n  const [submitting, setSubmitting] = useState(false);\n  const [formError, setFormError] = useState<string | null>(null);\n\n  // 展開模式分頁觸發狀態 - 對應每個旅遊團的觸發狀態\n  const [triggerAddOnAdd, setTriggerAddOnAdd] = useState<Record<string, boolean>>({});\n  const [triggerRefundAdd, setTriggerRefundAdd] = useState<Record<string, boolean>>({});\n  const [triggerPaymentAdd, setTriggerPaymentAdd] = useState<Record<string, boolean>>({});\n  const [triggerCostAdd, setTriggerCostAdd] = useState<Record<string, boolean>>({});\n\n  // 動態欄位狀態 - 記錄每個旅遊團啟用的額外欄位\n  const [tourExtraFields, setTourExtraFields] = useState<Record<string, {\n    addOns: boolean;\n    refunds: boolean;\n    customFields: Array<{ id: string; name: string; }>;\n  }>>({});\n\n  // 從 regions 取得國家列表\n  const activeCountries = React.useMemo(() => {\n    return regions\n      .filter(r => r.type === 'country' && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [regions]);\n\n  // 根據國家代碼取得城市列表\n  const getCitiesByCountryCode = React.useCallback((countryCode: string) => {\n    return regions\n      .filter(r => r.type === 'city' && r.country_code === countryCode && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [regions]);\n\n  const [newTour, setNewTour] = useState<NewTourData>({\n    name: '',\n    countryCode: '',\n    cityCode: '',\n    departure_date: '',\n    return_date: '',\n    price: 0,\n    status: 'draft',\n    isSpecial: false,\n    max_participants: 20,\n    description: '',\n  });\n\n  const [availableCities, setAvailableCities] = useState<any[]>([]);\n\n  // 初始化預設國家和城市\n  React.useEffect(() => {\n    if (activeCountries.length > 0 && !newTour.countryCode) {\n      const defaultCountry = activeCountries[0];\n      const defaultCities = getCitiesByCountryCode(defaultCountry.code);\n      const defaultCity = defaultCities[0];\n\n      setNewTour(prev => ({\n        ...prev,\n        countryCode: defaultCountry.code,\n        cityCode: defaultCity?.code || '',\n      }));\n      setAvailableCities(defaultCities);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // 新增訂單狀態（使用 OrderFormData 類型）\n  const [newOrder, setNewOrder] = useState<Partial<OrderFormData>>({\n    contact_person: '',\n    sales_person: '',\n    assistant: '',\n    member_count: 1,\n    total_amount: 0,\n  });\n\n  // 根據狀態標籤和搜尋關鍵字篩選旅遊團\n  const filteredTours = (tours || []).filter(tour => {\n    // 狀態篩選\n    const statusMatch = activeStatusTab === 'all' || tour.status === activeStatusTab;\n\n    // 搜尋篩選 - 搜尋所有文字欄位\n    const searchLower = searchQuery.toLowerCase();\n    const searchMatch = !searchQuery ||\n      tour.name.toLowerCase().includes(searchLower) ||\n      tour.code.toLowerCase().includes(searchLower) ||\n      tour.location.toLowerCase().includes(searchLower) ||\n      tour.status.toLowerCase().includes(searchLower) ||\n      tour.description?.toLowerCase().includes(searchLower);\n\n    return statusMatch && searchMatch;\n  });\n\n  // 處理編輯模式：當 dialog 開啟且為編輯模式時，載入旅遊團資料\n  useEffect(() => {\n    if (dialog.type === 'edit' && dialog.data) {\n      const tour = dialog.data as Tour;\n      console.log('🔧 編輯模式：載入旅遊團資料', {\n        tourName: tour.name,\n        location: tour.location\n      });\n\n      // 從 location 反查國家和城市代碼\n      let countryCode = '';\n      let cityCode = '';\n\n      // 嘗試從 destinations 中找到匹配的城市\n      for (const country of activeCountries) {\n        const cities = getCitiesByCountryCode(country.code);\n        const matchedCity = cities.find(city => city.name === tour.location);\n        if (matchedCity) {\n          countryCode = country.code;\n          cityCode = matchedCity.code;\n          setAvailableCities(cities);\n          console.log('✅ 找到匹配的城市:', {\n            country: country.name,\n            city: matchedCity.name,\n            countryCode,\n            cityCode\n          });\n          break;\n        }\n      }\n\n      // 如果找不到，設為自訂\n      if (!countryCode) {\n        countryCode = '__custom__';\n        cityCode = '__custom__';\n        console.log('⚠️ 找不到匹配的城市，設為自訂:', tour.location);\n      }\n\n      setNewTour({\n        name: tour.name,\n        countryCode,\n        cityCode,\n        customLocation: countryCode === '__custom__' ? tour.location : undefined,\n        departure_date: tour.departure_date,\n        return_date: tour.return_date,\n        price: tour.price,\n        status: tour.status,\n        isSpecial: tour.status === 'special',\n        max_participants: tour.max_participants || 20,\n        description: tour.description || '',\n      });\n\n      console.log('📝 設定表單資料:', {\n        countryCode,\n        cityCode,\n        customLocation: countryCode === '__custom__' ? tour.location : undefined\n      });\n    }\n  }, [dialog.type, dialog.data, activeCountries, getCitiesByCountryCode]);\n\n  // 處理從報價單跳轉來的情況\n  useEffect(() => {\n    const fromQuoteId = searchParams.get('fromQuote');\n    const highlightId = searchParams.get('highlight');\n    const departure_date = searchParams.get('departure_date');\n    const shouldOpenDialog = searchParams.get('openDialog');\n\n    if (fromQuoteId) {\n      // 找到對應的報價單\n      const sourceQuote = quotes.find(quote => quote.id === fromQuoteId);\n      if (sourceQuote) {\n        // 自動填入報價單的資料到新增旅遊團表單\n        setNewTour(prev => ({\n          ...prev,\n          name: sourceQuote.name,\n          price: Math.round(sourceQuote.total_cost / sourceQuote.group_size), // 計算單人價格\n        }));\n\n        // 自動開啟新增旅遊團對話框\n        handleOpenCreateDialog(null, fromQuoteId);\n      }\n    }\n\n    // 處理從行事曆跳轉來的情況\n    if (departure_date && shouldOpenDialog === 'true') {\n      setNewTour(prev => ({\n        ...prev,\n        departure_date: departure_date\n      }));\n      handleOpenCreateDialog();\n    }\n\n    // 處理從待辦事項跳轉來的情況\n    if (highlightId) {\n      // 自動展開指定的旅遊團並切換到任務分頁\n      setExpandedRows([highlightId]);\n      setActiveTabs(prev => ({\n        ...prev,\n        [highlightId]: 'tasks'\n      }));\n    }\n  }, [searchParams, quotes, handleOpenCreateDialog]);\n\n  const resetForm = useCallback(() => {\n    const defaultCountry = activeCountries[0];\n    const defaultCities = defaultCountry ? getCitiesByCountryCode(defaultCountry.code) : [];\n    const defaultCity = defaultCities[0];\n\n    setNewTour({\n      name: '',\n      countryCode: defaultCountry?.code || '',\n      cityCode: defaultCity?.code || '',\n      departure_date: '',\n      return_date: '',\n      price: 0,\n      status: 'draft',\n      isSpecial: false,\n      max_participants: 20,\n      description: '',\n    });\n    setAvailableCities(defaultCities);\n    setNewOrder({\n      contact_person: '',\n      sales_person: '',\n      assistant: '',\n      member_count: 1,\n      total_amount: 0,\n    });\n    setFormError(null); // 清除表單錯誤\n  }, [activeCountries, getCitiesByCountryCode]);\n\n  const handleAddTour = useCallback(async () => {\n    if (!newTour.name.trim() || !newTour.departure_date || !newTour.return_date) {\n      return;\n    }\n\n    // 檢查自訂目的地\n    if (newTour.countryCode === '__custom__') {\n      if (!newTour.customCountry?.trim()) {\n        alert('請填寫國家名稱');\n        return;\n      }\n      if (!newTour.customLocation?.trim()) {\n        alert('請填寫城市名稱');\n        return;\n      }\n      if (!newTour.customCityCode?.trim()) {\n        alert('請填寫城市代號');\n        return;\n      }\n      if (newTour.customCityCode.length !== 3) {\n        alert('城市代號必須是 3 碼');\n        return;\n      }\n    }\n\n    try {\n      setSubmitting(true);\n      setFormError(null); // 清除之前的錯誤\n\n      const departure_date = new Date(newTour.departure_date);\n\n      // 決定要使用的城市代號和名稱\n      const cityCode = newTour.countryCode === '__custom__'\n        ? newTour.customCityCode!\n        : newTour.cityCode;\n      const cityName = newTour.countryCode === '__custom__'\n        ? newTour.customLocation!\n        : availableCities.find(c => c.code === newTour.cityCode)?.name || newTour.cityCode;\n\n      // 編輯模式：更新現有旅遊團\n      if (dialog.type === 'edit' && dialog.data) {\n        const existingTour = dialog.data as Tour;\n\n        const tourData = {\n          name: newTour.name,\n          location: cityName,\n          departure_date: newTour.departure_date,\n          return_date: newTour.return_date,\n          status: newTour.status,\n          price: newTour.price,\n          max_participants: newTour.max_participants,\n          description: newTour.description,\n        };\n\n        await actions.update(existingTour.id, tourData);\n        resetForm();\n        closeDialog();\n        return;\n      }\n\n      // 新增模式：創建新旅遊團\n      const code = await tourService.generateTourCode(cityCode, departure_date, newTour.isSpecial);\n\n      // 檢查是否從報價單創建\n      const fromQuoteId = searchParams.get('fromQuote');\n\n      // 🔧 只取 Tour 介面需要的欄位，避免傳入 cityCode 等額外欄位\n      const tourData = {\n        name: newTour.name,\n        location: cityName,  // 存城市名稱\n        departure_date: newTour.departure_date,\n        return_date: newTour.return_date,\n        status: newTour.status,\n        price: newTour.price,\n        max_participants: newTour.max_participants,\n        code,\n        contract_status: 'pending' as const,\n        total_revenue: 0,\n        total_cost: 0,\n        profit: 0,\n        current_participants: 0,\n        quote_id: fromQuoteId || undefined, // 如果從報價單創建，關聯報價單ID\n      };\n\n      const createdTour = await actions.create(tourData);\n\n      // 如果有填寫聯絡人，同時新增訂單\n      if (newOrder.contact_person?.trim()) {\n        const order_number = `${code}${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`; // 生成訂單編號（使用隨機數而非時間戳記）\n        const memberCount = newOrder.member_count || 1;\n        const totalAmount = newOrder.total_amount || (newTour.price * memberCount);\n        const orderData = {\n          order_number,\n          tour_id: createdTour.id,\n          code: code,\n          tour_name: newTour.name,\n          contact_person: newOrder.contact_person,\n          sales_person: newOrder.sales_person || '',\n          assistant: newOrder.assistant || '',\n          member_count: memberCount,\n          payment_status: 'unpaid' as const,\n          total_amount: totalAmount,\n          paid_amount: 0,\n          remaining_amount: totalAmount,\n        };\n\n        addOrder(orderData);\n      }\n\n      // 如果是從報價單創建，更新報價單的 tourId\n      if (fromQuoteId) {\n        updateQuote(fromQuoteId, { tour_id: createdTour.id });\n\n        // 清除 URL 參數\n        router.replace('/tours');\n      }\n\n      resetForm();\n      closeDialog();\n    } catch (err) {\n      // 顯示錯誤訊息在表單內\n      const errorMessage = err instanceof Error ? err.message : dialog.type === 'edit' ? '更新旅遊團失敗' : '建立旅遊團失敗';\n      setFormError(errorMessage);\n      logger.error('Failed to create/update tour:', err);\n    } finally {\n      setSubmitting(false);\n    }\n  }, [newTour, newOrder, availableCities, actions, addOrder, resetForm, closeDialog, searchParams, router, updateQuote, dialog.type, dialog.data]);\n\n  const toggleRowExpand = useCallback((tour_id: string) => {\n    setExpandedRows(prev =>\n      prev.includes(tour_id)\n        ? prev.filter(id => id !== tour_id)\n        : [...prev, tour_id]\n    );\n    // 設定預設分頁為總覽\n    if (!activeTabs[tour_id]) {\n      setActiveTabs(prev => ({ ...prev, [tour_id]: 'overview' }));\n    }\n  }, [activeTabs]);\n\n  const setActiveTab = useCallback((tour_id: string, tabId: string) => {\n    setActiveTabs(prev => ({ ...prev, [tour_id]: tabId }));\n  }, []);\n\n  const getStatusColor = useCallback((status: string) => {\n    const colors: Record<string, string> = {\n      '提案': 'text-[#6B7280]',\n      '進行中': 'text-[#6B8E7F]',\n      '待結案': 'text-[#9B7E4A]',\n      '結案': 'text-[#8A8A8A]',\n      '特殊團': 'text-[#A17676]'\n    };\n    return colors[status] || 'text-morandi-secondary';\n  }, []);\n\n  // 定義 EnhancedTable 欄位\n  const columns: TableColumn[] = [\n    {\n      key: 'code',\n      label: '團號',\n      sortable: true,\n      render: (value) => <span className=\"text-sm text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'name',\n      label: '旅遊團名稱',\n      sortable: true,\n      render: (value) => <span className=\"text-sm text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'departure_date',\n      label: '出發日期',\n      sortable: true,\n      render: (value, tour) => {\n        if (!tour.departure_date) return <span className=\"text-sm text-morandi-red\">未設定</span>;\n        const date = new Date(tour.departure_date);\n        return <span className=\"text-sm text-morandi-primary\">{isNaN(date.getTime()) ? '無效日期' : date.toLocaleDateString()}</span>;\n      },\n    },\n    {\n      key: 'return_date',\n      label: '回程日期',\n      sortable: true,\n      render: (value, tour) => {\n        if (!tour.return_date) return <span className=\"text-sm text-morandi-secondary\">-</span>;\n        const date = new Date(tour.return_date);\n        return <span className=\"text-sm text-morandi-primary\">{isNaN(date.getTime()) ? '無效日期' : date.toLocaleDateString()}</span>;\n      },\n    },\n    {\n      key: 'participants',\n      label: '人數',\n      render: (value, tour) => {\n        const tourOrders = orders.filter((order: any) => order.tour_id === tour.id);\n        const actualMembers = members.filter((member: any) =>\n          tourOrders.some((order: any) => order.id === member.order_id)\n        ).length;\n        return <span className=\"text-sm text-morandi-primary\">{actualMembers}</span>;\n      },\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      sortable: true,\n      render: (value, tour) => (\n        <span className={cn(\n          'text-sm font-medium',\n          getStatusColor(tour.status)\n        )}>\n          {tour.status}\n        </span>\n      ),\n    },\n  ];\n\n  const handleSortChange = useCallback((field: string, order: 'asc' | 'desc') => {\n    setSortBy(field);\n    setSortOrder(order);\n    setCurrentPage(1);\n  }, []);\n\n  const handlePaginationChange = useCallback((page: number, pageSize: number) => {\n    setCurrentPage(page);\n  }, []);\n\n  const handleRowClick = useCallback((tour: Tour) => {\n    setSelectedTour(tour);\n    router.push(`/tours/${tour.id}`);\n  }, [router]);\n\n  const handleDeleteTour = useCallback(async () => {\n    if (!deleteConfirm.tour) return;\n\n    try {\n      await actions.delete(deleteConfirm.tour.id);\n      setDeleteConfirm({ isOpen: false, tour: null });\n    } catch (err) {\n      logger.error('刪除旅遊團失敗:', err);\n    }\n  }, [deleteConfirm.tour, actions]);\n\n  const handleArchiveTour = useCallback(async (tour: Tour) => {\n    try {\n      await actions.update(tour.id, { archived: !tour.archived });\n      logger.info(tour.archived ? '已解除封存旅遊團' : '已封存旅遊團');\n    } catch (err) {\n      logger.error('封存/解封旅遊團失敗:', err);\n    }\n  }, [actions]);\n\n  const renderActions = (tour: Tour) => {\n    // 檢查是否有該旅遊團的報價單\n    const tourQuote = quotes.find(q => q.tour_id === tour.id);\n    const hasQuote = !!tourQuote;\n\n    return (\n      <div className=\"flex items-center gap-1\">\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            openDialog('edit', tour);\n          }}\n          className=\"p-1 text-morandi-gold hover:bg-morandi-gold/10 rounded transition-colors\"\n          title=\"編輯\"\n        >\n          <Edit2 size={14} />\n        </button>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            setSelectedTour(tour);\n            if (hasQuote) {\n              // 有報價單：前往查看/編輯該報價單\n              router.push(`/quotes/${tourQuote.id}`);\n            } else {\n              // 沒有報價單：前往報價單列表頁，並帶上 tour_id 以開啟新增對話框\n              router.push(`/quotes?tour_id=${tour.id}`);\n            }\n          }}\n          className=\"p-1 text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/30 rounded transition-colors\"\n          title={hasQuote ? '查看報價單' : '新增報價單'}\n        >\n          <Calculator size={14} />\n        </button>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            // 跳轉到行程表編輯頁面，帶入旅遊團 ID\n            router.push(`/itinerary/${tour.id}`);\n          }}\n          className=\"p-1 text-morandi-primary hover:bg-morandi-primary/10 rounded transition-colors\"\n          title=\"編輯行程表\"\n        >\n          <FileText size={14} />\n        </button>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            handleArchiveTour(tour);\n          }}\n          className={cn(\n            \"p-1 rounded transition-colors\",\n            tour.archived\n              ? \"text-morandi-gold/60 hover:text-morandi-gold hover:bg-morandi-gold/10\"\n              : \"text-morandi-secondary/60 hover:text-morandi-secondary hover:bg-morandi-container\"\n          )}\n          title={tour.archived ? \"解除封存\" : \"封存\"}\n        >\n          {tour.archived ? <ArchiveRestore size={14} /> : <Archive size={14} />}\n        </button>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            setDeleteConfirm({ isOpen: true, tour });\n          }}\n          className=\"p-1 text-morandi-red/60 hover:text-morandi-red hover:bg-morandi-red/10 rounded transition-colors\"\n          title=\"刪除\"\n        >\n          <Trash2 size={14} />\n        </button>\n      </div>\n    );\n  };\n\n  const renderExpanded = (tour: Tour) => (\n    <div>\n      {/* Tab 導航 - 統一設計：標籤靠左，按鈕靠右 */}\n      <div className=\"flex border-b border-border justify-between items-center\">\n        {/* 左側：標籤列表 */}\n        <div className=\"flex\">\n          {tourTabs.map((tab) => {\n            const is_active = activeTabs[tour.id] === tab.id;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tour.id, tab.id)}\n                className={cn(\n                  'flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-colors',\n                  is_active\n                    ? 'text-morandi-primary bg-white border-b-2 border-morandi-gold'\n                    : 'text-morandi-secondary hover:text-morandi-primary'\n                )}\n              >\n                <tab.icon size={16} />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* 右側：分頁專屬按鈕 */}\n        <div className=\"flex items-center gap-2 px-4\">\n\n          {activeTabs[tour.id] === 'overview' && (\n            <button\n              onClick={() => openDialog('edit', tour)}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n            >\n              <Edit2 size={14} className=\"mr-1\" />\n              編輯\n            </button>\n          )}\n          {activeTabs[tour.id] === 'orders' && (\n            <button\n              onClick={() => {\n                // 開啟新增訂單對話框的邏輯\n                openDialog('new');\n              }}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n            >\n              <Plus size={14} className=\"mr-1\" />\n              新增訂單\n            </button>\n          )}\n          {activeTabs[tour.id] === 'operations' && (\n            <TourOperationsAddButton tour={tour} tourExtraFields={tourExtraFields} setTourExtraFields={setTourExtraFields} />\n          )}\n          {activeTabs[tour.id] === 'addons' && (\n            <button\n              onClick={() => setTriggerAddOnAdd(prev => ({ ...prev, [tour.id]: true }))}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n            >\n              <Plus size={14} className=\"mr-1\" />\n              新增加購\n            </button>\n          )}\n          {activeTabs[tour.id] === 'refunds' && (\n            <button\n              onClick={() => setTriggerRefundAdd(prev => ({ ...prev, [tour.id]: true }))}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n            >\n              <Plus size={14} className=\"mr-1\" />\n              新增退費\n            </button>\n          )}\n          {activeTabs[tour.id] === 'payments' && (\n            <button\n              onClick={() => setTriggerPaymentAdd(prev => ({ ...prev, [tour.id]: true }))}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n            >\n              <Plus size={14} className=\"mr-1\" />\n              新增收款\n            </button>\n          )}\n          {activeTabs[tour.id] === 'costs' && (\n            <button\n              onClick={() => setTriggerCostAdd(prev => ({ ...prev, [tour.id]: true }))}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n            >\n              <Plus size={14} className=\"mr-1\" />\n              新增支出\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Tab 內容 */}\n      <div>\n        {activeTabs[tour.id] === 'overview' && (\n          <TourOverviewTab tour={tour} />\n        )}\n        {activeTabs[tour.id] === 'orders' && (\n          <ExpandableOrderTable\n            orders={orders.filter((order: any) => order.tour_id === tour.id)}\n            showTourInfo={false}\n            tourDepartureDate={tour.departure_date}\n          />\n        )}\n        {activeTabs[tour.id] === 'members' && (\n          <TourMembers tour={tour} />\n        )}\n        {activeTabs[tour.id] === 'operations' && (\n          <TourOperations tour={tour} extraFields={tourExtraFields[tour.id]} />\n        )}\n        {activeTabs[tour.id] === 'addons' && (\n          <TourAddOns\n            tour={tour}\n            triggerAdd={triggerAddOnAdd[tour.id] || false}\n            onTriggerAddComplete={() => setTriggerAddOnAdd(prev => ({ ...prev, [tour.id]: false }))}\n          />\n        )}\n        {activeTabs[tour.id] === 'refunds' && (\n          <TourRefunds\n            tour={tour}\n            triggerAdd={triggerRefundAdd[tour.id] || false}\n            onTriggerAddComplete={() => setTriggerRefundAdd(prev => ({ ...prev, [tour.id]: false }))}\n          />\n        )}\n        {activeTabs[tour.id] === 'payments' && (\n          <TourPayments\n            tour={tour}\n            triggerAdd={triggerPaymentAdd[tour.id] || false}\n            onTriggerAddComplete={() => setTriggerPaymentAdd(prev => ({ ...prev, [tour.id]: false }))}\n          />\n        )}\n        {activeTabs[tour.id] === 'costs' && (\n          <TourCosts\n            {...{\n              tour,\n              triggerAdd: triggerCostAdd[tour.id] || false,\n              onTriggerAddComplete: () => setTriggerCostAdd(prev => ({ ...prev, [tour.id]: false }))\n            } as any}\n          />\n        )}\n        {activeTabs[tour.id] === 'documents' && (\n          <div className=\"text-center py-8 text-morandi-secondary\">\n            <FileCheck size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p>文件確認功能開發中...</p>\n          </div>\n        )}\n        {activeTabs[tour.id] === 'tasks' && (\n          <TourTaskAssignment tour={tour} />\n        )}\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-morandi-secondary\">載入中...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        {...{\n          title: \"旅遊團管理\",\n          icon: MapPin,\n          breadcrumb: [\n            { label: '首頁', href: '/' },\n            { label: '旅遊團管理', href: '/tours' }\n          ],\n          showSearch: true,\n          searchTerm: searchQuery,\n          onSearchChange: setSearchQuery,\n          searchPlaceholder: \"搜尋旅遊團...\",\n          onAdd: handleOpenCreateDialog,\n          addLabel: \"新增旅遊團\",\n          tabs: [\n          { value: 'all', label: '全部', icon: BarChart3 },\n          { value: '提案', label: '提案', icon: FileText },\n          { value: '進行中', label: '進行中', icon: Calendar },\n          { value: '待結案', label: '待結案', icon: AlertCircle },\n          { value: '結案', label: '結案', icon: FileCheck },\n        ],\n          activeTab: activeStatusTab,\n          onTabChange: (tab: string) => {\n            setActiveStatusTab(tab);\n            setCurrentPage(1); // 切換標籤時重置頁碼\n          }\n        } as any}\n      />\n\n      {/* 旅遊團列表 */}\n      <div className=\"flex-1 overflow-auto\">\n        <EnhancedTable\n          className=\"min-h-full\"\n          columns={columns}\n          data={filteredTours}\n          loading={loading}\n          onSort={handleSortChange}\n          expandable={{\n            expanded: expandedRows,\n            onExpand: toggleRowExpand,\n            renderExpanded,\n          }}\n          actions={renderActions}\n          onRowClick={handleRowClick}\n          bordered={true}\n        />\n      </div>\n\n      {/* 新增/編輯旅遊團對話框 */}\n      <Dialog open={dialog.isOpen} onOpenChange={(open) => {\n        if (!open) {\n          // 關閉對話框時重置表單\n          resetForm();\n          closeDialog();\n        }\n      }}>\n        <DialogContent className=\"max-w-6xl w-[90vw] h-[80vh] overflow-hidden\" aria-describedby={undefined}>\n          <DialogHeader>\n            <DialogTitle>\n              {dialog.type === 'edit' ? '編輯旅遊團' : '新增旅遊團 & 訂單'}\n            </DialogTitle>\n          </DialogHeader>\n\n          {/* 錯誤訊息 */}\n          {formError && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md mb-4\">\n              <div className=\"flex items-start gap-2\">\n                <AlertCircle size={18} className=\"mt-0.5 shrink-0\" />\n                <div className=\"text-sm\">{formError}</div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex h-full overflow-hidden\">\n            {/* 左半部 - 新增旅遊團 */}\n            <div className=\"flex-1 pr-6 border-r border-border\">\n              <div className=\"h-full overflow-y-auto\">\n                <h3 className=\"text-lg font-medium text-morandi-primary mb-4\">旅遊團資訊</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-morandi-primary\">旅遊團名稱</label>\n                    <Input\n                      value={newTour.name}\n                      onChange={(e) => setNewTour(prev => ({ ...prev, name: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  {/* 目的地選擇 */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-primary\">國家/地區</label>\n                      <select\n                        value={newTour.countryCode}\n                        onChange={(e) => {\n                          const countryCode = e.target.value;\n                          const cities = countryCode === '__custom__' ? [] : getCitiesByCountryCode(countryCode);\n                          setAvailableCities(cities);\n                          setNewTour(prev => ({\n                            ...prev,\n                            countryCode,\n                            cityCode: countryCode === '__custom__' ? '__custom__' : cities[0]?.code || '',\n                          }));\n                        }}\n                        className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n                      >\n                        {activeCountries.map((country) => (\n                          <option key={country.code} value={country.code}>\n                            {country.name}\n                          </option>\n                        ))}\n                        <option value=\"__custom__\">+ 新增其他目的地</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-primary\">城市</label>\n                      {newTour.countryCode === '__custom__' ? (\n                        <Input\n                          value={newTour.customLocation || ''}\n                          onChange={(e) => setNewTour(prev => ({ ...prev, customLocation: e.target.value }))}\n                          placeholder=\"輸入城市名稱 (如：曼谷)\"\n                          className=\"mt-1\"\n                        />\n                      ) : (\n                        <select\n                          value={newTour.cityCode}\n                          onChange={(e) => setNewTour(prev => ({ ...prev, cityCode: e.target.value }))}\n                          className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n                        >\n                          {availableCities.map((city) => (\n                            <option key={city.code} value={city.code}>\n                              {city.name} ({city.code})\n                            </option>\n                          ))}\n                        </select>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* 自訂目的地詳細資訊 */}\n                  {newTour.countryCode === '__custom__' && (\n                    <>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary\">國家名稱</label>\n                        <Input\n                          value={newTour.customCountry || ''}\n                          onChange={(e) => setNewTour(prev => ({ ...prev, customCountry: e.target.value }))}\n                          placeholder=\"輸入國家名稱 (如：泰國)\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-morandi-primary\">3 碼城市代號</label>\n                        <Input\n                          value={newTour.customCityCode || ''}\n                          onChange={(e) => {\n                            const value = e.target.value.toUpperCase().slice(0, 3);\n                            setNewTour(prev => ({ ...prev, customCityCode: value }));\n                          }}\n                          placeholder=\"輸入 3 碼代號 (如：BKK)\"\n                          className=\"mt-1\"\n                          maxLength={3}\n                        />\n                        <p className=\"text-xs text-morandi-secondary mt-1\">\n                          💡 用於生成團號，建議使用國際機場代碼或城市縮寫\n                        </p>\n                      </div>\n                    </>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-primary\">出發日期</label>\n                      <SmartDateInput\n                        value={newTour.departure_date}\n                        onChange={(departure_date) => {\n                          setNewTour(prev => {\n                            // 如果回程日期早於新的出發日期，自動調整回程日期\n                            const newReturnDate = prev.return_date && prev.return_date < departure_date\n                              ? departure_date\n                              : prev.return_date;\n\n                            return {\n                              ...prev,\n                              departure_date,\n                              return_date: newReturnDate\n                            };\n                          });\n                        }}\n                        min={new Date().toISOString().split('T')[0]}\n                        className=\"mt-1\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-primary\">返回日期</label>\n                      <SmartDateInput\n                        value={newTour.return_date}\n                        onChange={(return_date) => {\n                          setNewTour(prev => ({ ...prev, return_date }));\n                        }}\n                        min={newTour.departure_date || new Date().toISOString().split('T')[0]}\n                        initialMonth={newTour.departure_date}\n                        className=\"mt-1\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-morandi-primary\">描述</label>\n                    <Input\n                      value={newTour.description || ''}\n                      onChange={(e) => setNewTour(prev => ({ ...prev, description: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"isSpecial\"\n                      checked={newTour.isSpecial}\n                      onChange={(e) => setNewTour(prev => ({ ...prev, isSpecial: e.target.checked }))}\n                      className=\"rounded\"\n                    />\n                    <label htmlFor=\"isSpecial\" className=\"text-sm text-morandi-primary\">特殊團</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 右半部 - 新增訂單 */}\n            <div className=\"flex-1 pl-6\">\n              <div className=\"h-full overflow-y-auto\">\n                <h3 className=\"text-lg font-medium text-morandi-primary mb-4\">同時新增訂單（選填）</h3>\n\n                <AddOrderForm\n                  tourId=\"embedded\"\n                  value={newOrder}\n                  onChange={setNewOrder}\n                />\n\n                <div className=\"bg-morandi-container/20 p-3 rounded-lg mt-4\">\n                  <p className=\"text-xs text-morandi-secondary\">\n                    提示：如果填寫了聯絡人，將會同時建立一筆訂單。如果留空，則只建立旅遊團。\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* 底部按鈕 */}\n          <div className=\"flex justify-end space-x-2 pt-6 border-t border-border mt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={() => closeDialog()}\n              disabled={submitting}\n            >\n              取消\n            </Button>\n            <Button\n              onClick={handleAddTour}\n              disabled={submitting || !newTour.name.trim() || !newTour.departure_date || !newTour.return_date}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              {submitting ? '建立中...' : (newOrder.contact_person ? '新增旅遊團 & 訂單' : '新增旅遊團')}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* 刪除確認對話框 */}\n      <Dialog open={deleteConfirm.isOpen} onOpenChange={(open) => !open && setDeleteConfirm({ isOpen: false, tour: null })}>\n        <DialogContent className=\"max-w-md\" aria-describedby={undefined}>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-morandi-red\">\n              <AlertCircle size={20} />\n              確認刪除旅遊團\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-morandi-primary\">\n              確定要刪除旅遊團 <span className=\"font-semibold\">「{deleteConfirm.tour?.name}」</span> 嗎？\n            </p>\n            <div className=\"bg-morandi-red/5 border border-morandi-red/20 rounded-lg p-3 space-y-2\">\n              <p className=\"text-sm font-medium text-morandi-red\">此操作會影響：</p>\n              <ul className=\"text-sm text-morandi-secondary space-y-1 ml-4\">\n                <li>• 相關訂單和團員資料</li>\n                <li>• 收付款記錄</li>\n                <li>• 報價單</li>\n              </ul>\n              <p className=\"text-xs text-morandi-red font-medium mt-2\">⚠️ 此操作無法復原！</p>\n            </div>\n          </div>\n          <div className=\"flex justify-end gap-2 mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeleteConfirm({ isOpen: false, tour: null })}\n            >\n              取消\n            </Button>\n            <Button\n              onClick={handleDeleteTour}\n              className=\"bg-morandi-red hover:bg-morandi-red/90 text-white\"\n            >\n              確認刪除\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n\n// 總覽分頁組件\nfunction TourOverviewTab({ tour }: { tour: Tour }) {\n  const { quotes } = useQuotes();\n  const { items: orders } = useOrderStore();\n  const { items: members } = useMemberStore();\n\n  // 找到該旅遊團的報價單（通常取最新的或已核准版本）\n  const tourQuote = quotes.find((quote: any) => quote.tour_id === tour.id && quote.status === 'approved') ||\n                   quotes.find((quote: any) => quote.tour_id === tour.id);\n\n  // 計算該旅遊團的訂單資訊\n  const tourOrders = orders.filter((order: any) => order.tour_id === tour.id);\n  const totalPaidAmount = tourOrders.reduce((sum: any, order: any) => sum + order.paid_amount, 0);\n\n  // 計算當前參與人數（從團員統計）\n  const tourMembers = members.filter((member: any) =>\n    tourOrders.some((order: any) => order.id === member.order_id)\n  );\n  const currentParticipants = tourMembers.length;\n\n  // 財務計算\n  const quotePrice = tourQuote?.total_cost || tour.price; // 報價單價格\n  const expectedRevenue = quotePrice * currentParticipants; // 應收帳款 = 報價單價格 × 團體人數\n  const actualRevenue = totalPaidAmount; // 實收帳款\n  const grossProfit = actualRevenue - tour.total_cost; // 毛利 = 實收 - 總成本\n  const netProfit = grossProfit - (grossProfit * 0.05); // 淨利潤（假設5%稅費，可調整）\n\n  // 準備預算vs實際支出的對比資料\n// TODO: usePaymentStore deprecated -   const paymentStore = usePaymentStore();\n  const paymentStore = { payment_requests: [] }; // TODO: usePaymentStore deprecated\n  const paymentRequests = paymentStore.payment_requests; // TODO: 從 paymentStore 取得\n\n  // 獲取該旅遊團的請款單\n  const tourPaymentRequests = paymentRequests.filter((req: any) => req.tour_id === tour.id);\n\n  // 報價單中的類別預算\n  const quoteBudget = tourQuote?.categories || [];\n\n  // 計算各類別的實際支出 (從請款單統計)\n  const actualExpenses = quoteBudget.map((category: any) => {\n    const categoryTotal = tourPaymentRequests.reduce((sum: any, request: any) => {\n      const categoryItems = request.items?.filter((item: any) => item.category === category.name) || [];\n      return sum + categoryItems.reduce((itemSum: any, item: any) => itemSum + (item.unit_price * item.quantity), 0);\n    }, 0);\n\n    return {\n      name: category.name,\n      budgetPerPerson: category.total || 0, // 報價單中的單人預算\n      budgetTotal: (category.total || 0) * currentParticipants, // 預算總額 = 單人預算 × 人數\n      actualTotal: categoryTotal, // 實際支出\n      variance: categoryTotal - ((category.total || 0) * currentParticipants) // 差額 (正數=超支，負數=節省)\n    };\n  });\n\n  return (\n    <div className=\"px-6 py-4 space-y-8\">\n      {/* 上半部：三欄式財務總覽 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* 基本資訊 */}\n        <div className=\"space-y-3\">\n          <div className=\"text-lg font-medium text-morandi-primary border-b border-border pb-2\">基本資訊</div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">團號:</span>\n              <span className=\"text-morandi-primary font-medium\">{tour.code}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">目的地:</span>\n              <span className=\"text-morandi-primary\">{tour.location}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">出發日期:</span>\n              <span className=\"text-morandi-primary\">{new Date(tour.departure_date).toLocaleDateString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">返回日期:</span>\n              <span className=\"text-morandi-primary\">{new Date(tour.return_date).toLocaleDateString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">參與人數:</span>\n              <span className=\"text-morandi-primary font-medium\">{(() => {\n                const tourOrders = orders.filter(order => order.tour_id === tour.id);\n                const actualMembers = members.filter(member =>\n                  tourOrders.some(order => order.id === member.order_id)\n                ).length;\n                return actualMembers;\n              })()}/{tour.max_participants}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">建立時間:</span>\n              <span className=\"text-morandi-secondary text-sm\">{new Date(tour.created_at).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* 報價與收入 */}\n        <div className=\"space-y-3\">\n          <div className=\"text-lg font-medium text-morandi-primary border-b border-border pb-2\">報價與收入</div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">報價單價格:</span>\n              <span className=\"text-morandi-primary font-medium\">NT$ {quotePrice.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">應收帳款:</span>\n              <span className=\"text-morandi-blue font-medium\">NT$ {expectedRevenue.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">實收帳款:</span>\n              <span className=\"text-morandi-green font-semibold\">NT$ {actualRevenue.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between pt-2 border-t border-border\">\n              <span className=\"text-morandi-secondary\">收款率:</span>\n              <span className={cn(\n                \"font-medium\",\n                expectedRevenue > 0 ?\n                  (actualRevenue / expectedRevenue >= 0.8 ? \"text-morandi-green\" : \"text-morandi-gold\") :\n                  \"text-morandi-secondary\"\n              )}>\n                {expectedRevenue > 0 ? `${((actualRevenue / expectedRevenue) * 100).toFixed(1)}%` : '0%'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">待收餘額:</span>\n              <span className={cn(\n                \"font-medium\",\n                (expectedRevenue - actualRevenue) > 0 ? \"text-morandi-red\" : \"text-morandi-green\"\n              )}>\n                NT$ {(expectedRevenue - actualRevenue).toLocaleString()}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* 成本與利潤 */}\n        <div className=\"space-y-3\">\n          <div className=\"text-lg font-medium text-morandi-primary border-b border-border pb-2\">成本與利潤</div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">總成本:</span>\n              <span className=\"text-morandi-red font-medium\">NT$ {tour.total_cost.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between pt-2 border-t border-border\">\n              <span className=\"text-morandi-secondary\">毛利潤:</span>\n              <span className={cn(\n                \"font-semibold\",\n                grossProfit >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n              )}>\n                NT$ {grossProfit.toLocaleString()}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">淨利潤:</span>\n              <span className={cn(\n                \"font-bold text-lg\",\n                netProfit >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n              )}>\n                NT$ {netProfit.toLocaleString()}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-morandi-secondary\">利潤率:</span>\n              <span className={cn(\n                \"font-medium\",\n                netProfit >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n              )}>\n                {actualRevenue > 0 ? `${((netProfit / actualRevenue) * 100).toFixed(1)}%` : '0%'}\n              </span>\n            </div>\n          </div>\n\n          {/* 狀態指標 */}\n          <div className=\"mt-4 p-3 rounded-lg border border-border bg-morandi-container/10\">\n            <div className=\"text-sm font-medium text-morandi-secondary mb-2\">財務狀況</div>\n            <div className=\"flex items-center space-x-2\">\n              {netProfit >= 0 ? (\n                <div className=\"w-3 h-3 rounded-full bg-morandi-green\"></div>\n              ) : (\n                <div className=\"w-3 h-3 rounded-full bg-morandi-red\"></div>\n              )}\n              <span className={cn(\n                \"text-sm font-medium\",\n                netProfit >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n              )}>\n                {netProfit >= 0 ? \"盈利中\" : \"虧損中\"}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 下半部：預算vs實際支出明細表 */}\n      <div className=\"border border-border rounded-lg p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-xl font-semibold text-morandi-primary\">預算 vs 實際支出明細</h3>\n          <div className=\"text-sm text-morandi-secondary\">\n            基準：{currentParticipants}人團體\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-morandi-container/20 border-b border-border\">\n              <tr>\n                <th className=\"text-left py-3 px-4 text-sm font-semibold text-morandi-primary\">類別</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-morandi-primary\">單人預算</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-morandi-primary\">預算總額</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-morandi-primary\">實際支出</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-morandi-primary\">差額</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-morandi-primary\">差額率</th>\n              </tr>\n            </thead>\n            <tbody>\n              {actualExpenses.map((expense, index) => {\n                const varianceRate = expense.budgetTotal > 0 ? (expense.variance / expense.budgetTotal * 100) : 0;\n                return (\n                  <tr key={expense.name} className={cn(\n                    \"border-b border-border hover:bg-morandi-container/10\",\n                    index === actualExpenses.length - 1 && \"border-b-0\"\n                  )}>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium text-morandi-primary\">{expense.name}</span>\n                        {Math.abs(varianceRate) > 20 && (\n                          <span className={cn(\n                            \"px-2 py-1 rounded text-xs font-medium\",\n                            varianceRate > 20 ? \"bg-morandi-red/10 text-morandi-red\" : \"bg-morandi-green/10 text-morandi-green\"\n                          )}>\n                            {varianceRate > 20 ? \"超支\" : \"節省\"}\n                          </span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-right text-morandi-secondary\">\n                      NT$ {expense.budgetPerPerson.toLocaleString()}\n                    </td>\n                    <td className=\"py-3 px-4 text-right text-morandi-primary font-medium\">\n                      NT$ {expense.budgetTotal.toLocaleString()}\n                    </td>\n                    <td className=\"py-3 px-4 text-right\">\n                      <span className={cn(\n                        \"font-medium\",\n                        expense.actualTotal > expense.budgetTotal ? \"text-morandi-red\" : \"text-morandi-primary\"\n                      )}>\n                        NT$ {expense.actualTotal.toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4 text-right\">\n                      <span className={cn(\n                        \"font-semibold\",\n                        expense.variance > 0 ? \"text-morandi-red\" :\n                        expense.variance < 0 ? \"text-morandi-green\" : \"text-morandi-secondary\"\n                      )}>\n                        {expense.variance > 0 ? \"+\" : \"\"}NT$ {expense.variance.toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4 text-right\">\n                      <span className={cn(\n                        \"font-medium\",\n                        Math.abs(varianceRate) > 20 ? (varianceRate > 0 ? \"text-morandi-red\" : \"text-morandi-green\") : \"text-morandi-secondary\"\n                      )}>\n                        {varianceRate > 0 ? \"+\" : \"\"}{varianceRate.toFixed(1)}%\n                      </span>\n                    </td>\n                  </tr>\n                );\n              })}\n\n              {/* 總計行 */}\n              <tr className=\"bg-morandi-container/10 font-semibold\">\n                <td className=\"py-4 px-4 text-morandi-primary\">總計</td>\n                <td className=\"py-4 px-4 text-right text-morandi-secondary\">\n                  NT$ {(actualExpenses.reduce((sum, exp) => sum + exp.budgetPerPerson, 0)).toLocaleString()}\n                </td>\n                <td className=\"py-4 px-4 text-right text-morandi-primary\">\n                  NT$ {(actualExpenses.reduce((sum, exp) => sum + exp.budgetTotal, 0)).toLocaleString()}\n                </td>\n                <td className=\"py-4 px-4 text-right text-morandi-primary\">\n                  NT$ {(actualExpenses.reduce((sum, exp) => sum + exp.actualTotal, 0)).toLocaleString()}\n                </td>\n                <td className=\"py-4 px-4 text-right\">\n                  <span className={cn(\n                    \"font-bold\",\n                    actualExpenses.reduce((sum, exp) => sum + exp.variance, 0) > 0 ? \"text-morandi-red\" : \"text-morandi-green\"\n                  )}>\n                    {actualExpenses.reduce((sum, exp) => sum + exp.variance, 0) > 0 ? \"+\" : \"\"}\n                    NT$ {(actualExpenses.reduce((sum, exp) => sum + exp.variance, 0)).toLocaleString()}\n                  </span>\n                </td>\n                <td className=\"py-4 px-4 text-right\">\n                  <span className=\"text-morandi-primary font-bold\">\n                    {actualExpenses.reduce((sum, exp) => sum + exp.budgetTotal, 0) > 0 ?\n                      `${((actualExpenses.reduce((sum, exp) => sum + exp.variance, 0) / actualExpenses.reduce((sum, exp) => sum + exp.budgetTotal, 0)) * 100).toFixed(1)}%` :\n                      '0%'\n                    }\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* 說明 */}\n        <div className=\"mt-4 p-3 bg-morandi-container/5 rounded-lg text-sm text-morandi-secondary\">\n          <div className=\"flex items-center space-x-4\">\n            <span>💡 <strong>說明：</strong></span>\n            <span>綠色數字表示節省預算</span>\n            <span>紅色數字表示超出預算</span>\n            <span>差額率超過20%會特別標示</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// 團務操作新增按鈕組件\nfunction TourOperationsAddButton({ tour, tourExtraFields, setTourExtraFields }: {\n  tour: Tour;\n  tourExtraFields: Record<string, any>;\n  setTourExtraFields: React.Dispatch<React.SetStateAction<Record<string, any>>>;\n}) {\n  const tourStore = useTourStore();\n  const orderStore = useOrderStore();\n  const memberStore = useMemberStore();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // 獲取屬於這個旅遊團的所有訂單\n  const tourOrders = orderStore.items.filter((order: any) => order.tour_id === tour.id);\n\n  // 獲取團員數據\n  const allTourMembers = memberStore.items.filter((member: any) =>\n    tourOrders.some((order: any) => order.id === member.order_id)\n  );\n\n  // 計算已分房人數\n  const assignedMembers = allTourMembers.filter((member: any) => member.assignedRoom).length;\n\n  return (\n    <>\n      {/* 已分房統計 */}\n      <span className=\"px-2 py-1 bg-morandi-green/20 text-morandi-green rounded text-xs\">\n        已分房: {assignedMembers}人\n      </span>\n\n      {/* 團務新增按鈕 */}\n      <button\n        onClick={() => setIsDialogOpen(true)}\n        className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-3 py-1.5 rounded text-sm font-medium flex items-center transition-colors\"\n        title=\"新增項目\"\n      >\n        <Plus size={14} className=\"mr-1\" />\n        新增欄位\n      </button>\n\n      {/* 選擇視窗 */}\n      <TourOperationsAddDialog\n        isOpen={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        tour={tour}\n        tourExtraFields={tourExtraFields}\n        setTourExtraFields={setTourExtraFields}\n      />\n    </>\n  );\n}\n\n// 團務操作新增對話框組件\nfunction TourOperationsAddDialog({ isOpen, onClose, tour, tourExtraFields, setTourExtraFields }: {\n  isOpen: boolean;\n  onClose: () => void;\n  tour: Tour;\n  tourExtraFields: Record<string, any>;\n  setTourExtraFields: React.Dispatch<React.SetStateAction<Record<string, any>>>;\n}) {\n  const handleOptionSelect = useCallback((option: string) => {\n    const tour_id = tour.id;\n\n    // 初始化該旅遊團的欄位狀態（如果還沒有）\n    if (!tourExtraFields[tour_id]) {\n      setTourExtraFields(prev => ({\n        ...prev,\n        [tour_id]: {\n          addOns: false,\n          refunds: false,\n          customFields: []\n        }\n      }));\n    }\n\n    switch (option) {\n      case 'addon':\n        // 啟用加購項目欄位\n        setTourExtraFields(prev => ({\n          ...prev,\n          [tour_id]: {\n            ...prev[tour_id],\n            addOns: true\n          }\n        }));\n        break;\n\n      case 'refund':\n        // 啟用退費項目欄位\n        setTourExtraFields(prev => ({\n          ...prev,\n          [tour_id]: {\n            ...prev[tour_id],\n            refunds: true\n          }\n        }));\n        break;\n\n      case 'blank':\n        // 新增自定義空白欄位\n        const fieldName = prompt('請輸入欄位名稱:');\n        if (fieldName && fieldName.trim()) {\n          const fieldId = Date.now().toString();\n          setTourExtraFields(prev => ({\n            ...prev,\n            [tour_id]: {\n              ...prev[tour_id],\n              customFields: [\n                ...(prev[tour_id]?.customFields || []),\n                { id: fieldId, name: fieldName.trim() }\n              ]\n            }\n          }));\n        }\n        break;\n    }\n\n    onClose();\n  }, [tour.id, tourExtraFields, setTourExtraFields, onClose]);\n\n  const options = [\n    {\n      id: 'blank',\n      label: '空白欄位',\n      description: '新增自定義空白項目',\n      icon: FileText,\n      color: 'text-morandi-secondary',\n      bgColor: 'hover:bg-morandi-container/30'\n    },\n    {\n      id: 'addon',\n      label: '加購項目',\n      description: '新增額外購買項目',\n      icon: Package,\n      color: 'text-morandi-blue',\n      bgColor: 'hover:bg-morandi-blue/10'\n    },\n    {\n      id: 'refund',\n      label: '退費項目',\n      description: '新增退款相關項目',\n      icon: RefreshCw,\n      color: 'text-morandi-red',\n      bgColor: 'hover:bg-morandi-red/10'\n    }\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" aria-describedby={undefined}>\n        <DialogHeader>\n          <DialogTitle>新增項目</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-3\">\n          <div className=\"text-sm text-morandi-secondary mb-4\">\n            為旅遊團「{tour.name}」選擇要新增的項目類型：\n          </div>\n\n          {options.map((option) => {\n            const Icon = option.icon;\n            return (\n              <button\n                key={option.id}\n                onClick={() => handleOptionSelect(option.id)}\n                className={cn(\n                  'w-full flex items-center space-x-4 p-4 rounded-lg border border-border transition-colors text-left',\n                  option.bgColor\n                )}\n              >\n                <div className={cn('w-10 h-10 rounded-full bg-morandi-container/20 flex items-center justify-center', option.color)}>\n                  <Icon size={18} />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-morandi-primary\">{option.label}</div>\n                  <div className=\"text-sm text-morandi-secondary\">{option.description}</div>\n                </div>\n                <div className=\"text-morandi-secondary\">\n                  <FileText size={16} />\n                </div>\n              </button>\n            );\n          })}\n        </div>\n\n        <div className=\"flex justify-end pt-4\">\n          <Button variant=\"outline\" onClick={onClose}>\n            取消\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/unauthorized/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/view/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[359,362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[359,362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[661,664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[661,664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1011,1014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1011,1014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"next/navigation\";\nimport TourPage from \"@/components/TourPage\";\nimport { useTourStore } from \"@/stores\";\nimport {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n} from \"@tabler/icons-react\";\n\n// Icon mapping\nconst iconMap: any = {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n};\n\nexport default function ViewItineraryPage() {\n  const params = useParams();\n  const id = params.id as string;\n  const { fetchById } = useTourStore();\n\n  const [tourData, setTourData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  // 載入行程資料\n  useEffect(() => {\n    const loadTour = async () => {\n      try {\n        const tour = await fetchById(id);\n        if (tour) {\n          // Convert icon strings to components\n          const processedData = {\n            ...tour,\n            features: tour.features?.map((f: any) => ({\n              ...f,\n              iconComponent: iconMap[f.icon] || IconSparkles,\n            })) || [],\n          };\n          setTourData(processedData);\n        } else {\n          console.error('找不到此行程');\n        }\n      } catch (error) {\n        console.error('載入行程失敗:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTour();\n  }, [id, fetchById]);\n\n  // 載入中狀態\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <p className=\"text-lg text-gray-600\">載入中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // 找不到資料\n  if (!tourData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <p className=\"text-lg text-gray-600\">找不到此行程</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <TourPage data={tourData} viewMode=\"desktop\" />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/view/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/visas/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VISA_STATUS_MAP' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2961,2964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2961,2964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'contact_info.tour_id' and 'fetchTours'. Either include them or remove the dependency array.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [contact_info.tour_id, fetchTours]","fix":{"range":[3863,3865],"text":"[contact_info.tour_id, fetchTours]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'applicants.length'. Either include it or remove the dependency array.","line":142,"column":6,"nodeType":"ArrayExpression","endLine":142,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [applicants.length, contact_info.applicant_name]","fix":{"range":[4544,4573],"text":"[applicants.length, contact_info.applicant_name]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5146,5149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5146,5149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7361,7364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7361,7364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":282,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":282,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusBadge' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":347,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":347,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13493,13496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13493,13496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { ResponsiveHeader } from '@/components/layout/responsive-header';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { EnhancedTable, TableColumn } from '@/components/ui/enhanced-table';\nimport { Combobox, ComboboxOption } from '@/components/ui/combobox';\nimport { useVisaStore, useTourStore, useOrderStore } from '@/stores';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { FileCheck, Clock, CheckCircle, XCircle, AlertCircle, FileText, Edit2, Trash2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Visa } from '@/stores/types';\nimport { logger } from '@/lib/utils/logger';\nimport { tourService } from '@/features/tours/services/tour.service';\nimport { VISA_STATUS_MAP, getVisaStatusLabel } from '@/constants/status-maps';\n\nexport default function VisasPage() {\n  const { items: visas, create: addVisa, update: updateVisa, delete: deleteVisa } = useVisaStore();\n  const { items: tours, create: addTour, fetchAll: fetchTours } = useTourStore();\n  const { items: orders, create: addOrder } = useOrderStore();\n  const { user } = useAuthStore();\n\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<string[]>([]);\n  const [activeTab, setActiveTab] = useState('all');\n\n  // 計算下件時間：護照 21天、護照急件 3天、台胞證 14天、台胞證急件 6天（所有天數含例假日）\n  const calculateReceivedDate = useCallback((submissionDate: string, visaType: string): string => {\n    if (!submissionDate) return '';\n\n    const date = new Date(submissionDate);\n\n    // 根據簽證類型決定天數（所有天數都含例假日，不需要順延）\n    let days = 21; // 預設護照一般件\n\n    if (visaType.includes('台胞證') && visaType.includes('急件')) {\n      days = 6;\n    } else if (visaType.includes('護照') && visaType.includes('急件')) {\n      days = 3;\n    } else if (visaType.includes('台胞證')) {\n      days = 14;\n    } else if (visaType.includes('護照')) {\n      days = 21;\n    }\n\n    date.setDate(date.getDate() + days);\n\n    return date.toISOString().split('T')[0];\n  }, []);\n\n  // 新增簽證表單 - 聯絡人資訊\n  const [contact_info, setContactInfo] = useState({\n    tour_id: '',\n    order_id: '', // 新增訂單ID欄位\n    applicant_name: '',\n    contact_person: '',\n    contact_phone: '',\n  });\n\n  // 團號選項（轉換為 Combobox 格式）\n  const tourOptions: ComboboxOption[] = useMemo(() => {\n    console.log('📋 當前 tours 數量:', tours.length);\n    console.log('📋 Tours:', tours);\n    return tours.map(tour => ({\n      value: tour.id,\n      label: `${tour.code} - ${tour.name}`,\n    }));\n  }, [tours]);\n\n  // 訂單選項（根據選擇的團號過濾）\n  const orderOptions: ComboboxOption[] = React.useMemo(() => {\n    if (!contact_info.tour_id) return [];\n    const { items: orders } = useOrderStore.getState();\n    return orders\n      .filter((order: any) => order.tour_id === contact_info.tour_id)\n      .map((order: any) => ({\n        value: order.id,\n        label: `${order.order_number} - ${order.contact_person}`,\n      }));\n  }, [contact_info.tour_id]);\n\n  // 當頁面載入時，自動取得或建立當年度簽證專用團\n  useEffect(() => {\n    const initVisaTour = async () => {\n      try {\n        console.log('🔍 開始建立/取得簽證專用團...');\n        const visaTour = await tourService.getOrCreateVisaTour();\n        console.log('✅ 簽證專用團:', visaTour);\n\n        // 重新載入 tours 以確保新建立的簽證專用團出現在列表中\n        console.log('🔄 重新載入 tours...');\n        await fetchTours();\n        console.log('✅ Tours 重新載入完成');\n\n        if (visaTour && !contact_info.tour_id) {\n          console.log('✅ 設定預設團號:', visaTour.id);\n          setContactInfo(prev => ({ ...prev, tour_id: visaTour.id }));\n        }\n      } catch (error) {\n        console.error('❌ 建立簽證專用團失敗:', error);\n        logger.error('Failed to get or create visa tour', error);\n      }\n    };\n\n    initVisaTour();\n  }, []);\n\n  // 批次辦理人列表\n  interface VisaApplicant {\n    id: string;\n    name: string;\n    country: string;\n    is_urgent: boolean;\n    submission_date: string;\n    received_date: string;\n    cost: number;\n  }\n\n  const [applicants, setApplicants] = useState<VisaApplicant[]>([\n    {\n      id: '1',\n      name: '',\n      country: '護照 成人',\n      is_urgent: false,\n      submission_date: '',\n      received_date: '',\n      cost: 0,\n    }\n  ]);\n\n  // 第一個辦理人自動帶入申請人姓名（即時同步）\n  useEffect(() => {\n    if (applicants.length > 0) {\n      setApplicants(prev => {\n        const updated = [...prev];\n        updated[0].name = contact_info.applicant_name;\n        return updated;\n      });\n    }\n  }, [contact_info.applicant_name]);\n\n  // 新增辦理人\n  const addApplicant = useCallback(() => {\n    setApplicants(prev => [...prev, {\n      id: Date.now().toString(),\n      name: '',\n      country: '護照 成人',\n      is_urgent: false,\n      submission_date: '',\n      received_date: '',\n      cost: 0,\n    }]);\n  }, []);\n\n  // 移除辦理人\n  const removeApplicant = useCallback((id: string) => {\n    if (applicants.length > 1) {\n      setApplicants(prev => prev.filter(a => a.id !== id));\n    }\n  }, [applicants.length]);\n\n  // 更新辦理人資料\n  const updateApplicant = useCallback((id: string, field: keyof VisaApplicant, value: any) => {\n    setApplicants(prev => prev.map(a => {\n      if (a.id !== id) return a;\n\n      const updated = { ...a, [field]: value };\n\n      // 如果是送件時間或簽證類型改變，自動計算下件時間\n      if (field === 'submission_date' || field === 'country' || field === 'is_urgent') {\n        if (updated.submission_date) {\n          const visaTypeWithUrgent = updated.is_urgent ? `${updated.country} 急件` : updated.country;\n          updated.received_date = calculateReceivedDate(updated.submission_date, visaTypeWithUrgent);\n        }\n      }\n\n      // 如果勾選/取消急件，自動調整成本 ±900\n      if (field === 'is_urgent') {\n        if (value === true) {\n          // 勾選急件：+900\n          updated.cost = a.cost + 900;\n        } else {\n          // 取消急件：-900\n          updated.cost = Math.max(0, a.cost - 900);\n        }\n      }\n\n      return updated;\n    }));\n  }, [calculateReceivedDate]);\n\n  // 根據 tab 篩選簽證\n  const filteredVisas = useMemo(() =>\n    activeTab === 'all'\n      ? visas\n      : visas.filter((v) => v.status === activeTab)\n  , [visas, activeTab]);\n\n  // 計算代辦費\n  const calculateFee = useCallback((country: string): number => {\n    if (country.includes('兒童')) return 1500;\n    if (country.includes('首辦')) return 800;\n    if (country.includes('台胞證') && country.includes('遺失件')) return 2900;\n    return 1800;\n  }, []);\n\n  // 處理批次新增簽證\n  const handleAddVisa = async () => {\n    if (!contact_info.applicant_name || !user) return;\n\n    let selectedTour;\n\n    // 如果沒選團號，自動建立或使用預設的「簽證代辦團」\n    if (!contact_info.tour_id) {\n      const currentYear = new Date().getFullYear();\n      const defaultTourCode = `VISA-${currentYear}`;\n\n      const existingDefaultTour = tours.find(t => t.code === defaultTourCode);\n\n      if (existingDefaultTour) {\n        selectedTour = existingDefaultTour;\n      } else {\n        const endOfYear = `${currentYear}-12-31`;\n        selectedTour = await addTour({\n          name: `${currentYear}年度簽證代辦`,\n          departure_date: endOfYear,\n          return_date: endOfYear,\n          status: 'special' as const,\n          location: 'VISA',\n          price: 0,\n          max_participants: 9999,\n          contract_status: 'pending' as const,\n          total_revenue: 0,\n          total_cost: 0,\n          profit: 0,\n        } as any);\n      }\n    } else {\n      selectedTour = tours.find(t => t.id === contact_info.tour_id);\n      if (!selectedTour) return;\n    }\n\n    // 取得或建立訂單\n    const totalFee = applicants.reduce((sum, a) => sum + calculateFee(a.country), 0);\n    let targetOrder;\n\n    if (contact_info.order_id) {\n      // 如果有選擇訂單，使用現有訂單\n      targetOrder = orders.find(o => o.id === contact_info.order_id);\n      if (!targetOrder) return;\n    } else {\n      // 如果沒有選擇訂單，自動建立新訂單\n      // 計算該團的訂單流水號（3位數）\n      const tourOrders = orders.filter(o => o.tour_id === selectedTour.id);\n      const nextNumber = (tourOrders.length + 1).toString().padStart(3, '0');\n      const order_number = `${selectedTour.code}-${nextNumber}`;\n\n      targetOrder = await addOrder({\n        order_number,\n        tour_id: selectedTour.id,\n        code: order_number, // 訂單編號同時作為 code（唯一識別）\n        tour_name: selectedTour.name,\n        contact_person: contact_info.contact_person || contact_info.applicant_name,\n        sales_person: user.display_name || '系統',\n        assistant: user.display_name || '系統',\n        member_count: applicants.filter(a => a.name).length,\n        total_amount: totalFee,\n        paid_amount: 0,\n        remaining_amount: totalFee,\n        payment_status: 'unpaid' as const,\n      });\n    }\n\n    if (!targetOrder) {\n      logger.error('訂單建立失敗');\n      return;\n    }\n\n    // 批次建立簽證（為每個辦理人建立，共用同一個訂單）\n    applicants.forEach((applicant, index) => {\n      if (!applicant.name) return;\n\n      const fee = calculateFee(applicant.country);\n      const total_cost = applicant.is_urgent ? applicant.cost + 900 : applicant.cost;\n\n      // 建立簽證記錄\n      addVisa({\n        applicant_name: applicant.name,\n        contact_person: contact_info.contact_person,\n        contact_phone: contact_info.contact_phone,\n        visa_type: applicant.country, // 簽證類型\n        country: applicant.country,   // 國家（保留相容性）\n        submission_date: applicant.submission_date,\n        received_date: applicant.received_date,\n        fee,\n        cost: total_cost,\n        status: 'pending',\n        order_id: targetOrder.id,\n        order_number: targetOrder.order_number,\n        tour_id: selectedTour.id,\n        code: selectedTour.code,\n        created_by: user.id,\n        note: '',\n      });\n    });\n\n    // 重置表單（保持預設團號）\n    const currentYear = new Date().getFullYear();\n    const visaCode = `VISA${currentYear}001`;\n    const defaultVisaTour = tours.find(t => t.code === visaCode);\n    setContactInfo({\n      tour_id: defaultVisaTour?.id || '',\n      order_id: '',\n      applicant_name: '',\n      contact_person: '',\n      contact_phone: '',\n    });\n    setApplicants([{\n      id: '1',\n      name: '',\n      country: '護照 成人',\n      is_urgent: false,\n      submission_date: '',\n      received_date: '',\n      cost: 0,\n    }]);\n\n    setIsDialogOpen(false);\n  };\n\n  // 批次送件\n  const handleBatchSubmit = async () => {\n    if (selectedRows.length === 0) return;\n    const today = new Date().toISOString().split('T')[0];\n\n    // 使用標準 API 批次更新\n    for (const id of selectedRows) {\n      await updateVisa(id, { status: 'submitted', submission_date: today });\n    }\n\n    setSelectedRows([]);\n  };\n\n  // 狀態徽章樣式\n  const getStatusBadge = (status: Visa['status']) => {\n    const badges: Record<Visa['status'], string> = {\n      'pending': 'bg-morandi-gold/20 text-morandi-gold',\n      'submitted': 'bg-morandi-blue/20 text-morandi-blue',\n      'issued': 'bg-morandi-green/20 text-morandi-green',\n      'collected': 'bg-morandi-container text-morandi-secondary',\n      'rejected': 'bg-morandi-red/20 text-morandi-red',\n    };\n    return badges[status] || 'bg-morandi-container text-morandi-secondary';\n  };\n\n  // Table 欄位定義\n  const columns: TableColumn[] = [\n    {\n      key: 'applicant_name',\n      label: '申請人',\n      sortable: true,\n      render: (value) => <span className=\"text-sm text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'contact_person',\n      label: '聯絡人',\n      render: (value) => <span className=\"text-sm text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'contact_phone',\n      label: '聯絡電話',\n      render: (value) => <span className=\"text-sm text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'country',\n      label: '簽證',\n      render: (value) => <span className=\"text-sm text-morandi-primary\">{value}</span>,\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      render: (value, visa) => (\n        <span className={cn(\n          'text-sm font-medium',\n          visa.status === 'submitted' ? 'text-morandi-gold' :\n          visa.status === 'issued' ? 'text-morandi-green' :\n          'text-morandi-secondary'\n        )}>\n          {getVisaStatusLabel(visa.status)}\n        </span>\n      ),\n    },\n    {\n      key: 'submission_date',\n      label: '送件時間',\n      render: (value) => <span className=\"text-sm text-morandi-secondary\">{value ? new Date(value).toLocaleDateString() : '-'}</span>,\n    },\n    {\n      key: 'received_date',\n      label: '下件時間',\n      render: (value) => <span className=\"text-sm text-morandi-secondary\">{value ? new Date(value).toLocaleDateString() : '-'}</span>,\n    },\n    {\n      key: 'fee',\n      label: '代辦費',\n      render: (value) => <span className=\"text-sm text-morandi-primary\">NT$ {value.toLocaleString()}</span>,\n    },\n  ];\n\n  const renderActions = (visa: Visa) => (\n    <div className=\"flex items-center gap-1\">\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          // 編輯功能\n        }}\n        className=\"p-1 text-morandi-gold hover:bg-morandi-gold/10 rounded transition-colors\"\n        title=\"編輯\"\n      >\n        <Edit2 size={14} />\n      </button>\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          if (confirm('確定要刪除此簽證記錄嗎？')) {\n            deleteVisa(visa.id);\n          }\n        }}\n        className=\"p-1 text-morandi-red/60 hover:text-morandi-red hover:bg-morandi-red/10 rounded transition-colors\"\n        title=\"刪除\"\n      >\n        <Trash2 size={14} />\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <ResponsiveHeader\n        {...{\n        title: \"簽證管理\",\n        icon: FileText} as any}\n        breadcrumb={[\n          { label: '首頁', href: '/' },\n          { label: '簽證管理', href: '/visas' }\n        ]}\n        onAdd={() => setIsDialogOpen(true)}\n        addLabel=\"新增簽證\"\n        tabs={[\n          { value: 'all', label: '全部', icon: FileText },\n          { value: 'pending', label: '待送件', icon: Clock },\n          { value: 'submitted', label: '已送件', icon: AlertCircle },\n          { value: 'issued', label: '已下件', icon: CheckCircle },\n          { value: 'collected', label: '已取件', icon: FileCheck },\n          { value: 'rejected', label: '退件', icon: XCircle },\n        ]}        activeTab={activeTab}\n        onTabChange={setActiveTab}\n      />\n\n      <div className=\"flex-1 overflow-auto\">\n        {/* 批次操作按鈕 */}\n        {selectedRows.length > 0 && (\n        <div className=\"bg-morandi-container p-4 rounded-lg flex items-center justify-between\">\n          <span className=\"text-sm text-morandi-primary\">\n            已選擇 {selectedRows.length} 筆簽證\n          </span>\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={handleBatchSubmit}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              批次送件\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setSelectedRows([])}\n            >\n              取消選擇\n            </Button>\n          </div>\n        </div>\n      )}\n\n        {/* 簽證列表 */}\n        <EnhancedTable\n          className=\"min-h-full\"\n          columns={columns}\n          data={filteredVisas}\n          loading={false}\n          selection={{\n            selected: selectedRows,\n            onChange: setSelectedRows,\n          }}\n          actions={renderActions}\n          bordered={true}\n        />\n      </div>\n\n      {/* 新增簽證對話框 */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>新增簽證</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* 上半部：聯絡人資訊 */}\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">選擇團號</label>\n                  <Combobox\n                    value={contact_info.tour_id}\n                    onChange={(value) => {\n                      setContactInfo(prev => ({ ...prev, tour_id: value, order_id: '' }));\n                    }}\n                    options={tourOptions}\n                    placeholder=\"請輸入或選擇團號（例如：0810）\"\n                    className=\"mt-1\"\n                    showSearchIcon\n                    showClearButton\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">\n                    選擇訂單 <span className=\"text-xs text-morandi-secondary\">(選填，未選擇將自動建立)</span>\n                  </label>\n                  <Combobox\n                    value={contact_info.order_id}\n                    onChange={(value) => setContactInfo(prev => ({ ...prev, order_id: value }))}\n                    options={orderOptions}\n                    placeholder={contact_info.tour_id ? \"請選擇訂單或留空自動建立\" : \"請先選擇團號\"}\n                    className=\"mt-1\"\n                    disabled={!contact_info.tour_id}\n                    showSearchIcon\n                    showClearButton\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">聯絡人</label>\n                  <Input\n                    value={contact_info.contact_person}\n                    onChange={(e) => setContactInfo(prev => ({ ...prev, contact_person: e.target.value }))}\n                    className=\"mt-1\"\n                    placeholder=\"請輸入聯絡人\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">申請人</label>\n                  <Input\n                    value={contact_info.applicant_name}\n                    onChange={(e) => setContactInfo(prev => ({ ...prev, applicant_name: e.target.value }))}\n                    className=\"mt-1\"\n                    placeholder=\"請輸入申請人姓名\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-primary\">聯絡電話</label>\n                  <Input\n                    value={contact_info.contact_phone}\n                    onChange={(e) => setContactInfo(prev => ({ ...prev, contact_phone: e.target.value }))}\n                    className=\"mt-1\"\n                    placeholder=\"請輸入聯絡電話\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 分割線 */}\n            <div className=\"border-t border-border\"></div>\n\n            {/* 下半部：批次辦理人列表 */}\n            <div className=\"space-y-2\">\n              {applicants.map((applicant, index) => (\n                <div key={applicant.id} className=\"flex gap-2 items-center\">\n                  <Input\n                    value={applicant.name}\n                    onChange={(e) => updateApplicant(applicant.id, 'name', e.target.value)}\n                    placeholder={index === 0 ? \"辦理人（自動帶入）\" : \"辦理人\"}\n                    className=\"flex-[1.5]\"\n                  />\n\n                  <select\n                    value={applicant.country}\n                    onChange={(e) => updateApplicant(applicant.id, 'country', e.target.value)}\n                    className=\"flex-[2] p-2 border border-border rounded-md bg-background h-10\"\n                  >\n                    <option value=\"護照 成人\">護照 成人</option>\n                    <option value=\"護照 兒童\">護照 兒童</option>\n                    <option value=\"護照 成人 遺失件\">護照 成人 遺失件</option>\n                    <option value=\"護照 兒童 遺失件\">護照 兒童 遺失件</option>\n                    <option value=\"台胞證\">台胞證</option>\n                    <option value=\"台胞證 遺失件\">台胞證 遺失件</option>\n                    <option value=\"台胞證 首辦\">台胞證 首辦</option>\n                  </select>\n\n                  <Input\n                    type=\"date\"\n                    value={applicant.submission_date}\n                    onChange={(e) => updateApplicant(applicant.id, 'submission_date', e.target.value)}\n                    className=\"flex-1\"\n                  />\n\n                  <Input\n                    type=\"date\"\n                    value={applicant.received_date}\n                    readOnly\n                    className=\"flex-1 bg-muted\"\n                  />\n\n                  <Input\n                    type=\"number\"\n                    value={calculateFee(applicant.country)}\n                    readOnly\n                    className=\"w-20 bg-muted\"\n                  />\n\n                  <Input\n                    type=\"number\"\n                    value={applicant.cost}\n                    onChange={(e) => updateApplicant(applicant.id, 'cost', Number(e.target.value))}\n                    placeholder=\"成本\"\n                    className=\"w-20\"\n                  />\n\n                  <div className=\"flex items-center gap-1\">\n                    <input\n                      type=\"checkbox\"\n                      checked={applicant.is_urgent}\n                      onChange={(e) => updateApplicant(applicant.id, 'is_urgent', e.target.checked)}\n                      className=\"w-4 h-4\"\n                    />\n                    <span className=\"text-sm whitespace-nowrap\">急件</span>\n                  </div>\n\n                  <Button\n                    type=\"button\"\n                    onClick={index === applicants.length - 1 ? addApplicant : () => removeApplicant(applicant.id)}\n                    size=\"sm\"\n                    className={index === applicants.length - 1\n                      ? \"h-8 w-8 p-0 flex-shrink-0 bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n                      : \"h-8 w-8 p-0 flex-shrink-0 text-morandi-red hover:bg-red-50\"}\n                    variant={index === applicants.length - 1 ? \"default\" : \"ghost\"}\n                  >\n                    {index === applicants.length - 1 ? '+' : '✕'}\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4 border-t border-border mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsDialogOpen(false)}\n            >\n              取消\n            </Button>\n            <Button\n              onClick={handleAddVisa}\n              disabled={!contact_info.applicant_name || applicants.every(a => !a.name)}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              批次新增簽證\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/app/workspace/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/AppInitializer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ErrorLogger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/SmartAttractions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/TourPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IconBuilding' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IconToolsKitchen2' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6863,6866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6863,6866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":479,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20157,20160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20157,20160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":593,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25624,25627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25624,25627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":621,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":621,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27061,27064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27061,27064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":824,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":824,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36325,36328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36325,36328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":862,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":862,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37779,37782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37779,37782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":883,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38577,38580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38577,38580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { TracingBeam } from \"@/components/ui/tracing-beam\";\nimport { FocusCards } from \"@/components/ui/focus-cards\";\nimport { FloatingDock } from \"@/components/ui/floating-dock\";\nimport { motion } from \"framer-motion\";\nimport {\n  IconHome,\n  IconCalendar,\n  IconMapPin,\n  IconPhone,\n  IconPlane,\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n} from \"@tabler/icons-react\";\n\nexport default function TourPage({ data, isPreview = false, viewMode = 'desktop' }: { data: any; isPreview?: boolean; viewMode?: 'desktop' | 'mobile' }) {\n  const [scrollOpacity, setScrollOpacity] = useState(0);\n  const [attractionsProgress, setAttractionsProgress] = useState(0); // 0-1 之間的進度值\n  const [showGallery, setShowGallery] = useState(false);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const galleryRef = useRef<HTMLElement>(null);\n\n  // 監聽父容器的滾動事件\n  useEffect(() => {\n    let scrollContainer: HTMLElement | null = null;\n\n    const handleScroll = (e: Event) => {\n      const target = e.target as HTMLElement;\n      const scrollTop = target.scrollTop;\n\n      // 在 0-150px 之間平滑過渡，0 = 完全透明，150 = 完全不透明\n      const opacity = Math.min(scrollTop / 150, 1);\n      setScrollOpacity(opacity);\n    };\n\n    // 找到最近的可滾動父元素\n    const findScrollableParent = (element: HTMLElement | null): HTMLElement | null => {\n      if (!element) return null;\n\n      const parent = element.parentElement;\n      if (!parent) return null;\n\n      const overflowY = window.getComputedStyle(parent).overflowY;\n      if (overflowY === 'auto' || overflowY === 'scroll') {\n        return parent;\n      }\n\n      return findScrollableParent(parent);\n    };\n\n    // 延遲一下確保 DOM 已經渲染\n    const timer = setTimeout(() => {\n      const topElement = document.getElementById('top');\n      if (topElement) {\n        scrollContainer = findScrollableParent(topElement);\n        if (scrollContainer) {\n          scrollContainer.addEventListener('scroll', handleScroll);\n        }\n      }\n    }, 100);\n\n    return () => {\n      clearTimeout(timer);\n      if (scrollContainer) {\n        scrollContainer.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  // 監聽精選景點區塊的滾動進度（手機版）\n  useEffect(() => {\n    if (viewMode !== 'mobile') return;\n\n    // 預覽模式：自動漸進到 1\n    if (isPreview) {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 0.02; // 每次增加 2%\n        if (progress >= 1) {\n          progress = 1;\n          clearInterval(interval);\n        }\n        setAttractionsProgress(progress);\n      }, 50); // 每 50ms 更新一次，總共約 2.5 秒完成\n\n      return () => clearInterval(interval);\n    }\n\n    // 實際頁面：基於滾動位置計算進度\n    let scrollContainer: HTMLElement | null = null;\n\n    const handleScroll = () => {\n      const attractionsElement = document.getElementById('attractions');\n      if (!attractionsElement || !scrollContainer) return;\n\n      const rect = attractionsElement.getBoundingClientRect();\n      const containerRect = scrollContainer.getBoundingClientRect();\n\n      // 計算區塊頂部相對於視窗頂部的位置\n      const elementTop = rect.top - containerRect.top;\n      const viewportHeight = containerRect.height;\n\n      // 定義動畫觸發範圍：\n      // startPoint: 區塊頂部在視窗底部 80% 位置（還沒完全進入）\n      // endPoint: 區塊頂部在視窗頂部 20% 位置（已經進入並佔據大部分畫面）\n      const startPoint = viewportHeight * 0.8; // 在視窗底部 80% 處開始\n      const endPoint = viewportHeight * 0.2;    // 在視窗頂部 20% 處結束\n\n      // 計算進度（0 到 1）\n      // 當 elementTop > startPoint 時，progress = 0（區塊還在下方，保持白色）\n      // 當 elementTop < endPoint 時，progress = 1（區塊已經上來，完全黑色）\n      const rawProgress = (startPoint - elementTop) / (startPoint - endPoint);\n      const progress = Math.max(0, Math.min(1, rawProgress));\n\n      setAttractionsProgress(progress);\n    };\n\n    // 找到滾動容器\n    const findScrollableParent = (element: HTMLElement | null): HTMLElement | null => {\n      if (!element) return null;\n      const parent = element.parentElement;\n      if (!parent) return null;\n      const overflowY = window.getComputedStyle(parent).overflowY;\n      if (overflowY === 'auto' || overflowY === 'scroll') {\n        return parent;\n      }\n      return findScrollableParent(parent);\n    };\n\n    const timer = setTimeout(() => {\n      const attractionsElement = document.getElementById('attractions');\n      if (attractionsElement) {\n        scrollContainer = findScrollableParent(attractionsElement);\n        if (scrollContainer) {\n          scrollContainer.addEventListener('scroll', handleScroll);\n          handleScroll(); // 初始計算一次\n        }\n      }\n    }, 100);\n\n    return () => {\n      clearTimeout(timer);\n      if (scrollContainer) {\n        scrollContainer.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, [viewMode, isPreview]);\n\n  // 檢測精選景點區塊是否進入視窗（觸發全屏相簿）\n  useEffect(() => {\n    if (viewMode !== 'mobile') return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && entry.intersectionRatio > 0.7) {\n            setShowGallery(true);\n            document.body.style.overflow = 'hidden';\n          }\n        });\n      },\n      { threshold: 0.7 }\n    );\n\n    if (galleryRef.current) {\n      observer.observe(galleryRef.current);\n    }\n\n    return () => {\n      observer.disconnect();\n      document.body.style.overflow = '';\n    };\n  }, [viewMode]);\n\n  // 導航項目\n  const navLinks = data.navLinks || [\n    { title: \"首頁\", icon: IconHome, href: \"#top\" },\n    { title: \"航班\", icon: IconPlane, href: \"#flight\" },\n    { title: \"景點\", icon: IconMapPin, href: \"#attractions\" },\n    { title: \"行程\", icon: IconCalendar, href: \"#itinerary\" },\n    { title: \"聯絡\", icon: IconPhone, href: \"#contact\" },\n  ];\n\n  // 精選景點資料\n  const focusCards = data.focusCards || [];\n\n  // 行程特色資料\n  const features = data.features || [];\n\n  return (\n    <div className={viewMode === 'mobile' ? 'min-h-screen bg-gray-50' : 'min-h-screen bg-white'}>\n      {/* 置頂導航列 - 桌面版或非預覽模式才顯示 */}\n      {(!isPreview || viewMode === 'desktop') && (\n        <nav\n          className=\"fixed left-0 right-0 z-40 transition-all duration-300 hidden md:block\"\n          style={{\n            backgroundColor: `rgba(255, 255, 255, ${scrollOpacity * 0.9})`,\n            backdropFilter: scrollOpacity > 0.1 ? 'blur(12px)' : 'none',\n            boxShadow: scrollOpacity > 0.5 ? '0 4px 6px -1px rgba(0, 0, 0, 0.1)' : 'none'\n          }}\n        >\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div\n              className=\"text-xl font-bold transition-colors duration-300\"\n              style={{\n                color: scrollOpacity > 0.5 ? 'rgb(var(--morandi-primary))' : 'white'\n              }}\n            >\n              Corner Travel\n            </div>\n            <div className=\"flex items-center gap-8\">\n              {navLinks.map((link: any) => {\n                const IconComponent = link.icon || IconHome;\n                return (\n                  <a\n                    key={link.href}\n                    href={link.href}\n                    className=\"flex items-center gap-2 transition-colors\"\n                    style={{\n                      color: scrollOpacity > 0.5\n                        ? 'rgb(var(--morandi-secondary))'\n                        : 'rgba(255, 255, 255, 0.8)'\n                    }}\n                  >\n                    <IconComponent className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-medium\">{link.title}</span>\n                  </a>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </nav>\n      )}\n\n      {/* 全螢幕美化封面 */}\n      <section id=\"top\" className=\"relative h-screen overflow-hidden bg-slate-900\">\n        {/* 動態背景 */}\n        <div className=\"absolute inset-0\">\n          <img\n            src={data.coverImage || \"https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=1200&q=75&auto=format&fit=crop\"}\n            alt=\"Cover\"\n            className=\"absolute inset-0 w-full h-full object-cover transition-opacity duration-700\"\n            style={{\n              filter: \"brightness(0.7)\",\n            }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-black/30 to-black/70\" />\n        </div>\n\n        {/* 主要內容 */}\n        <div className={viewMode === 'mobile' ? 'relative z-10 h-full flex flex-col items-center justify-center px-4' : 'relative z-10 h-full flex flex-col items-center justify-center px-4'}>\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1 }}\n            className={viewMode === 'mobile' ? 'text-center mb-40' : 'text-center mb-16'}\n          >\n            <motion.span\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.2 }}\n              className={viewMode === 'mobile' ? 'inline-block px-3 py-1 bg-white/10 backdrop-blur-md border border-white/20 rounded-full text-white/90 text-xs font-medium mb-8' : 'inline-block px-4 py-1.5 bg-white/10 backdrop-blur-md border border-white/20 rounded-full text-white/90 text-xs sm:text-sm font-medium mb-4'}\n            >\n              {data.tagline || \"Venturo Travel 2025 秋季精選\"}\n            </motion.span>\n\n            <motion.h1\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 1, delay: 0.3 }}\n              className={viewMode === 'mobile' ? 'text-2xl font-bold text-white mb-4' : 'text-4xl md:text-6xl lg:text-8xl font-bold text-white mb-4'}\n            >\n              {data.title}\n              <br />\n              <span className={viewMode === 'mobile' ? 'text-base text-transparent bg-clip-text bg-gradient-to-r from-amber-400 to-orange-500' : 'text-2xl md:text-4xl lg:text-6xl text-transparent bg-clip-text bg-gradient-to-r from-amber-400 to-orange-500'}>\n                {data.subtitle}\n              </span>\n            </motion.h1>\n\n            <motion.p\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.5 }}\n              className={viewMode === 'mobile' ? 'text-xs text-white/80 max-w-3xl mx-auto mb-8 px-4' : 'text-base md:text-xl lg:text-2xl text-white/80 max-w-3xl mx-auto mb-8 px-4'}\n            >\n              {data.description}\n            </motion.p>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.7 }}\n              className=\"flex flex-wrap justify-center gap-4 sm:gap-6 px-4\"\n            >\n              <div className={viewMode === 'mobile' ? 'bg-white/10 backdrop-blur-md border border-white/20 px-4 py-2 rounded-full text-center' : 'bg-white/10 backdrop-blur-md border border-white/20 px-6 sm:px-8 py-4 rounded-full text-center'}>\n                <div className={viewMode === 'mobile' ? 'text-xs text-white/70' : 'text-xs sm:text-sm text-white/70'}>出發日期</div>\n                <div className={viewMode === 'mobile' ? 'font-bold text-sm text-white' : 'font-bold text-base sm:text-xl text-white'}>{data.departureDate}</div>\n              </div>\n              <div className={viewMode === 'mobile' ? 'bg-white/10 backdrop-blur-md border border-white/20 px-4 py-2 rounded-full text-center' : 'bg-white/10 backdrop-blur-md border border-white/20 px-6 sm:px-8 py-4 rounded-full text-center'}>\n                <div className={viewMode === 'mobile' ? 'text-xs text-white/70' : 'text-xs sm:text-sm text-white/70'}>行程代碼</div>\n                <div className={viewMode === 'mobile' ? 'font-bold text-sm text-white' : 'font-bold text-base sm:text-xl text-white'}>{data.tourCode}</div>\n              </div>\n            </motion.div>\n          </motion.div>\n\n          {/* 滾動提示 */}\n          <motion.div\n            className=\"text-white/80 text-center\"\n            animate={{ y: [0, 10, 0] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            <p className={viewMode === 'mobile' ? 'text-sm mb-2 font-medium' : 'text-sm mb-2'}>探索行程</p>\n            <svg className=\"w-6 h-6 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n            </svg>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* 分隔線 */}\n      <div className=\"border-t border-border\"></div>\n\n      {/* 航班資訊 */}\n      <section id=\"flight\" className={viewMode === 'mobile' ? 'pt-4 pb-8 bg-white' : 'pt-8 pb-16 bg-white'}>\n        <div className={viewMode === 'mobile' ? 'px-4' : 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'}>\n          <div className={viewMode === 'mobile' ? 'grid grid-cols-1 gap-4' : 'grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6'}>\n            {/* 去程航班 */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              className=\"bg-white rounded-2xl shadow-xl p-6 border border-border\"\n            >\n              <div className=\"flex items-center gap-3 mb-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <IconPlane className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <div className=\"text-xs text-morandi-secondary\">去程航班</div>\n                  <div className=\"text-xl font-bold text-morandi-primary\">\n                    {data.outboundFlight?.airline || \"中華航空\"} {data.outboundFlight?.flightNumber || \"CI110\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-xs text-morandi-secondary mb-1\">出發</div>\n                    <div className=\"text-2xl font-bold text-morandi-primary\">\n                      {data.outboundFlight?.departureAirport || \"TPE\"}\n                    </div>\n                    <div className=\"text-base text-blue-600 font-semibold\">\n                      {data.outboundFlight?.departureTime || \"06:50\"}\n                    </div>\n                    <div className=\"text-xs text-morandi-secondary mt-0.5\">\n                      {data.outboundFlight?.departureDate || \"10/21\"}\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 flex flex-col items-center px-3\">\n                    <div className=\"text-xs text-morandi-secondary mb-3\">飛行時間</div>\n                    <div className=\"w-full border-t-2 border-dashed border-border relative my-2\">\n                      <div className=\"absolute -top-1.5 left-1/2 -translate-x-1/2 bg-blue-100 px-1.5 py-0.5 rounded-full\">\n                        <IconPlane className=\"w-3 h-3 text-blue-600\" />\n                      </div>\n                    </div>\n                    <div className=\"text-xs font-semibold text-morandi-primary mt-3\">\n                      {data.outboundFlight?.duration || \"2小時5分\"}\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 text-right\">\n                    <div className=\"text-xs text-morandi-secondary mb-1\">抵達</div>\n                    <div className=\"text-2xl font-bold text-morandi-primary\">\n                      {data.outboundFlight?.arrivalAirport || \"FUK\"}\n                    </div>\n                    <div className=\"text-base text-blue-600 font-semibold\">\n                      {data.outboundFlight?.arrivalTime || \"09:55\"}\n                    </div>\n                    <div className=\"text-xs text-morandi-secondary mt-0.5\">\n                      當地時間\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* 回程航班 */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-white rounded-2xl shadow-xl p-6 border border-border\"\n            >\n              <div className=\"flex items-center gap-3 mb-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <IconPlane className=\"w-6 h-6 text-white rotate-180\" />\n                </div>\n                <div>\n                  <div className=\"text-xs text-morandi-secondary\">回程航班</div>\n                  <div className=\"text-xl font-bold text-morandi-primary\">\n                    {data.returnFlight?.airline || \"中華航空\"} {data.returnFlight?.flightNumber || \"CI111\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-xs text-morandi-secondary mb-1\">出發</div>\n                    <div className=\"text-2xl font-bold text-morandi-primary\">\n                      {data.returnFlight?.departureAirport || \"FUK\"}\n                    </div>\n                    <div className=\"text-base text-indigo-600 font-semibold\">\n                      {data.returnFlight?.departureTime || \"11:00\"}\n                    </div>\n                    <div className=\"text-xs text-morandi-secondary mt-0.5\">\n                      {data.returnFlight?.departureDate || \"10/25\"}\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 flex flex-col items-center px-3\">\n                    <div className=\"text-xs text-morandi-secondary mb-3\">飛行時間</div>\n                    <div className=\"w-full border-t-2 border-dashed border-border relative my-2\">\n                      <div className=\"absolute -top-1.5 left-1/2 -translate-x-1/2 bg-indigo-100 px-1.5 py-0.5 rounded-full\">\n                        <IconPlane className=\"w-3 h-3 text-indigo-600 rotate-180\" />\n                      </div>\n                    </div>\n                    <div className=\"text-xs font-semibold text-morandi-primary mt-3\">\n                      {data.returnFlight?.duration || \"2小時30分\"}\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 text-right\">\n                    <div className=\"text-xs text-morandi-secondary mb-1\">抵達</div>\n                    <div className=\"text-2xl font-bold text-morandi-primary\">\n                      {data.returnFlight?.arrivalAirport || \"TPE\"}\n                    </div>\n                    <div className=\"text-base text-indigo-600 font-semibold\">\n                      {data.returnFlight?.arrivalTime || \"12:30\"}\n                    </div>\n                    <div className=\"text-xs text-morandi-secondary mt-0.5\">\n                      台灣時間\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* 分隔線 */}\n      <div className=\"border-t border-border\"></div>\n\n      {/* 行程特色 */}\n      <section className={viewMode === 'mobile' ? 'pt-4 pb-8 bg-white' : 'pt-8 pb-16 bg-white'}>\n        <div className={viewMode === 'mobile' ? 'px-4' : 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'}>\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className={viewMode === 'mobile' ? 'text-center mb-6' : 'text-center mb-8'}\n          >\n            <h2 className={viewMode === 'mobile' ? 'text-2xl font-bold text-morandi-primary' : 'text-4xl font-bold text-morandi-primary'}>\n              行程特色\n            </h2>\n          </motion.div>\n\n          {/* 優化版特色卡片 */}\n          <div className={viewMode === 'mobile' ? 'space-y-4' : 'grid grid-cols-2 md:grid-cols-3 gap-6'}>\n            {features.map((feature: any, index: number) => {\n              const FeatureIcon = feature.iconComponent || IconSparkles;\n              return (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ delay: index * 0.1 }}\n                  whileHover={{ y: -5, scale: 1.02 }}\n                  className=\"group relative\"\n                >\n                  {/* 背景光暈效果 */}\n                  <div className=\"absolute -inset-0.5 bg-gradient-to-r from-amber-500 to-orange-500 rounded-2xl blur opacity-30 group-hover:opacity-60 transition duration-500\" />\n\n                  {/* 卡片內容 */}\n                  <div className={viewMode === 'mobile' ? 'relative bg-white rounded-2xl p-4 h-full flex items-center gap-4' : 'relative bg-white rounded-2xl p-6 h-full'}>\n                    {/* 圖標 */}\n                    <div className={viewMode === 'mobile' ? 'w-12 h-12 bg-gradient-to-br from-amber-500/10 to-orange-500/10 rounded-xl flex items-center justify-center flex-shrink-0' : 'w-14 h-14 bg-gradient-to-br from-amber-500/10 to-orange-500/10 rounded-xl flex items-center justify-center mb-4'}>\n                      <FeatureIcon className={viewMode === 'mobile' ? 'w-6 h-6 text-amber-600' : 'w-7 h-7 text-amber-600'} />\n                    </div>\n\n                    {/* 文字 */}\n                    <div className={viewMode === 'mobile' ? 'flex-1 min-w-0' : ''}>\n                      <h3 className={viewMode === 'mobile' ? 'font-bold text-base mb-1 text-morandi-primary' : 'font-bold text-lg mb-2 text-morandi-primary'}>{feature.title}</h3>\n                      <p className=\"text-sm text-morandi-secondary\">\n                        {feature.description}\n                      </p>\n                    </div>\n\n                    {/* Hover 時顯示的裝飾 */}\n                    {viewMode !== 'mobile' && (\n                      <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition\">\n                        <IconSparkles className=\"w-4 h-4 text-amber-500\" />\n                      </div>\n                    )}\n                  </div>\n                </motion.div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* 分隔線 */}\n      {viewMode !== 'mobile' && <div className=\"border-t border-border\"></div>}\n\n      {/* 精選景點展示 */}\n      <section\n        ref={galleryRef}\n        id=\"attractions\"\n        className={viewMode === 'mobile'\n          ? 'min-h-screen flex flex-col items-center justify-center py-12'\n          : 'pt-8 pb-16 bg-white'}\n        style={viewMode === 'mobile' ? {\n          backgroundColor: `rgb(${Math.round(255 * (1 - attractionsProgress))}, ${Math.round(255 * (1 - attractionsProgress))}, ${Math.round(255 * (1 - attractionsProgress))})`,\n          transition: 'background-color 0.3s ease-out',\n        } : {}}\n      >\n        <div className={viewMode === 'mobile' ? 'px-4 w-full' : 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'}>\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ delay: 0.2 }}\n            className={viewMode === 'mobile' ? 'text-center mb-8' : 'text-center mb-8'}\n            style={viewMode === 'mobile' ? {\n              color: `rgb(${Math.round(255 * attractionsProgress)}, ${Math.round(255 * attractionsProgress)}, ${Math.round(255 * attractionsProgress)})`,\n              transition: 'color 0.3s ease-out',\n            } : {}}\n          >\n            <h2 className={viewMode === 'mobile' ? 'text-2xl font-bold' : 'text-4xl font-bold text-morandi-primary'}>\n              精選景點\n            </h2>\n          </motion.div>\n          <motion.div\n            initial={viewMode === 'mobile' ? { opacity: 0 } : { opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1 }}\n            viewport={{ once: true }}\n            transition={{ delay: 0.4, duration: 0.8, ease: \"easeOut\" }}\n            style={viewMode === 'mobile' ? {\n              transform: `scale(${0.8 + 0.2 * attractionsProgress})`,\n              transition: 'transform 0.3s ease-out',\n            } : {}}\n          >\n            <FocusCards cards={focusCards} viewMode={viewMode} />\n          </motion.div>\n        </div>\n      </section>\n\n      {/* 分隔線 */}\n      {viewMode !== 'mobile' && <div className=\"border-t border-border\"></div>}\n\n      {/* Itinerary Section */}\n      <section id=\"itinerary\" className={viewMode === 'mobile' ? 'bg-white pt-4 pb-8' : 'bg-white pt-8 pb-16'}>\n        <div className={viewMode === 'mobile' ? 'px-4' : 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'}>\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className={viewMode === 'mobile' ? 'text-2xl font-bold text-morandi-primary mb-4' : 'text-4xl font-bold text-morandi-primary mb-4'}>\n              詳細行程\n            </h2>\n            <p className=\"text-xl text-morandi-secondary\">\n              {data.itinerarySubtitle || \"精彩旅程規劃\"}\n            </p>\n          </motion.div>\n\n          {/* Main Timeline */}\n          <div className=\"max-w-4xl mx-auto\">\n            <TracingBeam>\n              <div className=\"space-y-8\">\n                {data.dailyItinerary?.map((day: any, index: number) => (\n                    <div key={index} className=\"bg-white rounded-2xl shadow-lg p-8 border border-border\">\n                      <div className=\"flex items-center gap-4 mb-6\">\n                        <span className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-4 py-2 rounded-full font-bold text-lg\">\n                          {day.dayLabel}\n                        </span>\n                        <span className=\"text-morandi-secondary\">{day.date}</span>\n                      </div>\n                      <h3 className=\"text-2xl font-bold text-morandi-primary mb-4\">\n                        {day.title}\n                      </h3>\n\n                      {day.highlight && (\n                        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                          <p className=\"text-blue-800 font-medium\">\n                            {day.highlight}\n                          </p>\n                        </div>\n                      )}\n\n                      {day.description && (\n                        <p className=\"text-morandi-secondary mb-6\">\n                          {day.description}\n                        </p>\n                      )}\n\n                      {day.activities && day.activities.length > 0 && (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                          {day.activities.map((activity: any, actIndex: number) => (\n                            <div key={actIndex} className=\"border border-border rounded-lg p-4\">\n                              <h4 className=\"font-bold text-morandi-primary mb-2\">{activity.icon} {activity.title}</h4>\n                              <p className=\"text-sm text-morandi-secondary\">{activity.description}</p>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n\n                      {day.recommendations && day.recommendations.length > 0 && (\n                        <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6 mb-6\">\n                          <h4 className=\"font-bold text-green-900 mb-3\">\n                            🎉 推薦行程\n                          </h4>\n                          <ul className=\"space-y-2 text-green-800\">\n                            {day.recommendations.map((rec: string, recIndex: number) => (\n                              <li key={recIndex} className=\"flex items-center gap-2\">\n                                <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                                {rec}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"bg-morandi-container/20 rounded-lg p-4\">\n                          <p className=\"text-sm text-morandi-secondary mb-1\">早餐</p>\n                          <p className=\"font-medium text-morandi-primary\">{day.meals?.breakfast || \"敬請自理\"}</p>\n                        </div>\n                        <div className=\"bg-morandi-container/20 rounded-lg p-4\">\n                          <p className=\"text-sm text-morandi-secondary mb-1\">午餐</p>\n                          <p className=\"font-medium text-morandi-primary\">{day.meals?.lunch || \"敬請自理\"}</p>\n                        </div>\n                        <div className=\"bg-morandi-container/20 rounded-lg p-4\">\n                          <p className=\"text-sm text-morandi-secondary mb-1\">晚餐</p>\n                          <p className=\"font-medium text-morandi-primary\">{day.meals?.dinner || \"敬請自理\"}</p>\n                        </div>\n                      </div>\n\n                      {day.accommodation && (\n                        <div className=\"mt-6 bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                          <p className=\"text-sm text-amber-800\">\n                            🏨 住宿：{day.accommodation}\n                          </p>\n                        </div>\n                      )}\n                  </div>\n                ))}\n              </div>\n            </TracingBeam>\n          </div>\n        </div>\n      </section>\n\n      {/* 分隔線 */}\n      <div className=\"border-t border-border\"></div>\n\n      {/* 領隊與集合資訊 */}\n      <section className=\"bg-white pt-8 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className={viewMode === 'mobile' ? 'text-2xl font-bold text-morandi-primary mb-4' : 'text-4xl font-bold text-morandi-primary mb-4'}>\n              領隊與集合資訊\n            </h2>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {/* 領隊資訊 */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              className=\"bg-white rounded-2xl shadow-lg p-8 border border-border\"\n            >\n              <h3 className=\"text-2xl font-bold text-morandi-primary mb-6 flex items-center gap-3\">\n                <span className=\"text-3xl\">👤</span>\n                領隊資訊\n              </h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-morandi-secondary mb-1\">領隊姓名</p>\n                  <p className=\"text-lg font-semibold text-morandi-primary\">{data.leader?.name || \"待定\"}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-morandi-secondary mb-1\">國內電話</p>\n                  <p className=\"text-lg font-semibold text-morandi-primary\">{data.leader?.domesticPhone || \"待定\"}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-morandi-secondary mb-1\">國外電話</p>\n                  <p className=\"text-lg font-semibold text-morandi-primary\">{data.leader?.overseasPhone || \"待定\"}</p>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* 集合資訊 */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              className=\"bg-white rounded-2xl shadow-lg p-8 border border-border\"\n            >\n              <h3 className=\"text-2xl font-bold text-morandi-primary mb-6 flex items-center gap-3\">\n                <span className=\"text-3xl\">📍</span>\n                集合資訊\n              </h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-morandi-secondary mb-1\">集合時間</p>\n                  <p className=\"text-xl font-semibold text-blue-600\">\n                    {data.meetingInfo?.time || \"待定\"}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-morandi-secondary mb-1\">集合地點</p>\n                  <p className=\"text-lg font-semibold text-morandi-primary\">\n                    {data.meetingInfo?.location || \"待定\"}\n                  </p>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* 分隔線 */}\n      <div className=\"border-t border-border\"></div>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className={viewMode === 'mobile' ? 'bg-gradient-to-br from-blue-600 to-indigo-600 py-12' : 'bg-gradient-to-br from-blue-600 to-indigo-600 py-20'}>\n        <div className={viewMode === 'mobile' ? 'px-4' : 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'}>\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className={viewMode === 'mobile' ? 'text-2xl font-bold text-white mb-4' : 'text-4xl font-bold text-white mb-4'}>\n              聯絡我們\n            </h2>\n            <p className=\"text-xl text-blue-100\">\n              有任何問題歡迎隨時聯繫\n            </p>\n          </motion.div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: 0.1 }}\n              className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8 text-center\"\n            >\n              <div className=\"text-4xl mb-4\">👤</div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">領隊</h3>\n              <p className=\"text-blue-100\">{data.leader?.name || \"待定\"}</p>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8 text-center\"\n            >\n              <div className=\"text-4xl mb-4\">📱</div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">國內電話</h3>\n              <p className=\"text-blue-100\">{data.leader?.domesticPhone || \"待定\"}</p>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: 0.3 }}\n              className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8 text-center\"\n            >\n              <div className=\"text-4xl mb-4\">📞</div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">國外電話</h3>\n              <p className=\"text-blue-100\">{data.leader?.overseasPhone || \"待定\"}</p>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h3 className=\"text-2xl font-bold text-white mb-2\">Corner Travel</h3>\n            <p className=\"text-slate-300 mb-8\">探索世界，創造回憶</p>\n            <p className=\"text-slate-400 text-sm\">\n              © 2025 Corner Travel. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      {/* 手機版底部導航 */}\n      <div className=\"fixed bottom-4 left-1/2 -translate-x-1/2 z-50 md:hidden\">\n        <FloatingDock\n          items={navLinks.map((link: any) => ({\n            title: link.title,\n            icon: <link.icon className=\"w-5 h-5\" />,\n            href: link.href,\n          }))}\n          mobileClassName=\"block md:hidden\"\n        />\n      </div>\n\n      {/* 全屏相簿覆蓋層 */}\n      {showGallery && viewMode === 'mobile' && (\n        <div className=\"fixed inset-0 bg-black z-[100] animate-fadeIn flex flex-col\">\n          {/* 頂部關閉按鈕 */}\n          <div className=\"flex-shrink-0 p-4 pt-safe\">\n            <button\n              onClick={() => {\n                setShowGallery(false);\n                document.body.style.overflow = '';\n              }}\n              className=\"text-white/80 text-lg font-medium hover:text-white transition-colors\"\n            >\n              ✕ 關閉\n            </button>\n          </div>\n\n          {/* 圖片容器 - 佔據剩餘空間 */}\n          <div className=\"flex-1 flex flex-col items-center justify-center overflow-hidden px-4 pb-16\">\n            <div\n              className=\"w-full h-full overflow-x-auto snap-x snap-mandatory flex hide-scrollbar\"\n              style={{ scrollSnapType: 'x mandatory' }}\n              onScroll={(e) => {\n                const container = e.currentTarget;\n                const scrollLeft = container.scrollLeft;\n                const cardWidth = container.clientWidth;\n                const index = Math.round(scrollLeft / cardWidth);\n                setCurrentImageIndex(index);\n              }}\n            >\n              {focusCards.map((card: any, index: number) => (\n                <div\n                  key={index}\n                  className=\"w-full flex-shrink-0 snap-center flex flex-col items-center justify-center gap-4 px-2\"\n                >\n                  <img\n                    src={card.src}\n                    alt={card.title}\n                    className=\"max-w-full max-h-[50vh] object-contain rounded-xl\"\n                  />\n                  <h3 className=\"text-white text-center text-xl font-medium\">\n                    {card.title}\n                  </h3>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 底部指示器 - 固定在底部 */}\n          <div className=\"flex-shrink-0 pb-8 pb-safe\">\n            <div className=\"flex justify-center gap-2\">\n              {focusCards.map((_: any, index: number) => (\n                <div\n                  key={index}\n                  className={`h-2 rounded-full transition-all duration-300 ${\n                    currentImageIndex === index\n                      ? 'bg-white w-8'\n                      : 'bg-white/40 w-2'\n                  }`}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/accounting/accounts-management.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreHorizontal' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expandedAccount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setExpandedAccount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { useAccountingStore } from '@/stores/accounting-store';\nimport { Button } from '@/components/ui/button';\nimport {\n  Wallet,\n  CreditCard,\n  PiggyBank,\n  TrendingUp,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst accountTypeIcons = {\n  cash: Wallet,\n  bank: CreditCard,\n  credit: CreditCard,\n  investment: TrendingUp,\n  other: PiggyBank,\n};\n\nconst accountTypeLabels = {\n  cash: '現金',\n  bank: '銀行帳戶',\n  credit: '信用卡',\n  investment: '投資帳戶',\n  other: '其他帳戶',\n};\n\nexport const AccountsManagement = React.memo(function AccountsManagement() {\n  const { accounts, updateAccount, deleteAccount } = useAccountingStore();\n  const [expandedAccount, setExpandedAccount] = useState<string | null>(null);\n\n  const handleToggleActive = (account_id: string, is_active: boolean) => {\n    updateAccount(account_id, { is_active: !is_active });\n  };\n\n  const handleDeleteAccount = (account_id: string, account_name: string) => {\n    if (confirm(`確定要刪除帳戶「${account_name}」嗎？這個操作無法復原。`)) {\n      deleteAccount(account_id);\n    }\n  };\n\n  // 按帳戶類型分組\n  const accountsByType = accounts.reduce((groups, account) => {\n    if (!groups[account.type]) {\n      groups[account.type] = [];\n    }\n    groups[account.type].push(account);\n    return groups;\n  }, {} as Record<string, typeof accounts>);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold text-morandi-primary\">帳戶管理</h3>\n        <div className=\"text-sm text-morandi-secondary\">\n          共 {accounts.length} 個帳戶 • 活躍 {accounts.filter(a => a.is_active).length} 個\n        </div>\n      </div>\n\n      {/* 帳戶列表 */}\n      <div className=\"space-y-8\">\n        {Object.entries(accountsByType).map(([type, accountsOfType]) => {\n          const Icon = accountTypeIcons[type as keyof typeof accountTypeIcons] || Wallet;\n          const typeLabel = accountTypeLabels[type as keyof typeof accountTypeLabels] || type;\n          const totalBalance = accountsOfType.reduce((sum, acc) => sum + acc.balance, 0);\n\n          return (\n            <div key={type} className=\"space-y-4\">\n              {/* 類型標題 */}\n              <div className=\"flex items-center justify-between p-4 bg-morandi-container/20 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Icon size={24} className=\"text-morandi-secondary\" />\n                  <div>\n                    <div className=\"font-semibold text-morandi-primary\">{typeLabel}</div>\n                    <div className=\"text-sm text-morandi-secondary\">{accountsOfType.length} 個帳戶</div>\n                  </div>\n                </div>\n                <div className={cn(\n                  \"text-xl font-bold\",\n                  totalBalance >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n                )}>\n                  {totalBalance >= 0 ? '+' : ''}NT$ {totalBalance.toLocaleString()}\n                </div>\n              </div>\n\n              {/* 該類型的帳戶卡片 */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {accountsOfType.map((account) => (\n                  <div\n                    key={account.id}\n                    className={cn(\n                      \"border rounded-xl p-6 transition-all duration-200 hover:shadow-lg\",\n                      account.is_active\n                        ? \"border-border bg-white hover:border-morandi-gold/50\"\n                        : \"border-morandi-container bg-morandi-container/30 opacity-75\"\n                    )}\n                  >\n                    {/* 帳戶標題 */}\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div\n                          className=\"w-4 h-4 rounded-full flex-shrink-0\"\n                          style={{ backgroundColor: account.color }}\n                        />\n                        <div>\n                          <div className=\"font-semibold text-morandi-primary\">{account.name}</div>\n                          {account.description && (\n                            <div className=\"text-sm text-morandi-secondary\">{account.description}</div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* 狀態指標 */}\n                      <div className=\"flex items-center space-x-1\">\n                        {account.is_active ? (\n                          <Eye size={16} className=\"text-morandi-green\" />\n                        ) : (\n                          <EyeOff size={16} className=\"text-morandi-secondary\" />\n                        )}\n                      </div>\n                    </div>\n\n                    {/* 餘額顯示 */}\n                    <div className=\"mb-4\">\n                      <div className=\"text-sm text-morandi-secondary mb-1\">\n                        {account.type === 'credit' ? '目前欠款' : '帳戶餘額'}\n                      </div>\n                      <div className={cn(\n                        \"text-2xl font-bold\",\n                        account.balance >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n                      )}>\n                        {account.balance >= 0 ? '+' : ''}NT$ {Math.abs(account.balance).toLocaleString()}\n                      </div>\n                    </div>\n\n                    {/* 信用卡額度資訊 */}\n                    {account.type === 'credit' && account.credit_limit && (\n                      <div className=\"mb-4 p-3 bg-morandi-container/20 rounded-lg\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"text-sm text-morandi-secondary\">信用額度</span>\n                          <span className=\"text-sm font-medium text-morandi-primary\">\n                            NT$ {account.credit_limit.toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-morandi-secondary\">可用額度</span>\n                          <span className=\"text-sm font-semibold text-morandi-blue\">\n                            NT$ {((account.credit_limit || 0) + account.balance).toLocaleString()}\n                          </span>\n                        </div>\n                        {/* 額度使用率條 */}\n                        <div className=\"mt-3\">\n                          <div className=\"flex justify-between text-xs text-morandi-secondary mb-1\">\n                            <span>使用率</span>\n                            <span>{(((Math.abs(account.balance) / (account.credit_limit || 1)) * 100)).toFixed(1)}%</span>\n                          </div>\n                          <div className=\"w-full bg-morandi-container/30 rounded-full h-2\">\n                            <div\n                              className={cn(\n                                \"h-2 rounded-full transition-all duration-300\",\n                                Math.abs(account.balance) / (account.credit_limit || 1) > 0.8\n                                  ? \"bg-morandi-red\"\n                                  : Math.abs(account.balance) / (account.credit_limit || 1) > 0.5\n                                  ? \"bg-morandi-gold\"\n                                  : \"bg-morandi-green\"\n                              )}\n                              style={{\n                                width: `${Math.min(((Math.abs(account.balance) / (account.credit_limit || 1)) * 100), 100)}%`\n                              }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* 操作按鈕 */}\n                    <div className=\"flex items-center justify-between pt-4 border-t border-morandi-container\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleToggleActive(account.id, account.is_active)}\n                          className={cn(\n                            \"text-xs\",\n                            account.is_active\n                              ? \"text-morandi-secondary hover:text-morandi-red\"\n                              : \"text-morandi-secondary hover:text-morandi-green\"\n                          )}\n                        >\n                          {account.is_active ? (\n                            <>\n                              <EyeOff size={12} className=\"mr-1\" />\n                              隱藏\n                            </>\n                          ) : (\n                            <>\n                              <Eye size={12} className=\"mr-1\" />\n                              顯示\n                            </>\n                          )}\n                        </Button>\n                      </div>\n\n                      <div className=\"flex space-x-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"text-xs text-morandi-secondary hover:text-morandi-primary\"\n                        >\n                          <Edit size={12} className=\"mr-1\" />\n                          編輯\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteAccount(account.id, account.name)}\n                          className=\"text-xs text-morandi-secondary hover:text-morandi-red\"\n                        >\n                          <Trash2 size={12} className=\"mr-1\" />\n                          刪除\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* 建立日期 */}\n                    <div className=\"mt-3 text-xs text-morandi-secondary\">\n                      建立於 {new Date(account.created_at).toLocaleDateString('zh-TW')}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        })}\n\n        {accounts.length === 0 && (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <Wallet size={24} className=\"mx-auto mb-4 opacity-50\" />\n            <p className=\"text-lg mb-2\">還沒有任何帳戶</p>\n            <p className=\"text-sm\">點擊右上角的「新增帳戶」開始建立你的第一個錢包吧！</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/accounting/accounts-overview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/accounting/add-account-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3692,3695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3692,3695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { useAccountingStore } from '@/stores/accounting-store';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Wallet,\n  CreditCard,\n  PiggyBank,\n  TrendingUp,\n  Building2\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useEnterSubmit } from '@/hooks/useEnterSubmit';\n\ninterface AddAccountDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst accountTypes = [\n  { id: 'cash', label: '現金', icon: Wallet, color: '#10B981', description: '現金錢包、零錢' },\n  { id: 'bank', label: '銀行帳戶', icon: Building2, color: '#3B82F6', description: '儲蓄帳戶、活期存款' },\n  { id: 'credit', label: '信用卡', icon: CreditCard, color: '#EF4444', description: '信用卡、信貸額度' },\n  { id: 'investment', label: '投資帳戶', icon: TrendingUp, color: '#8B5CF6', description: '股票、基金、投資' },\n  { id: 'other', label: '其他帳戶', icon: PiggyBank, color: '#F59E0B', description: '數位錢包、其他資產' },\n];\n\nconst predefinedColors = [\n  '#10B981', // 綠色\n  '#3B82F6', // 藍色\n  '#EF4444', // 紅色\n  '#8B5CF6', // 紫色\n  '#F59E0B', // 橘色\n  '#EC4899', // 粉紅\n  '#6B7280', // 灰色\n  '#84CC16', // 萊姆綠\n];\n\nexport function AddAccountDialog({ isOpen, onClose }: AddAccountDialogProps) {\n  const { addAccount } = useAccountingStore();\n  const [formData, setFormData] = useState<{\n    name: string;\n    type: 'cash' | 'bank' | 'credit' | 'investment' | 'other';\n    balance: string;\n    credit_limit: string;\n    color: string;\n    description: string;\n  }>({\n    name: '',\n    type: 'cash',\n    balance: '',\n    credit_limit: '', // 信用額度\n    color: '#10B981',\n    description: '',\n  });\n\n  const handleSubmit = () => {\n    if (!formData.name.trim()) return;\n\n    const selectedType = accountTypes.find(t => t.id === formData.type);\n\n    const accountData = {\n      name: formData.name.trim(),\n      type: formData.type,\n      balance: parseFloat(formData.balance) || 0,\n      currency: 'TWD',\n      icon: selectedType?.icon.name || 'Wallet',\n      color: formData.color,\n      is_active: true,\n      description: formData.description.trim(),\n      // 信用卡相關欄位\n      ...(formData.type === 'credit' && {\n        credit_limit: parseFloat(formData.credit_limit) || 0,\n        available_credit: (parseFloat(formData.credit_limit) || 0) + (parseFloat(formData.balance) || 0),\n      }),\n    };\n\n    addAccount(accountData);\n    resetForm();\n    onClose();\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      type: 'cash',\n      balance: '',\n      credit_limit: '',\n      color: '#10B981',\n      description: '',\n    });\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  const selectedAccountType = accountTypes.find(t => t.id === formData.type);\n  const { handleKeyDown, compositionProps } = useEnterSubmit(handleSubmit);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>新增帳戶</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* 帳戶類型選擇 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary mb-3 block\">帳戶類型</label>\n            <div className=\"grid grid-cols-1 gap-3\">\n              {accountTypes.map((type) => {\n                const Icon = type.icon;\n                const isSelected = formData.type === type.id;\n                return (\n                  <button\n                    key={type.id}\n                    onClick={() => setFormData(prev => ({\n                      ...prev,\n                      type: type.id as any,\n                      color: type.color\n                    }))}\n                    className={cn(\n                      'p-4 rounded-lg border-2 transition-all flex items-center space-x-4 text-left',\n                      isSelected\n                        ? 'border-morandi-gold bg-morandi-gold/5'\n                        : 'border-morandi-container hover:border-morandi-container-hover'\n                    )}\n                  >\n                    <div\n                      className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white\"\n                      style={{ backgroundColor: type.color }}\n                    >\n                      <Icon size={20} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-morandi-primary\">{type.label}</div>\n                      <div className=\"text-sm text-morandi-secondary\">{type.description}</div>\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* 帳戶名稱 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">帳戶名稱</label>\n            <Input\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              onKeyDown={handleKeyDown}\n              {...compositionProps}\n              placeholder={`輸入${selectedAccountType?.label}名稱`}\n              className=\"mt-1\"\n            />\n          </div>\n\n          {/* 初始餘額 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">\n              {formData.type === 'credit' ? '目前欠款金額' : '初始餘額'}\n            </label>\n            <div className=\"mt-1 relative\">\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary\">NT$</span>\n              <Input\n                type=\"number\"\n                value={formData.balance}\n                onChange={(e) => setFormData(prev => ({ ...prev, balance: e.target.value }))}\n                onKeyDown={handleKeyDown}\n                {...compositionProps}\n                placeholder=\"0\"\n                className=\"pl-12\"\n                step=\"1\"\n              />\n            </div>\n            {formData.type === 'credit' && (\n              <div className=\"text-xs text-morandi-secondary mt-1\">\n                💡 信用卡請輸入負數（如：-5000 表示欠款5000元）\n              </div>\n            )}\n          </div>\n\n          {/* 信用卡額度 */}\n          {formData.type === 'credit' && (\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">信用額度</label>\n              <div className=\"mt-1 relative\">\n                <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary\">NT$</span>\n                <Input\n                  type=\"number\"\n                  value={formData.credit_limit}\n                  onChange={(e) => setFormData(prev => ({ ...prev, credit_limit: e.target.value }))}\n                  onKeyDown={handleKeyDown}\n                  {...compositionProps}\n                  placeholder=\"50000\"\n                  className=\"pl-12\"\n                  min=\"0\"\n                  step=\"1000\"\n                />\n              </div>\n              <div className=\"text-xs text-morandi-secondary mt-1\">\n                設定這張信用卡的總額度限制\n              </div>\n            </div>\n          )}\n\n          {/* 顏色選擇 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">顏色標識</label>\n            <div className=\"mt-2 flex flex-wrap gap-3\">\n              {predefinedColors.map((color) => (\n                <button\n                  key={color}\n                  onClick={() => setFormData(prev => ({ ...prev, color }))}\n                  className={cn(\n                    'w-8 h-8 rounded-full border-2 transition-all',\n                    formData.color === color\n                      ? 'border-morandi-primary scale-110'\n                      : 'border-morandi-container hover:border-morandi-container-hover'\n                  )}\n                  style={{ backgroundColor: color }}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* 描述 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">備註說明</label>\n            <Input\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              onKeyDown={handleKeyDown}\n              {...compositionProps}\n              placeholder=\"輸入帳戶備註（選填）\"\n              className=\"mt-1\"\n            />\n          </div>\n\n          {/* 預覽卡片 */}\n          {formData.name && (\n            <div className=\"p-4 bg-morandi-container/10 rounded-lg\">\n              <div className=\"text-sm font-medium text-morandi-secondary mb-2\">預覽</div>\n              <div className=\"flex items-center space-x-3\">\n                <div\n                  className=\"w-4 h-4 rounded-full\"\n                  style={{ backgroundColor: formData.color }}\n                />\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-morandi-primary\">{formData.name}</div>\n                  {formData.description && (\n                    <div className=\"text-sm text-morandi-secondary\">{formData.description}</div>\n                  )}\n                </div>\n                <div className={cn(\n                  \"font-semibold\",\n                  parseFloat(formData.balance) >= 0 ? \"text-morandi-green\" : \"text-morandi-red\"\n                )}>\n                  {parseFloat(formData.balance) >= 0 ? '+' : ''}\n                  NT$ {Math.abs(parseFloat(formData.balance) || 0).toLocaleString()}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* 按鈕 */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={handleClose}>\n              取消\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={!formData.name.trim()}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              建立帳戶\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/accounting/add-transaction-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3911,3914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3911,3914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { useAccountingStore } from '@/stores/accounting-store';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { ArrowUpRight, ArrowDownRight, ArrowRightLeft } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useEnterSubmit } from '@/hooks/useEnterSubmit';\n\ninterface AddTransactionDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddTransactionDialog({ isOpen, onClose }: AddTransactionDialogProps) {\n  const { accounts, categories, addTransaction } = useAccountingStore();\n  const [transactionType, setTransactionType] = useState<'income' | 'expense' | 'transfer'>('expense');\n  const [formData, setFormData] = useState({\n    account_id: accounts.length > 0 ? accounts[0].id : '',\n    category_id: '',\n    amount: '',\n    description: '',\n    date: new Date().toISOString().split('T')[0],\n    to_account_id: '', // 轉帳目標帳戶\n  });\n\n  const handleSubmit = () => {\n    if (!formData.account_id || !formData.amount || (!formData.category_id && transactionType !== 'transfer')) {\n      return;\n    }\n\n    const account = accounts.find(acc => acc.id === formData.account_id);\n    const category = categories.find(cat => cat.id === formData.category_id);\n    const toAccount = formData.to_account_id ? accounts.find(acc => acc.id === formData.to_account_id) : undefined;\n\n    const transactionData = {\n      account_id: formData.account_id,\n      account_name: account?.name || '',\n      category_id: transactionType === 'transfer' ? categories.find(c => c.type === 'transfer')?.id || '' : formData.category_id,\n      category_name: transactionType === 'transfer' ? '轉帳' : (category?.name || ''),\n      type: transactionType,\n      amount: parseFloat(formData.amount),\n      currency: 'TWD',\n      description: formData.description,\n      date: formData.date,\n      ...(transactionType === 'transfer' && {\n        to_account_id: formData.to_account_id,\n        to_account_name: toAccount?.name || '',\n      }),\n    };\n\n    addTransaction(transactionData);\n    resetForm();\n    onClose();\n  };\n\n  const resetForm = () => {\n    setFormData({\n      account_id: '',\n      category_id: '',\n      amount: '',\n      description: '',\n      date: new Date().toISOString().split('T')[0],\n      to_account_id: '',\n    });\n    setTransactionType('expense');\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  const filteredCategories = categories.filter(category =>\n    transactionType === 'transfer' ? category.type === 'transfer' : category.type === transactionType\n  );\n\n  const transactionTypes = [\n    { id: 'income', label: '收入', icon: ArrowUpRight, color: 'text-morandi-green', bgColor: 'bg-morandi-green/10' },\n    { id: 'expense', label: '支出', icon: ArrowDownRight, color: 'text-morandi-red', bgColor: 'bg-morandi-red/10' },\n    { id: 'transfer', label: '轉帳', icon: ArrowRightLeft, color: 'text-morandi-blue', bgColor: 'bg-morandi-blue/10' },\n  ];\n\n  const { handleKeyDown, compositionProps } = useEnterSubmit(handleSubmit);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>新增交易</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* 交易類型選擇 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary mb-3 block\">交易類型</label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {transactionTypes.map((type) => {\n                const Icon = type.icon;\n                const isSelected = transactionType === type.id;\n                return (\n                  <button\n                    key={type.id}\n                    onClick={() => setTransactionType(type.id as any)}\n                    className={cn(\n                      'p-3 rounded-lg border-2 transition-all flex flex-col items-center space-y-2',\n                      isSelected\n                        ? `border-current ${type.color} ${type.bgColor}`\n                        : 'border-morandi-container hover:border-morandi-container-hover text-morandi-secondary'\n                    )}\n                  >\n                    <Icon size={24} />\n                    <span className=\"text-sm font-medium\">{type.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* 帳戶選擇 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">\n              {transactionType === 'transfer' ? '從帳戶' : '帳戶'}\n            </label>\n            <select\n              value={formData.account_id}\n              onChange={(e) => setFormData(prev => ({ ...prev, account_id: e.target.value }))}\n              className=\"mt-1 w-full p-3 border border-border rounded-md bg-background\"\n            >\n              <option value=\"\">請選擇帳戶</option>\n              {accounts.map((account) => (\n                <option key={account.id} value={account.id}>\n                  {account.name} (NT$ {account.balance.toLocaleString()})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* 轉帳目標帳戶 */}\n          {transactionType === 'transfer' && (\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">轉入帳戶</label>\n              <select\n                value={formData.to_account_id}\n                onChange={(e) => setFormData(prev => ({ ...prev, to_account_id: e.target.value }))}\n                className=\"mt-1 w-full p-3 border border-border rounded-md bg-background\"\n              >\n                <option value=\"\">請選擇目標帳戶</option>\n                {accounts\n                  .filter(account => account.id !== formData.account_id)\n                  .map((account) => (\n                    <option key={account.id} value={account.id}>\n                      {account.name} (NT$ {account.balance.toLocaleString()})\n                    </option>\n                  ))}\n              </select>\n            </div>\n          )}\n\n          {/* 分類選擇 */}\n          {transactionType !== 'transfer' && (\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">分類</label>\n              <select\n                value={formData.category_id}\n                onChange={(e) => setFormData(prev => ({ ...prev, category_id: e.target.value }))}\n                className=\"mt-1 w-full p-3 border border-border rounded-md bg-background\"\n              >\n                <option value=\"\">請選擇分類</option>\n                {filteredCategories.map((category) => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          {/* 金額 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">金額</label>\n            <div className=\"mt-1 relative\">\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary\">NT$</span>\n              <Input\n                type=\"number\"\n                value={formData.amount}\n                onChange={(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}\n                onKeyDown={handleKeyDown}\n                {...compositionProps}\n                placeholder=\"0\"\n                className=\"pl-12 text-lg font-semibold\"\n                min=\"0\"\n                step=\"1\"\n              />\n            </div>\n          </div>\n\n          {/* 日期 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">日期</label>\n            <Input\n              type=\"date\"\n              value={formData.date}\n              onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n              className=\"mt-1\"\n            />\n          </div>\n\n          {/* 備註 */}\n          <div>\n            <label className=\"text-sm font-medium text-morandi-primary\">備註</label>\n            <Input\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              onKeyDown={handleKeyDown}\n              {...compositionProps}\n              placeholder=\"輸入備註（選填）\"\n              className=\"mt-1\"\n            />\n          </div>\n\n          {/* 按鈕 */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={handleClose}>\n              取消\n            </Button>\n            <Button\n              onClick={handleSubmit}\n              disabled={!formData.account_id || !formData.amount || (!formData.category_id && transactionType !== 'transfer') || (transactionType === 'transfer' && !formData.to_account_id)}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              新增交易\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/accounting/transaction-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'categories' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'accounts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":45},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":66,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":66,"endColumn":75,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2082,2213],"text":"{ const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        matchesDate = transactionDate >= weekAgo;\n        break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3262,3265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3262,3265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3710,3713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3710,3713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { useAccountingStore } from '@/stores/accounting-store';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  ArrowUpRight,\n  ArrowDownRight,\n  ArrowRightLeft,\n  Calendar,\n  Filter,\n  Search,\n  Trash2\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst transactionTypeIcons = {\n  income: ArrowUpRight,\n  expense: ArrowDownRight,\n  transfer: ArrowRightLeft,\n};\n\nexport const TransactionList = React.memo(function TransactionList() {\n  const { transactions, categories, accounts, deleteTransaction } = useAccountingStore();\n  const [searchText, setSearchText] = useState('');\n  const [filterType, setFilterType] = useState<'all' | 'income' | 'expense' | 'transfer'>('all');\n  const [dateRange, setDateRange] = useState<'all' | 'today' | 'week' | 'month'>('month');\n\n  const handleDeleteTransaction = (transactionId: string, description: string, amount: number) => {\n    const confirmMessage = `確定要刪除此筆交易嗎？\\n\\n金額：NT$ ${amount.toLocaleString()}\\n說明：${description || '無'}\\n\\n此操作會影響帳戶餘額統計。`;\n\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      deleteTransaction(transactionId);\n    } catch (err) {\n      console.error('刪除交易失敗:', err);\n      alert('刪除失敗，請稍後再試');\n    }\n  };\n\n  // 篩選交易\n  const filteredTransactions = transactions.filter(transaction => {\n    // 搜尋篩選\n    const matchesSearch = !searchText ||\n      transaction.description?.toLowerCase().includes(searchText.toLowerCase()) ||\n      transaction.category_name.toLowerCase().includes(searchText.toLowerCase()) ||\n      transaction.account_name.toLowerCase().includes(searchText.toLowerCase());\n\n    // 類型篩選\n    const matchesType = filterType === 'all' || transaction.type === filterType;\n\n    // 日期篩選\n    let matchesDate = true;\n    const transactionDate = new Date(transaction.date);\n    const now = new Date();\n\n    switch (dateRange) {\n      case 'today':\n        matchesDate = transactionDate.toDateString() === now.toDateString();\n        break;\n      case 'week':\n        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        matchesDate = transactionDate >= weekAgo;\n        break;\n      case 'month':\n        matchesDate = transactionDate.getMonth() === now.getMonth() &&\n                     transactionDate.getFullYear() === now.getFullYear();\n        break;\n    }\n\n    return matchesSearch && matchesType && matchesDate;\n  });\n\n  // 按日期排序（最新的在前）\n  const sortedTransactions = filteredTransactions.sort((a, b) =>\n    new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 篩選和搜尋 */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary\" size={16} />\n          <Input\n            placeholder=\"搜尋交易...\"\n            value={searchText}\n            onChange={(e) => setSearchText(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        <div className=\"flex gap-2\">\n          {/* 類型篩選 */}\n          <select\n            value={filterType}\n            onChange={(e) => setFilterType(e.target.value as any)}\n            className=\"px-3 py-2 border border-border rounded-md bg-background text-sm\"\n          >\n            <option value=\"all\">全部類型</option>\n            <option value=\"income\">收入</option>\n            <option value=\"expense\">支出</option>\n            <option value=\"transfer\">轉帳</option>\n          </select>\n\n          {/* 日期篩選 */}\n          <select\n            value={dateRange}\n            onChange={(e) => setDateRange(e.target.value as any)}\n            className=\"px-3 py-2 border border-border rounded-md bg-background text-sm\"\n          >\n            <option value=\"all\">全部時間</option>\n            <option value=\"today\">今天</option>\n            <option value=\"week\">本週</option>\n            <option value=\"month\">本月</option>\n          </select>\n        </div>\n      </div>\n\n      {/* 統計摘要 */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 p-4 bg-morandi-container/10 rounded-lg\">\n        <div className=\"text-center\">\n          <div className=\"text-sm text-morandi-secondary\">收入</div>\n          <div className=\"text-lg font-semibold text-morandi-green\">\n            +NT$ {filteredTransactions\n              .filter(t => t.type === 'income')\n              .reduce((sum, t) => sum + t.amount, 0)\n              .toLocaleString()}\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-sm text-morandi-secondary\">支出</div>\n          <div className=\"text-lg font-semibold text-morandi-red\">\n            -NT$ {filteredTransactions\n              .filter(t => t.type === 'expense')\n              .reduce((sum, t) => sum + t.amount, 0)\n              .toLocaleString()}\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-sm text-morandi-secondary\">結餘</div>\n          <div className={cn(\n            \"text-lg font-semibold\",\n            (filteredTransactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0) -\n             filteredTransactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0)) >= 0\n             ? \"text-morandi-green\" : \"text-morandi-red\"\n          )}>\n            {(filteredTransactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0) -\n              filteredTransactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0)) >= 0 ? '+' : ''}\n            NT$ {(filteredTransactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0) -\n                  filteredTransactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0))\n                  .toLocaleString()}\n          </div>\n        </div>\n      </div>\n\n      {/* 交易列表 */}\n      <div className=\"space-y-2\">\n        {sortedTransactions.length === 0 ? (\n          <div className=\"space-y-6\">\n            {/* 空狀態提示 */}\n            <div className=\"text-center py-8 text-morandi-secondary\">\n              <Calendar size={48} className=\"mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium text-morandi-primary mb-2\">沒有找到相符的交易記錄</p>\n              <p className=\"text-sm text-morandi-secondary\">\n                {searchText || filterType !== 'all' || dateRange !== 'all'\n                  ? '嘗試調整篩選條件或新增交易記錄'\n                  : '開始新增收入、支出或轉帳記錄'}\n              </p>\n            </div>\n\n            {/* 示例交易記錄 */}\n            <div className=\"border-t border-border pt-6\">\n              <h3 className=\"text-lg font-medium text-morandi-primary mb-4\">預覽：交易記錄樣式</h3>\n              <div className=\"space-y-2\">\n                {[\n                  {\n                    type: 'income',\n                    category_name: '薪資收入',\n                    account_name: '台幣現金',\n                    description: '2024年1月薪水',\n                    amount: 45000,\n                    date: new Date().toLocaleDateString('zh-TW')\n                  },\n                  {\n                    type: 'expense',\n                    category_name: '餐費',\n                    account_name: '信用卡',\n                    description: '午餐 - 便當',\n                    amount: 120,\n                    date: new Date().toLocaleDateString('zh-TW')\n                  },\n                  {\n                    type: 'transfer',\n                    category_name: '轉帳',\n                    account_name: '銀行帳戶',\n                    to_account_name: '投資帳戶',\n                    description: '定期投資',\n                    amount: 10000,\n                    date: new Date().toLocaleDateString('zh-TW')\n                  },\n                  {\n                    type: 'expense',\n                    category_name: '交通',\n                    account_name: '悠遊卡',\n                    description: '捷運通勤',\n                    amount: 30,\n                    date: new Date().toLocaleDateString('zh-TW')\n                  }\n                ].map((transaction, index) => {\n                  const Icon = transactionTypeIcons[transaction.type as keyof typeof transactionTypeIcons];\n                  const isIncome = transaction.type === 'income';\n                  const isExpense = transaction.type === 'expense';\n\n                  return (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 border border-border rounded-lg opacity-60\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={cn(\n                          \"w-10 h-10 rounded-full flex items-center justify-center\",\n                          isIncome && \"bg-morandi-green/10\",\n                          isExpense && \"bg-morandi-red/10\",\n                          transaction.type === 'transfer' && \"bg-morandi-blue/10\"\n                        )}>\n                          <Icon className={cn(\n                            \"w-5 h-5\",\n                            isIncome && \"text-morandi-green\",\n                            isExpense && \"text-morandi-red\",\n                            transaction.type === 'transfer' && \"text-morandi-blue\"\n                          )} />\n                        </div>\n\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium text-morandi-primary\">\n                              {transaction.category_name}\n                            </span>\n                            <span className=\"text-sm text-morandi-secondary\">\n                              • {transaction.account_name}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-morandi-secondary\">\n                            {transaction.description || '無備註'}\n                          </div>\n                          <div className=\"text-xs text-morandi-secondary\">\n                            {transaction.date}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"text-right\">\n                        <div className={cn(\n                          \"text-lg font-semibold\",\n                          isIncome && \"text-morandi-green\",\n                          isExpense && \"text-morandi-red\",\n                          transaction.type === 'transfer' && \"text-morandi-blue\"\n                        )}>\n                          {isIncome && '+'}\n                          {isExpense && '-'}\n                          {transaction.type === 'transfer' && ''}\n                          NT$ {transaction.amount.toLocaleString()}\n                        </div>\n                        {transaction.type === 'transfer' && transaction.to_account_name && (\n                          <div className=\"text-xs text-morandi-secondary\">\n                            轉至 {transaction.to_account_name}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <div className=\"mt-6 p-4 bg-morandi-container/10 rounded-lg text-center\">\n                <p className=\"text-sm text-morandi-secondary\">\n                  💡 以上為交易記錄樣式預覽，實際資料建立後將顯示真實內容\n                </p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          sortedTransactions.map((transaction) => {\n            const Icon = transactionTypeIcons[transaction.type];\n            const isIncome = transaction.type === 'income';\n            const isExpense = transaction.type === 'expense';\n\n            return (\n              <div\n                key={transaction.id}\n                className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-morandi-container/20 transition-colors group\"\n              >\n                <div className=\"flex items-center space-x-4 flex-1\">\n                  <div className={cn(\n                    \"w-10 h-10 rounded-full flex items-center justify-center\",\n                    isIncome && \"bg-morandi-green/10\",\n                    isExpense && \"bg-morandi-red/10\",\n                    transaction.type === 'transfer' && \"bg-morandi-blue/10\"\n                  )}>\n                    <Icon className={cn(\n                      \"w-5 h-5\",\n                      isIncome && \"text-morandi-green\",\n                      isExpense && \"text-morandi-red\",\n                      transaction.type === 'transfer' && \"text-morandi-blue\"\n                    )} />\n                  </div>\n\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-medium text-morandi-primary\">\n                        {transaction.category_name}\n                      </span>\n                      <span className=\"text-sm text-morandi-secondary\">\n                        • {transaction.account_name}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-morandi-secondary\">\n                      {transaction.description || '無備註'}\n                    </div>\n                    <div className=\"text-xs text-morandi-secondary\">\n                      {new Date(transaction.date).toLocaleDateString('zh-TW')}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"text-right\">\n                    <div className={cn(\n                      \"text-lg font-semibold\",\n                      isIncome && \"text-morandi-green\",\n                      isExpense && \"text-morandi-red\",\n                      transaction.type === 'transfer' && \"text-morandi-blue\"\n                    )}>\n                      {isIncome && '+'}\n                      {isExpense && '-'}\n                      {transaction.type === 'transfer' && ''}\n                      NT$ {transaction.amount.toLocaleString()}\n                    </div>\n                    {transaction.type === 'transfer' && transaction.to_account_name && (\n                      <div className=\"text-xs text-morandi-secondary\">\n                        轉至 {transaction.to_account_name}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* 刪除按鈕 - 懸停顯示 */}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteTransaction(transaction.id, transaction.description || '', transaction.amount)}\n                    className=\"h-8 w-8 p-0 text-morandi-red hover:bg-morandi-red/10 opacity-0 group-hover:opacity-100 transition-opacity\"\n                    title=\"刪除交易\"\n                  >\n                    <Trash2 size={14} />\n                  </Button>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n\n      {/* 載入更多按鈕 */}\n      {sortedTransactions.length > 0 && (\n        <div className=\"text-center\">\n          <Button variant=\"outline\" size=\"sm\">\n            載入更多交易\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/calendar/calendar-settings-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/common/virtual-list.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/database-init-provider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isInitialized' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":30,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * 資料庫初始化 Provider\n *\n * 在應用啟動時自動檢查並初始化 IndexedDB\n * 確保 William 管理員帳號存在\n */\n\nimport { useEffect, useState } from 'react';\nimport { DatabaseInitializer } from '@/lib/db/database-initializer';\n\ninterface DatabaseInitProviderProps {\n  children: React.ReactNode;\n}\n\nexport function DatabaseInitProvider({ children }: DatabaseInitProviderProps) {\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    async function initializeDatabase() {\n      try {\n        await DatabaseInitializer.ensureInitialized();\n        setIsInitialized(true);\n\n        // 載入驗證工具到 window（開發用）\n        if (process.env.NODE_ENV === 'development') {\n          try {\n            await import('@/lib/db/verify-and-fix');\n          } catch (e) {\n            // 忽略錯誤\n          }\n        }\n      } catch (error) {\n        console.error('❌ 資料庫初始化失敗:', error);\n        // 即使失敗也讓應用繼續運行\n        setIsInitialized(true);\n      }\n    }\n\n    initializeDatabase();\n  }, []);\n\n  // 不顯示 loading 畫面，讓應用立即渲染\n  // 初始化在背景執行\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/dev-auto-login.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[979,982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[979,982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * 開發模式自動登入\n * 開發環境下自動設定管理員身份\n */\n\nimport { useEffect } from 'react';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { useRouter } from 'next/navigation';\n\nexport function DevAutoLogin() {\n  const router = useRouter();\n  const { user, login } = useAuthStore();\n  \n  useEffect(() => {\n    // 開發模式 + 沒有登入 = 自動登入\n    if (process.env.NODE_ENV === 'development' && !user) {\n      console.log('🔧 開發模式：自動登入管理員');\n      \n      // 設定開發用戶\n      const devUser = {\n        id: '1',\n        employee_number: 'william01',\n        english_name: 'William',\n        display_name: 'William',\n        personal_info: {},\n        job_info: {\n          department: 'Management',\n          position: 'Administrator',\n        },\n        salary_info: {},\n        permissions: ['admin'], // 管理員權限，所有功能都能看到\n        attendance: { leave_records: [], overtime_records: [] },\n        contracts: [],\n        status: 'active' as const\n      };\n\n      // 登入\n      login(devUser as any);\n      \n      // 導向旅遊團頁面\n      router.push('/tours');\n    }\n  }, [user, login, router]);\n  \n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/editor/ExportButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[62,65],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[62,65],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[410,413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[410,413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1985,1988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1985,1988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nexport function ExportButton({ data }: { data: any }) {\n  const exportHTML = () => {\n    const html = generateFullHTML(data);\n    const blob = new Blob([html], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${data.tourCode || 'tour'}.html`;\n    a.click();\n  };\n\n  const generateFullHTML = (data: any) => {\n    return `\n<!DOCTYPE html>\n<html lang=\"zh-TW\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${data.title} - Venturo Travel</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n</head>\n<body>\n    <!-- Hero Section -->\n    <section class=\"relative h-screen bg-gradient-to-br from-purple-900 to-blue-900 text-white\">\n      <div class=\"absolute inset-0 bg-black/30\"></div>\n      <div class=\"relative z-10 h-full flex items-center justify-center\">\n        <div class=\"text-center px-4\">\n          <h1 class=\"text-5xl md:text-7xl font-bold mb-4\">${data.title}</h1>\n          <p class=\"text-xl md:text-2xl mb-8 opacity-90\">${data.subtitle}</p>\n          <div class=\"flex flex-wrap justify-center gap-6\">\n            <div class=\"bg-white/20 backdrop-blur px-6 py-3 rounded-full\">\n              <div class=\"text-sm opacity-80\">出發日期</div>\n              <div class=\"text-xl font-bold\">${data.departureDate}</div>\n            </div>\n            <div class=\"bg-white/20 backdrop-blur px-6 py-3 rounded-full\">\n              <div class=\"text-sm opacity-80\">團費</div>\n              <div class=\"text-xl font-bold\">NT$ ${data.price?.toLocaleString()}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <!-- Attractions -->\n    <section class=\"py-20 bg-gray-50\">\n      <div class=\"max-w-7xl mx-auto px-4\">\n        <h2 class=\"text-4xl font-bold text-center mb-12\">精選景點</h2>\n        <div class=\"grid md:grid-cols-3 gap-6\">\n          ${data.attractions.map((a: any) => `\n            <div class=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n              <div class=\"h-48 bg-gradient-to-br from-blue-400 to-purple-400\"></div>\n              <div class=\"p-6\">\n                <h3 class=\"text-xl font-bold mb-2\">${a.title}</h3>\n                <p class=\"text-gray-600\">${a.description}</p>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    </section>\n\n    <!-- Leader Info -->\n    <section class=\"py-12 bg-white\">\n      <div class=\"max-w-4xl mx-auto px-4\">\n        <div class=\"bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl p-8\">\n          <h3 class=\"text-2xl font-bold mb-6\">領隊資訊</h3>\n          <div class=\"grid md:grid-cols-3 gap-4\">\n            <div>\n              <div class=\"text-sm text-gray-600\">領隊姓名</div>\n              <div class=\"font-bold\">${data.leader.name}</div>\n            </div>\n            <div>\n              <div class=\"text-sm text-gray-600\">國內電話</div>\n              <div class=\"font-bold\">${data.leader.phone}</div>\n            </div>\n            <div>\n              <div class=\"text-sm text-gray-600\">國外電話</div>\n              <div class=\"font-bold\">${data.leader.overseasPhone}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n</body>\n</html>\n    `;\n  };\n\n  return (\n    <button\n      onClick={exportHTML}\n      className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600\"\n    >\n      📥 匯出 HTML\n    </button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/editor/PublishButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[241,244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[241,244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[685,688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[685,688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useItineraryStore } from \"@/stores\";\nimport { useAuthStore } from \"@/stores/auth-store\";\nimport { useRouter } from \"next/navigation\";\n\nexport function PublishButton({ data }: { data: any }) {\n  const [saving, setSaving] = useState(false);\n  const { create, update } = useItineraryStore();\n  const { user } = useAuthStore();\n  const router = useRouter();\n\n  const saveItinerary = async () => {\n    setSaving(true);\n\n    try {\n      console.log('🔍 準備存檔的原始資料:', data);\n\n      // 清理資料：移除 React 組件（iconComponent）避免序列化錯誤\n      const cleanedData = {\n        ...data,\n        features: data.features?.map(({ iconComponent, ...rest }: any) => rest),\n      };\n\n      console.log('🧹 清理後的資料:', cleanedData);\n\n      // 如果有 ID 就更新，沒有就新增\n      if (data.id) {\n        await update(data.id, cleanedData);\n        alert('✅ 更新行程表成功！');\n      } else {\n        const newItinerary = await create(cleanedData);\n        alert('✅ 儲存行程表成功！');\n        // 新增後跳轉到編輯頁面\n        if (newItinerary && newItinerary.id) {\n          router.replace(`/itinerary/${newItinerary.id}`);\n        }\n      }\n    } catch (error) {\n      console.error('儲存失敗:', error);\n      alert('❌ 儲存失敗，請稍後再試');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const isEditMode = !!data.id;\n\n  return (\n    <button\n      onClick={saveItinerary}\n      disabled={saving}\n      className=\"px-4 py-2 bg-morandi-gold hover:bg-morandi-gold-hover text-white rounded-lg text-sm font-medium disabled:opacity-50 transition-colors\"\n    >\n      {saving ? \"儲存中...\" : isEditMode ? \"💾 更新行程表\" : \"💾 存檔行程表\"}\n    </button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/editor/TourForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10348,10351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10348,10351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10370,10373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10370,10373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'selectedCountry'. Either include it or remove the dependency array.","line":224,"column":6,"nodeType":"ArrayExpression","endLine":224,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [data.country, countryNameToCode, selectedCountry]","fix":{"range":[11949,11982],"text":"[data.country, countryNameToCode, selectedCountry]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12031,12034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12031,12034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12327,12330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12327,12330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13629,13632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13629,13632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14206,14209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14206,14209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14809,14812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14809,14812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15118,15121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15118,15121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15167,15170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15167,15170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16204,16207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16204,16207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":382,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17096,17099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17096,17099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":693,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":693,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30288,30291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30288,30291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":752,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":752,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32765,32768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32765,32768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":875,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":875,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38000,38003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38000,38003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":959,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":959,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41575,41578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41575,41578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from \"react\";\nimport { useAuthStore } from \"@/stores/auth-store\";\nimport { useRegionStore } from \"@/stores\";\nimport {\n  IconBuilding,\n  IconToolsKitchen2,\n  IconSparkles,\n  IconCalendar,\n  IconPlane,\n  IconMapPin,\n} from \"@tabler/icons-react\";\n\nconst iconOptions = [\n  { value: \"IconBuilding\", label: \"🏨 建築/飯店\", component: IconBuilding },\n  { value: \"IconToolsKitchen2\", label: \"🍽️ 餐食\", component: IconToolsKitchen2 },\n  { value: \"IconSparkles\", label: \"✨ 特色\", component: IconSparkles },\n  { value: \"IconCalendar\", label: \"📅 行程\", component: IconCalendar },\n  { value: \"IconPlane\", label: \"✈️ 航班\", component: IconPlane },\n  { value: \"IconMapPin\", label: \"📍 景點\", component: IconMapPin },\n];\n\n// 城市圖片對照表（擴充版）\nconst cityImages: Record<string, string> = {\n  // 日本\n  \"東京\": \"https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=1200&q=75&auto=format&fit=crop\",\n  \"京都\": \"https://images.unsplash.com/photo-1493976040374-85c8e12f0c0e?w=1200&q=75&auto=format&fit=crop\",\n  \"大阪\": \"https://images.unsplash.com/photo-1590559899731-a382839e5549?w=1200&q=75&auto=format&fit=crop\",\n  \"札幌\": \"https://images.unsplash.com/photo-1560932124-d6095cd5d5d7?w=1200&q=75&auto=format&fit=crop\",\n  \"沖繩\": \"https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=1200&q=75&auto=format&fit=crop\",\n  \"名古屋\": \"https://images.unsplash.com/photo-1583499976516-20fdb6a0d463?w=1200&q=75&auto=format&fit=crop\",\n  \"福岡\": \"https://images.unsplash.com/photo-1545569341-9eb8b30979d9?w=1200&q=75&auto=format&fit=crop\",\n  \"廣島\": \"https://images.unsplash.com/photo-1578469550956-0e16b69c6a3d?w=1200&q=75&auto=format&fit=crop\",\n\n  // 中國大陸\n  \"北京\": \"https://images.unsplash.com/photo-1508804185872-d7badad00f7d?w=1200&q=75&auto=format&fit=crop\",\n  \"上海\": \"https://images.unsplash.com/photo-1545893835-abaa50cbe628?w=1200&q=75&auto=format&fit=crop\",\n  \"廣州\": \"https://images.unsplash.com/photo-1590735213920-68192a487bc2?w=1200&q=75&auto=format&fit=crop\",\n  \"深圳\": \"https://images.unsplash.com/photo-1548919973-5cef591cdbc9?w=1200&q=75&auto=format&fit=crop\",\n  \"廈門\": \"https://images.unsplash.com/photo-1564349683136-77e08dba1ef7?w=1200&q=75&auto=format&fit=crop\",\n  \"杭州\": \"https://images.unsplash.com/photo-1581481615985-ba4775734a9b?w=1200&q=75&auto=format&fit=crop\",\n  \"南京\": \"https://images.unsplash.com/photo-1569949381669-ecf31ae8e613?w=1200&q=75&auto=format&fit=crop\",\n  \"成都\": \"https://images.unsplash.com/photo-1564349683136-77e08dba1ef7?w=1200&q=75&auto=format&fit=crop\",\n\n  // 泰國\n  \"曼谷\": \"https://images.unsplash.com/photo-1508009603885-50cf7c579365?w=1200&q=75&auto=format&fit=crop\",\n  \"清邁\": \"https://images.unsplash.com/photo-1563492065213-4c4bb194eefc?w=1200&q=75&auto=format&fit=crop\",\n  \"普吉\": \"https://images.unsplash.com/photo-1552465011-b4e21bf6e79a?w=1200&q=75&auto=format&fit=crop\",\n  \"蘇美島\": \"https://images.unsplash.com/photo-1537956965359-7573183d1f57?w=1200&q=75&auto=format&fit=crop\",\n  \"甲米\": \"https://images.unsplash.com/photo-1589394815804-964ed0be2eb5?w=1200&q=75&auto=format&fit=crop\",\n  \"烏隆\": \"https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=1200&q=75&auto=format&fit=crop\",\n\n  // 越南\n  \"河內\": \"https://images.unsplash.com/photo-1509030458710-f24f3682df0d?w=1200&q=75&auto=format&fit=crop\",\n  \"胡志明\": \"https://images.unsplash.com/photo-1583417319070-4a69db38a482?w=1200&q=75&auto=format&fit=crop\",\n  \"峴港\": \"https://images.unsplash.com/photo-1559592413-7cec4d0cae2b?w=1200&q=75&auto=format&fit=crop\",\n  \"富國島\": \"https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=1200&q=75&auto=format&fit=crop\",\n  \"順化\": \"https://images.unsplash.com/photo-1555881675-d8d8d7b1c157?w=1200&q=75&auto=format&fit=crop\",\n  \"大叻\": \"https://images.unsplash.com/photo-1578469550956-0e16b69c6a3d?w=1200&q=75&auto=format&fit=crop\",\n\n  // 韓國\n  \"首爾\": \"https://images.unsplash.com/photo-1517154421773-0529f29ea451?w=1200&q=75&auto=format&fit=crop\",\n  \"釜山\": \"https://images.unsplash.com/photo-1541996861-12e48df50bf5?w=1200&q=75&auto=format&fit=crop\",\n  \"濟州\": \"https://images.unsplash.com/photo-1598973621853-f9a8a6e9a592?w=1200&q=75&auto=format&fit=crop\",\n  \"仁川\": \"https://images.unsplash.com/photo-1585124804253-3e34e05c9120?w=1200&q=75&auto=format&fit=crop\",\n  \"大邱\": \"https://images.unsplash.com/photo-1590559899731-a382839e5549?w=1200&q=75&auto=format&fit=crop\",\n\n  // 馬來西亞\n  \"吉隆坡\": \"https://images.unsplash.com/photo-1596422846543-75c6fc197f07?w=1200&q=75&auto=format&fit=crop\",\n  \"檳城\": \"https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=1200&q=75&auto=format&fit=crop\",\n  \"新山\": \"https://images.unsplash.com/photo-1589394815804-964ed0be2eb5?w=1200&q=75&auto=format&fit=crop\",\n  \"古晉\": \"https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=1200&q=75&auto=format&fit=crop\",\n  \"蘭卡威\": \"https://images.unsplash.com/photo-1552465011-b4e21bf6e79a?w=1200&q=75&auto=format&fit=crop\",\n  \"沙巴\": \"https://images.unsplash.com/photo-1537956965359-7573183d1f57?w=1200&q=75&auto=format&fit=crop\",\n\n  // 新加坡\n  \"新加坡\": \"https://images.unsplash.com/photo-1525625293386-3f8f99389edd?w=1200&q=75&auto=format&fit=crop\",\n\n  // 印尼\n  \"雅加達\": \"https://images.unsplash.com/photo-1555333145-4acf190da336?w=1200&q=75&auto=format&fit=crop\",\n  \"峇里島\": \"https://images.unsplash.com/photo-1537996194471-e657df975ab4?w=1200&q=75&auto=format&fit=crop\",\n  \"日惹\": \"https://images.unsplash.com/photo-1558007652-8e8f7238e978?w=1200&q=75&auto=format&fit=crop\",\n  \"梭羅\": \"https://images.unsplash.com/photo-1589394815804-964ed0be2eb5?w=1200&q=75&auto=format&fit=crop\",\n\n  // 菲律賓\n  \"馬尼拉\": \"https://images.unsplash.com/photo-1542704792-e30daa0f905e?w=1200&q=75&auto=format&fit=crop\",\n  \"宿霧\": \"https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=1200&q=75&auto=format&fit=crop\",\n  \"達沃\": \"https://images.unsplash.com/photo-1589394815804-964ed0be2eb5?w=1200&q=75&auto=format&fit=crop\",\n  \"怡朗\": \"https://images.unsplash.com/photo-1552465011-b4e21bf6e79a?w=1200&q=75&auto=format&fit=crop\",\n\n  // 美國\n  \"洛杉磯\": \"https://images.unsplash.com/photo-1534190239940-9ba8944ea261?w=1200&q=75&auto=format&fit=crop\",\n  \"紐約\": \"https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?w=1200&q=75&auto=format&fit=crop\",\n  \"拉斯維加斯\": \"https://images.unsplash.com/photo-1605833556294-ea5c7a74f57d?w=1200&q=75&auto=format&fit=crop\",\n  \"舊金山\": \"https://images.unsplash.com/photo-1506146332389-18140dc7b2fb?w=1200&q=75&auto=format&fit=crop\",\n  \"西雅圖\": \"https://images.unsplash.com/photo-1555883006-0f5a0915a80f?w=1200&q=75&auto=format&fit=crop\",\n  \"芝加哥\": \"https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?w=1200&q=75&auto=format&fit=crop\",\n\n  // 加拿大\n  \"溫哥華\": \"https://images.unsplash.com/photo-1559511260-66a654ae982a?w=1200&q=75&auto=format&fit=crop\",\n  \"多倫多\": \"https://images.unsplash.com/photo-1517935706615-2717063c2225?w=1200&q=75&auto=format&fit=crop\",\n  \"蒙特婁\": \"https://images.unsplash.com/photo-1519451241324-20b4ea2c4220?w=1200&q=75&auto=format&fit=crop\",\n  \"卡加利\": \"https://images.unsplash.com/photo-1502920917128-1aa500764cbd?w=1200&q=75&auto=format&fit=crop\",\n\n  // 澳洲\n  \"雪梨\": \"https://images.unsplash.com/photo-1506973035872-a4ec16b8e8d9?w=1200&q=75&auto=format&fit=crop\",\n  \"墨爾本\": \"https://images.unsplash.com/photo-1514395462725-fb4566210144?w=1200&q=75&auto=format&fit=crop\",\n  \"布里斯本\": \"https://images.unsplash.com/photo-1524168272322-bf73616d9cb5?w=1200&q=75&auto=format&fit=crop\",\n  \"伯斯\": \"https://images.unsplash.com/photo-1591695287818-5f5d1e0bf9d3?w=1200&q=75&auto=format&fit=crop\",\n  \"阿德萊德\": \"https://images.unsplash.com/photo-1585779034823-7e9ac8faec70?w=1200&q=75&auto=format&fit=crop\",\n\n  // 紐西蘭\n  \"奧克蘭\": \"https://images.unsplash.com/photo-1507699622108-4be3abd695ad?w=1200&q=75&auto=format&fit=crop\",\n  \"基督城\": \"https://images.unsplash.com/photo-1568454537842-d933259bb258?w=1200&q=75&auto=format&fit=crop\",\n  \"威靈頓\": \"https://images.unsplash.com/photo-1589690810328-8bc609bb749c?w=1200&q=75&auto=format&fit=crop\",\n  \"皇后鎮\": \"https://images.unsplash.com/photo-1507699622108-4be3abd695ad?w=1200&q=75&auto=format&fit=crop\",\n\n  // 歐洲\n  \"倫敦\": \"https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?w=1200&q=75&auto=format&fit=crop\",\n  \"巴黎\": \"https://images.unsplash.com/photo-1502602898657-3e91760cbb34?w=1200&q=75&auto=format&fit=crop\",\n  \"羅馬\": \"https://images.unsplash.com/photo-1552832230-c0197dd311b5?w=1200&q=75&auto=format&fit=crop\",\n  \"巴塞隆納\": \"https://images.unsplash.com/photo-1583422409516-2895a77efded?w=1200&q=75&auto=format&fit=crop\",\n  \"柏林\": \"https://images.unsplash.com/photo-1560969184-10fe8719e047?w=1200&q=75&auto=format&fit=crop\",\n  \"阿姆斯特丹\": \"https://images.unsplash.com/photo-1512470876302-972faa2aa9a4?w=1200&q=75&auto=format&fit=crop\",\n  \"蘇黎世\": \"https://images.unsplash.com/photo-1565530844911-ec9e0d0cd81b?w=1200&q=75&auto=format&fit=crop\",\n  \"維也納\": \"https://images.unsplash.com/photo-1516550893923-42d28e5677af?w=1200&q=75&auto=format&fit=crop\",\n\n  // 土耳其\n  \"伊斯坦堡\": \"https://images.unsplash.com/photo-1524231757912-21f4fe3a7200?w=1200&q=75&auto=format&fit=crop\",\n  \"安塔利亞\": \"https://images.unsplash.com/photo-1605640840605-14ac1855827b?w=1200&q=75&auto=format&fit=crop\",\n  \"安卡拉\": \"https://images.unsplash.com/photo-1611415008993-8a88f0d67e67?w=1200&q=75&auto=format&fit=crop\",\n};\n\n// 時差對照表（相對於台灣 UTC+8）\nconst timezoneOffset: Record<string, number> = {\n  \"中國大陸\": 0,  // UTC+8 (與台灣相同)\n  \"日本\": 1,      // UTC+9\n  \"韓國\": 1,      // UTC+9\n  \"泰國\": -1,     // UTC+7\n  \"越南\": -1,     // UTC+7\n  \"馬來西亞\": 0,  // UTC+8\n  \"新加坡\": 0,    // UTC+8\n  \"印尼\": 0,      // UTC+8 (雅加達)\n  \"菲律賓\": 0,    // UTC+8\n  \"美國\": -16,    // UTC-8 (洛杉磯) - 注意：美國跨多個時區\n  \"加拿大\": -16,  // UTC-8 (溫哥華) - 注意：加拿大跨多個時區\n  \"澳洲\": 2,      // UTC+10 (雪梨) - 注意：澳洲跨多個時區\n  \"紐西蘭\": 4,    // UTC+12\n  \"歐洲\": -7,     // UTC+1 (倫敦) - 注意：歐洲跨多個時區\n  \"土耳其\": -5,   // UTC+3\n};\n\n// 計算飛行時間\nfunction calculateFlightDuration(\n  departureTime: string,  // 格式: \"06:50\"\n  arrivalTime: string,    // 格式: \"09:55\" (當地時間)\n  timeDiff: number        // 時差（小時）\n): string {\n  if (!departureTime || !arrivalTime) return \"\";\n\n  const [depH, depM] = departureTime.split(\":\").map(Number);\n  const [arrH, arrM] = arrivalTime.split(\":\").map(Number);\n\n  const depMinutes = depH * 60 + depM;\n  const arrMinutes = arrH * 60 + arrM - (timeDiff * 60); // 轉換為台灣時間\n\n  let duration = arrMinutes - depMinutes;\n  if (duration < 0) duration += 24 * 60; // 跨日\n\n  const hours = Math.floor(duration / 60);\n  const minutes = duration % 60;\n\n  return `${hours}小時${minutes}分`;\n}\n\nexport function TourForm({ data, onChange }: { data: any; onChange: (data: any) => void }) {\n  const [selectedCountry, setSelectedCountry] = React.useState<string>(data.country || \"\");\n  const [selectedCountryCode, setSelectedCountryCode] = React.useState<string>(\"\");\n  const { user } = useAuthStore();\n  const { items: regions, fetchAll } = useRegionStore();\n\n  // 懶載入：進入表單時載入 regions\n  React.useEffect(() => {\n    if (regions.length === 0) {\n      fetchAll();\n    }\n  }, [regions.length, fetchAll]);\n\n  // 從 regions 取得所有國家列表\n  const allDestinations = React.useMemo(() => {\n    return regions\n      .filter(r => r.type === 'country' && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [regions]);\n\n  // 建立國家名稱到代碼的對照\n  const countryNameToCode = React.useMemo(() => {\n    const map: Record<string, string> = {};\n    allDestinations.forEach(dest => {\n      map[dest.name] = dest.code;\n    });\n    return map;\n  }, [allDestinations]);\n\n  // 根據選中的國家代碼取得城市列表\n  const availableCities = React.useMemo(() => {\n    if (!selectedCountryCode) return [];\n    return regions\n      .filter(r => r.type === 'city' && r.country_code === selectedCountryCode && r.status === 'active' && !r._deleted)\n      .map(r => ({ code: r.code, name: r.name }));\n  }, [selectedCountryCode, regions]);\n\n  // 只在 data.country 從外部改變時同步（不要包含 selectedCountry 依賴！）\n  React.useEffect(() => {\n    if (data.country && data.country !== selectedCountry) {\n      setSelectedCountry(data.country);\n      // 同時更新 country code\n      const code = countryNameToCode[data.country];\n      if (code) {\n        setSelectedCountryCode(code);\n      }\n    }\n  }, [data.country, countryNameToCode]);\n\n  const updateField = (field: string, value: any) => {\n    onChange({ ...data, [field]: value });\n  };\n\n  // 更新城市時自動設定封面圖片\n  const updateCity = (city: string) => {\n    onChange({\n      ...data,\n      city,\n      coverImage: cityImages[city] || data.coverImage\n    });\n  };\n\n  const updateNestedField = (parent: string, field: string, value: any) => {\n    onChange({\n      ...data,\n      [parent]: { ...data[parent], [field]: value }\n    });\n  };\n\n  // 航班資訊更新（自動計算飛行時間）\n  const updateFlightField = (flightType: 'outboundFlight' | 'returnFlight', field: string, value: string) => {\n    const updatedFlight = { ...data[flightType], [field]: value };\n\n    // 自動計算飛行時間\n    const timeDiff = timezoneOffset[selectedCountry] || 0;\n    if (field === 'departureTime' || field === 'arrivalTime') {\n      const depTime = field === 'departureTime' ? value : updatedFlight.departureTime;\n      const arrTime = field === 'arrivalTime' ? value : updatedFlight.arrivalTime;\n      updatedFlight.duration = calculateFlightDuration(depTime, arrTime, timeDiff);\n    }\n\n    onChange({\n      ...data,\n      [flightType]: updatedFlight\n    });\n  };\n\n  // 特色管理\n  const addFeature = () => {\n    onChange({\n      ...data,\n      features: [...(data.features || []), { icon: \"IconSparkles\", title: \"\", description: \"\" }]\n    });\n  };\n\n  const updateFeature = (index: number, field: string, value: string) => {\n    const newFeatures = [...data.features];\n    newFeatures[index] = { ...newFeatures[index], [field]: value };\n    onChange({ ...data, features: newFeatures });\n  };\n\n  const removeFeature = (index: number) => {\n    const newFeatures = data.features.filter((_: any, i: number) => i !== index);\n    onChange({ ...data, features: newFeatures });\n  };\n\n  // 景點管理\n  const addFocusCard = () => {\n    onChange({\n      ...data,\n      focusCards: [...(data.focusCards || []), { title: \"\", src: \"\" }]\n    });\n  };\n\n  const updateFocusCard = (index: number, field: string, value: string) => {\n    const newCards = [...data.focusCards];\n    newCards[index] = { ...newCards[index], [field]: value };\n    onChange({ ...data, focusCards: newCards });\n  };\n\n  const removeFocusCard = (index: number) => {\n    const newCards = data.focusCards.filter((_: any, i: number) => i !== index);\n    onChange({ ...data, focusCards: newCards });\n  };\n\n  // 逐日行程管理\n  const addDailyItinerary = () => {\n    onChange({\n      ...data,\n      dailyItinerary: [...(data.dailyItinerary || []), {\n        dayLabel: `Day ${(data.dailyItinerary?.length || 0) + 1}`,\n        date: \"\",\n        title: \"\",\n        highlight: \"\",\n        description: \"\",\n        activities: [],\n        recommendations: [],\n        meals: { breakfast: \"\", lunch: \"\", dinner: \"\" },\n        accommodation: \"\"\n      }]\n    });\n  };\n\n  const updateDailyItinerary = (index: number, field: string, value: any) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[index] = { ...newItinerary[index], [field]: value };\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  const removeDailyItinerary = (index: number) => {\n    const newItinerary = data.dailyItinerary\n      .filter((_: any, i: number) => i !== index)\n      .map((day: any, i: number) => ({\n        ...day,\n        dayLabel: `Day ${i + 1}` // 自動更新 dayLabel\n      }));\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  // 活動管理\n  const addActivity = (dayIndex: number) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[dayIndex].activities = [\n      ...(newItinerary[dayIndex].activities || []),\n      { icon: \"🌋\", title: \"\", description: \"\" }\n    ];\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  const updateActivity = (dayIndex: number, actIndex: number, field: string, value: string) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[dayIndex].activities[actIndex] = {\n      ...newItinerary[dayIndex].activities[actIndex],\n      [field]: value\n    };\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  const removeActivity = (dayIndex: number, actIndex: number) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[dayIndex].activities = newItinerary[dayIndex].activities.filter(\n      (_: any, i: number) => i !== actIndex\n    );\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  // 推薦行程管理\n  const addRecommendation = (dayIndex: number) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[dayIndex].recommendations = [\n      ...(newItinerary[dayIndex].recommendations || []),\n      \"\"\n    ];\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  const updateRecommendation = (dayIndex: number, recIndex: number, value: string) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[dayIndex].recommendations[recIndex] = value;\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  const removeRecommendation = (dayIndex: number, recIndex: number) => {\n    const newItinerary = [...data.dailyItinerary];\n    newItinerary[dayIndex].recommendations = newItinerary[dayIndex].recommendations.filter(\n      (_: any, i: number) => i !== recIndex\n    );\n    onChange({ ...data, dailyItinerary: newItinerary });\n  };\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* 封面資訊 */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-lg font-bold text-gray-800 border-b-2 border-amber-500 pb-2\">📸 封面設定</h2>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">標籤文字</label>\n          <input\n            type=\"text\"\n            value={data.tagline || \"\"}\n            onChange={(e) => updateField(\"tagline\", e.target.value)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n            placeholder=\"Venturo Travel 2025 秋季精選\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">主標題</label>\n            <input\n              type=\"text\"\n              value={data.title || \"\"}\n              onChange={(e) => updateField(\"title\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n              placeholder=\"漫遊福岡\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">副標題</label>\n            <input\n              type=\"text\"\n              value={data.subtitle || \"\"}\n              onChange={(e) => updateField(\"subtitle\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n              placeholder=\"半自由行\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">描述</label>\n          <input\n            type=\"text\"\n            value={data.description || \"\"}\n            onChange={(e) => updateField(\"description\", e.target.value)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n            placeholder=\"2日市區自由活動 · 保證入住溫泉飯店 · 柳川遊船 · 阿蘇火山\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">國家</label>\n            <select\n              value={selectedCountry}\n              onChange={(e) => {\n                const newCountry = e.target.value;\n                setSelectedCountry(newCountry);\n                // 更新國家代碼\n                const code = countryNameToCode[newCountry];\n                setSelectedCountryCode(code || \"\");\n                // 同時更新國家和清空城市，避免 data 覆蓋問題\n                onChange({\n                  ...data,\n                  country: newCountry,\n                  city: \"\",\n                });\n              }}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n            >\n              <option value=\"\">請選擇國家</option>\n              {allDestinations.map(dest => (\n                <option key={dest.code} value={dest.name}>{dest.name}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">城市</label>\n            <select\n              value={data.city || \"\"}\n              onChange={(e) => updateCity(e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n              disabled={!selectedCountry}\n            >\n              <option value=\"\">請選擇城市</option>\n              {availableCities.map(city => (\n                <option key={city.code} value={city.name}>{city.name}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">出發日期</label>\n            <input\n              type=\"text\"\n              value={data.departureDate || \"\"}\n              onChange={(e) => updateField(\"departureDate\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n              placeholder=\"2025/10/21\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">行程代碼</label>\n            <input\n              type=\"text\"\n              value={data.tourCode || \"\"}\n              onChange={(e) => updateField(\"tourCode\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-amber-500\"\n              placeholder=\"25JFO21CIG\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">作者</label>\n          <div className=\"w-full px-3 py-2 border rounded-lg bg-gray-50 text-gray-600\">\n            {user?.display_name || user?.english_name || '未登入'} ({user?.employee_number || '-'})\n          </div>\n          <p className=\"text-xs text-gray-500 mt-1\">自動取得當前登入用戶資訊</p>\n        </div>\n      </div>\n\n      {/* 航班資訊 */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-lg font-bold text-gray-800 border-b-2 border-blue-500 pb-2\">✈️ 航班資訊</h2>\n\n        <div className=\"bg-blue-50 p-4 rounded-lg space-y-3\">\n          <h3 className=\"font-bold text-blue-900\">去程航班</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">航空公司</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.airline || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"airline\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"中華航空\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">航班號碼</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.flightNumber || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"flightNumber\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"CI110\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">出發機場</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.departureAirport || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"departureAirport\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"TPE\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">出發時間</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.departureTime || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"departureTime\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"06:50\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">出發日期</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.departureDate || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"departureDate\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"10/21\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">抵達機場</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.arrivalAirport || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"arrivalAirport\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"FUK\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">抵達時間</label>\n              <input\n                type=\"text\"\n                value={data.outboundFlight?.arrivalTime || \"\"}\n                onChange={(e) => updateFlightField(\"outboundFlight\", \"arrivalTime\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"09:55\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">飛行時間（自動計算）</label>\n              <div className=\"w-full px-2 py-1 border rounded text-sm bg-gray-100 text-gray-700\">\n                {data.outboundFlight?.duration || \"請輸入出發/抵達時間\"}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-indigo-50 p-4 rounded-lg space-y-3\">\n          <h3 className=\"font-bold text-indigo-900\">回程航班</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">航空公司</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.airline || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"airline\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"中華航空\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">航班號碼</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.flightNumber || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"flightNumber\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"CI111\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">出發機場</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.departureAirport || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"departureAirport\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"FUK\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">出發時間</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.departureTime || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"departureTime\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"11:00\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">出發日期</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.departureDate || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"departureDate\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"10/25\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">抵達機場</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.arrivalAirport || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"arrivalAirport\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"TPE\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">抵達時間</label>\n              <input\n                type=\"text\"\n                value={data.returnFlight?.arrivalTime || \"\"}\n                onChange={(e) => updateFlightField(\"returnFlight\", \"arrivalTime\", e.target.value)}\n                className=\"w-full px-2 py-1 border rounded text-sm\"\n                placeholder=\"12:30\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">飛行時間（自動計算）</label>\n              <div className=\"w-full px-2 py-1 border rounded text-sm bg-gray-100 text-gray-700\">\n                {data.returnFlight?.duration || \"請輸入出發/抵達時間\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 行程特色 */}\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center border-b-2 border-orange-500 pb-2\">\n          <h2 className=\"text-lg font-bold text-gray-800\">✨ 行程特色</h2>\n          <button\n            onClick={addFeature}\n            className=\"px-3 py-1 bg-orange-500 text-white rounded-lg text-sm hover:bg-orange-600\"\n          >\n            + 新增特色\n          </button>\n        </div>\n\n        {data.features?.map((feature: any, index: number) => (\n          <div key={index} className=\"p-4 border-2 border-orange-200 rounded-lg space-y-3 bg-orange-50\">\n            <div className=\"flex justify-between items-start\">\n              <span className=\"text-sm font-medium text-orange-700\">特色 {index + 1}</span>\n              <button\n                onClick={() => removeFeature(index)}\n                className=\"text-red-500 hover:text-red-700 text-sm\"\n              >\n                刪除\n              </button>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">圖標</label>\n              <select\n                value={feature.icon}\n                onChange={(e) => updateFeature(index, \"icon\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-500\"\n              >\n                {iconOptions.map(opt => (\n                  <option key={opt.value} value={opt.value}>{opt.label}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">標題</label>\n              <input\n                type=\"text\"\n                value={feature.title}\n                onChange={(e) => updateFeature(index, \"title\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-500\"\n                placeholder=\"溫泉飯店體驗\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">描述</label>\n              <input\n                type=\"text\"\n                value={feature.description}\n                onChange={(e) => updateFeature(index, \"description\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-orange-500\"\n                placeholder=\"保證入住阿蘇溫泉飯店，享受日式溫泉文化\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* 精選景點 */}\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center border-b-2 border-green-500 pb-2\">\n          <h2 className=\"text-lg font-bold text-gray-800\">📍 精選景點</h2>\n          <button\n            onClick={addFocusCard}\n            className=\"px-3 py-1 bg-green-500 text-white rounded-lg text-sm hover:bg-green-600\"\n          >\n            + 新增景點\n          </button>\n        </div>\n\n        {data.focusCards?.map((card: any, index: number) => (\n          <div key={index} className=\"p-4 border-2 border-green-200 rounded-lg space-y-3 bg-green-50\">\n            <div className=\"flex justify-between items-start\">\n              <span className=\"text-sm font-medium text-green-700\">景點 {index + 1}</span>\n              <button\n                onClick={() => removeFocusCard(index)}\n                className=\"text-red-500 hover:text-red-700 text-sm\"\n              >\n                刪除\n              </button>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">景點名稱</label>\n              <input\n                type=\"text\"\n                value={card.title}\n                onChange={(e) => updateFocusCard(index, \"title\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500\"\n                placeholder=\"由布院溫泉街\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">圖片網址</label>\n              <input\n                type=\"text\"\n                value={card.src}\n                onChange={(e) => updateFocusCard(index, \"src\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500\"\n                placeholder=\"https://images.unsplash.com/...\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* 領隊 & 集合資訊 */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-lg font-bold text-gray-800 border-b-2 border-purple-500 pb-2\">👤 領隊與集合資訊</h2>\n\n        <div className=\"bg-purple-50 p-4 rounded-lg space-y-3\">\n          <h3 className=\"font-bold text-purple-900\">領隊資訊</h3>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">領隊姓名</label>\n            <input\n              type=\"text\"\n              value={data.leader?.name || \"\"}\n              onChange={(e) => updateNestedField(\"leader\", \"name\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500\"\n              placeholder=\"鍾惠如 小姐\"\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">國內電話</label>\n              <input\n                type=\"text\"\n                value={data.leader?.domesticPhone || \"\"}\n                onChange={(e) => updateNestedField(\"leader\", \"domesticPhone\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500\"\n                placeholder=\"+886 0928402897\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">國外電話</label>\n              <input\n                type=\"text\"\n                value={data.leader?.overseasPhone || \"\"}\n                onChange={(e) => updateNestedField(\"leader\", \"overseasPhone\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500\"\n                placeholder=\"+81 08074371189\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-blue-50 p-4 rounded-lg space-y-3\">\n          <h3 className=\"font-bold text-blue-900\">集合資訊</h3>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">集合時間</label>\n            <input\n              type=\"text\"\n              value={data.meetingInfo?.time || \"\"}\n              onChange={(e) => updateNestedField(\"meetingInfo\", \"time\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"2025/10/21 04:50\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">集合地點</label>\n            <input\n              type=\"text\"\n              value={data.meetingInfo?.location || \"\"}\n              onChange={(e) => updateNestedField(\"meetingInfo\", \"location\", e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"桃園機場華航第二航廈 7號櫃台\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* 逐日行程 */}\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center border-b-2 border-red-500 pb-2\">\n          <h2 className=\"text-lg font-bold text-gray-800\">📅 逐日行程</h2>\n          <button\n            onClick={addDailyItinerary}\n            className=\"px-3 py-1 bg-red-500 text-white rounded-lg text-sm hover:bg-red-600\"\n          >\n            + 新增天數\n          </button>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">行程副標題</label>\n          <input\n            type=\"text\"\n            value={data.itinerarySubtitle || \"\"}\n            onChange={(e) => updateField(\"itinerarySubtitle\", e.target.value)}\n            className=\"w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-red-500\"\n            placeholder=\"5天4夜精彩旅程規劃\"\n          />\n        </div>\n\n        {data.dailyItinerary?.map((day: any, dayIndex: number) => (\n          <div key={dayIndex} className=\"p-6 border-2 border-red-200 rounded-xl space-y-4 bg-red-50\">\n            <div className=\"flex justify-between items-start\">\n              <div className=\"flex items-center gap-3\">\n                <span className=\"bg-red-500 text-white px-3 py-1 rounded-full font-bold text-sm\">\n                  {day.dayLabel}\n                </span>\n                <span className=\"text-gray-600 text-sm\">{day.date}</span>\n              </div>\n              <button\n                onClick={() => removeDailyItinerary(dayIndex)}\n                className=\"text-red-600 hover:text-red-800 text-sm font-medium\"\n              >\n                刪除此天\n              </button>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">Day 標籤</label>\n                <input\n                  type=\"text\"\n                  value={day.dayLabel}\n                  onChange={(e) => updateDailyItinerary(dayIndex, \"dayLabel\", e.target.value)}\n                  className=\"w-full px-2 py-1 border rounded text-sm\"\n                  placeholder=\"Day 1\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">日期</label>\n                <input\n                  type=\"text\"\n                  value={day.date}\n                  onChange={(e) => updateDailyItinerary(dayIndex, \"date\", e.target.value)}\n                  className=\"w-full px-2 py-1 border rounded text-sm\"\n                  placeholder=\"10/21 (二)\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">行程標題</label>\n              <input\n                type=\"text\"\n                value={day.title}\n                onChange={(e) => updateDailyItinerary(dayIndex, \"title\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg\"\n                placeholder=\"台北 ✈ 福岡空港 → 由布院 · 金麟湖 → 阿蘇溫泉\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">特別安排 (highlight)</label>\n              <input\n                type=\"text\"\n                value={day.highlight || \"\"}\n                onChange={(e) => updateDailyItinerary(dayIndex, \"highlight\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg\"\n                placeholder=\"✨ 特別安排：由布院 · 金麟湖 ～ 日本 OL 人氣 NO.1 散策地\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">描述</label>\n              <textarea\n                value={day.description || \"\"}\n                onChange={(e) => updateDailyItinerary(dayIndex, \"description\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg\"\n                rows={3}\n                placeholder=\"集合於台灣桃園國際機場...\"\n              />\n            </div>\n\n            {/* 活動 */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-sm font-medium text-gray-700\">景點活動</label>\n                <button\n                  onClick={() => addActivity(dayIndex)}\n                  className=\"px-2 py-1 bg-blue-500 text-white rounded text-xs\"\n                >\n                  + 新增活動\n                </button>\n              </div>\n              {day.activities?.map((activity: any, actIndex: number) => (\n                <div key={actIndex} className=\"grid grid-cols-3 gap-2 bg-white p-2 rounded\">\n                  <input\n                    type=\"text\"\n                    value={activity.icon}\n                    onChange={(e) => updateActivity(dayIndex, actIndex, \"icon\", e.target.value)}\n                    className=\"px-2 py-1 border rounded text-sm\"\n                    placeholder=\"🌋\"\n                  />\n                  <input\n                    type=\"text\"\n                    value={activity.title}\n                    onChange={(e) => updateActivity(dayIndex, actIndex, \"title\", e.target.value)}\n                    className=\"px-2 py-1 border rounded text-sm\"\n                    placeholder=\"阿蘇火山\"\n                  />\n                  <div className=\"flex gap-1\">\n                    <input\n                      type=\"text\"\n                      value={activity.description}\n                      onChange={(e) => updateActivity(dayIndex, actIndex, \"description\", e.target.value)}\n                      className=\"flex-1 px-2 py-1 border rounded text-sm\"\n                      placeholder=\"描述\"\n                    />\n                    <button\n                      onClick={() => removeActivity(dayIndex, actIndex)}\n                      className=\"px-2 text-red-500 hover:text-red-700 text-xs\"\n                    >\n                      ✕\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* 推薦行程 */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-sm font-medium text-gray-700\">推薦行程</label>\n                <button\n                  onClick={() => addRecommendation(dayIndex)}\n                  className=\"px-2 py-1 bg-green-500 text-white rounded text-xs\"\n                >\n                  + 新增推薦\n                </button>\n              </div>\n              {day.recommendations?.map((rec: string, recIndex: number) => (\n                <div key={recIndex} className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={rec}\n                    onChange={(e) => updateRecommendation(dayIndex, recIndex, e.target.value)}\n                    className=\"flex-1 px-2 py-1 border rounded text-sm bg-white\"\n                    placeholder=\"天神商圈購物\"\n                  />\n                  <button\n                    onClick={() => removeRecommendation(dayIndex, recIndex)}\n                    className=\"px-2 text-red-500 hover:text-red-700\"\n                  >\n                    ✕\n                  </button>\n                </div>\n              ))}\n            </div>\n\n            {/* 餐食 */}\n            <div className=\"grid grid-cols-3 gap-2\">\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">早餐</label>\n                <input\n                  type=\"text\"\n                  value={day.meals?.breakfast || \"\"}\n                  onChange={(e) => updateDailyItinerary(dayIndex, \"meals\", { ...day.meals, breakfast: e.target.value })}\n                  className=\"w-full px-2 py-1 border rounded text-sm\"\n                  placeholder=\"飯店內早餐\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">午餐</label>\n                <input\n                  type=\"text\"\n                  value={day.meals?.lunch || \"\"}\n                  onChange={(e) => updateDailyItinerary(dayIndex, \"meals\", { ...day.meals, lunch: e.target.value })}\n                  className=\"w-full px-2 py-1 border rounded text-sm\"\n                  placeholder=\"博多拉麵 (¥1000)\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">晚餐</label>\n                <input\n                  type=\"text\"\n                  value={day.meals?.dinner || \"\"}\n                  onChange={(e) => updateDailyItinerary(dayIndex, \"meals\", { ...day.meals, dinner: e.target.value })}\n                  className=\"w-full px-2 py-1 border rounded text-sm\"\n                  placeholder=\"長腳蟹自助餐\"\n                />\n              </div>\n            </div>\n\n            {/* 住宿 */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">住宿</label>\n              <input\n                type=\"text\"\n                value={day.accommodation || \"\"}\n                onChange={(e) => updateDailyItinerary(dayIndex, \"accommodation\", e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-lg\"\n                placeholder=\"ASO RESORT GRANDVRIO HOTEL\"\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/editor/TourPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[130,133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[130,133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport TourPage from \"@/components/TourPage\";\n\nexport function TourPreview({ data, viewMode = 'desktop' }: { data: any; viewMode?: 'desktop' | 'mobile' }) {\n  return (\n    <div style={{\n      width: viewMode === 'mobile' ? '390px' : '1200px',\n      minHeight: viewMode === 'mobile' ? '844px' : '100%',\n      position: 'relative',\n      overflow: 'hidden'\n    }}>\n      {/* 包裹 TourPage，確保內容不會溢出 */}\n      <div className={viewMode === 'mobile' ? 'mobile-preview-wrapper' : ''}>\n        <TourPage data={data} isPreview={true} viewMode={viewMode} />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/finance/batch-receipt-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5625,5628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5625,5628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7204,7207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7204,7207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useOrderStore, useReceiptOrderStore } from '@/stores';\nimport { OrderAllocation, ReceiptPaymentItem } from '@/stores/types';\nimport { Plus, Trash2, DollarSign, AlertCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface BatchReceiptDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n// 收款方式選項\nconst paymentMethods = [\n  { value: 'cash', label: '現金' },\n  { value: 'transfer', label: '匯款' },\n  { value: 'card', label: '刷卡' },\n  { value: 'check', label: '支票' }\n];\n\nexport function BatchReceiptDialog({ open, onOpenChange }: BatchReceiptDialogProps) {\n  const { items: orders } = useOrderStore();\n  const { create: createReceiptOrder } = useReceiptOrderStore();\n\n  const [receiptDate, setReceiptDate] = useState(new Date().toISOString().split('T')[0]);\n  const [note, setNote] = useState('');\n\n  // 訂單分配列表\n  const [orderAllocations, setOrderAllocations] = useState<OrderAllocation[]>([]);\n\n  // 收款項目\n  const [paymentItems, setPaymentItems] = useState<Partial<ReceiptPaymentItem>[]>([\n    {\n      payment_method: 'cash',\n      amount: 0,\n      transaction_date: new Date().toISOString().split('T')[0]\n    }\n  ]);\n\n  // 可用訂單（未收款或部分收款）\n  const availableOrders = useMemo(() => {\n    return orders.filter(order =>\n      order.payment_status === 'unpaid' || order.payment_status === 'partial'\n    );\n  }, [orders]);\n\n  // 計算總收款金額\n  const totalPaymentAmount = useMemo(() => {\n    return paymentItems.reduce((sum, item) => sum + (item.amount || 0), 0);\n  }, [paymentItems]);\n\n  // 計算已分配金額\n  const totalAllocatedAmount = useMemo(() => {\n    return orderAllocations.reduce((sum, allocation) => sum + allocation.allocated_amount, 0);\n  }, [orderAllocations]);\n\n  // 未分配金額\n  const unallocatedAmount = totalPaymentAmount - totalAllocatedAmount;\n\n  // 新增訂單分配\n  const addOrderAllocation = () => {\n    if (availableOrders.length === 0) {\n      alert('沒有可用的訂單');\n      return;\n    }\n\n    const firstAvailableOrder = availableOrders[0];\n    setOrderAllocations(prev => [...prev, {\n      order_id: firstAvailableOrder.id,\n      order_number: firstAvailableOrder.code,\n      tour_id: firstAvailableOrder.tour_id,\n      code: firstAvailableOrder.code || '',\n      tour_name: firstAvailableOrder.tour_name || '',\n      contact_person: firstAvailableOrder.contact_person,\n      allocated_amount: 0\n    }]);\n  };\n\n  // 移除訂單分配\n  const removeOrderAllocation = (index: number) => {\n    setOrderAllocations(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // 更新訂單分配\n  const updateOrderAllocation = (index: number, updates: Partial<OrderAllocation>) => {\n    setOrderAllocations(prev => prev.map((allocation, i) =>\n      i === index ? { ...allocation, ...updates } : allocation\n    ));\n  };\n\n  // 選擇訂單\n  const selectOrder = (index: number, orderId: string) => {\n    const order = orders.find(o => o.id === orderId);\n    if (!order) return;\n\n    updateOrderAllocation(index, {\n      order_id: order.id,\n      order_number: order.code,\n      tour_id: order.tour_id,\n      code: order.code || '',\n      tour_name: order.tour_name || '',\n      contact_person: order.contact_person\n    });\n  };\n\n  // 新增收款項目\n  const addPaymentItem = () => {\n    setPaymentItems(prev => [...prev, {\n      payment_method: 'cash',\n      amount: 0,\n      transaction_date: new Date().toISOString().split('T')[0]\n    }]);\n  };\n\n  // 移除收款項目\n  const removePaymentItem = (index: number) => {\n    if (paymentItems.length > 1) {\n      setPaymentItems(prev => prev.filter((_, i) => i !== index));\n    }\n  };\n\n  // 更新收款項目\n  const updatePaymentItem = (index: number, updates: Partial<ReceiptPaymentItem>) => {\n    setPaymentItems(prev => prev.map((item, i) =>\n      i === index ? { ...item, ...updates } : item\n    ));\n  };\n\n  // 平均分配未分配金額\n  const distributeEvenly = () => {\n    if (orderAllocations.length === 0 || unallocatedAmount <= 0) return;\n\n    const amountPerOrder = Math.floor(unallocatedAmount / orderAllocations.length);\n    const remainder = unallocatedAmount - (amountPerOrder * orderAllocations.length);\n\n    setOrderAllocations(prev => prev.map((allocation, index) => ({\n      ...allocation,\n      allocated_amount: allocation.allocated_amount + amountPerOrder + (index === 0 ? remainder : 0)\n    })));\n  };\n\n  // 重置表單\n  const resetForm = () => {\n    setReceiptDate(new Date().toISOString().split('T')[0]);\n    setNote('');\n    setOrderAllocations([]);\n    setPaymentItems([{\n      payment_method: 'cash',\n      amount: 0,\n      transaction_date: new Date().toISOString().split('T')[0]\n    }]);\n  };\n\n  // 儲存\n  const handleSave = async () => {\n    if (orderAllocations.length === 0) {\n      alert('請至少新增一個訂單分配');\n      return;\n    }\n\n    if (totalPaymentAmount === 0) {\n      alert('收款金額不能為 0');\n      return;\n    }\n\n    if (unallocatedAmount !== 0) {\n      alert(`還有 NT$ ${unallocatedAmount.toLocaleString()} 未分配，請確認分配金額`);\n      return;\n    }\n\n    try {\n      await createReceiptOrder({\n        allocation_mode: 'multiple',\n        order_allocations: orderAllocations,\n        receipt_date: receiptDate,\n        payment_items: paymentItems as ReceiptPaymentItem[],\n        total_amount: totalPaymentAmount,\n        status: '已收款',\n        note,\n        created_by: '1' // TODO: 從 auth store 取得當前用戶\n      } as any);\n\n      alert('✅ 批量收款單建立成功');\n      onOpenChange(false);\n      resetForm();\n    } catch (error) {\n      console.error('建立批量收款單失敗:', error);\n      alert('❌ 建立失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5 text-morandi-gold\" />\n            批量分配收款（一筆款分多訂單）\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* 收款日期 */}\n          <div>\n            <Label>收款日期</Label>\n            <Input\n              type=\"date\"\n              value={receiptDate}\n              onChange={(e) => setReceiptDate(e.target.value)}\n            />\n          </div>\n\n          {/* 收款項目 */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-semibold\">收款項目</Label>\n              <Button size=\"sm\" variant=\"outline\" onClick={addPaymentItem}>\n                <Plus className=\"h-4 w-4 mr-1\" />\n                新增收款項目\n              </Button>\n            </div>\n\n            <div className=\"space-y-2\">\n              {paymentItems.map((item, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                  <Select\n                    value={item.payment_method}\n                    onValueChange={(value) => updatePaymentItem(index, { payment_method: value as any })}\n                  >\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {paymentMethods.map(method => (\n                        <SelectItem key={method.value} value={method.value}>\n                          {method.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <Input\n                    type=\"number\"\n                    placeholder=\"金額\"\n                    value={item.amount || ''}\n                    onChange={(e) => updatePaymentItem(index, { amount: parseFloat(e.target.value) || 0 })}\n                    className=\"w-40\"\n                  />\n\n                  <Input\n                    type=\"date\"\n                    value={item.transaction_date}\n                    onChange={(e) => updatePaymentItem(index, { transaction_date: e.target.value })}\n                    className=\"w-40\"\n                  />\n\n                  {paymentItems.length > 1 && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removePaymentItem(index)}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-morandi-red\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"text-right text-sm font-semibold\">\n              總收款金額：\n              <span className=\"text-lg text-morandi-gold ml-2\">\n                NT$ {totalPaymentAmount.toLocaleString()}\n              </span>\n            </div>\n          </div>\n\n          {/* 訂單分配 */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-semibold\">訂單分配</Label>\n              <div className=\"flex gap-2\">\n                <Button size=\"sm\" variant=\"outline\" onClick={distributeEvenly} disabled={orderAllocations.length === 0}>\n                  平均分配\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" onClick={addOrderAllocation}>\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  新增訂單\n                </Button>\n              </div>\n            </div>\n\n            {orderAllocations.length === 0 ? (\n              <div className=\"text-center py-8 text-morandi-secondary border rounded-lg border-dashed\">\n                請新增訂單分配\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {orderAllocations.map((allocation, index) => (\n                  <div key={index} className=\"flex items-center gap-3 p-3 border rounded-lg bg-morandi-container/20\">\n                    <Select\n                      value={allocation.order_id}\n                      onValueChange={(value) => selectOrder(index, value)}\n                    >\n                      <SelectTrigger className=\"flex-1\">\n                        <SelectValue placeholder=\"選擇訂單\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {availableOrders.map(order => (\n                          <SelectItem key={order.id} value={order.id}>\n                            {order.code} - {order.contact_person} ({order.tour_name})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n\n                    <Input\n                      type=\"number\"\n                      placeholder=\"分配金額\"\n                      value={allocation.allocated_amount || ''}\n                      onChange={(e) => updateOrderAllocation(index, { allocated_amount: parseFloat(e.target.value) || 0 })}\n                      className=\"w-40\"\n                    />\n\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeOrderAllocation(index)}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-morandi-red\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            <div className=\"flex items-center justify-between p-3 border rounded-lg bg-morandi-container/10\">\n              <div className=\"text-sm\">\n                <span className=\"text-morandi-secondary\">已分配：</span>\n                <span className=\"font-semibold ml-2\">NT$ {totalAllocatedAmount.toLocaleString()}</span>\n              </div>\n              <div className={cn(\n                \"text-sm\",\n                unallocatedAmount > 0 && \"text-morandi-gold\",\n                unallocatedAmount < 0 && \"text-morandi-red\"\n              )}>\n                <span>未分配：</span>\n                <span className=\"font-semibold ml-2\">NT$ {unallocatedAmount.toLocaleString()}</span>\n              </div>\n            </div>\n\n            {unallocatedAmount !== 0 && (\n              <div className=\"flex items-center gap-2 p-3 border border-morandi-gold/30 rounded-lg bg-morandi-gold/5 text-sm\">\n                <AlertCircle className=\"h-4 w-4 text-morandi-gold\" />\n                <span className=\"text-morandi-gold\">\n                  {unallocatedAmount > 0 ? '還有金額未分配' : '分配金額超過收款金額'}，請調整分配金額\n                </span>\n              </div>\n            )}\n          </div>\n\n          {/* 備註 */}\n          <div>\n            <Label>備註</Label>\n            <Input\n              placeholder=\"收款備註（選填）\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            取消\n          </Button>\n          <Button\n            onClick={handleSave}\n            className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n            disabled={unallocatedAmount !== 0 || orderAllocations.length === 0}\n          >\n            建立批量收款單\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/home/home-settings-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/add-employee-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Employee' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchAll' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3528,3531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3528,3531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Employee } from '@/stores/types';\nimport { useUserStore, userStoreHelpers } from '@/stores/user-store';\nimport { hashPassword } from '@/lib/auth';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Copy, Check, Plus, Trash2 } from 'lucide-react';\n\ninterface AddEmployeeFormProps {\n  onSubmit: () => void;\n  onCancel: () => void;\n}\n\nexport function AddEmployeeForm({ onSubmit, onCancel }: AddEmployeeFormProps) {\n  const { create: addUser, fetchAll } = useUserStore();\n\n  // 成功創建對話框狀態\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [createdEmployee, setCreatedEmployee] = useState<{\n    display_name: string;\n    employee_number: string;\n    password: string;\n  } | null>(null);\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n\n  const [formData, setFormData] = useState({\n    english_name: '',\n    display_name: '',\n    chinese_name: '',\n    defaultPassword: 'venturo123', // 預設密碼\n    roles: [] as ('admin' | 'employee' | 'user' | 'tour_leader' | 'sales' | 'accountant' | 'assistant')[],\n    personal_info: {\n      national_id: '',\n      birthday: '',\n      phone: [''], // 改成陣列\n      email: '',\n      address: '',\n      emergency_contact: {\n        name: '',\n        relationship: '',\n        phone: ''\n      }\n    },\n    job_info: {\n      hire_date: new Date().toISOString().split('T')[0]\n    },\n    salary_info: {\n      base_salary: 0,\n      allowances: [],\n      salaryHistory: []\n    }\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.english_name.trim() || !formData.display_name.trim()) {\n      alert('請填寫姓名');\n      return;\n    }\n\n    try {\n      // 生成員工編號\n      const employee_number = userStoreHelpers.generateUserNumber(formData.english_name);\n\n      // 加密預設密碼\n      const hashedPassword = await hashPassword(formData.defaultPassword);\n\n      // 建立資料庫員工記錄\n      const dbEmployeeData = {\n        employee_number: employee_number,\n        english_name: formData.english_name,\n        display_name: formData.display_name,\n        chinese_name: formData.chinese_name,\n        password_hash: hashedPassword,\n        roles: formData.roles,\n        personal_info: {\n          national_id: formData.personal_info.national_id,\n          birthday: formData.personal_info.birthday,\n          phone: formData.personal_info.phone.filter(p => p.trim() !== ''), // 過濾空白電話\n          email: formData.personal_info.email,\n          address: formData.personal_info.address,\n          emergency_contact: {\n            name: formData.personal_info.emergency_contact.name,\n            relationship: formData.personal_info.emergency_contact.relationship,\n            phone: formData.personal_info.emergency_contact.phone\n          }\n        },\n        job_info: {\n          hire_date: formData.job_info.hire_date\n        },\n        salary_info: {\n          base_salary: formData.salary_info.base_salary,\n          allowances: [],\n          salary_history: [\n            {\n              effective_date: formData.job_info.hire_date,\n              base_salary: formData.salary_info.base_salary,\n              reason: '入職起薪'\n            }\n          ]\n        },\n        permissions: [], // 初始無權限，需要後續設定\n        status: 'active' // 新員工預設為在職狀態\n      };\n\n      // 儲存到本地（純本地模式）\n      addUser(dbEmployeeData as any);\n\n      console.log('📦 本地模式：員工已新增', employee_number);\n\n      // 顯示成功對話框\n      setCreatedEmployee({\n        display_name: formData.display_name,\n        employee_number: employee_number,\n        password: formData.defaultPassword\n      });\n      setShowSuccessDialog(true);\n    } catch (error) {\n      console.error('創建員工失敗:', error);\n      alert('創建員工失敗，請稍後再試');\n    }\n  };\n\n  // 複製到剪貼簿\n  const copyToClipboard = (text: string, field: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedField(field);\n    setTimeout(() => setCopiedField(null), 2000);\n  };\n\n  // 關閉成功對話框\n  const handleCloseSuccess = () => {\n    setShowSuccessDialog(false);\n    setCreatedEmployee(null);\n    onSubmit();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* 基本資料 */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-morandi-primary border-b pb-2\">基本資料</h3>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n              顯示名稱 *\n            </label>\n            <Input\n              value={formData.display_name}\n              onChange={(e) => setFormData({ ...formData, display_name: e.target.value })}\n              required\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n              中文姓名\n            </label>\n            <Input\n              value={formData.chinese_name}\n              onChange={(e) => setFormData({ ...formData, chinese_name: e.target.value })}\n              placeholder=\"例：王小明\"\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n              英文姓名 * (用於生成員工編號)\n            </label>\n            <Input\n              value={formData.english_name}\n              onChange={(e) => setFormData({ ...formData, english_name: e.target.value })}\n              placeholder=\"例：John\"\n              required\n            />\n            {formData.english_name && (\n              <p className=\"text-xs text-morandi-muted mt-1\">\n                員工編號將為：{userStoreHelpers.generateUserNumber(formData.english_name)}\n              </p>\n            )}\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n              員工編號（自動生成）\n            </label>\n            <Input\n              value={formData.english_name ? userStoreHelpers.generateUserNumber(formData.english_name) : ''}\n              disabled\n              className=\"bg-morandi-container/20\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-morandi-primary mb-1\">身分證號</label>\n          <Input\n            value={formData.personal_info.national_id}\n            onChange={(e) => setFormData({\n              ...formData,\n              personal_info: { ...formData.personal_info, national_id: e.target.value }\n            })}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-morandi-primary mb-1\">生日</label>\n          <Input\n            type=\"date\"\n            value={formData.personal_info.birthday}\n            onChange={(e) => setFormData({\n              ...formData,\n              personal_info: { ...formData.personal_info, birthday: e.target.value }\n            })}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-morandi-primary mb-1 flex items-center justify-between\">\n            <span>聯絡電話</span>\n            <Button\n              type=\"button\"\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setFormData({\n                  ...formData,\n                  personal_info: {\n                    ...formData.personal_info,\n                    phone: [...formData.personal_info.phone, '']\n                  }\n                });\n              }}\n              className=\"h-6 text-xs\"\n            >\n              <Plus size={12} className=\"mr-1\" />\n              新增電話\n            </Button>\n          </label>\n          <div className=\"space-y-2\">\n            {formData.personal_info.phone.map((phone, index) => (\n              <div key={index} className=\"flex gap-2\">\n                <Input\n                  value={phone}\n                  onChange={(e) => {\n                    const phones = [...formData.personal_info.phone];\n                    phones[index] = e.target.value;\n                    setFormData({\n                      ...formData,\n                      personal_info: { ...formData.personal_info, phone: phones }\n                    });\n                  }}\n                  placeholder={`電話 ${index + 1}`}\n                />\n                {formData.personal_info.phone.length > 1 && (\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => {\n                      const phones = formData.personal_info.phone.filter((_, i) => i !== index);\n                      setFormData({\n                        ...formData,\n                        personal_info: { ...formData.personal_info, phone: phones }\n                      });\n                    }}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <Trash2 size={16} />\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-morandi-primary mb-1\">Email</label>\n          <Input\n            type=\"email\"\n            value={formData.personal_info.email}\n            onChange={(e) => setFormData({\n              ...formData,\n              personal_info: { ...formData.personal_info, email: e.target.value }\n            })}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n            預設登入密碼\n          </label>\n          <Input\n            type=\"text\"\n            value={formData.defaultPassword}\n            onChange={(e) => setFormData({ ...formData, defaultPassword: e.target.value })}\n            placeholder=\"請設定預設密碼\"\n            required\n          />\n          <p className=\"text-xs text-morandi-muted mt-1\">\n            員工可使用此密碼首次登入，建議提醒其登入後更改密碼\n          </p>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-morandi-primary mb-2\">\n            附加身份標籤（可複選）\n          </label>\n          <div className=\"flex flex-wrap gap-4\">\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"user\"\n                checked={formData.roles.includes('user')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'user'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'user') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">普通使用者</span>\n            </label>\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"employee\"\n                checked={formData.roles.includes('employee')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'employee'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'employee') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">員工</span>\n            </label>\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"admin\"\n                checked={formData.roles.includes('admin')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'admin'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'admin') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">管理員</span>\n            </label>\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"tour_leader\"\n                checked={formData.roles.includes('tour_leader')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'tour_leader'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'tour_leader') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">領隊</span>\n            </label>\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"sales\"\n                checked={formData.roles.includes('sales')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'sales'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'sales') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">業務</span>\n            </label>\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"accountant\"\n                checked={formData.roles.includes('accountant')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'accountant'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'accountant') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">會計</span>\n            </label>\n            <label className=\"flex items-center gap-2 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                value=\"assistant\"\n                checked={formData.roles.includes('assistant')}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setFormData({ ...formData, roles: [...formData.roles, 'assistant'] });\n                  } else {\n                    setFormData({ ...formData, roles: formData.roles.filter(r => r !== 'assistant') });\n                  }\n                }}\n                className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n              />\n              <span className=\"text-sm text-morandi-primary\">助理</span>\n            </label>\n          </div>\n          <p className=\"text-xs text-morandi-muted mt-2\">\n            此標籤僅用於篩選，不影響實際權限功能。可勾選多個身份\n          </p>\n        </div>\n      </div>\n\n      {/* 職務資料 */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-morandi-primary border-b pb-2\">職務資料</h3>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-1\">入職日期</label>\n            <Input\n              type=\"date\"\n              value={formData.job_info.hire_date}\n              onChange={(e) => setFormData({\n                ...formData,\n                job_info: { ...formData.job_info, hire_date: e.target.value }\n              })}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-primary mb-1\">起薪</label>\n            <Input\n              type=\"number\"\n              value={formData.salary_info.base_salary}\n              onChange={(e) => setFormData({\n                ...formData,\n                salary_info: { ...formData.salary_info, base_salary: Number(e.target.value) }\n              })}\n              placeholder=\"0\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* 按鈕 */}\n      <div className=\"flex gap-2 pt-4 border-t\">\n        <Button type=\"submit\" className=\"flex-1\">\n          建立員工\n        </Button>\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          取消\n        </Button>\n      </div>\n    </form>\n\n    {/* 成功創建對話框 */}\n    <Dialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-green-600\">✅ 員工創建成功</DialogTitle>\n          <DialogDescription>員工資料已成功建立，請記錄以下登入資訊</DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded-xl p-6\">\n            <p className=\"text-sm text-morandi-primary mb-4\">\n              員工 <span className=\"font-bold text-morandi-gold\">{createdEmployee?.display_name}</span> 已成功創建！\n            </p>\n\n            <div className=\"space-y-3\">\n              {/* 員工編號 */}\n              <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-xs text-morandi-muted mb-1.5\">員工編號</p>\n                    <p className=\"font-mono text-base font-semibold text-morandi-primary\">\n                      {createdEmployee?.employee_number}\n                    </p>\n                  </div>\n                  <button\n                    onClick={() => copyToClipboard(createdEmployee?.employee_number || '', 'number')}\n                    className=\"ml-3 p-2 hover:bg-gray-100 rounded-md transition-colors\"\n                    title=\"複製員工編號\"\n                  >\n                    {copiedField === 'number' ? (\n                      <Check size={20} className=\"text-green-600\" />\n                    ) : (\n                      <Copy size={20} className=\"text-gray-600\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* 預設密碼 */}\n              <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-xs text-morandi-muted mb-1.5\">預設密碼</p>\n                    <p className=\"font-mono text-base font-semibold text-morandi-primary\">\n                      {createdEmployee?.password}\n                    </p>\n                  </div>\n                  <button\n                    onClick={() => copyToClipboard(createdEmployee?.password || '', 'password')}\n                    className=\"ml-3 p-2 hover:bg-gray-100 rounded-md transition-colors\"\n                    title=\"複製密碼\"\n                  >\n                    {copiedField === 'password' ? (\n                      <Check size={20} className=\"text-green-600\" />\n                    ) : (\n                      <Copy size={20} className=\"text-gray-600\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-4 text-sm text-amber-800 bg-amber-50 border border-amber-200 rounded-lg p-3 flex items-start gap-2\">\n              <span className=\"text-base\">💡</span>\n              <span>請提醒員工首次登入後更改密碼</span>\n            </div>\n          </div>\n\n          <Button onClick={handleCloseSuccess} className=\"w-full bg-morandi-gold hover:bg-morandi-gold/90 text-white rounded-lg py-2.5\">\n            完成\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/employee-expanded-view.tsx","messages":[{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":55,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":55,"endColumn":67,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1507,2131],"text":"{ const allowances = employee.salary_info?.allowances || [];\n        const totalAllowances = allowances.reduce((sum, allowance) => sum + allowance.amount, 0);\n        const baseSalary = employee.salary_info?.base_salary || 0;\n        return (\n          <div className=\"flex items-center gap-4 text-morandi-muted\">\n            <span>底薪：NT$ {baseSalary.toLocaleString()}</span>\n            <span>津貼：NT$ {totalAllowances.toLocaleString()}</span>\n            <span className=\"text-morandi-primary font-medium\">\n              總薪資：NT$ {(baseSalary + totalAllowances).toLocaleString()}\n            </span>\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":56,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":56,"endColumn":98,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1507,2131],"text":"{ const allowances = employee.salary_info?.allowances || [];\n        const totalAllowances = allowances.reduce((sum, allowance) => sum + allowance.amount, 0);\n        const baseSalary = employee.salary_info?.base_salary || 0;\n        return (\n          <div className=\"flex items-center gap-4 text-morandi-muted\">\n            <span>底薪：NT$ {baseSalary.toLocaleString()}</span>\n            <span>津貼：NT$ {totalAllowances.toLocaleString()}</span>\n            <span className=\"text-morandi-primary font-medium\">\n              總薪資：NT$ {(baseSalary + totalAllowances).toLocaleString()}\n            </span>\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":57,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":57,"endColumn":67,"suggestions":[{"messageId":"addBrackets","fix":{"range":[1507,2131],"text":"{ const allowances = employee.salary_info?.allowances || [];\n        const totalAllowances = allowances.reduce((sum, allowance) => sum + allowance.amount, 0);\n        const baseSalary = employee.salary_info?.base_salary || 0;\n        return (\n          <div className=\"flex items-center gap-4 text-morandi-muted\">\n            <span>底薪：NT$ {baseSalary.toLocaleString()}</span>\n            <span>津貼：NT$ {totalAllowances.toLocaleString()}</span>\n            <span className=\"text-morandi-primary font-medium\">\n              總薪資：NT$ {(baseSalary + totalAllowances).toLocaleString()}\n            </span>\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":69,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":69,"endColumn":65,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2195,2512],"text":"{ const hasAdmin = employee.permissions.includes('admin');\n        const permissionCount = hasAdmin ? SYSTEM_PERMISSIONS.length : employee.permissions.length;\n\n        return (\n          <div className=\"text-morandi-muted\">\n            已授權 {permissionCount} / {SYSTEM_PERMISSIONS.length} 項功能\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":70,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":70,"endColumn":100,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2195,2512],"text":"{ const hasAdmin = employee.permissions.includes('admin');\n        const permissionCount = hasAdmin ? SYSTEM_PERMISSIONS.length : employee.permissions.length;\n\n        return (\n          <div className=\"text-morandi-muted\">\n            已授權 {permissionCount} / {SYSTEM_PERMISSIONS.length} 項功能\n          </div>\n        ); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4525,4528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4525,4528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useUserStore } from '@/stores/user-store';\nimport { cn } from '@/lib/utils';\nimport {\n  User,\n  DollarSign,\n  Shield,\n  X,\n  Edit,\n  Save\n} from 'lucide-react';\n\n// 導入分頁組件\nimport { BasicInfoTab } from './tabs/basic-info-tab';\nimport { SalaryTab } from './tabs/salary-tab';\nimport { PermissionsTab } from './tabs/permissions-tab';\nimport { SYSTEM_PERMISSIONS } from '@/stores/types';\n\ninterface EmployeeExpandedViewProps {\n  employee_id: string;\n  onClose: () => void;\n}\n\ntype EmployeeTab = 'basic' | 'salary' | 'permissions';\n\nexport function EmployeeExpandedView({ employee_id, onClose }: EmployeeExpandedViewProps) {\n  const [activeTab, setActiveTab] = useState<EmployeeTab>('basic');\n  const [isEditing, setIsEditing] = useState(false);\n  const basicInfoTabRef = useRef<{ handleSave: () => void }>(null);\n  const salaryTabRef = useRef<{ handleSave: () => void }>(null);\n\n  // ✨ 使用 Zustand selector 來自動訂閱員工資料更新\n  const employee = useUserStore(state =>\n    state.items.find(u => u.id === employee_id)\n  );\n\n  if (!employee) {\n    return null;\n  }\n\n  const tabs = [\n    { key: 'basic' as const, label: '基本資料', icon: User },\n    { key: 'salary' as const, label: '薪資', icon: DollarSign },\n    { key: 'permissions' as const, label: '權限', icon: Shield },\n  ];\n\n  const renderTabStats = () => {\n    switch (activeTab) {\n      case 'basic':\n        return null;\n      case 'salary':\n        const allowances = employee.salary_info?.allowances || [];\n        const totalAllowances = allowances.reduce((sum, allowance) => sum + allowance.amount, 0);\n        const baseSalary = employee.salary_info?.base_salary || 0;\n        return (\n          <div className=\"flex items-center gap-4 text-morandi-muted\">\n            <span>底薪：NT$ {baseSalary.toLocaleString()}</span>\n            <span>津貼：NT$ {totalAllowances.toLocaleString()}</span>\n            <span className=\"text-morandi-primary font-medium\">\n              總薪資：NT$ {(baseSalary + totalAllowances).toLocaleString()}\n            </span>\n          </div>\n        );\n      case 'permissions':\n        // 如果有 admin 權限，視為全選\n        const hasAdmin = employee.permissions.includes('admin');\n        const permissionCount = hasAdmin ? SYSTEM_PERMISSIONS.length : employee.permissions.length;\n\n        return (\n          <div className=\"text-morandi-muted\">\n            已授權 {permissionCount} / {SYSTEM_PERMISSIONS.length} 項功能\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      // 根據不同頁面調用對應的儲存函數\n      if (activeTab === 'basic' && basicInfoTabRef.current) {\n        await basicInfoTabRef.current.handleSave();\n      } else if (activeTab === 'salary' && salaryTabRef.current) {\n        await salaryTabRef.current.handleSave();\n      }\n\n      // 重新載入員工資料以確保顯示最新內容\n      const { fetchAll } = useUserStore.getState();\n      await fetchAll();\n\n      setIsEditing(false);\n    } catch (error) {\n      console.error('❌ 儲存失敗:', error);\n      alert('儲存失敗，請稍後再試');\n    }\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'basic':\n        return <BasicInfoTab ref={basicInfoTabRef} employee={employee} isEditing={isEditing} setIsEditing={setIsEditing} />;\n      case 'salary':\n        return <SalaryTab ref={salaryTabRef} employee={employee} isEditing={isEditing} setIsEditing={setIsEditing} />;\n      case 'permissions':\n        return <PermissionsTab employee={employee} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg w-full max-w-6xl h-[90vh] flex flex-col\">\n        {/* 標題列 */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-12 h-12 rounded-full bg-morandi-container/30 flex items-center justify-center\">\n              {employee.avatar ? (\n                <img\n                  src={employee.avatar}\n                  alt={employee.display_name}\n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n              ) : (\n                <User size={24} className=\"text-morandi-secondary\" />\n              )}\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-morandi-primary\">\n                {employee.display_name || (employee as any).chinese_name || '未命名員工'}\n              </h2>\n              <p className=\"text-morandi-secondary\">\n                {employee.employee_number}\n              </p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X size={16} />\n          </Button>\n        </div>\n\n        {/* 分頁導航 */}\n        <div className=\"flex items-center justify-between border-b border-border px-6\">\n          <div className=\"flex\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.key}\n                  onClick={() => setActiveTab(tab.key)}\n                  className={cn(\n                    'flex items-center gap-2 px-4 py-3 text-sm font-medium transition-colors relative',\n                    activeTab === tab.key\n                      ? 'text-morandi-primary border-b-2 border-morandi-gold'\n                      : 'text-morandi-secondary hover:text-morandi-primary'\n                  )}\n                >\n                  <Icon size={16} />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </div>\n\n          {/* 中間統計資訊區域 */}\n          <div className=\"flex items-center gap-6 text-sm\">\n            {renderTabStats()}\n          </div>\n\n          {/* 編輯按鈕區域（權限分頁不顯示） */}\n          {activeTab !== 'permissions' && (\n            <div className=\"py-3\">\n              {isEditing ? (\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" onClick={handleSave}>\n                    <Save size={14} className=\"mr-1\" />\n                    儲存\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(false)}>\n                    <X size={14} className=\"mr-1\" />\n                    取消\n                  </Button>\n                </div>\n              ) : (\n                <Button size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(true)}>\n                  <Edit size={14} className=\"mr-1\" />\n                  編輯\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* 分頁內容 */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/tabs/attendance-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isEditing' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsEditing' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { Employee } from '@/stores/types';\nimport { Calendar, Clock } from 'lucide-react';\n\ninterface AttendanceTabProps {\n  employee: Employee;\n  isEditing?: boolean;\n  setIsEditing?: (editing: boolean) => void;\n}\n\nexport const AttendanceTab = forwardRef<{ handleSave: () => void }, AttendanceTabProps>(\n  ({ employee, isEditing, setIsEditing }, ref) => {\n  useImperativeHandle(ref, () => ({\n    handleSave: async () => {\n      // 出勤資訊目前為唯讀，未來若需編輯功能可在此實作\n      console.log('AttendanceTab handleSave called');\n    }\n  }));\n\n  const getLeaveTypeLabel = (type: Employee['attendance']['leave_records'][0]['type']) => {\n    const typeMap = {\n      annual: '年假',\n      sick: '病假',\n      personal: '事假',\n      maternity: '產假',\n      other: '其他'\n    };\n    return typeMap[type];\n  };\n\n  const getStatusColor = (status: Employee['attendance']['leave_records'][0]['status']) => {\n    const colorMap = {\n      pending: 'text-yellow-600',\n      approved: 'text-green-600',\n      rejected: 'text-red-600'\n    };\n    return colorMap[status];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 請假紀錄 */}\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n        <h4 className=\"font-medium text-morandi-primary mb-3\">請假紀錄</h4>\n\n        {employee.attendance.leave_records.length > 0 ? (\n          <div className=\"space-y-3\">\n            {employee.attendance.leave_records.map((record) => (\n              <div key={record.id} className=\"bg-white rounded border p-3\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <span className=\"font-medium text-morandi-primary\">\n                      {getLeaveTypeLabel(record.type)}\n                    </span>\n                    <span className={`ml-2 text-sm font-medium ${getStatusColor(record.status)}`}>\n                      {record.status === 'pending' ? '待審核' :\n                       record.status === 'approved' ? '已核准' : '已拒絕'}\n                    </span>\n                  </div>\n                  <span className=\"text-sm text-morandi-muted\">\n                    {record.days} 天\n                  </span>\n                </div>\n                <div className=\"text-sm text-morandi-secondary\">\n                  {new Date(record.start_date).toLocaleDateString()} - {new Date(record.end_date).toLocaleDateString()}\n                </div>\n                {record.reason && (\n                  <div className=\"text-sm text-morandi-muted mt-1\">\n                    原因：{record.reason}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-morandi-muted text-sm\">無請假紀錄</p>\n        )}\n      </div>\n\n      {/* 加班紀錄 */}\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n        <h4 className=\"font-medium text-morandi-primary mb-3\">加班紀錄</h4>\n\n        {employee.attendance.overtime_records.length > 0 ? (\n          <div className=\"space-y-3\">\n            {employee.attendance.overtime_records.map((record) => (\n              <div key={record.id} className=\"bg-white rounded border p-3\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div className=\"font-medium text-morandi-primary\">\n                    {new Date(record.date).toLocaleDateString()}\n                  </div>\n                  <span className=\"text-sm text-morandi-muted\">\n                    {record.hours} 小時\n                  </span>\n                </div>\n                <div className=\"text-sm text-morandi-muted\">\n                  原因：{record.reason}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-morandi-muted text-sm\">無加班紀錄</p>\n        )}\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/tabs/basic-info-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Save' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1359,1362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1359,1362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2602,2605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2602,2605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2760,2763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2760,2763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCancel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":88,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3391,3394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3391,3394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5029,5032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5029,5032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5054,5057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5054,5057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7130,7133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7130,7133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Employee } from '@/stores/types';\nimport { useUserStore, userStoreHelpers } from '@/stores/user-store';\nimport { User, Phone, Mail, MapPin, Calendar, Edit, Save, X, Lock, Eye, EyeOff, Plus, Trash2 } from 'lucide-react';\n\ninterface BasicInfoTabProps {\n  employee: Employee;\n  isEditing: boolean;\n  setIsEditing: (editing: boolean) => void;\n}\n\nexport const BasicInfoTab = forwardRef<{ handleSave: () => void }, BasicInfoTabProps>(\n  ({ employee, isEditing, setIsEditing }, ref) => {\n  const { update: updateUser } = useUserStore();\n  const [showPasswordSection, setShowPasswordSection] = useState(false);\n  const [passwordData, setPasswordData] = useState({\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [passwordUpdateLoading, setPasswordUpdateLoading] = useState(false);\n\n  console.log('🔍 BasicInfoTab employee:', employee);\n  console.log('🔍 personal_info:', employee.personal_info);\n  console.log('🔍 emergency_contact:', employee.personal_info?.emergency_contact);\n\n  const [formData, setFormData] = useState({\n    display_name: employee.display_name || '',\n    chinese_name: (employee as any).chinese_name || '',\n    english_name: employee.english_name || '',\n    personal_info: {\n      national_id: employee.personal_info?.national_id || '',\n      birthday: employee.personal_info?.birthday || '',\n      phone: Array.isArray(employee.personal_info?.phone)\n        ? employee.personal_info.phone\n        : employee.personal_info?.phone\n          ? [employee.personal_info.phone]\n          : [''],\n      email: employee.personal_info?.email || '',\n      address: employee.personal_info?.address || '',\n      emergency_contact: {\n        name: employee.personal_info?.emergency_contact?.name || '',\n        relationship: employee.personal_info?.emergency_contact?.relationship || '',\n        phone: employee.personal_info?.emergency_contact?.phone || ''\n      }\n    },\n    job_info: {\n      supervisor: employee.job_info?.supervisor || '',\n      hire_date: employee.job_info?.hire_date || '',\n      probation_end_date: employee.job_info?.probation_end_date || ''\n    }\n  });\n\n  const handleSave = async () => {\n    console.log('🔵 [BasicInfoTab] handleSave 開始執行');\n    console.log('🔵 [BasicInfoTab] formData:', formData);\n    console.log('🔵 [BasicInfoTab] employee.id:', employee.id);\n\n    // 如果英文名字改變了，同時更新員工編號\n    const updates: any = { ...formData };\n\n    if (formData.english_name !== employee.english_name) {\n      console.log('🔵 [BasicInfoTab] 英文名字有變更，重新生成員工編號');\n      (updates as any).employee_number = userStoreHelpers.generateUserNumber(formData.english_name);\n    }\n\n    console.log('🔵 [BasicInfoTab] 準備更新，updates:', updates);\n\n    try {\n      await updateUser(employee.id, updates);\n      console.log('✅ [BasicInfoTab] 更新成功');\n      setIsEditing(false);\n    } catch (error) {\n      console.error('❌ [BasicInfoTab] 更新失敗:', error);\n      alert('儲存失敗：' + (error as Error).message);\n    }\n  };\n\n  // 將 handleSave 暴露給父組件\n  useImperativeHandle(ref, () => ({\n    handleSave\n  }));\n\n  const handleCancel = () => {\n    setFormData({\n      display_name: employee.display_name || '',\n      chinese_name: (employee as any).chinese_name || '',\n      english_name: employee.english_name || '',\n      personal_info: {\n        national_id: employee.personal_info?.national_id || '',\n        birthday: employee.personal_info?.birthday || '',\n        phone: Array.isArray(employee.personal_info?.phone)\n          ? employee.personal_info.phone\n          : employee.personal_info?.phone\n            ? [employee.personal_info.phone]\n            : [''],\n        email: employee.personal_info?.email || '',\n        address: employee.personal_info?.address || '',\n        emergency_contact: {\n          name: employee.personal_info?.emergency_contact?.name || '',\n          relationship: employee.personal_info?.emergency_contact?.relationship || '',\n          phone: employee.personal_info?.emergency_contact?.phone || ''\n        }\n      },\n      job_info: {\n        supervisor: employee.job_info?.supervisor || '',\n        hire_date: employee.job_info?.hire_date || '',\n        probation_end_date: employee.job_info?.probation_end_date || ''\n      }\n    });\n    setIsEditing(false);\n  };\n\n  const handlePasswordUpdate = async () => {\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      alert('新密碼與確認密碼不符！');\n      return;\n    }\n\n    if (passwordData.newPassword.length < 8) {\n      alert('密碼長度至少需要8個字元！');\n      return;\n    }\n\n    setPasswordUpdateLoading(true);\n\n    try {\n      // 導入密碼加密函數\n      const { hashPassword } = await import('@/lib/auth');\n      const hashedPassword = await hashPassword(passwordData.newPassword);\n\n      // 導入 Supabase client\n      const { supabase } = await import('@/lib/supabase/client');\n\n      const result: any = await (supabase as any)\n        .from('employees')\n        .update({ password_hash: hashedPassword })\n        .eq('employee_number', employee.employee_number);\n\n      const { error } = result;\n\n      if (error) {\n        console.error('密碼更新失敗:', error);\n        alert('密碼更新失敗：' + error.message);\n        return;\n      }\n\n      alert(`成功更新 ${employee.display_name} 的密碼！`);\n      setPasswordData({ newPassword: '', confirmPassword: '' });\n      setShowPasswordSection(false);\n    } catch (error) {\n      console.error('密碼更新過程中發生錯誤:', error);\n      alert('密碼更新失敗，請稍後再試');\n    } finally {\n      setPasswordUpdateLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* 左側：個人基本資料 */}\n        <div className=\"space-y-6\">\n          <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n            <h4 className=\"font-medium text-morandi-primary mb-3\">個人資料</h4>\n\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                    顯示名稱\n                  </label>\n                  {isEditing ? (\n                    <Input\n                      value={formData.display_name}\n                      onChange={(e) => setFormData({ ...formData, display_name: e.target.value })}\n                    />\n                  ) : (\n                    <p className=\"text-morandi-primary py-2\">{employee.display_name}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                    中文姓名\n                  </label>\n                  {isEditing ? (\n                    <Input\n                      value={formData.chinese_name}\n                      onChange={(e) => setFormData({ ...formData, chinese_name: e.target.value })}\n                    />\n                  ) : (\n                    <p className=\"text-morandi-primary py-2\">{(employee as any).chinese_name || '-'}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                    英文姓名\n                  </label>\n                  {isEditing ? (\n                    <Input\n                      value={formData.english_name}\n                      onChange={(e) => setFormData({ ...formData, english_name: e.target.value })}\n                    />\n                  ) : (\n                    <p className=\"text-morandi-primary py-2\">{employee.english_name}</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                    員工編號\n                  </label>\n                  <p className=\"text-morandi-primary py-2 bg-morandi-container/20 px-3 rounded\">\n                    {employee.employee_number}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                  身分證號\n                </label>\n                {isEditing ? (\n                  <Input\n                    value={formData.personal_info.national_id}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: { ...formData.personal_info, national_id: e.target.value }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">{employee.personal_info.national_id}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1 flex items-center gap-1\">\n                  <Calendar size={14} />\n                  生日\n                </label>\n                {isEditing ? (\n                  <Input\n                    type=\"date\"\n                    value={formData.personal_info.birthday}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: { ...formData.personal_info, birthday: e.target.value }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">\n                    {new Date(employee.personal_info.birthday).toLocaleDateString()}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 聯絡資訊 */}\n          <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n            <h4 className=\"font-medium text-morandi-primary mb-3\">聯絡資訊</h4>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1 flex items-center justify-between\">\n                  <span className=\"flex items-center gap-1\">\n                    <Phone size={14} />\n                    聯絡電話\n                  </span>\n                  {isEditing && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        const phones = Array.isArray(formData.personal_info.phone)\n                          ? formData.personal_info.phone\n                          : [formData.personal_info.phone];\n                        setFormData({\n                          ...formData,\n                          personal_info: {\n                            ...formData.personal_info,\n                            phone: [...phones, '']\n                          }\n                        });\n                      }}\n                      className=\"h-6 text-xs\"\n                    >\n                      <Plus size={12} className=\"mr-1\" />\n                      新增電話\n                    </Button>\n                  )}\n                </label>\n                {isEditing ? (\n                  <div className=\"space-y-2\">\n                    {(Array.isArray(formData.personal_info.phone)\n                      ? formData.personal_info.phone\n                      : [formData.personal_info.phone]\n                    ).map((phone, index) => (\n                      <div key={index} className=\"flex gap-2\">\n                        <Input\n                          value={phone}\n                          onChange={(e) => {\n                            const phones = Array.isArray(formData.personal_info.phone)\n                              ? [...formData.personal_info.phone]\n                              : [formData.personal_info.phone];\n                            phones[index] = e.target.value;\n                            setFormData({\n                              ...formData,\n                              personal_info: { ...formData.personal_info, phone: phones }\n                            });\n                          }}\n                          placeholder={`電話 ${index + 1}`}\n                        />\n                        {(Array.isArray(formData.personal_info.phone)\n                          ? formData.personal_info.phone.length\n                          : 1) > 1 && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => {\n                              const phones = Array.isArray(formData.personal_info.phone)\n                                ? formData.personal_info.phone.filter((_, i) => i !== index)\n                                : [];\n                              setFormData({\n                                ...formData,\n                                personal_info: { ...formData.personal_info, phone: phones }\n                              });\n                            }}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <Trash2 size={16} />\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-1\">\n                    {(Array.isArray(employee.personal_info.phone)\n                      ? employee.personal_info.phone\n                      : [employee.personal_info.phone]\n                    ).map((phone, index) => (\n                      <p key={index} className=\"text-morandi-primary py-2\">\n                        {phone || '-'}\n                      </p>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1 flex items-center gap-1\">\n                  <Mail size={14} />\n                  Email\n                </label>\n                {isEditing ? (\n                  <Input\n                    type=\"email\"\n                    value={formData.personal_info.email}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: { ...formData.personal_info, email: e.target.value }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">{employee.personal_info.email}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1 flex items-center gap-1\">\n                  <MapPin size={14} />\n                  地址\n                </label>\n                {isEditing ? (\n                  <Input\n                    value={formData.personal_info.address}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: { ...formData.personal_info, address: e.target.value }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">{employee.personal_info.address}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 右側：職務資料與緊急聯絡人 */}\n        <div className=\"space-y-6\">\n          {/* 職務資料 */}\n          <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n            <h4 className=\"font-medium text-morandi-primary mb-3\">職務資料</h4>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                  入職日期\n                </label>\n                {isEditing ? (\n                  <Input\n                    type=\"date\"\n                    value={formData.job_info.hire_date}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      job_info: { ...formData.job_info, hire_date: e.target.value }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">\n                    {new Date(employee.job_info.hire_date).toLocaleDateString()}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 緊急聯絡人 */}\n          <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n            <h4 className=\"font-medium text-morandi-primary mb-3\">緊急聯絡人</h4>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                  姓名\n                </label>\n                {isEditing ? (\n                  <Input\n                    value={formData.personal_info.emergency_contact.name}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: {\n                        ...formData.personal_info,\n                        emergency_contact: {\n                          ...formData.personal_info.emergency_contact,\n                          name: e.target.value\n                        }\n                      }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">{employee.personal_info?.emergency_contact?.name || '-'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                  關係\n                </label>\n                {isEditing ? (\n                  <Input\n                    value={formData.personal_info.emergency_contact.relationship}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: {\n                        ...formData.personal_info,\n                        emergency_contact: {\n                          ...formData.personal_info.emergency_contact,\n                          relationship: e.target.value\n                        }\n                      }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">{employee.personal_info?.emergency_contact?.relationship || '-'}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                  電話\n                </label>\n                {isEditing ? (\n                  <Input\n                    value={formData.personal_info.emergency_contact.phone}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      personal_info: {\n                        ...formData.personal_info,\n                        emergency_contact: {\n                          ...formData.personal_info.emergency_contact,\n                          phone: e.target.value\n                        }\n                      }\n                    })}\n                  />\n                ) : (\n                  <p className=\"text-morandi-primary py-2\">{employee.personal_info?.emergency_contact?.phone || '-'}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 密碼管理區塊 */}\n          <div className=\"bg-morandi-container/10 rounded-lg p-4 border-l-4 border-morandi-gold\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-medium text-morandi-primary flex items-center gap-2\">\n                <Lock size={16} />\n                密碼管理\n              </h4>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => setShowPasswordSection(!showPasswordSection)}\n                className=\"text-sm\"\n              >\n                {showPasswordSection ? '取消' : '修改密碼'}\n              </Button>\n            </div>\n\n            {!showPasswordSection && (\n              <p className=\"text-sm text-morandi-muted\">\n                點擊「修改密碼」為 {employee.display_name} 設定新密碼\n              </p>\n            )}\n\n            {showPasswordSection && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                    新密碼\n                  </label>\n                  <div className=\"relative\">\n                    <Input\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={passwordData.newPassword}\n                      onChange={(e) => setPasswordData({\n                        ...passwordData,\n                        newPassword: e.target.value\n                      })}\n                      placeholder=\"至少8個字元\"\n                      className=\"pr-10\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary hover:text-morandi-primary\"\n                    >\n                      {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                    </button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-morandi-primary mb-1\">\n                    確認新密碼\n                  </label>\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={passwordData.confirmPassword}\n                    onChange={(e) => setPasswordData({\n                      ...passwordData,\n                      confirmPassword: e.target.value\n                    })}\n                    placeholder=\"再次輸入新密碼\"\n                  />\n                </div>\n\n                {passwordData.newPassword && passwordData.confirmPassword && (\n                  <div className=\"text-sm\">\n                    {passwordData.newPassword === passwordData.confirmPassword ? (\n                      <span className=\"text-green-600\">✓ 密碼確認一致</span>\n                    ) : (\n                      <span className=\"text-red-600\">✗ 密碼確認不一致</span>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    size=\"sm\"\n                    onClick={handlePasswordUpdate}\n                    disabled={passwordUpdateLoading || !passwordData.newPassword || passwordData.newPassword !== passwordData.confirmPassword || passwordData.newPassword.length < 8}\n                    className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n                  >\n                    {passwordUpdateLoading ? '更新中...' : '更新密碼'}\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowPasswordSection(false);\n                      setPasswordData({ newPassword: '', confirmPassword: '' });\n                    }}\n                  >\n                    取消\n                  </Button>\n                </div>\n\n                <div className=\"text-xs text-morandi-muted bg-morandi-container/30 p-2 rounded\">\n                  <p>📝 密碼要求：</p>\n                  <ul className=\"list-disc list-inside mt-1 space-y-1\">\n                    <li>至少8個字元</li>\n                    <li>建議包含數字和字母</li>\n                    <li>員工下次登入時需要使用新密碼</li>\n                  </ul>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nBasicInfoTab.displayName = 'BasicInfoTab';","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/tabs/contracts-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isEditing' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsEditing' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { Employee } from '@/stores/types';\nimport { FileText } from 'lucide-react';\n\ninterface ContractsTabProps {\n  employee: Employee;\n  isEditing?: boolean;\n  setIsEditing?: (editing: boolean) => void;\n}\n\nexport const ContractsTab = forwardRef<{ handleSave: () => void }, ContractsTabProps>(\n  ({ employee, isEditing, setIsEditing }, ref) => {\n  useImperativeHandle(ref, () => ({\n    handleSave: async () => {\n      // 合約資訊目前為唯讀，未來若需編輯功能可在此實作\n      console.log('ContractsTab handleSave called');\n    }\n  }));\n\n  const getContractTypeLabel = (type: Employee['contracts'][0]['type']) => {\n    const typeMap = {\n      employment: '正式雇用',\n      probation: '試用期',\n      renewal: '續約'\n    };\n    return typeMap[type];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n\n        {employee.contracts.length > 0 ? (\n          <div className=\"space-y-3\">\n            {employee.contracts.map((contract) => (\n              <div key={contract.id} className=\"bg-white rounded border p-4\">\n                <div className=\"flex justify-between items-start mb-3\">\n                  <div>\n                    <h4 className=\"font-medium text-morandi-primary\">\n                      {getContractTypeLabel(contract.type)}\n                    </h4>\n                    <p className=\"text-sm text-morandi-muted\">\n                      合約編號：{contract.id}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-morandi-secondary\">\n                      {new Date(contract.start_date).toLocaleDateString()}\n                      {contract.end_date && ` - ${new Date(contract.end_date).toLocaleDateString()}`}\n                    </p>\n                  </div>\n                </div>\n\n                {contract.notes && (\n                  <div className=\"text-sm text-morandi-muted mb-2\">\n                    備註：{contract.notes}\n                  </div>\n                )}\n\n                {contract.file_path && (\n                  <div className=\"text-sm\">\n                    <a\n                      href={contract.file_path}\n                      className=\"text-morandi-primary hover:underline\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      檢視合約檔案\n                    </a>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-morandi-muted text-sm\">無合約紀錄</p>\n        )}\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/tabs/permissions-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Shield' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Save' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[878,881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[878,881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1130,1133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1130,1133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'employee'. Either include it or remove the dependency array. If 'setSelectedRoles' needs the current value of 'employee', you can also switch to useReducer instead of useState and read 'employee' in the reducer.","line":27,"column":8,"nodeType":"ArrayExpression","endLine":27,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [employee, employee.permissions]","fix":{"range":[1156,1203],"text":"[employee, employee.permissions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":27,"column":31,"nodeType":"MemberExpression","endLine":27,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1192,1195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1192,1195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2558,2561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2558,2561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2815,2818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2815,2818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3340,3343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3340,3343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3796,3799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3796,3799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4703,4706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4703,4706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'roleLabels' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":184,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Employee, SYSTEM_PERMISSIONS } from '@/stores/types';\nimport { useUserStore, userStoreHelpers } from '@/stores/user-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { Shield, Check, X, Save, Edit } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface PermissionsTabProps {\n  employee: Employee;\n}\n\nexport const PermissionsTab = forwardRef<{ handleSave: () => void }, PermissionsTabProps>(\n  ({ employee }, ref) => {\n    const { user, login } = useAuthStore();\n    const { update: updateUser } = useUserStore();\n    const [selectedPermissions, setSelectedPermissions] = useState<string[]>(employee.permissions);\n    const [selectedRoles, setSelectedRoles] = useState<string[]>((employee as any).roles || []);\n    const [isSaving, setIsSaving] = useState(false);\n    const [showSavedMessage, setShowSavedMessage] = useState(false);\n\n    useEffect(() => {\n      setSelectedPermissions(employee.permissions);\n      setSelectedRoles((employee as any).roles || []);\n    }, [employee.permissions, (employee as any).roles]);\n\n    const handlePermissionToggle = async (permissionId: string) => {\n      let newPermissions: string[];\n\n      // 如果勾選系統管理員，自動全選所有權限\n      if (permissionId === 'admin') {\n        const isAdminSelected = selectedPermissions.includes('admin');\n        if (!isAdminSelected) {\n          newPermissions = SYSTEM_PERMISSIONS.map(p => p.id);\n        } else {\n          newPermissions = [];\n        }\n      } else {\n        // 切換其他權限\n        newPermissions = selectedPermissions.includes(permissionId)\n          ? selectedPermissions.filter(id => id !== permissionId)\n          : [...selectedPermissions, permissionId];\n\n        // 如果取消勾選任何權限，自動取消系統管理員\n        if (selectedPermissions.includes('admin') && !newPermissions.includes(permissionId)) {\n          newPermissions = newPermissions.filter(id => id !== 'admin');\n        }\n      }\n\n      setSelectedPermissions(newPermissions);\n\n      // 自動儲存\n      await autoSave(newPermissions);\n    };\n\n    const handleRoleToggle = async (role: string) => {\n      const newRoles = selectedRoles.includes(role)\n        ? selectedRoles.filter(r => r !== role)\n        : [...selectedRoles, role];\n\n      setSelectedRoles(newRoles);\n      await saveRoles(newRoles);\n    };\n\n    const saveRoles = async (roles: string[]) => {\n      setIsSaving(true);\n      try {\n        await updateUser(employee.id, { roles: roles as any });\n\n        // 同步更新 IndexedDB\n        try {\n          const { localDB } = await import('@/lib/db');\n          const { TABLES } = await import('@/lib/db/schemas');\n\n          const existingEmployee = await localDB.read(TABLES.EMPLOYEES, employee.id) as any;\n          if (existingEmployee) {\n            await localDB.put(TABLES.EMPLOYEES, {\n              ...existingEmployee,\n              roles: roles,\n              updated_at: new Date().toISOString()\n            });\n          }\n        } catch (error) {\n          console.error('⚠️ IndexedDB 更新失敗（不影響主要功能）:', error);\n        }\n\n        // 如果修改的是當前登入用戶，更新 auth-store 和 LocalProfile\n        if (user && user.id === employee.id) {\n          // 更新 auth-store\n          login({\n            ...user,\n            roles: roles as any\n          });\n\n          // 🎴 同步更新 LocalProfile（角色卡）\n          try {\n            const { useLocalAuthStore } = await import('@/lib/auth/local-auth-manager');\n            const localAuthStore = useLocalAuthStore.getState();\n            const currentProfile = localAuthStore.currentProfile;\n\n            if (currentProfile && currentProfile.id === employee.id) {\n              localAuthStore.updateProfile(employee.id, {\n                roles: roles as any\n              });\n              console.log('✅ LocalProfile 角色已更新:', roles);\n            }\n          } catch (error) {\n            console.error('⚠️ LocalProfile 更新失敗（不影響主要功能）:', error);\n          }\n        }\n\n        // 顯示儲存成功訊息\n        setShowSavedMessage(true);\n        setTimeout(() => setShowSavedMessage(false), 2000);\n      } catch (error) {\n        console.error('❌ 儲存失敗:', error);\n        alert('儲存失敗，請稍後再試');\n      } finally {\n        setIsSaving(false);\n      }\n    };\n\n    const autoSave = async (permissions: string[]) => {\n      setIsSaving(true);\n      try {\n        await userStoreHelpers.updateUserPermissions(employee.id, permissions);\n\n        // 同步更新 IndexedDB\n        try {\n          const { localDB } = await import('@/lib/db');\n          const { TABLES } = await import('@/lib/db/schemas');\n\n          const existingEmployee = await localDB.read(TABLES.EMPLOYEES, employee.id) as any;\n          if (existingEmployee) {\n            await localDB.put(TABLES.EMPLOYEES, {\n              ...existingEmployee,\n              permissions: permissions,\n              updated_at: new Date().toISOString()\n            });\n          }\n        } catch (error) {\n          console.error('⚠️ IndexedDB 更新失敗（不影響主要功能）:', error);\n        }\n\n        // 如果修改的是當前登入用戶，更新 auth-store\n        if (user && user.id === employee.id) {\n          login({\n            ...user,\n            permissions: permissions\n          });\n        }\n\n        // 顯示儲存成功訊息\n        setShowSavedMessage(true);\n        setTimeout(() => setShowSavedMessage(false), 2000);\n      } catch (error) {\n        console.error('❌ 儲存失敗:', error);\n        alert('儲存失敗，請稍後再試');\n      } finally {\n        setIsSaving(false);\n      }\n    };\n\n    // 暴露空的 handleSave（保持相容性）\n    useImperativeHandle(ref, () => ({\n      handleSave: async () => {\n        // 權限已自動儲存，這裡不需要做任何事\n      }\n    }));\n\n  // 按類別分組權限\n  const permissionsByCategory = SYSTEM_PERMISSIONS.reduce((acc, permission) => {\n    if (!acc[permission.category]) {\n      acc[permission.category] = [];\n    }\n    acc[permission.category].push(permission);\n    return acc;\n  }, {} as Record<string, typeof SYSTEM_PERMISSIONS>);\n\n  const categories = Object.keys(permissionsByCategory);\n\n  const roleLabels = {\n    admin: '管理員',\n    employee: '員工',\n    user: '普通使用者',\n    tour_leader: '領隊',\n    sales: '業務',\n    accountant: '會計',\n    assistant: '助理'\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 自動儲存提示 */}\n      {showSavedMessage && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 flex items-center gap-2 text-green-700\">\n          <Check size={16} />\n          <span className=\"text-sm font-medium\">✓ 已自動儲存</span>\n        </div>\n      )}\n\n      {/* 儲存中提示 */}\n      {isSaving && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 flex items-center gap-2 text-blue-700\">\n          <div className=\"animate-spin w-4 h-4 border-2 border-blue-700 border-t-transparent rounded-full\"></div>\n          <span className=\"text-sm font-medium\">儲存中...</span>\n        </div>\n      )}\n\n      {/* 角色選擇 */}\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n        <h4 className=\"font-medium text-morandi-primary mb-3\">附加身份標籤（可複選）</h4>\n        <p className=\"text-xs text-morandi-muted mb-3\">此標籤僅用於篩選，不影響實際權限功能。可勾選多個身份</p>\n        <div className=\"flex flex-wrap gap-4\">\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"user\"\n              checked={selectedRoles.includes('user')}\n              onChange={() => handleRoleToggle('user')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">普通使用者</span>\n          </label>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"employee\"\n              checked={selectedRoles.includes('employee')}\n              onChange={() => handleRoleToggle('employee')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">員工</span>\n          </label>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"admin\"\n              checked={selectedRoles.includes('admin')}\n              onChange={() => handleRoleToggle('admin')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">管理員</span>\n          </label>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"tour_leader\"\n              checked={selectedRoles.includes('tour_leader')}\n              onChange={() => handleRoleToggle('tour_leader')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">領隊</span>\n          </label>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"sales\"\n              checked={selectedRoles.includes('sales')}\n              onChange={() => handleRoleToggle('sales')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">業務</span>\n          </label>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"accountant\"\n              checked={selectedRoles.includes('accountant')}\n              onChange={() => handleRoleToggle('accountant')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">會計</span>\n          </label>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              value=\"assistant\"\n              checked={selectedRoles.includes('assistant')}\n              onChange={() => handleRoleToggle('assistant')}\n              className=\"w-4 h-4 text-morandi-gold focus:ring-morandi-gold rounded\"\n            />\n            <span className=\"text-sm text-morandi-primary\">助理</span>\n          </label>\n        </div>\n      </div>\n\n      {/* 權限分類列表 */}\n      <div className=\"space-y-6\">\n        {categories.map((category) => (\n          <div key={category} className=\"bg-morandi-container/10 rounded-lg p-4\">\n            <h4 className=\"font-medium text-morandi-primary mb-4 pb-2 border-b border-border/50\">\n              {category}\n            </h4>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n              {permissionsByCategory[category].map((permission) => {\n                // 如果有 admin 權限，視為全選\n                const hasAdmin = selectedPermissions.includes('admin');\n                const isSelected = hasAdmin || selectedPermissions.includes(permission.id);\n\n                return (\n                  <div\n                    key={permission.id}\n                    onClick={() => handlePermissionToggle(permission.id)}\n                    className={cn(\n                      'flex items-center gap-2 p-2.5 rounded-lg border transition-all cursor-pointer hover:bg-morandi-container/20',\n                      isSelected\n                        ? 'border-morandi-gold bg-morandi-gold/10'\n                        : 'border-border bg-white'\n                    )}\n                  >\n                    <div className={cn(\n                      'w-4 h-4 rounded border-2 flex items-center justify-center transition-colors flex-shrink-0',\n                      isSelected\n                        ? 'border-morandi-gold bg-morandi-gold text-white'\n                        : 'border-morandi-muted'\n                    )}>\n                      {isSelected && <Check size={10} />}\n                    </div>\n                    <p className=\"text-sm font-medium text-morandi-primary truncate\">\n                      {permission.label}\n                    </p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        ))}\n      </div>\n\n    </div>\n  );\n});\n\nPermissionsTab.displayName = 'PermissionsTab';","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/hr/tabs/salary-tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isEditing' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsEditing' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { Employee } from '@/stores/types';\nimport { DollarSign, TrendingUp } from 'lucide-react';\n\ninterface SalaryTabProps {\n  employee: Employee;\n  isEditing?: boolean;\n  setIsEditing?: (editing: boolean) => void;\n}\n\nexport const SalaryTab = forwardRef<{ handleSave: () => void }, SalaryTabProps>(\n  ({ employee, isEditing, setIsEditing }, ref) => {\n  useImperativeHandle(ref, () => ({\n    handleSave: async () => {\n      // 薪資資訊目前為唯讀，未來若需編輯功能可在此實作\n      console.log('SalaryTab handleSave called');\n    }\n  }));\n\n  const allowances = employee.salary_info?.allowances || [];\n  const totalAllowances = allowances.reduce((sum, allowance) => sum + allowance.amount, 0);\n  const baseSalary = employee.salary_info?.base_salary || 0;\n  const salaryHistory = employee.salary_info?.salary_history || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 目前薪資資訊 */}\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-morandi-primary\">\n              NT$ {baseSalary.toLocaleString()}\n            </p>\n            <p className=\"text-sm text-morandi-muted\">底薪</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-morandi-gold\">\n              NT$ {totalAllowances.toLocaleString()}\n            </p>\n            <p className=\"text-sm text-morandi-muted\">津貼</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-green-600\">\n              NT$ {(baseSalary + totalAllowances).toLocaleString()}\n            </p>\n            <p className=\"text-sm text-morandi-muted\">總薪資</p>\n          </div>\n        </div>\n      </div>\n\n      {/* 津貼明細 */}\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n        <h4 className=\"font-medium text-morandi-primary mb-3\">津貼明細</h4>\n        {allowances.length > 0 ? (\n          <div className=\"space-y-2\">\n            {allowances.map((allowance, index) => (\n              <div key={index} className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                <span className=\"text-morandi-primary\">{allowance.type}</span>\n                <span className=\"font-medium\">NT$ {allowance.amount.toLocaleString()}</span>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-morandi-muted text-sm\">無津貼項目</p>\n        )}\n      </div>\n\n      {/* 薪資調整歷史 */}\n      <div className=\"bg-morandi-container/10 rounded-lg p-4\">\n        <h4 className=\"font-medium text-morandi-primary mb-3 flex items-center gap-2\">\n          <TrendingUp size={16} />\n          薪資調整歷史\n        </h4>\n        <div className=\"space-y-3\">\n          {salaryHistory.map((record: any, index: number) => (\n            <div key={index} className=\"flex justify-between items-center p-3 bg-white rounded border\">\n              <div>\n                <p className=\"font-medium text-morandi-primary\">\n                  NT$ {record.base_salary.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-morandi-muted\">{record.reason}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-morandi-secondary\">\n                  {new Date(record.effective_date).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/content-container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { cn } from '@/lib/utils';\n\ninterface HeaderProps {\n  title: string;\n  tabs?: {\n    value: string;\n    label: string;\n  }[];\n  activeTab?: string;\n  onTabChange?: (value: string) => void;\n  onAdd?: () => void;\n  addLabel?: string;\n  children?: React.ReactNode;\n}\n\nexport function Header({\n  title,\n  tabs,\n  activeTab,\n  onTabChange,\n  onAdd,\n  addLabel = '新增',\n  children\n}: HeaderProps) {\n  return (\n    <div className=\"fixed top-0 right-0 left-64 h-[72px] bg-background border-b border-border z-40 flex items-center px-6 transition-all duration-300\">\n      {/* 最左側 - 返回按鈕 */}\n      {children && (\n        <div className=\"flex items-center mr-4\">\n          {children}\n        </div>\n      )}\n\n      {/* 左側 - 主標題 */}\n      <h1 className=\"text-lg font-bold text-morandi-primary\">{title}</h1>\n\n      {/* 中間 - 空白區域，用於推開左右兩側 */}\n      <div className=\"flex-1\"></div>\n\n      {/* 右側 - 標籤頁 */}\n      {tabs && tabs.length > 0 && (\n        <div className=\"flex items-center\">\n          <div className=\"h-6 w-px bg-border mx-4\"></div>\n          <div className=\"flex items-center space-x-1\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.value}\n                onClick={() => onTabChange?.(tab.value)}\n                className={cn(\n                  'relative px-3 py-2 text-sm font-medium transition-colors',\n                  'text-morandi-secondary hover:text-morandi-primary',\n                  activeTab === tab.value\n                    ? 'text-morandi-primary after:absolute after:bottom-0 after:left-0 after:right-0 after:h-0.5 after:bg-morandi-gold'\n                    : ''\n                )}\n              >\n                {tab.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* 最右側 - 操作按鈕 */}\n      <div className=\"flex items-center\">\n        {onAdd && (\n          <>\n            <div className=\"h-6 w-px bg-border mx-4\"></div>\n            <Button\n              onClick={onAdd}\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            >\n              <Plus size={16} className=\"mr-2\" />\n              {addLabel}\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/main-layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authUser' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { useLocalAuthStore } from '@/lib/auth/local-auth-manager';\nimport { Sidebar } from './sidebar';\nimport { cn } from '@/lib/utils';\nimport { usePathname, useRouter } from 'next/navigation';\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function MainLayout({ children }: MainLayoutProps) {\n  const { sidebarCollapsed } = useAuthStore();\n  const { currentProfile } = useLocalAuthStore();\n  const pathname = usePathname();\n  const router = useRouter();\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // 記錄使用者訪問的頁面（用於登出後重新登入時跳回）\n  useEffect(() => {\n    if (!isClient) return;\n    if (pathname === '/login') return;\n\n    // 儲存當前路徑到 localStorage\n    localStorage.setItem('last-visited-path', pathname);\n  }, [isClient, pathname]);\n\n  // 簡化的認證檢查 - 暫時停用,使用 auth-store 的 user\n  useEffect(() => {\n    if (!isClient) return;\n    if (pathname === '/login') return;\n\n    // 給 Zustand persist 一點時間載入\n    const checkTimeout = setTimeout(() => {\n      const authUser = useAuthStore.getState().user;\n\n      // 暫時停用檢查,避免無限循環\n      // if (!authUser) {\n      //   router.push('/login');\n      // }\n    }, 50);\n\n    return () => clearTimeout(checkTimeout);\n  }, [isClient, pathname, currentProfile, router]);\n\n  // 初始化離線資料庫和基礎資料\n  useEffect(() => {\n    if (!isClient) return;\n\n    // 離線資料庫會在 sync-manager 中自動初始化\n\n    // 載入基礎資料（只載入全域需要的資料）\n    const loadInitialData = async () => {\n      try {\n        // 載入工作空間（全域需要）\n        const { useWorkspaceStore } = await import('@/stores/workspace-store');\n        const workspaceState = useWorkspaceStore.getState();\n        if (!workspaceState.currentWorkspace) {\n          await workspaceState.loadWorkspaces();\n          console.log('✅ 工作空間初始化完成');\n        }\n      } catch (error) {\n        console.error('❌ 初始資料載入失敗:', error);\n      }\n    };\n\n    loadInitialData();\n  }, [isClient]);\n\n  // 不需要側邊欄的頁面\n  const noSidebarPages = ['/login', '/unauthorized'];\n  const shouldShowSidebar = !noSidebarPages.includes(pathname);\n\n  // 使用自定義 layout 的頁面（如記帳管理）\n  const customLayoutPages = ['/accounting'];\n  const hasCustomLayout = customLayoutPages.some(page => pathname.startsWith(page));\n\n  // 登入頁不需要側邊欄\n  if (!shouldShowSidebar) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {children}\n      </div>\n    );\n  }\n\n  // 使用自定義 layout 的頁面只需要側邊欄\n  if (hasCustomLayout) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {/* 左下象限 - 側邊欄 */}\n        <Sidebar />\n        {/* 內容由頁面自己的 layout 處理 */}\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* 左下象限 - 側邊欄 */}\n      <Sidebar />\n\n      {/* 右下象限 - 主內容區域 */}\n      <main className={cn(\n        'fixed top-[72px] bottom-0 right-0 transition-all duration-300',\n        !isClient ? 'left-16' : (sidebarCollapsed ? 'left-16' : 'left-[190px]')\n      )}>\n        <div className=\"p-6 h-full\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/responsive-header.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[202,205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[202,205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sidebarCollapsed' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, memo } from 'react';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { cn } from '@/lib/utils';\n\ninterface ResponsiveHeaderProps {\n  title: string;\n  icon?: any;\n  breadcrumb?: { label: string; href: string }[];\n  tabs?: {\n    value: string;\n    label: string;\n    icon?: any;\n  }[];\n  activeTab?: string;\n  onTabChange?: (value: string) => void;\n  onAdd?: () => void;\n  addLabel?: string;\n  children?: React.ReactNode;\n  actions?: React.ReactNode;\n  showBackButton?: boolean;\n  onBack?: () => void;\n  // 搜尋功能\n  showSearch?: boolean;\n  searchTerm?: string;\n  onSearchChange?: (term: string) => void;\n  searchPlaceholder?: string;\n}\n\nexport const ResponsiveHeader = memo(function ResponsiveHeader(props: ResponsiveHeaderProps) {\n  const { sidebarCollapsed } = useAuthStore();\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n\n  return (\n    <div className={cn(\n      'fixed top-0 right-0 h-[72px] bg-background z-[200] flex items-center justify-between px-6',\n      'left-16'\n    )}\n    >\n      {/* 分割線 */}\n      <div className=\"absolute bottom-0 left-0 right-0 pointer-events-none\" style={{ marginLeft: '24px', marginRight: '24px', borderTop: '1px solid var(--border)', height: '1px' }}></div>\n      {/* 左側 - 返回按鈕和主標題 */}\n      <div className=\"flex items-center gap-3 relative z-[300]\">\n        {props.showBackButton && (\n          <button\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              props.onBack?.();\n            }}\n            className=\"text-morandi-secondary hover:text-morandi-primary transition-colors p-2 hover:bg-morandi-container/50 rounded-md cursor-pointer\"\n            type=\"button\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n            </svg>\n          </button>\n        )}\n        <h1 className=\"text-base font-bold text-morandi-primary\">{props.title}</h1>\n      </div>\n\n      {/* 右側區域 - 功能、標籤頁和操作按鈕 - 統一無空白設計 */}\n      <div className=\"flex items-center flex-shrink-0 pointer-events-auto\">\n        {/* 搜尋功能 - 最左邊 */}\n        {props.showSearch && (\n          <div className=\"flex items-center mr-4\">\n            {!isSearchOpen ? (\n              <button\n                onClick={() => setIsSearchOpen(true)}\n                className=\"p-2 text-morandi-secondary hover:text-morandi-primary transition-colors\"\n                title=\"搜尋\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </button>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  value={props.searchTerm || ''}\n                  onChange={(e) => props.onSearchChange?.(e.target.value)}\n                  placeholder={props.searchPlaceholder || '搜尋...'}\n                  className=\"w-48 px-3 py-1 text-sm border border-border rounded-md focus:outline-none focus:ring-1 focus:ring-morandi-primary\"\n                  autoFocus\n                  onBlur={() => {\n                    if (!props.searchTerm) {\n                      setIsSearchOpen(false);\n                    }\n                  }}\n                />\n                <button\n                  onClick={() => {\n                    props.onSearchChange?.('');\n                    setIsSearchOpen(false);\n                  }}\n                  className=\"p-1 text-morandi-secondary hover:text-morandi-primary transition-colors\"\n                  title=\"清除搜尋\"\n                >\n                  <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 功能區域 */}\n        {props.children && (\n          <div className=\"flex items-center mr-6\">\n            {props.children}\n          </div>\n        )}\n\n        {/* 標籤頁和操作按鈕緊密排列 */}\n        <div className=\"flex items-center\">\n          {/* 標籤頁 */}\n          {props.tabs && props.tabs.length > 0 && (\n            <div className=\"flex items-center space-x-1 pointer-events-auto\">\n              {props.tabs.map((tab) => (\n                <button\n                  key={tab.value}\n                  onClick={() => props.onTabChange?.(tab.value)}\n                  className={cn(\n                    'relative px-3 py-2 text-sm font-medium transition-colors pointer-events-auto',\n                    'text-morandi-secondary hover:text-morandi-primary',\n                    props.activeTab === tab.value\n                      ? 'text-morandi-primary after:absolute after:bottom-0 after:left-0 after:right-0 after:h-0.5 after:bg-morandi-gold'\n                      : ''\n                  )}\n                >\n                  {tab.label}\n                </button>\n              ))}\n            </div>\n          )}\n\n          {/* 操作按鈕緊接在標籤頁後面 */}\n          {props.actions ? (\n            <div className=\"flex items-center gap-3 ml-3\">\n              {props.actions}\n            </div>\n          ) : props.onAdd ? (\n            <button\n              onClick={props.onAdd}\n              data-create-box\n              className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center transition-colors ml-3\"\n            >\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n              </svg>\n              {props.addLabel || '新增'}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronLeft' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Receipt' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toggleSidebar' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":148,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logout' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":148,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Home,\n  MapPin,\n  ShoppingCart,\n  Users,\n  CreditCard,\n  CheckSquare,\n  Settings,\n  Calculator,\n  Database,\n  Building2,\n  Wallet,\n  Clock,\n  UserCog,\n  Receipt,\n  FileText,\n  BarChart3,\n  Calendar,\n  TrendingDown,\n  FileCheck,\n  Edit,\n  Flag\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SyncStatusIndicator } from './sync-status-indicator';\n\ninterface MenuItem {\n  href: string;\n  label: string;\n  icon: React.ElementType;\n  children?: MenuItem[];\n  requiredPermission?: string;\n}\n\nconst menuItems: MenuItem[] = [\n  {\n    href: '/',\n    label: '首頁',\n    icon: Home,\n  },\n  {\n    href: '/calendar',\n    label: '行事曆',\n    icon: Calendar,\n    requiredPermission: 'calendar',\n  },\n  {\n    href: '/workspace',\n    label: '工作空間',\n    icon: Building2,\n    requiredPermission: 'workspace',\n  },\n  {\n    href: '/todos',\n    label: '待辦事項',\n    icon: CheckSquare,\n    requiredPermission: 'todos',\n  },\n  {\n    href: '/itinerary',\n    label: '行程管理',\n    icon: Flag,\n    requiredPermission: 'business',\n  },\n  {\n    href: '/tours',\n    label: '旅遊團',\n    icon: MapPin,\n    requiredPermission: 'tours',\n  },\n  {\n    href: '/orders',\n    label: '訂單',\n    icon: ShoppingCart,\n    requiredPermission: 'orders',\n  },\n  {\n    href: '/quotes',\n    label: '報價單',\n    icon: Calculator,\n    requiredPermission: 'quotes',\n  },\n  {\n    href: '/finance',\n    label: '財務系統',\n    icon: CreditCard,\n    children: [\n      { href: '/finance/payments', label: '收款管理', icon: CreditCard, requiredPermission: 'payments' },\n      { href: '/finance/requests', label: '請款管理', icon: TrendingDown, requiredPermission: 'requests' },\n      { href: '/finance/treasury', label: '出納管理', icon: Wallet, requiredPermission: 'disbursement' },\n      { href: '/finance/reports', label: '報表管理', icon: BarChart3, requiredPermission: 'reports' },\n    ]\n  },\n  {\n    href: '/visas',\n    label: '簽證管理',\n    icon: FileCheck,\n    requiredPermission: 'visas',\n  },\n  {\n    href: '/database',\n    label: '資料管理',\n    icon: Database,\n    requiredPermission: 'database',\n    children: [\n      { href: '/customers', label: '顧客管理', icon: Users, requiredPermission: 'customers' },\n      { href: '/database/regions', label: '地區管理', icon: MapPin, requiredPermission: 'database' },\n      { href: '/database/transport', label: '交通選項', icon: ShoppingCart, requiredPermission: 'database' },\n      { href: '/database/activities', label: '活動門票', icon: CheckSquare, requiredPermission: 'database' },\n      { href: '/database/pricing', label: '價格管理', icon: Calculator, requiredPermission: 'database' },\n      { href: '/database/suppliers', label: '供應商管理', icon: Building2, requiredPermission: 'database' },\n    ]\n  },\n  {\n    href: '/hr',\n    label: '人資管理',\n    icon: UserCog,\n    requiredPermission: 'hr',\n  },\n];\n\n// 底部個人工具選單\nconst personalToolItems: MenuItem[] = [\n  {\n    href: '/accounting',\n    label: '記帳管理',\n    icon: Wallet,\n    requiredPermission: 'accounting',\n  },\n  {\n    href: '/timebox',\n    label: '箱型時間',\n    icon: Clock,\n    requiredPermission: 'timebox',\n  },\n];\n\nexport function Sidebar() {\n  const pathname = usePathname();\n  const { sidebarCollapsed, toggleSidebar, user, logout } = useAuthStore();\n  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const [mounted, setMounted] = useState(false);\n  const [isDropdownHovered, setIsDropdownHovered] = useState(false);\n  const [isSidebarHovered, setIsSidebarHovered] = useState(false);\n\n  // 確保組件已掛載\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // 清理定時器\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleMouseEnter = (item: MenuItem, element: HTMLElement) => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    if (item.children) {\n      const rect = element.getBoundingClientRect();\n      setDropdownPosition({\n        top: rect.top,\n        left: rect.right + 10  // 直接使用元素的右邊界 + 10px 間距\n      });\n      setHoveredItem(item.href);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    timeoutRef.current = setTimeout(() => {\n      if (!isDropdownHovered) {\n        setHoveredItem(null);\n      }\n    }, 100); // 縮短延遲時間\n  };\n\n  const handleDropdownMouseEnter = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setIsDropdownHovered(true);\n  };\n\n  const handleDropdownMouseLeave = () => {\n    setIsDropdownHovered(false);\n    setHoveredItem(null);\n    // 同時收起側邊欄（如果是摺疊模式）\n    if (sidebarCollapsed) {\n      setIsSidebarHovered(false);\n    }\n  };\n\n  const is_active = (href: string) => {\n    if (!mounted) return false; // 避免 hydration error\n    if (href === '/') return pathname === '/';\n    return pathname.startsWith(href);\n  };\n\n  const getHoveredItemChildren = () => {\n    if (!hoveredItem) return [];\n    const item = menuItems.find(item => item.href === hoveredItem);\n    return item?.children || [];\n  };\n\n  // 使用 useMemo 優化權限過濾\n  const visibleMenuItems = useMemo(() => {\n    const filterMenuByPermissions = (items: MenuItem[]): MenuItem[] => {\n      if (!user) {\n        return items.filter(item => !item.requiredPermission);\n      }\n\n      const userPermissions = user.permissions || [];\n      const isSuperAdmin = userPermissions.includes('admin');  // admin 就是管理員\n\n      return items\n        .map(item => {\n          // 如果有子選單，先過濾子選單\n          if (item.children) {\n            const visibleChildren = filterMenuByPermissions(item.children);\n\n            // 如果有任何子項目可見，就顯示父項目\n            if (visibleChildren.length > 0 || isSuperAdmin) {\n              return {\n                ...item,\n                children: visibleChildren\n              };\n            }\n            // 如果沒有可見的子項目，隱藏整個父項目\n            return null;\n          }\n\n          // 沒有子選單的項目，檢查權限\n          if (!item.requiredPermission) return item;\n          if (isSuperAdmin) return item;\n          return userPermissions.includes(item.requiredPermission) ? item : null;\n        })\n        .filter((item): item is MenuItem => item !== null);\n    };\n\n    return filterMenuByPermissions(menuItems);\n  }, [user]);\n\n  const visiblePersonalToolItems = useMemo(() => {\n    const filterMenuByPermissions = (items: MenuItem[]): MenuItem[] => {\n      if (!user) {\n        return items.filter(item => !item.requiredPermission);\n      }\n\n      const userPermissions = user.permissions || [];\n      const isSuperAdmin = userPermissions.includes('admin');\n\n      return items\n        .map(item => {\n          if (!item.requiredPermission) return item;\n          if (isSuperAdmin) return item;\n          return userPermissions.includes(item.requiredPermission) ? item : null;\n        })\n        .filter((item): item is MenuItem => item !== null);\n    };\n\n    return filterMenuByPermissions(personalToolItems);\n  }, [user]);\n\n  return (\n    <>\n      <div\n        ref={sidebarRef}\n        onMouseEnter={(e) => {\n          // 只有當滑鼠真的在側邊欄範圍內才觸發（x < 80）\n          if (e.clientX < 80) {\n            setIsSidebarHovered(true);\n          }\n        }}\n        onMouseMove={(e) => {\n          // 動態判斷容忍範圍：展開時允許到 190px，收起時只允許到 80px\n          const toleranceWidth = (isSidebarHovered || hoveredItem) ? 190 : 80;\n\n          // 持續檢查滑鼠位置\n          if (e.clientX >= toleranceWidth && isSidebarHovered && !isDropdownHovered && !hoveredItem) {\n            setIsSidebarHovered(false);\n          } else if (e.clientX < 80 && !isSidebarHovered) {\n            setIsSidebarHovered(true);\n          }\n        }}\n        onMouseLeave={() => {\n          // 只有當沒有下拉選單時才收起\n          if (!hoveredItem && !isDropdownHovered) {\n            setIsSidebarHovered(false);\n          }\n        }}\n        className={cn(\n          'fixed left-0 top-0 h-screen bg-morandi-container border-r border-border z-40 group transition-[width] duration-300',\n          sidebarCollapsed\n            ? (isSidebarHovered || isDropdownHovered)\n              ? 'w-[190px]'\n              : 'w-16'\n            : 'w-[190px]'\n        )}\n      >\n        {/* Logo區域 */}\n        <div>\n          <div className=\"h-18 flex items-center relative mx-3\">\n            <div className=\"absolute left-5 top-1/2 -translate-x-1/2 -translate-y-1/2 w-10 h-10 rounded-lg bg-gradient-to-br from-[#d4c5a9] via-[#c9b896] to-[#bfad87] flex items-center justify-center shadow-sm flex-shrink-0 opacity-90\">\n              <span className=\"text-white/95 font-semibold text-lg\">V</span>\n            </div>\n            <div className={cn(\n              \"ml-[58px] text-xl font-bold text-morandi-primary transition-opacity duration-300\",\n              sidebarCollapsed ? ((isSidebarHovered || isDropdownHovered) ? \"opacity-100 pointer-events-auto\" : \"opacity-0 pointer-events-none\") : \"opacity-100 pointer-events-auto\"\n            )}>\n              CORNER\n            </div>\n            {/* 移除收合按鈕，使用純 hover 控制 */}\n          </div>\n          <div style={{ marginLeft: '12px', marginRight: '12px', borderTop: '1px solid var(--border)', height: '1px' }}></div>\n        </div>\n\n        {/* 導航選單 */}\n        <nav className=\"flex-1 py-4\">\n          <ul className=\"space-y-1\">\n            {visibleMenuItems.map((item) => (\n              <li key={item.href}>\n                {item.children ? (\n                  // 有子選單的項目\n                  <div\n                    className={cn(\n                      'w-full relative h-10 text-sm text-morandi-secondary hover:bg-morandi-container hover:text-morandi-primary transition-colors cursor-pointer',\n                      is_active(item.href) && 'bg-morandi-container text-morandi-primary'\n                    )}\n                    onMouseEnter={(e) => handleMouseEnter(item, e.currentTarget)}\n                    onMouseLeave={handleMouseLeave}\n                  >\n                    <item.icon size={20} className=\"absolute left-8 top-1/2 -translate-x-1/2 -translate-y-1/2\" />\n                    <span className={cn(\n                      \"ml-[58px] block text-left leading-10 transition-opacity duration-300\",\n                      sidebarCollapsed ? ((isSidebarHovered || isDropdownHovered) ? \"opacity-100 pointer-events-auto\" : \"opacity-0 pointer-events-none\") : \"opacity-100 pointer-events-auto\"\n                    )}>\n                      {item.label}\n                    </span>\n                    {!sidebarCollapsed && (\n                      <ChevronRight\n                        size={16}\n                        className=\"absolute right-4 top-1/2 -translate-y-1/2 transition-transform duration-300\"\n                      />\n                    )}\n                  </div>\n                ) : (\n                  // 沒有子選單的項目\n                  <Link\n                    href={item.href}\n                    prefetch={false}\n                    className={cn(\n                      'w-full relative block h-10 text-sm text-morandi-secondary hover:bg-morandi-container hover:text-morandi-primary transition-colors',\n                      is_active(item.href) && 'bg-morandi-container text-morandi-primary border-r-2 border-morandi-gold'\n                    )}\n                  >\n                    <item.icon size={20} className=\"absolute left-8 top-1/2 -translate-x-1/2 -translate-y-1/2\" />\n                    <span className={cn(\n                      \"ml-[58px] block text-left leading-10 transition-opacity duration-300\",\n                      sidebarCollapsed ? ((isSidebarHovered || isDropdownHovered) ? \"opacity-100 pointer-events-auto\" : \"opacity-0 pointer-events-none\") : \"opacity-100 pointer-events-auto\"\n                    )}>\n                      {item.label}\n                    </span>\n                  </Link>\n                )}\n              </li>\n            ))}\n          </ul>\n        </nav>\n\n        {/* 底部功能區 */}\n        <div className=\"py-4\">\n          <div className=\"mb-4\" style={{ marginLeft: '12px', marginRight: '12px', borderTop: '1px solid var(--border)', height: '1px' }}></div>\n\n          {!sidebarCollapsed && user && (\n            <div className=\"mb-4 mx-4 p-3 bg-morandi-container rounded-lg\">\n              <div className=\"text-sm font-medium text-morandi-primary\">\n                {user.display_name}\n              </div>\n              <div className=\"text-xs text-morandi-secondary\">\n                {user.employee_number}\n              </div>\n            </div>\n          )}\n\n          <ul className=\"space-y-1\">\n            {/* 個人工具選單 */}\n            {visiblePersonalToolItems.map((item) => (\n              <li key={item.href}>\n                <Link\n                  href={item.href}\n                  prefetch={false}\n                  className={cn(\n                    'w-full relative block h-10 text-sm text-morandi-secondary hover:bg-morandi-container hover:text-morandi-primary transition-colors',\n                    is_active(item.href) && 'bg-morandi-container text-morandi-primary border-r-2 border-morandi-gold'\n                  )}\n                >\n                  <item.icon size={20} className=\"absolute left-8 top-1/2 -translate-x-1/2 -translate-y-1/2\" />\n                  <span className={cn(\n                    \"ml-[58px] block text-left leading-10 transition-opacity duration-300\",\n                    sidebarCollapsed ? ((isSidebarHovered || isDropdownHovered) ? \"opacity-100\" : \"opacity-0\") : \"opacity-100\"\n                  )}>\n                    {item.label}\n                  </span>\n                </Link>\n              </li>\n            ))}\n\n            {/* 分隔線（如果有個人工具項目的話） */}\n            {visiblePersonalToolItems.length > 0 && (\n              <li className=\"my-2\">\n                <div style={{ marginLeft: '12px', marginRight: '12px', borderTop: '1px solid var(--border)', height: '1px' }}></div>\n              </li>\n            )}\n\n            {/* 設定 */}\n            <li>\n              <Link\n                href=\"/settings\"\n                prefetch={false}\n                className={cn(\n                  'w-full relative block h-10 text-sm text-morandi-secondary hover:bg-morandi-container hover:text-morandi-primary transition-colors',\n                  mounted && pathname === '/settings' && 'bg-morandi-container text-morandi-primary border-r-2 border-morandi-gold'\n                )}\n              >\n                <Settings size={20} className=\"absolute left-8 top-1/2 -translate-x-1/2 -translate-y-1/2\" />\n                <span className={cn(\n                  \"ml-[58px] block text-left leading-10 transition-opacity duration-300\",\n                  sidebarCollapsed ? ((isSidebarHovered || isDropdownHovered) ? \"opacity-100 pointer-events-auto\" : \"opacity-0 pointer-events-none\") : \"opacity-100 pointer-events-auto\"\n                )}>\n                  設定\n                </span>\n              </Link>\n            </li>\n\n            {/* 同步狀態指示器 */}\n            <li>\n              <SyncStatusIndicator isDropdownHovered={isSidebarHovered || isDropdownHovered} />\n            </li>\n\n          </ul>\n        </div>\n      </div>\n\n      {/* 懸浮下拉選單 */}\n      {hoveredItem && getHoveredItemChildren().length > 0 && (\n        <div\n          className=\"fixed bg-card border border-border rounded-lg shadow-lg py-2 min-w-48 z-[60]\"\n          style={{\n            top: dropdownPosition.top,\n            left: dropdownPosition.left,\n          }}\n          onMouseEnter={handleDropdownMouseEnter}\n          onMouseLeave={handleDropdownMouseLeave}\n        >\n          {getHoveredItemChildren().map((child) => (\n            <Link\n              key={child.href}\n              href={child.href}\n              prefetch={false}\n              className={cn(\n                'flex items-center px-4 py-2 text-sm text-morandi-secondary hover:bg-morandi-container hover:text-morandi-primary transition-colors',\n                is_active(child.href) && 'bg-morandi-container text-morandi-primary'\n              )}\n            >\n              <child.icon size={16} className=\"mr-3\" />\n              <span>{child.label}</span>\n            </Link>\n          ))}\n        </div>\n      )}\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/sync-status-indicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/layout/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/members/excel-member-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1781,1784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1781,1784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2547,2550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2547,2550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3079,3082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3079,3082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3631,3634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3631,3634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'autoSaveMember'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [departure_date, autoSaveMember]","fix":{"range":[3706,3749],"text":"[departure_date, autoSaveMember]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useImperativeHandle, forwardRef, useMemo, useCallback } from 'react';\nimport { useMemberStore } from '@/stores';\nimport { Member } from '@/stores/types';\nimport {\n  getGenderFromIdNumber,\n  calculateAge\n} from '@/lib/utils';\nimport { ReactDataSheetWrapper, DataSheetColumn } from '@/components/shared/react-datasheet-wrapper';\n\ninterface MemberTableProps {\n  order_id: string;\n  departure_date: string;\n  member_count: number;\n}\n\nexport interface MemberTableRef {\n  addRow: () => void;\n}\n\ninterface EditingMember extends Omit<Member, 'id' | 'created_at' | 'updated_at'> {\n  id?: string;\n  isNew?: boolean;\n}\n\n\nexport const ExcelMemberTable = forwardRef<MemberTableRef, MemberTableProps>(\n  ({ order_id, departure_date, member_count }, ref) => {\n  const memberStore = useMemberStore();\n  const members = memberStore.items;\n  const [tableMembers, setTableMembers] = useState<EditingMember[]>([]);\n\n  const orderMembers = useMemo(() =>\n    members.filter(member => member.order_id === order_id),\n    [members, order_id]\n  );\n\n  // 配置 DataSheet 欄位\n  const dataSheetColumns: DataSheetColumn[] = [\n    { key: 'index', label: '序號', width: 40, readOnly: true },\n    { key: 'name', label: '姓名', width: 80 },\n    { key: 'nameEn', label: '英文姓名', width: 100 },\n    { key: 'birthday', label: '生日', width: 100 },\n    { key: 'age', label: '年齡', width: 60, readOnly: true },\n    { key: 'gender', label: '性別', width: 50, readOnly: true },\n    { key: 'idNumber', label: '身分證字號', width: 120 },\n    { key: 'passportNumber', label: '護照號碼', width: 100 },\n    { key: 'passportExpiry', label: '護照效期', width: 100 },\n    { key: 'reservationCode', label: '訂位代號', width: 100 }\n  ];\n\n  useEffect(() => {\n    const existingMembers = orderMembers.map((member: any) => ({ ...member }));\n\n    // 確保至少有member_count行\n    while (existingMembers.length < member_count) {\n      existingMembers.push({\n        order_id,\n        name: '',\n        name_en: '',\n        birthday: '',\n        passport_number: '',\n        passport_expiry: '',\n        id_number: '',\n        gender: '',\n        age: 0,\n        reservation_code: '',\n        add_ons: [],\n        refunds: [],\n        isNew: true\n      });\n    }\n\n    setTableMembers(existingMembers);\n  }, [orderMembers, member_count, order_id]);\n\n\n  // 自動儲存成員\n  const autoSaveMember = async (member: EditingMember, index: number) => {\n    if (member.isNew && member.name.trim()) {\n      const { isNew, ...memberData } = member;\n      const created = await memberStore.create(memberData as any);\n      const newId = created?.id;\n\n      const updatedMembers = [...tableMembers];\n      updatedMembers[index] = { ...member, id: newId as string, isNew: false };\n      setTableMembers(updatedMembers);\n    } else if (member.id && !member.isNew) {\n      const { isNew, ...memberData } = member;\n      await memberStore.update(member.id, memberData);\n    }\n  };\n\n  // 處理資料更新 (用於 ReactDataSheet)\n  const handleDataUpdate = useCallback((newData: EditingMember[]) => {\n    // 處理自動計算欄位\n    const processedData = newData.map((member: any) => {\n      const processed = { ...member };\n\n      // 從身分證號自動計算性別和年齡\n      if (processed.id_number) {\n        processed.gender = getGenderFromIdNumber(processed.id_number);\n        processed.age = calculateAge(processed.id_number, departure_date) as number;\n      }\n      // 從生日計算年齡\n      else if (processed.birthday) {\n        processed.age = calculateAge(processed.birthday as string, departure_date) as number;\n      }\n\n      return processed;\n    });\n\n    setTableMembers(processedData);\n\n    // 自動儲存到 store\n    processedData.forEach((member: any, index: number) => {\n      autoSaveMember(member, index);\n    });\n  }, [departure_date, tableMembers, memberStore]);\n\n  // 新增行\n  const addRow = () => {\n    console.log('addRow called, current tableMembers:', tableMembers.length);\n    const newMember: EditingMember = {\n      order_id,\n      name: '',\n      name_en: '',\n      birthday: '',\n      passport_number: '',\n      passport_expiry: '',\n      id_number: '',\n      gender: '',\n      age: 0,\n      reservation_code: '',\n      add_ons: [],\n      refunds: [],\n      isNew: true\n    };\n    setTableMembers([...tableMembers, newMember]);\n    console.log('New member added, new length should be:', tableMembers.length + 1);\n  };\n\n  // 暴露addRow函數給父組件\n  useImperativeHandle(ref, () => ({\n    addRow\n  }));\n\n\n\n\n  return (\n    <div className=\"w-full\">\n      {/* 使用 ReactDataSheet 替代原來的表格 */}\n      <ReactDataSheetWrapper\n        columns={dataSheetColumns}\n        data={tableMembers.map((member, index) => ({\n          ...member,\n          index: index + 1,\n          age: member.age > 0 ? `${member.age}歲` : '',\n          gender: member.gender === 'M' ? '男' : member.gender === 'F' ? '女' : ''\n        }))}\n        onDataUpdate={handleDataUpdate}\n        className=\"min-h-[400px]\"\n      />\n\n      <div className=\"text-xs text-morandi-secondary px-6 py-2 space-y-1\">\n        <p>• 點擊任意單元格即可編輯，自動儲存</p>\n        <p>• 年齡和性別為自動計算欄位</p>\n        <p>• 支援 Excel 式鍵盤導航和複製貼上</p>\n        <p>• 身分證號碼會自動計算年齡和性別</p>\n      </div>\n    </div>\n  );\n  }\n);\n\nExcelMemberTable.displayName = 'ExcelMemberTable';","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/network-monitor-initializer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/orders/add-order-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2532,2535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2532,2535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2578,2581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2578,2581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2716,2719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2716,2719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3035,3038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3035,3038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3081,3084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3081,3084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3224,3227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3224,3227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Combobox } from '@/components/ui/combobox';\nimport { useTourStore } from '@/stores';\nimport { useUserStore } from '@/stores/user-store';\nimport { useAuthStore } from '@/stores/auth-store';\n\nexport interface OrderFormData {\n  tour_id: string;\n  contact_person: string;\n  sales_person: string;\n  assistant: string;\n  member_count: number;\n  total_amount: number;\n}\n\ninterface AddOrderFormProps {\n  tourId?: string; // 如果從旅遊團頁面打開，會帶入 tour_id\n\n  // 獨立模式（用於 Dialog）\n  onSubmit?: (orderData: OrderFormData) => void;\n  onCancel?: () => void;\n\n  // 嵌入模式（用於嵌入其他表單）\n  value?: Partial<OrderFormData>;\n  onChange?: (orderData: Partial<OrderFormData>) => void;\n}\n\nexport function AddOrderForm({ tourId, onSubmit, onCancel, value, onChange }: AddOrderFormProps) {\n  const { items: tours } = useTourStore();\n  const { items: employees, fetchAll: fetchEmployees } = useUserStore();\n  const { currentProfile } = useAuthStore();\n\n  // 判斷是否為嵌入模式\n  const isEmbedded = !!onChange;\n\n  // Debug: 檢查員工資料\n  React.useEffect(() => {\n    console.log('🔍 AddOrderForm - 員工數量:', employees.length);\n    console.log('🔍 AddOrderForm - 員工資料:', employees);\n  }, [employees]);\n\n  // 取得當前登入使用者的顯示名稱\n  const currentUserName = currentProfile?.display_name || currentProfile?.english_name || '';\n\n  // 內部 state（獨立模式使用）\n  const [internalFormData, setInternalFormData] = useState<Partial<OrderFormData>>({\n    tour_id: tourId || '',\n    contact_person: '',\n    sales_person: currentUserName, // 自動帶入當前使用者\n    assistant: '',\n    member_count: 1,\n    total_amount: 0,\n  });\n\n  // 使用外部 state 或內部 state\n  const formData = isEmbedded ? (value || {}) : internalFormData;\n  const updateFormData = isEmbedded ? onChange : setInternalFormData;\n\n  // 載入員工資料\n  React.useEffect(() => {\n    if (employees.length === 0) {\n      fetchEmployees();\n    }\n  }, [employees.length, fetchEmployees]);\n\n  // 只在初始化時自動填入業務欄位（之後允許用戶清空）\n  const hasInitialized = React.useRef(false);\n  React.useEffect(() => {\n    if (!isEmbedded && currentUserName && !hasInitialized.current) {\n      setInternalFormData(prev => ({\n        ...prev,\n        sales_person: currentUserName\n      }));\n      hasInitialized.current = true;\n    }\n  }, [currentUserName, isEmbedded]);\n\n  // 篩選業務人員（roles 包含 'sales'，如果沒有則顯示全部）\n  const salesPersons = useMemo(() => {\n    const activeEmployees = employees.filter(emp => {\n      const notDeleted = !(emp as any)._deleted;\n      const isActive = (emp as any).status === 'active';\n      return notDeleted && isActive;\n    });\n\n    const salesOnly = activeEmployees.filter(emp =>\n      (emp as any).roles?.includes('sales')\n    );\n\n    // 如果有標記業務的就只顯示業務，沒有就顯示所有人\n    return salesOnly.length > 0 ? salesOnly : activeEmployees;\n  }, [employees]);\n\n  // 篩選助理（roles 包含 'assistant'，如果沒有則顯示全部）\n  const assistants = useMemo(() => {\n    const activeEmployees = employees.filter(emp => {\n      const notDeleted = !(emp as any)._deleted;\n      const isActive = (emp as any).status === 'active';\n      return notDeleted && isActive;\n    });\n\n    const assistantsOnly = activeEmployees.filter(emp =>\n      (emp as any).roles?.includes('assistant')\n    );\n\n    // 如果有標記助理的就只顯示助理，沒有就顯示所有人\n    return assistantsOnly.length > 0 ? assistantsOnly : activeEmployees;\n  }, [employees]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (onSubmit && !isEmbedded) {\n      onSubmit(formData as OrderFormData);\n    }\n  };\n\n  // 嵌入模式用 div，獨立模式用 form\n  const Container = isEmbedded ? 'div' : 'form';\n  const containerProps = isEmbedded ? {} : { onSubmit: handleSubmit };\n\n  return (\n    <Container {...containerProps} className=\"space-y-4\">\n      {/* 選擇旅遊團（如果沒有預設 tour_id） */}\n      {!tourId && (\n        <div>\n          <label className=\"text-sm font-medium text-morandi-primary\">選擇旅遊團</label>\n          <Combobox\n            options={tours.map((tour) => ({\n              value: tour.id,\n              label: `${tour.code} - ${tour.name}`,\n              data: tour\n            }))}\n            value={formData.tour_id || ''}\n            onChange={(value) => updateFormData?.({ ...formData, tour_id: value })}\n            placeholder=\"搜尋或選擇旅遊團...\"\n            emptyMessage=\"找不到旅遊團\"\n            className=\"mt-1\"\n          />\n        </div>\n      )}\n\n      {/* 聯絡人 */}\n      <div>\n        <label className=\"text-sm font-medium text-morandi-primary\">聯絡人</label>\n        <Input\n          value={formData.contact_person || ''}\n          onChange={(e) => updateFormData?.({ ...formData, contact_person: e.target.value })}\n          placeholder=\"輸入聯絡人姓名\"\n          className=\"mt-1\"\n          required={!isEmbedded}\n        />\n      </div>\n\n      {/* 業務和助理 */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium text-morandi-primary\">業務</label>\n          <Combobox\n            options={salesPersons.map((emp) => ({\n              value: emp.display_name || emp.english_name,\n              label: `${emp.display_name || emp.english_name} (${emp.employee_number})`\n            }))}\n            value={formData.sales_person || ''}\n            onChange={(value) => updateFormData?.({ ...formData, sales_person: value })}\n            placeholder=\"選擇業務人員...\"\n            emptyMessage=\"找不到業務人員\"\n            showSearchIcon={true}\n            showClearButton={true}\n            className=\"mt-1\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium text-morandi-primary\">助理</label>\n          <Combobox\n            options={assistants.map((emp) => ({\n              value: emp.display_name || emp.english_name,\n              label: `${emp.display_name || emp.english_name} (${emp.employee_number})`\n            }))}\n            value={formData.assistant || ''}\n            onChange={(value) => updateFormData?.({ ...formData, assistant: value })}\n            placeholder=\"選擇助理...\"\n            emptyMessage=\"找不到助理\"\n            showSearchIcon={true}\n            showClearButton={true}\n            className=\"mt-1\"\n          />\n        </div>\n      </div>\n\n      {/* 團員人數和訂單金額 */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium text-morandi-primary\">團員人數</label>\n          <Input\n            type=\"number\"\n            value={formData.member_count || 1}\n            onChange={(e) => updateFormData?.({ ...formData, member_count: Number(e.target.value) })}\n            className=\"mt-1\"\n            min=\"1\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium text-morandi-primary\">訂單金額</label>\n          <Input\n            type=\"number\"\n            value={formData.total_amount || 0}\n            onChange={(e) => updateFormData?.({ ...formData, total_amount: Number(e.target.value) })}\n            placeholder=\"0\"\n            className=\"mt-1\"\n          />\n        </div>\n      </div>\n\n      {/* 按鈕（只在獨立模式顯示） */}\n      {!isEmbedded && (\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n          >\n            取消\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={!formData.tour_id || !formData.contact_person}\n            className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n          >\n            新增訂單 <span className=\"ml-1 text-xs opacity-70\">(Enter)</span>\n          </Button>\n        </div>\n      )}\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/orders/expandable-order-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShoppingCart' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Banknote' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":91,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":99},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":311,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15220,15223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15220,15223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { useTourStore, useOrderStore } from '@/stores';\nimport { ChevronDown, BarChart3, CreditCard, Users, Plus, User, ShoppingCart, DollarSign, Banknote, Trash2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { ExcelMemberTable, MemberTableRef } from '@/components/members/excel-member-table';\nimport { Order } from '@/stores/types';\n\ninterface ExpandableOrderTableProps {\n  orders: Order[];\n  showTourInfo?: boolean;\n  tourDepartureDate?: string; // 用於成員管理的出發日期\n  className?: string;\n}\n\nconst orderTabs = [\n  { id: 'overview', label: '總覽', icon: BarChart3 },\n  { id: 'payment', label: '付款記錄', icon: CreditCard },\n  { id: 'members', label: '成員管理', icon: Users },\n];\n\nexport const ExpandableOrderTable = React.memo(function ExpandableOrderTable({ orders, showTourInfo = false, tourDepartureDate, className }: ExpandableOrderTableProps) {\n  const router = useRouter();\n  const tourStore = useTourStore();\n  const tours = tourStore.items;\n  const orderStore = useOrderStore();\n  const deleteOrder = orderStore.delete;\n  const [expandedOrders, setExpandedOrders] = useState<string[]>([]);\n  const [activeTabs, setActiveTabs] = useState<Record<string, string>>({});\n  const memberTableRefs = useRef<Record<string, MemberTableRef | null>>({});\n\n  const toggleOrderExpand = (order_id: string) => {\n    setExpandedOrders(prev =>\n      prev.includes(order_id)\n        ? prev.filter(id => id !== order_id)\n        : [...prev, order_id]\n    );\n    if (!activeTabs[order_id]) {\n      setActiveTabs(prev => ({ ...prev, [order_id]: 'overview' }));\n    }\n  };\n\n  const setActiveTab = (order_id: string, tabId: string) => {\n    setActiveTabs(prev => ({ ...prev, [order_id]: tabId }));\n  };\n\n  const getPaymentBadge = (status: string) => {\n    const badges: Record<string, string> = {\n      'paid': 'bg-morandi-green text-white',\n      'partial': 'bg-morandi-gold text-white',\n      'unpaid': 'bg-morandi-red text-white'\n    };\n    return badges[status] || 'bg-morandi-container text-morandi-secondary';\n  };\n\n  const handleDeleteOrder = async (order: Order, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    const confirmMessage = `⚠️ 確定要刪除訂單「${order.order_number}」嗎？\\n\\n此操作會影響：\\n- 團員名單將被移除\\n- 收款記錄將被刪除\\n- 旅遊團人數統計將更新\\n\\n此操作無法復原！`;\n\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      await deleteOrder(order.id);\n      // 如果訂單展開中，關閉展開\n      if (expandedOrders.includes(order.id)) {\n        setExpandedOrders(prev => prev.filter(id => id !== order.id));\n      }\n    } catch (err) {\n      console.error('刪除訂單失敗:', err);\n      alert('刪除失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <div className={cn(\"border border-border rounded-lg overflow-hidden bg-card shadow-sm flex flex-col\", className)}>\n      <div className=\"overflow-x-auto flex-1\">\n        <table className=\"w-full h-full\">\n          <thead className=\"bg-gradient-to-r from-morandi-container/40 via-morandi-gold/10 to-morandi-container/40 border-b-2 border-morandi-gold/20\">\n            <tr className=\"relative\">\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">訂單編號</span>\n              </th>\n              {showTourInfo && (\n                <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                  <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                  <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">旅遊團</span>\n                </th>\n              )}\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">聯絡人</span>\n              </th>\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">業務</span>\n              </th>\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">狀態</span>\n              </th>\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">操作</span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {orders.length === 0 ? (\n              <>\n                <tr>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  {showTourInfo && <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>}\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                </tr>\n                <tr>\n                  <td colSpan={showTourInfo ? 6 : 5} className=\"py-8\">\n                  </td>\n                </tr>\n              </>\n            ) : (\n              orders.map((order, index) => (\n              <React.Fragment key={order.id}>\n                <tr\n                  onClick={() => toggleOrderExpand(order.id)}\n                  onDoubleClick={() => {\n                    // 雙擊跳轉到訂單詳細頁面\n                    router.push(`/orders/${order.id}`);\n                  }}\n                  className={cn(\n                    \"relative transition-colors cursor-pointer\",\n                    !expandedOrders.includes(order.id) && \"hover:bg-morandi-container/30\"\n                  )}\n                >\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"text-[10px] sm:text-xs font-medium text-morandi-primary\">{order.order_number}</div>\n                  </td>\n\n                  {showTourInfo && (\n                    <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                      <div className=\"text-[10px] sm:text-xs font-medium text-morandi-primary\">{order.tour_name}</div>\n                    </td>\n                  )}\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"flex items-center text-[10px] sm:text-xs\">\n                      <User size={14} className=\"mr-1 text-morandi-secondary\" />\n                      <span className=\"font-medium text-morandi-primary\">{order.contact_person}</span>\n                    </div>\n                  </td>\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"text-[10px] sm:text-xs text-morandi-primary\">{order.sales_person}</div>\n                  </td>\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <span className={cn(\n                      'text-[10px] sm:text-xs font-medium',\n                      order.payment_status === 'paid' ? 'text-morandi-green' :\n                      order.payment_status === 'partial' ? 'text-morandi-gold' :\n                      'text-morandi-red'\n                    )}>\n                      {order.payment_status}\n                    </span>\n                  </td>\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      {/* 快速收款按鈕 */}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          router.push(`/finance/payments?order_id=${order.id}&order_number=${order.order_number}&contact_person=${order.contact_person}&amount=${order.remaining_amount}`);\n                        }}\n                        className=\"h-7 w-7 p-0 text-morandi-green hover:text-morandi-green hover:bg-morandi-green/10 font-bold text-base\"\n                        title=\"快速收款\"\n                      >\n                        $\n                      </Button>\n\n                      {/* 快速請款按鈕 */}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          router.push(`/finance/requests`);\n                        }}\n                        className=\"h-7 w-7 p-0 text-morandi-blue hover:text-morandi-blue hover:bg-morandi-blue/10\"\n                        title=\"快速請款\"\n                      >\n                        <CreditCard size={14} />\n                      </Button>\n\n                      {/* 刪除按鈕 */}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => handleDeleteOrder(order, e)}\n                        className=\"h-7 w-7 p-0 text-morandi-red hover:text-morandi-red hover:bg-morandi-red/10\"\n                        title=\"刪除訂單\"\n                      >\n                        <Trash2 size={14} />\n                      </Button>\n\n                      <ChevronDown\n                        size={14}\n                        className={cn(\n                          \"text-morandi-secondary transition-transform duration-200\",\n                          expandedOrders.includes(order.id) && \"rotate-180\"\n                        )}\n                      />\n                    </div>\n                  </td>\n\n                  {index < orders.length - 1 && !expandedOrders.includes(order.id) && (\n                    <td className=\"absolute bottom-0 left-4 right-4 h-[1px] bg-border\"></td>\n                  )}\n                </tr>\n\n                {expandedOrders.includes(order.id) && (\n                  <tr>\n                    <td colSpan={showTourInfo ? 6 : 5} className=\"p-0 border-none\">\n                      <div className=\"relative\">\n                        {/* 聚焦效果：左側金色邊條 */}\n                        <div className=\"absolute left-0 top-0 bottom-0 w-1 bg-morandi-gold z-30 rounded-l-lg\"></div>\n\n                        <div className=\"overflow-x-auto ml-1\">\n                          {/* 分頁標籤 */}\n                          <div className=\"flex border-b border-border overflow-x-auto\">\n                            <div className=\"flex min-w-max w-full justify-between\">\n                              <div className=\"flex\">\n                                {orderTabs.map((tab) => {\n                                  const is_active = activeTabs[order.id] === tab.id;\n                                  return (\n                                    <button\n                                      key={tab.id}\n                                      onClick={() => setActiveTab(order.id, tab.id)}\n                                      className={cn(\n                                        'flex items-center space-x-2 px-4 py-3 text-sm font-medium transition-all duration-200 relative whitespace-nowrap flex-shrink-0',\n                                        'hover:bg-morandi-container/50',\n                                        is_active\n                                          ? 'text-morandi-primary bg-white border-b-2 border-morandi-gold shadow-sm'\n                                          : 'text-morandi-secondary hover:text-morandi-primary'\n                                      )}\n                                    >\n                                      <tab.icon size={16} />\n                                      <span>{tab.label}</span>\n                                    </button>\n                                  );\n                                })}\n                              </div>\n\n                              {/* 各分頁的專屬按鈕 */}\n                              <div className=\"flex items-center space-x-2 px-4\">\n                                {activeTabs[order.id] === 'members' && (\n                                  <Button\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      e.stopPropagation();\n                                      console.log('Button clicked for order:', order.id);\n                                      console.log('Ref available:', !!memberTableRefs.current[order.id]);\n                                      console.log('All refs:', Object.keys(memberTableRefs.current));\n                                      const tableRef = memberTableRefs.current[order.id];\n                                      if (tableRef) {\n                                        console.log('Calling addRow...');\n                                        tableRef.addRow();\n                                      } else {\n                                        console.log('No ref found for order:', order.id);\n                                      }\n                                    }}\n                                    size=\"sm\"\n                                    className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n                                  >\n                                    <Plus size={14} className=\"mr-1\" />\n                                    新增行\n                                  </Button>\n                                )}\n\n                                {/* 統一的詳細頁面按鈕 */}\n                                <Button\n                                  onClick={() => {\n                                    // 跳轉到統一的訂單詳細頁面\n                                    router.push(`/orders/${order.id}`);\n                                  }}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"border-morandi-container hover:bg-morandi-container text-morandi-secondary hover:text-morandi-primary\"\n                                >\n                                  詳\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* 分頁內容 */}\n                          {activeTabs[order.id] === 'members' ? (\n                            <ExcelMemberTable\n                              ref={(ref) => { if (ref) memberTableRefs.current[order.id] = ref; }}\n                              order_id={order.id}\n                              departure_date={tourDepartureDate || tours.find((t: any) => t.id === order.tour_id)?.departure_date || ''}\n                              member_count={order.member_count}\n                            />\n                          ) : (\n                            <div className=\"px-6 py-4\">\n                              {activeTabs[order.id] === 'overview' && (\n                                <div className=\"grid grid-cols-2 gap-6\">\n                                  <div className=\"space-y-2\">\n                                    <div className=\"text-sm font-medium text-morandi-secondary\">基本資訊</div>\n                                    <div className=\"space-y-1\">\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">訂單編號:</span>\n                                        <span className=\"text-morandi-primary\">{order.order_number}</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">聯絡人:</span>\n                                        <span className=\"text-morandi-primary\">{order.contact_person}</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">業務:</span>\n                                        <span className=\"text-morandi-primary\">{order.sales_person}</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">助理:</span>\n                                        <span className=\"text-morandi-primary\">{order.assistant}</span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  <div className=\"space-y-2\">\n                                    <div className=\"text-sm font-medium text-morandi-secondary\">付款狀態</div>\n                                    <div className=\"space-y-1\">\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">總金額:</span>\n                                        <span className=\"text-morandi-primary font-medium\">NT$ {order.total_amount.toLocaleString()}</span>\n                                      </div>\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">已收款:</span>\n                                        <span className=\"text-morandi-green font-medium\">NT$ {order.paid_amount.toLocaleString()}</span>\n                                      </div>\n                                      {order.remaining_amount > 0 && (\n                                        <div className=\"flex justify-between\">\n                                          <span className=\"text-morandi-secondary\">餘款:</span>\n                                          <span className=\"text-morandi-red font-medium\">NT$ {order.remaining_amount.toLocaleString()}</span>\n                                        </div>\n                                      )}\n                                      <div className=\"flex justify-between\">\n                                        <span className=\"text-morandi-secondary\">付款狀態:</span>\n                                        <span className={cn(\n                                          'px-2 py-1 rounded text-xs font-medium',\n                                          getPaymentBadge(order.payment_status)\n                                        )}>\n                                          {order.payment_status}\n                                        </span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              )}\n\n                              {activeTabs[order.id] === 'payment' && (\n                                <div className=\"space-y-4\">\n                                  <div className=\"border border-border rounded-lg p-4\">\n                                    <div className=\"text-center text-morandi-secondary\">\n                                      <CreditCard size={24} className=\"mx-auto mb-2 opacity-50\" />\n                                      <p>付款記錄功能開發中...</p>\n                                    </div>\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </React.Fragment>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/orders/order-kanban.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1572,1575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1572,1575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Order, Tour } from '@/stores/types';\nimport { useOrderStore } from '@/stores';\nimport { Users, DollarSign, Calendar, User, AlertTriangle, CheckCircle2, Clock } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\ninterface OrderKanbanProps {\n  orders: Order[];\n  tours: Tour[];\n  onOrderClick?: (order: Order) => void;\n}\n\ntype PaymentStatus = 'unpaid' | 'partial' | 'paid';\n\nconst columns: Array<{\n  id: PaymentStatus;\n  label: string;\n  color: string;\n  icon: React.ElementType;\n}> = [\n  { id: 'unpaid', label: '未收款', color: 'bg-morandi-gold/10 border-morandi-gold', icon: Clock },\n  { id: 'partial', label: '部分收款', color: 'bg-morandi-blue/10 border-morandi-blue', icon: CheckCircle2 },\n  { id: 'paid', label: '已收款', color: 'bg-morandi-green/10 border-morandi-green', icon: DollarSign },\n];\n\nexport function OrderKanban({ orders, tours, onOrderClick }: OrderKanbanProps) {\n  const orderStore = useOrderStore();\n  const updateOrder = orderStore.update;\n  const [draggedOrder, setDraggedOrder] = useState<Order | null>(null);\n\n  const getOrdersByStatus = (status: PaymentStatus) => {\n    return orders.filter(order => order.payment_status === status);\n  };\n\n  const handleDragStart = (order: Order) => {\n    setDraggedOrder(order);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (status: PaymentStatus) => {\n    if (draggedOrder) {\n      updateOrder(draggedOrder.id, { payment_status: status as any });\n      setDraggedOrder(null);\n    }\n  };\n\n  const getTourInfo = (order: Order) => {\n    return tours.find(t => t.id === order.tour_id);\n  };\n\n  const getPaymentProgress = (order: Order) => {\n    if (order.total_amount === 0) return 0;\n    return (order.paid_amount / order.total_amount) * 100;\n  };\n\n  const getDaysUntilDeparture = (tour: Tour | undefined) => {\n    if (!tour) return null;\n    const today = new Date();\n    const departure = new Date(tour.departure_date);\n    const days = Math.ceil((departure.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    return days;\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {columns.map((column) => {\n        const columnOrders = getOrdersByStatus(column.id);\n        const Icon = column.icon;\n\n        return (\n          <div\n            key={column.id}\n            className={cn(\n              'flex flex-col rounded-xl border-2 p-4 min-h-[600px]',\n              column.color\n            )}\n            onDragOver={handleDragOver}\n            onDrop={() => handleDrop(column.id)}\n          >\n            {/* 欄位標題 */}\n            <div className=\"flex items-center justify-between mb-4 pb-3 border-b border-border\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon size={18} className=\"text-morandi-primary\" />\n                <h3 className=\"font-semibold text-morandi-primary\">{column.label}</h3>\n              </div>\n              <span className=\"px-2 py-1 bg-morandi-container rounded-full text-xs font-medium text-morandi-secondary\">\n                {columnOrders.length}\n              </span>\n            </div>\n\n            {/* 訂單卡片列表 */}\n            <div className=\"space-y-3 flex-1 overflow-y-auto\">\n              {columnOrders.map((order) => {\n                const tour = getTourInfo(order);\n                const progress = getPaymentProgress(order);\n                const daysUntil = getDaysUntilDeparture(tour);\n                const isUrgent = daysUntil !== null && daysUntil <= 7 && daysUntil >= 0 && order.payment_status !== 'paid';\n\n                return (\n                  <div\n                    key={order.id}\n                    draggable\n                    onDragStart={() => handleDragStart(order)}\n                    onClick={() => onOrderClick?.(order)}\n                    className={cn(\n                      'bg-card border border-border rounded-lg p-4 cursor-move hover:shadow-md transition-all',\n                      'hover:border-morandi-gold',\n                      isUrgent && 'border-morandi-red border-2'\n                    )}\n                  >\n                    {/* 緊急標示 */}\n                    {isUrgent && (\n                      <div className=\"flex items-center space-x-1 text-morandi-red text-xs font-medium mb-2\">\n                        <AlertTriangle size={12} />\n                        <span>{daysUntil}天後出發</span>\n                      </div>\n                    )}\n\n                    {/* 訂單編號 */}\n                    <div className=\"font-mono text-xs text-morandi-secondary mb-2\">\n                      {order.order_number}\n                    </div>\n\n                    {/* 客戶名稱 */}\n                    <div className=\"font-semibold text-morandi-primary mb-2 text-lg\">\n                      {order.contact_person}\n                    </div>\n\n                    {/* 旅遊團資訊 */}\n                    {tour && (\n                      <div className=\"text-sm text-morandi-secondary mb-3 space-y-1\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar size={12} />\n                          <span>{tour.location}</span>\n                        </div>\n                        <div className=\"text-xs\">\n                          {new Date(tour.departure_date).toLocaleDateString('zh-TW')}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* 人數 */}\n                    <div className=\"flex items-center space-x-2 text-sm text-morandi-primary mb-3\">\n                      <Users size={14} className=\"text-morandi-secondary\" />\n                      <span>{order.member_count} 人</span>\n                    </div>\n\n                    {/* 金額資訊 */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-morandi-secondary\">總金額</span>\n                        <span className=\"font-medium text-morandi-primary\">\n                          ${order.total_amount.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-morandi-secondary\">已收</span>\n                        <span className=\"font-medium text-morandi-green\">\n                          ${order.paid_amount.toLocaleString()}\n                        </span>\n                      </div>\n                      {order.remaining_amount > 0 && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-morandi-secondary\">未收</span>\n                          <span className=\"font-medium text-morandi-red\">\n                            ${order.remaining_amount.toLocaleString()}\n                          </span>\n                        </div>\n                      )}\n\n                      {/* 付款進度條 */}\n                      <div className=\"mt-3\">\n                        <div className=\"w-full h-2 bg-morandi-container rounded-full overflow-hidden\">\n                          <div\n                            className={cn(\n                              'h-full transition-all',\n                              progress === 100 ? 'bg-morandi-green' :\n                              progress >= 50 ? 'bg-morandi-gold' : 'bg-morandi-red'\n                            )}\n                            style={{ width: `${progress}%` }}\n                          />\n                        </div>\n                        <div className=\"text-xs text-morandi-secondary mt-1 text-right\">\n                          {progress.toFixed(0)}%\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* 業務資訊 */}\n                    <div className=\"mt-3 pt-3 border-t border-border\">\n                      <div className=\"flex items-center space-x-1 text-xs text-morandi-secondary\">\n                        <User size={12} />\n                        <span>{order.sales_person || '未指派'}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n\n              {/* 空狀態 */}\n              {columnOrders.length === 0 && (\n                <div className=\"text-center py-8 text-morandi-secondary\">\n                  <Icon size={32} className=\"mx-auto mb-2 opacity-30\" />\n                  <p className=\"text-sm\">尚無訂單</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/orders/order-list.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/orders/simple-order-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useTourStore' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { useTourStore, useOrderStore } from '@/stores';\nimport { User, Trash2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Order } from '@/stores/types';\n\ninterface SimpleOrderTableProps {\n  orders: Order[];\n  showTourInfo?: boolean;\n  className?: string;\n}\n\nexport const SimpleOrderTable = React.memo(function SimpleOrderTable({\n  orders,\n  showTourInfo = false,\n  className\n}: SimpleOrderTableProps) {\n  const router = useRouter();\n  const orderStore = useOrderStore();\n  const deleteOrder = orderStore.delete;\n\n  const handleDeleteOrder = async (order: Order, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    const confirmMessage = `⚠️ 確定要刪除訂單「${order.order_number}」嗎？\\n\\n此操作會影響：\\n- 團員名單將被移除\\n- 收款記錄將被刪除\\n- 旅遊團人數統計將更新\\n\\n此操作無法復原！`;\n\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    try {\n      await deleteOrder(order.id);\n    } catch (err) {\n      console.error('刪除訂單失敗:', err);\n      alert('刪除失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <div className={cn(\"border border-border rounded-lg overflow-hidden bg-card shadow-sm flex flex-col\", className)}>\n      <div className=\"overflow-x-auto flex-1\">\n        <table className=\"w-full h-full\">\n          <thead className=\"bg-gradient-to-r from-morandi-container/40 via-morandi-gold/10 to-morandi-container/40 border-b-2 border-morandi-gold/20\">\n            <tr className=\"relative\">\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">訂單編號</span>\n              </th>\n              {showTourInfo && (\n                <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                  <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                  <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">旅遊團</span>\n                </th>\n              )}\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">聯絡人</span>\n              </th>\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">業務</span>\n              </th>\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">狀態</span>\n              </th>\n              <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4 relative\">\n                <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">操作</span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {orders.length === 0 ? (\n              <>\n                <tr>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  {showTourInfo && <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>}\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4 text-center text-morandi-secondary/50\">-</td>\n                </tr>\n                <tr>\n                  <td colSpan={showTourInfo ? 6 : 5} className=\"py-8\">\n                  </td>\n                </tr>\n              </>\n            ) : (\n              orders.map((order) => (\n                <tr\n                  key={order.id}\n                  onClick={() => {\n                    console.log('訂單列點擊:', order.id);\n                    router.push(`/orders/${order.id}`);\n                  }}\n                  className=\"relative transition-colors cursor-pointer hover:bg-morandi-container/30\"\n                >\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"text-[10px] sm:text-xs font-medium text-morandi-primary\">{order.order_number}</div>\n                  </td>\n\n                  {showTourInfo && (\n                    <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                      <div className=\"text-[10px] sm:text-xs font-medium text-morandi-primary\">{order.tour_name}</div>\n                    </td>\n                  )}\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"flex items-center text-[10px] sm:text-xs\">\n                      <User size={14} className=\"mr-1 text-morandi-secondary\" />\n                      <span className=\"font-medium text-morandi-primary\">{order.contact_person}</span>\n                    </div>\n                  </td>\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"text-[10px] sm:text-xs text-morandi-primary\">{order.sales_person}</div>\n                  </td>\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <span className={cn(\n                      'text-[10px] sm:text-xs font-medium',\n                      order.payment_status === 'paid' ? 'text-morandi-green' :\n                      order.payment_status === 'partial' ? 'text-morandi-gold' :\n                      'text-morandi-red'\n                    )}>\n                      {order.payment_status}\n                    </span>\n                  </td>\n\n                  <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      {/* 快速收款按鈕 */}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          router.push(`/finance/payments?order_id=${order.id}&order_number=${order.order_number}&contact_person=${order.contact_person}&amount=${order.remaining_amount}`);\n                        }}\n                        className=\"h-7 w-7 p-0 text-morandi-green hover:text-morandi-green hover:bg-morandi-green/10 font-bold text-base\"\n                        title=\"快速收款\"\n                      >\n                        $\n                      </Button>\n\n                      {/* 快速請款按鈕 */}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          router.push(`/finance/requests`);\n                        }}\n                        className=\"h-7 w-7 p-0 text-morandi-blue hover:text-morandi-blue hover:bg-morandi-blue/10\"\n                        title=\"快速請款\"\n                      >\n                        ¥\n                      </Button>\n\n                      {/* 刪除按鈕 */}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => handleDeleteOrder(order, e)}\n                        className=\"h-7 w-7 p-0 text-morandi-red/60 hover:text-morandi-red hover:bg-morandi-red/10\"\n                        title=\"刪除訂單\"\n                      >\n                        <Trash2 size={14} />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/shared/react-datasheet-wrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[512,515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[512,515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[522,525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[522,525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[532,535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[532,535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[573,576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[573,576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[659,662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[659,662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[805,808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[805,808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[909,912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[909,912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[933,936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[933,936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[991,994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[991,994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedRange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'columnWidths', 'draggedRow', and 'orderFilter'. Either include them or remove the dependency array.","line":219,"column":6,"nodeType":"ArrayExpression","endLine":219,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [visibleColumns, data, columnWidths, orderFilter, draggedRow, tour_add_ons, tourPrice]","fix":{"range":[7146,7193],"text":"[visibleColumns, data, columnWidths, orderFilter, draggedRow, tour_add_ons, tourPrice]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7261,7264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7261,7264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cell' is defined but never used. Allowed unused args must match /^_/u.","line":227,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7888,7891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7888,7891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'enableColumnResize', 'getRoomUsage', 'handleColumnResize', 'isRoomFull', 'onRoomAssign', 'orderFilter', and 'roomOptions'. Either include them or remove the dependency array. If 'onRoomAssign' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":380,"column":6,"nodeType":"ArrayExpression","endLine":380,"endColumn":67,"suggestions":[{"desc":"Update the dependencies array to be: [visibleColumns, enableColumnResize, hoveredColumn, handleColumnResize, onColumnHide, onColumnDelete, orderFilter, roomOptions, onRoomAssign, getRoomUsage, isRoomFull]","fix":{"range":[12891,12952],"text":"[visibleColumns, enableColumnResize, hoveredColumn, handleColumnResize, onColumnHide, onColumnDelete, orderFilter, roomOptions, onRoomAssign, getRoomUsage, isRoomFull]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":617,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":617,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19580,19583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19580,19583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19629,19632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19629,19632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cell' is defined but never used. Allowed unused args must match /^_/u.","line":618,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":618,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19640,19643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19640,19643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used. Allowed unused args must match /^_/u.","line":618,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":618,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19648,19651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19648,19651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'j' is defined but never used. Allowed unused args must match /^_/u.","line":618,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":618,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19656,19659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19656,19659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":622,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":622,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19788,19791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19788,19791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":623,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":623,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19851,19854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19851,19854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":628,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":628,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19997,20000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19997,20000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":635,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":635,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20246,20249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20246,20249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":659,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":659,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21172,21175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21172,21175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport ReactDataSheet from 'react-datasheet';\nimport { calculateFormula, getMemberContext } from '@/lib/formula-calculator';\nimport { cn } from '@/lib/utils';\nimport { X, EyeOff } from 'lucide-react';\n\n// 引入 react-datasheet 的 CSS (我們會自訂樣式)\nimport 'react-datasheet/lib/react-datasheet.css';\n\nexport interface DataSheetColumn {\n  key: string;\n  label: string;\n  width?: number;\n  readOnly?: boolean;\n  dataRenderer?: (value: any, row: any, col: any) => string;\n  valueRenderer?: (cell: any, row: number, col: number) => React.ReactNode;\n  dataEditor?: React.ComponentType<any>;\n  type?: 'text' | 'select' | 'readonly';\n  options?: Array<{ value: string; label: string; disabled?: boolean }>;\n  onCellClick?: (rowData: any, field: string) => void;\n}\n\nexport interface DataSheetProps {\n  columns: DataSheetColumn[];\n  data: any[];\n  tour_add_ons?: any[];\n  tourPrice?: number;\n  onCellsChanged?: (changes: any[]) => void;\n  onDataUpdate?: (newData: any[]) => void;\n  onColumnDelete?: (columnKey: string) => void;\n  onColumnHide?: (columnKey: string) => void;\n  hiddenColumns?: string[];\n  className?: string;\n  orderFilter?: string;\n  roomOptions?: Array<{ value: string; label: string; capacity: number; room_type: string }>;\n  onRoomAssign?: (member_id: string, roomValue: string) => void;\n  getRoomUsage?: (roomValue: string) => { bedCount: number; noBedCount: number; totalCount: number; capacity: number };\n  isRoomFull?: (roomValue: string, excludeMemberId?: string) => boolean;\n  enableColumnResize?: boolean;\n  enableRowDrag?: boolean;\n  tour_id?: string;\n  tourId?: string; // 相容舊名稱\n}\n\nexport function ReactDataSheetWrapper({\n  columns,\n  data,\n  tour_add_ons = [],\n  tourPrice = 0,\n  onCellsChanged,\n  onDataUpdate,\n  onColumnDelete,\n  onColumnHide,\n  hiddenColumns = [],\n  className,\n  orderFilter,\n  roomOptions = [],\n  onRoomAssign,\n  getRoomUsage,\n  isRoomFull,\n  enableColumnResize = true,\n  enableRowDrag = true,\n  tour_id,\n  tourId\n}: DataSheetProps) {\n  // 統一使用 tour_id (優先使用 tour_id，其次 tourId)\n  const finalTourId = tour_id || tourId;\n  const [hoveredColumn, setHoveredColumn] = useState<number | null>(null);\n  const [selectedRange, setSelectedRange] = useState<{start: {i: number, j: number}, end: {i: number, j: number}} | null>(null);\n  const [columnWidths, setColumnWidths] = useState<Record<string, number>>({});\n  const [draggedRow, setDraggedRow] = useState<number | null>(null);\n\n  // 過濾掉隱藏的欄位\n  const visibleColumns = useMemo(() => {\n    return columns.filter(col => !hiddenColumns.includes(col.key));\n  }, [columns, hiddenColumns]);\n\n  // 從 localStorage 載入欄位寬度\n  useEffect(() => {\n    if (finalTourId) {\n      const savedWidths = localStorage.getItem(`columnWidths_${finalTourId}`);\n      if (savedWidths) {\n        try {\n          setColumnWidths(JSON.parse(savedWidths));\n        } catch (e) {\n          console.warn('Failed to parse saved column widths:', e);\n        }\n      }\n    }\n  }, [finalTourId]);\n\n  // 儲存欄位寬度到 localStorage\n  const saveColumnWidth = useCallback((columnKey: string, width: number) => {\n    const newWidths = { ...columnWidths, [columnKey]: width };\n    setColumnWidths(newWidths);\n    if (finalTourId) {\n      localStorage.setItem(`columnWidths_${finalTourId}`, JSON.stringify(newWidths));\n    }\n  }, [columnWidths, finalTourId]);\n\n  // 處理欄位寬度調整\n  const handleColumnResize = useCallback((e: React.MouseEvent, columnKey: string) => {\n    if (!enableColumnResize) return;\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const startX = e.clientX;\n    const column = visibleColumns.find(col => col.key === columnKey);\n    const currentWidth = columnWidths[columnKey] || column?.width || 100;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const diff = e.clientX - startX;\n      const newWidth = Math.max(50, currentWidth + diff);\n      setColumnWidths(prev => ({ ...prev, [columnKey]: newWidth }));\n    };\n\n    const handleMouseUp = () => {\n      const finalWidth = columnWidths[columnKey];\n      if (finalWidth) {\n        saveColumnWidth(columnKey, finalWidth);\n      }\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  }, [enableColumnResize, visibleColumns, columnWidths, saveColumnWidth]);\n\n  // 處理行拖曳\n  const handleRowDragStart = useCallback((e: React.DragEvent, rowIndex: number) => {\n    if (!enableRowDrag || rowIndex === 0) return; // 不允許拖曳標題行\n    setDraggedRow(rowIndex - 1); // 減 1 因為第 0 行是標題\n    e.dataTransfer.effectAllowed = 'move';\n  }, [enableRowDrag]);\n\n  const handleRowDragOver = useCallback((e: React.DragEvent) => {\n    if (!enableRowDrag) return;\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  }, [enableRowDrag]);\n\n  const handleRowDrop = useCallback((e: React.DragEvent, dropRowIndex: number) => {\n    if (!enableRowDrag || draggedRow === null || dropRowIndex === 0) return;\n\n    e.preventDefault();\n    const dropIndex = dropRowIndex - 1; // 減 1 因為第 0 行是標題\n\n    if (draggedRow === dropIndex) {\n      setDraggedRow(null);\n      return;\n    }\n\n    const newData = [...data];\n    const draggedItem = newData[draggedRow];\n    newData.splice(draggedRow, 1);\n    newData.splice(dropIndex, 0, draggedItem);\n\n    if (onDataUpdate) {\n      onDataUpdate(newData);\n    }\n\n    setDraggedRow(null);\n  }, [enableRowDrag, draggedRow, data, onDataUpdate]);\n\n  // 將我們的資料轉換為 react-datasheet 格式\n  const sheetData = useMemo(() => {\n    // 創建標題行\n    const headerRow = visibleColumns.map((col, colIndex) => {\n      const width = columnWidths[col.key] || col.width || 100;\n      return {\n        value: col.label,\n        readOnly: true,\n        className: 'datasheet-header',\n        width: width,\n        columnKey: col.key,\n        colIndex: colIndex\n      };\n    });\n\n    // 創建資料行\n    const dataRows = data.map((row, rowIndex) => {\n      return visibleColumns.map((col, colIndex) => {\n        const value = row[col.key] || '';\n        const isReadOnly = col.readOnly;\n        const width = columnWidths[col.key] || col.width || 100;\n\n        // 如果是公式欄位，計算結果\n        let displayValue = value;\n        if (typeof value === 'string' && value.startsWith('=')) {\n          const context = getMemberContext(row, tour_add_ons, tourPrice);\n          displayValue = calculateFormula(value, context);\n        }\n\n        return {\n          value: value,\n          displayValue: displayValue,\n          readOnly: isReadOnly || (col.key === 'assignedRoom' && orderFilter),\n          key: `${rowIndex}-${colIndex}`,\n          rowData: row,\n          colKey: col.key,\n          width: width,\n          columnKey: col.key,\n          rowIndex: rowIndex,\n          className: cn(\n            'datasheet-cell',\n            isReadOnly && 'datasheet-readonly',\n            typeof value === 'string' && value.startsWith('=') && 'datasheet-formula',\n            draggedRow === rowIndex && 'dragging'\n          )\n        };\n      });\n    });\n\n    return [headerRow, ...dataRows];\n  }, [visibleColumns, data, tour_add_ons, tourPrice]);\n\n  // 處理單元格變更\n  const handleCellsChanged = useCallback((changes: any[]) => {\n    if (!onDataUpdate) return;\n\n    const newData = [...data];\n\n    changes.forEach(({ cell, row, col, value }) => {\n      if (row === 0) return; // 跳過標題行\n\n      const dataRowIndex = row - 1;\n      const column = visibleColumns[col];\n\n      if (column && newData[dataRowIndex]) {\n        newData[dataRowIndex] = {\n          ...newData[dataRowIndex],\n          [column.key]: value\n        };\n      }\n    });\n\n    onDataUpdate(newData);\n\n    if (onCellsChanged) {\n      onCellsChanged(changes);\n    }\n  }, [data, visibleColumns, onDataUpdate, onCellsChanged]);\n\n  // 自訂值渲染器\n  const valueRenderer = useCallback((cell: any, row: number, col: number) => {\n    // 如果是標題行，顯示帶有 hover 控制的標題\n    if (row === 0) {\n      const column = visibleColumns[col];\n      if (!column) return null;\n\n      // 核心欄位不允許刪除\n      const isCoreField = ['index', 'name', 'idNumber'].includes(column.key);\n      // 自定義欄位可以刪除\n      const isCustomField = !['index', 'name', 'nameEn', 'birthday', 'age', 'gender', 'idNumber', 'passport_number', 'passportExpiry', 'reservationCode', 'assignedRoom'].includes(column.key);\n      // 大部分欄位都可以隱藏（除了核心欄位）\n      const canHide = !isCoreField;\n\n      return (\n        <div\n          className=\"relative w-full h-full flex items-center justify-center group\"\n          onMouseEnter={() => setHoveredColumn(col)}\n          onMouseLeave={() => setHoveredColumn(null)}\n        >\n          <span className=\"text-xs font-medium text-morandi-secondary\">{cell.value}</span>\n\n          {/* 列寬調整控制 - 顯示在所有欄位 */}\n          {enableColumnResize && hoveredColumn === col && (\n            <div\n              onMouseDown={(e) => handleColumnResize(e, column.key)}\n              className=\"absolute right-0 top-0 bottom-0 w-2 cursor-col-resize bg-morandi-gold opacity-70 hover:opacity-100 z-20 border-r border-morandi-gold\"\n              title=\"拖曳調整欄位寬度\"\n            />\n          )}\n\n          {/* 欄位操作按鈕 */}\n          {hoveredColumn === col && (canHide || isCustomField) && (\n            <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 flex gap-1 bg-white shadow-sm rounded px-1 z-10 border border-gray-200\">\n              {canHide && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (onColumnHide && column) {\n                      onColumnHide(column.key);\n                    }\n                  }}\n                  className=\"p-1 hover:bg-gray-100 rounded\"\n                  title=\"隱藏欄位\"\n                >\n                  <EyeOff size={12} className=\"text-gray-500\" />\n                </button>\n              )}\n              {isCustomField && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (onColumnDelete && column) {\n                      onColumnDelete(column.key);\n                    }\n                  }}\n                  className=\"p-1 hover:bg-red-100 rounded\"\n                  title=\"刪除欄位\"\n                >\n                  <X size={12} className=\"text-red-500\" />\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    // 如果有錯誤，顯示錯誤\n    if (cell.displayValue === '#ERROR') {\n      return <span className=\"text-red-500 text-xs\">錯誤</span>;\n    }\n\n    // 特殊欄位處理：分房欄位\n    if (col < visibleColumns.length) {\n      const column = visibleColumns[col];\n      if (column.key === 'assignedRoom' && orderFilter && cell.rowData?.id) {\n        // 訂單詳細頁面 - 顯示操作下拉選單\n        const member = cell.rowData;\n        return (\n          <select\n            value={\n              member.isChildNoBed\n                ? (member.assignedRoom ? `no-bed-${member.assignedRoom}` : 'no-bed')\n                : (member.assignedRoom || '')\n            }\n            onChange={(e) => {\n              if (onRoomAssign && member.id) {\n                onRoomAssign(member.id, e.target.value);\n              }\n            }}\n            className=\"w-full h-8 px-2 border border-gray-300 rounded text-xs bg-white focus:outline-none focus:ring-2 focus:ring-morandi-gold\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <option value=\"\">未分配</option>\n            <option value=\"no-bed\">不佔床</option>\n\n            {/* 一般房間選項 */}\n            {roomOptions.map(roomOption => {\n              const usage = getRoomUsage ? getRoomUsage(roomOption.value) : { bedCount: 0, noBedCount: 0, totalCount: 0, capacity: roomOption.capacity };\n              const isFull = isRoomFull ? isRoomFull(roomOption.value, member.id) : false;\n              const isCurrentRoom = member.assignedRoom === roomOption.value && !member.isChildNoBed;\n\n              if (isFull && !isCurrentRoom) {\n                return null;\n              }\n\n              return (\n                <option key={roomOption.value} value={roomOption.value}>\n                  {roomOption.value} ({usage.bedCount}/{usage.capacity}床{usage.noBedCount > 0 ? ` +${usage.noBedCount}不佔床` : ''})\n                </option>\n              );\n            }).filter(Boolean)}\n\n            {/* 不佔床 + 房間選項 */}\n            {member.isChildNoBed && roomOptions.map(roomOption => (\n              <option key={`no-bed-${roomOption.value}`} value={`no-bed-${roomOption.value}`}>\n                不佔床 - {roomOption.value}\n              </option>\n            ))}\n          </select>\n        );\n      }\n    }\n\n    // 如果是公式，顯示計算結果\n    if (cell.displayValue !== cell.value) {\n      return <span className=\"text-morandi-primary text-xs\">{cell.displayValue}</span>;\n    }\n\n    // 一般顯示\n    return <span className=\"text-morandi-primary text-xs\">{cell.value}</span>;\n  }, [visibleColumns, hoveredColumn, onColumnHide, onColumnDelete]);\n\n  // 增強鍵盤導航\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    // Ctrl+C 複製\n    if (e.ctrlKey && e.key === 'c') {\n      console.log('Copy triggered');\n      // react-datasheet 內建支持\n    }\n    // Ctrl+V 貼上\n    else if (e.ctrlKey && e.key === 'v') {\n      console.log('Paste triggered');\n      // react-datasheet 內建支持\n    }\n    // Delete 鍵清除內容\n    else if (e.key === 'Delete') {\n      console.log('Delete triggered');\n      // 可以在此添加自定義清除邏輯\n    }\n  }, []);\n\n  // 處理選擇範圍變更\n  const handleSelect = useCallback((start: {i: number, j: number}, end?: {i: number, j: number}) => {\n    if (!start) return;\n\n    // 如果沒有 end，則設為與 start 相同（單個儲存格選擇）\n    const endCell = end || start;\n\n    setSelectedRange({ start, end: endCell });\n\n    if (start.i !== endCell.i || start.j !== endCell.j) {\n      console.log('Multi-cell selection:', start, 'to', endCell);\n    }\n  }, []);\n\n  return (\n    <div className={cn(\"excel-datasheet-wrapper\", className)}>\n      <style jsx>{`\n        /* 確保組件本身支援橫向排列 */\n        .excel-datasheet-wrapper {\n          width: 100%;\n          overflow-x: auto;\n        }\n        /* 限制樣式只影響當前組件 */\n        :global(.excel-datasheet-wrapper .data-grid-container) {\n          font-family: inherit;\n          font-size: 14px;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid) {\n          border: 1px solid #e5e7eb;\n          border-radius: 8px;\n          overflow: hidden;\n          width: 100%;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid table) {\n          width: 100%;\n          border-collapse: collapse;\n          table-layout: auto;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell) {\n          border: 1px solid #e5e7eb;\n          padding: 8px;\n          min-height: 32px;\n          background: white;\n          text-align: left;\n          vertical-align: middle;\n          white-space: nowrap;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid td) {\n          padding: 4px 8px;\n          border: 1px solid #e5e7eb;\n          min-width: 80px;\n          max-width: 200px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid th) {\n          padding: 8px;\n          border: 1px solid #e5e7eb;\n          background: #f3f4f6;\n          font-weight: 600;\n          color: #374151;\n          text-align: center;\n          min-width: 80px;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.selected) {\n          border: 2px solid #d97706;\n          background: #fef3c7;\n          outline: none;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.editing) {\n          border: 2px solid #d97706;\n          background: white;\n          padding: 0;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.editing input) {\n          width: 100%;\n          height: 32px;\n          padding: 4px 8px;\n          border: none;\n          outline: none;\n          font-size: 14px !important;\n          background: transparent;\n          font-family: inherit;\n          line-height: 1.4;\n        }\n\n        :global(.excel-datasheet-wrapper .datasheet-header) {\n          background: #f3f4f6;\n          font-weight: 600;\n          color: #374151;\n          text-align: center;\n        }\n\n        :global(.excel-datasheet-wrapper .datasheet-readonly) {\n          background: #fafafa;\n          color: #6b7280;\n        }\n\n        :global(.excel-datasheet-wrapper .datasheet-formula) {\n          background: #ecfdf5;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell:hover) {\n          background: #f9fafb;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.read-only:hover) {\n          background: #f3f4f6;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.selected) {\n          background: rgba(217, 119, 6, 0.1);\n          border: 1px solid #d97706;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid:focus-within .cell.selected) {\n          outline: 2px solid #d97706;\n          outline-offset: -2px;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.copying) {\n          border: 2px dashed #059669;\n          background: rgba(5, 150, 105, 0.1);\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid .cell.selected::after) {\n          content: '';\n          position: absolute;\n          bottom: -2px;\n          right: -2px;\n          width: 6px;\n          height: 6px;\n          background: #d97706;\n          cursor: crosshair;\n          border: 1px solid white;\n        }\n\n        /* 列寬調整樣式 */\n        :global(.excel-datasheet-wrapper .resize-handle) {\n          position: absolute;\n          right: 0;\n          top: 0;\n          bottom: 0;\n          width: 4px;\n          cursor: col-resize;\n          background: transparent;\n          z-index: 10;\n        }\n\n        :global(.excel-datasheet-wrapper .resize-handle:hover) {\n          background: #d97706;\n        }\n\n        /* 行拖曳樣式 */\n        :global(.excel-datasheet-wrapper .data-grid tr.draggable) {\n          cursor: move;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid tr.draggable:hover) {\n          background: rgba(217, 119, 6, 0.05);\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid tr.dragging) {\n          opacity: 0.5;\n          background: rgba(217, 119, 6, 0.1);\n          border-left: 3px solid #d97706;\n        }\n\n        /* 優化表格布局 */\n        :global(.excel-datasheet-wrapper .data-grid table) {\n          table-layout: fixed;\n          border-collapse: separate;\n          border-spacing: 0;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid td) {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          border-right: 1px solid #e5e7eb;\n          border-bottom: 1px solid #e5e7eb;\n        }\n\n        :global(.excel-datasheet-wrapper .data-grid th) {\n          position: relative;\n          border-right: 1px solid #e5e7eb;\n          border-bottom: 1px solid #e5e7eb;\n          background: #f9fafb;\n          user-select: none;\n        }\n      `}</style>\n\n      <div\n        onKeyDown={(e) => {\n          handleKeyDown(e);\n          // 阻止方向鍵滾動頁面\n          if (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }}\n        tabIndex={0}\n      >\n        {/* @ts-ignore - ReactDataSheet 型別定義不完整 */}\n        <ReactDataSheet\n          data={sheetData}\n          onCellsChanged={handleCellsChanged}\n          valueRenderer={valueRenderer}\n          dataRenderer={(cell: any) => cell.value}\n          onContextMenu={(e: any, cell: any, i: any, j: any) => e.preventDefault()}\n          // 增強多儲存格選擇\n          onSelect={handleSelect}\n          // 處理複製貼上\n          parsePaste={(str: any) => {\n            return str.split(/\\r\\n|\\n|\\r/).map((row: any) => row.split('\\t'));\n          }}\n          // 啟用 Excel 式功能\n          tabBehaviour={'default'}\n          // 自定義鍵盤導航\n          onKeyDown={(e: any) => {\n            // 阻止方向鍵滾動頁面\n            if (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n          }}\n          rowRenderer={(props: any) => {\n            const rowIndex = props['data-row'];\n            const isDraggable = enableRowDrag && rowIndex > 0; // 不允許拖曳標題行\n            const isDragging = draggedRow === rowIndex - 1;\n\n            return (\n              <tr\n                {...props}\n                draggable={isDraggable}\n                onDragStart={(e) => handleRowDragStart(e, rowIndex)}\n                onDragOver={handleRowDragOver}\n                onDrop={(e) => handleRowDrop(e, rowIndex)}\n                className={cn(\n                  props.className,\n                  isDragging && 'opacity-50 bg-morandi-gold/10',\n                  isDraggable && 'hover:bg-morandi-gold/5 cursor-move'\n                )}\n                style={{\n                  ...props.style,\n                  borderLeft: isDragging ? '3px solid #d97706' : undefined\n                }}\n              />\n            );\n          }}\n          cellRenderer={(props: any) => {\n            // 過濾掉非 DOM 屬性\n            const {\n              editing,\n              selected,\n              updated,\n              width,\n              columnKey,\n              rowIndex,\n              attributesRenderer,\n              valueRenderer,\n              dataRenderer,\n              ...tdProps\n            } = props;\n            const cellWidth = width || 100;\n\n            return (\n              <td\n                {...tdProps}\n                style={{\n                  ...props.style,\n                  padding: 0,\n                  width: `${cellWidth}px`,\n                  minWidth: `${cellWidth}px`,\n                  maxWidth: `${cellWidth}px`\n                }}\n              />\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n// 導出 react-datasheet 相關類型\nexport type { ReactDataSheet };\nexport default ReactDataSheet;","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/sync-indicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cloud' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CloudOff' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RefreshCw' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n/**\n * 🔄 同步狀態指示器組件\n *\n * 顯示目前的同步狀態和待同步數量\n * 可點擊手動觸發同步\n */\n\n// import { useAutoSync } from '@/lib/offline/auto-sync-provider'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport {\n  Cloud,\n  CloudOff,\n  Loader2,\n  RefreshCw,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\n\nexport function SyncIndicator() {\n  // TODO: 實作自動同步功能\n  return null;\n\n  /* const { syncStatus, isOnline, triggerSync } = useAutoSync()\n\n  const handleSync = async () => {\n    try {\n      await triggerSync()\n    } catch (error) {\n      console.error('同步失敗:', error)\n    }\n  }\n\n  // 計算同步狀態\n  const pendingCount = syncStatus?.pendingCount || 0\n  const isSyncing = syncStatus?.isSyncing || false\n  const hasErrors = (syncStatus?.errors?.length || 0) > 0\n\n  // 顯示圖示\n  const renderIcon = () => {\n    if (!isOnline) {\n      return <CloudOff className=\"h-4 w-4 text-muted-foreground\" />\n    }\n    if (isSyncing) {\n      return <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n    }\n    if (hasErrors) {\n      return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\n    }\n    if (pendingCount === 0) {\n      return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n    }\n    return <Cloud className=\"h-4 w-4 text-blue-500\" />\n  }\n\n  // 顯示提示文字\n  const getTooltipText = () => {\n    if (!isOnline) return '離線模式'\n    if (isSyncing) return '同步中...'\n    if (hasErrors) return `同步失敗: ${syncStatus?.errors?.length || 0} 個錯誤`\n    if (pendingCount === 0) return '所有資料已同步'\n    return `待同步: ${pendingCount} 筆`\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"flex items-center gap-2\">\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleSync}\n              disabled={isSyncing || !isOnline}\n              className=\"gap-2\"\n            >\n              {renderIcon()}\n              {pendingCount > 0 && (\n                <Badge variant=\"secondary\" className=\"h-5 px-1.5 text-xs\">\n                  {pendingCount}\n                </Badge>\n              )}\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>{getTooltipText()}</p>\n          </TooltipContent>\n        </Tooltip>\n      </div>\n    </TooltipProvider>\n  ) */\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/sync-status-badge.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateStatus'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [tableName, updateStatus]","fix":{"range":[1226,1237],"text":"[tableName, updateStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { checkPendingCount, isOnline } from '@/lib/sync/sync-status-service';\nimport { Cloud, CloudOff, AlertCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { TableName } from '@/lib/db';\n\ninterface SyncStatusBadgeProps {\n  tableName: TableName;\n  label?: string; // 例如：「旅遊團」「訂單」\n}\n\n/**\n * 頁面級別的同步狀態徽章\n * 顯示當前頁面相關表的同步狀態\n */\nexport function SyncStatusBadge({ tableName, label }: SyncStatusBadgeProps) {\n  const [pendingCount, setPendingCount] = useState(0);\n  const [online, setOnline] = useState(true);\n  const [mounted, setMounted] = useState(false);\n\n  const updateStatus = async () => {\n    const count = await checkPendingCount(tableName);\n    setPendingCount(count);\n    setOnline(isOnline());\n  };\n\n  useEffect(() => {\n    setMounted(true);\n    updateStatus();\n\n    // 監聽網路狀態變化\n    const handleOnline = () => updateStatus();\n    const handleOffline = () => updateStatus();\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [tableName]);\n\n  // SSR 期間不渲染\n  if (!mounted) {\n    return null;\n  }\n\n  // 決定狀態\n  const getStatus = () => {\n    if (!online) {\n      return {\n        color: 'text-morandi-red',\n        bgColor: 'bg-morandi-red/10',\n        icon: CloudOff,\n        text: '離線模式'\n      };\n    }\n\n    if (pendingCount > 0) {\n      return {\n        color: 'text-morandi-gold',\n        bgColor: 'bg-morandi-gold/10',\n        icon: AlertCircle,\n        text: `${pendingCount} 筆待同步`\n      };\n    }\n\n    return {\n      color: 'text-morandi-green',\n      bgColor: 'bg-morandi-green/10',\n      icon: Cloud,\n      text: '已同步'\n    };\n  };\n\n  const status = getStatus();\n  const Icon = status.icon;\n\n  return (\n    <div className={cn(\n      'inline-flex items-center gap-2 px-3 py-1.5 rounded-lg text-sm',\n      status.bgColor\n    )}>\n      <Icon size={16} className={status.color} />\n      <span className={cn('font-medium', status.color)}>\n        {label && `${label}：`}{status.text}\n      </span>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/sync/sync-status-indicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'localDB' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11694,11697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11694,11697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { backgroundSyncService } from '@/lib/sync/background-sync-service';\nimport { localDB } from '@/lib/db';\nimport { TABLES } from '@/lib/db/schemas';\nimport {\n  Wifi, WifiOff, Cloud, CloudOff,\n  RefreshCw, AlertCircle, Clock,\n  ChevronDown, ChevronUp, X\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { formatDistanceToNow } from 'date-fns';\nimport { zhTW } from 'date-fns/locale';\n\n/**\n * 檢查所有表格的待同步數量\n */\nasync function checkPendingCount(): Promise<number> {\n  let totalCount = 0;\n\n  for (const tableName of Object.values(TABLES)) {\n    try {\n      const count = await backgroundSyncService.getPendingCount(tableName);\n      totalCount += count;\n    } catch (error) {\n      console.warn(`無法取得 ${tableName} 的待同步數量:`, error);\n    }\n  }\n\n  return totalCount;\n}\n\n/**\n * 檢查網路連線狀態\n */\nfunction checkOnline(): boolean {\n  return typeof navigator !== 'undefined' ? navigator.onLine : true;\n}\n\n// ===== 主要同步狀態指示器（FastIn 架構版本）=====\nexport function SyncStatusIndicator() {\n  const [isOnline, setIsOnline] = useState(checkOnline());\n  const [hasPendingChanges, setHasPendingChanges] = useState(false);\n  const [pendingCount, setPendingCount] = useState(0);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [showNotification, setShowNotification] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n\n  // 監聽網路狀態\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // 定期檢查待同步數量（每 15 秒）\n  useEffect(() => {\n    const checkSync = async () => {\n      const count = await checkPendingCount();\n      setPendingCount(count);\n      setHasPendingChanges(count > 0);\n    };\n\n    // 立即執行一次\n    checkSync();\n\n    // 每 15 秒檢查一次\n    const interval = setInterval(checkSync, 15000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // 監聽網路狀態變化，顯示通知\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setShowNotification(true);\n      setTimeout(() => setShowNotification(false), 3000);\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setShowNotification(true);\n      setTimeout(() => setShowNotification(false), 3000);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const handleManualSync = async () => {\n    if (!isOnline || isSyncing) return;\n\n    setIsSyncing(true);\n    try {\n      await backgroundSyncService.syncAllTables();\n      setShowNotification(true);\n      setLastSyncTime(new Date());\n      setTimeout(() => setShowNotification(false), 3000);\n    } catch (error) {\n      console.error('手動同步失敗:', error);\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const getStatusColor = () => {\n    if (!isOnline) return 'text-red-500';\n    if (isSyncing) return 'text-yellow-500';\n    if (hasPendingChanges) return 'text-orange-500';\n    return 'text-green-500';\n  };\n\n  const getStatusIcon = () => {\n    if (!isMounted) return <Cloud className=\"w-4 h-4\" />; // 預設顯示 Cloud 避免 hydration 錯誤\n    if (!isOnline) return <CloudOff className=\"w-4 h-4\" />;\n    if (isSyncing) return <RefreshCw className=\"w-4 h-4 animate-spin\" />;\n    if (hasPendingChanges) return <Cloud className=\"w-4 h-4\" />;\n    return <Cloud className=\"w-4 h-4\" />; // 已同步也顯示 Cloud\n  };\n\n  const getStatusText = () => {\n    if (!isOnline) return '離線模式';\n    if (isSyncing) return '同步中...';\n    if (hasPendingChanges) return `${pendingCount} 個待同步`;\n    return '已同步';\n  };\n\n  const formatLastSyncTime = () => {\n    if (!lastSyncTime) return '尚未同步';\n\n    try {\n      return formatDistanceToNow(new Date(lastSyncTime), {\n        addSuffix: true,\n        locale: zhTW\n      });\n    } catch {\n      return '尚未同步';\n    }\n  };\n\n  return (\n    <>\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <div className={cn(\n          \"bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300\",\n          isExpanded ? \"w-80\" : \"w-auto\"\n        )}>\n          <div\n            className=\"flex items-center justify-between p-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className={cn(\"transition-colors\", getStatusColor())}>\n                {getStatusIcon()}\n              </div>\n              <div className=\"text-sm\">\n                <div className={cn(\"font-medium\", getStatusColor())}>\n                  {getStatusText()}\n                </div>\n                {!isExpanded && (\n                  <div className=\"text-xs text-gray-500\">\n                    {formatLastSyncTime()}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              {isOnline && !isSyncing && hasPendingChanges && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleManualSync();\n                  }}\n                  className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-600 rounded\"\n                  title=\"立即同步\"\n                >\n                  <RefreshCw className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                </button>\n              )}\n              {isExpanded ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronUp className=\"w-4 h-4\" />}\n            </div>\n          </div>\n\n          {isExpanded && (\n            <div className=\"border-t border-gray-200 dark:border-gray-700 p-3 space-y-3\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">網路連線</span>\n                <div className=\"flex items-center gap-2\">\n                  {isOnline ? (\n                    <>\n                      <Wifi className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-green-500\">已連線</span>\n                    </>\n                  ) : (\n                    <>\n                      <WifiOff className=\"w-4 h-4 text-red-500\" />\n                      <span className=\"text-red-500\">離線</span>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">最後同步</span>\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"w-4 h-4 text-gray-400\" />\n                  <span className=\"text-gray-700 dark:text-gray-300\">\n                    {formatLastSyncTime()}\n                  </span>\n                </div>\n              </div>\n\n              {hasPendingChanges && (\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 rounded p-2\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <AlertCircle className=\"w-4 h-4 text-orange-500\" />\n                    <span className=\"text-orange-700 dark:text-orange-400\">\n                      {pendingCount} 個變更待同步\n                    </span>\n                  </div>\n                  <PendingChangesList />\n                </div>\n              )}\n\n              {isOnline && (\n                <button\n                  onClick={handleManualSync}\n                  disabled={isSyncing || !hasPendingChanges}\n                  className={cn(\n                    \"w-full py-2 px-3 rounded text-sm font-medium transition-colors\",\n                    isSyncing || !hasPendingChanges\n                      ? \"bg-gray-100 text-gray-400 cursor-not-allowed\"\n                      : \"bg-blue-500 text-white hover:bg-blue-600\"\n                  )}\n                >\n                  {isSyncing ? (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                      同步中...\n                    </span>\n                  ) : hasPendingChanges ? (\n                    '立即同步'\n                  ) : (\n                    '已是最新'\n                  )}\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {showNotification && (\n        <SyncNotification\n          isOnline={isOnline}\n          onClose={() => setShowNotification(false)}\n        />\n      )}\n    </>\n  );\n}\n\n/**\n * 顯示待同步項目列表\n */\nfunction PendingChangesList() {\n  const [pendingByTable, setPendingByTable] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    const loadPendingCounts = async () => {\n      const counts: Record<string, number> = {};\n\n      for (const tableName of Object.values(TABLES)) {\n        try {\n          const count = await backgroundSyncService.getPendingCount(tableName);\n          if (count > 0) {\n            counts[tableName] = count;\n          }\n        } catch (error) {\n          console.warn(`無法取得 ${tableName} 的待同步數量:`, error);\n        }\n      }\n\n      setPendingByTable(counts);\n    };\n\n    loadPendingCounts();\n  }, []);\n\n  if (Object.keys(pendingByTable).length === 0) return null;\n\n  return (\n    <div className=\"mt-2 space-y-1\">\n      {Object.entries(pendingByTable).map(([table, count]) => (\n        <div key={table} className=\"text-xs text-gray-600 dark:text-gray-400\">\n          <span className=\"capitalize\">{table}</span>: {count} 筆待同步\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction SyncNotification({\n  isOnline,\n  onClose\n}: {\n  isOnline: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <div className={cn(\n      \"fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg border animate-slide-in-right\",\n      isOnline\n        ? \"bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800\"\n        : \"bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800\"\n    )}>\n      <div className=\"flex items-center gap-3\">\n        {isOnline ? (\n          <>\n            <Wifi className=\"w-5 h-5 text-green-500\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n                已恢復連線\n              </p>\n              <p className=\"text-xs text-green-600 dark:text-green-400\">\n                系統將自動同步您的資料\n              </p>\n            </div>\n          </>\n        ) : (\n          <>\n            <WifiOff className=\"w-5 h-5 text-red-500\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                離線模式\n              </p>\n              <p className=\"text-xs text-red-600 dark:text-red-400\">\n                您的變更將在恢復連線後同步\n              </p>\n            </div>\n          </>\n        )}\n        <button\n          onClick={onClose}\n          className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n        >\n          <X className=\"w-4 h-4 text-gray-500\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport function ConflictResolutionDialog({\n  conflicts,\n  onResolve\n}: {\n  conflicts: any[];\n  onResolve: (conflictId: string, resolution: 'local' | 'remote') => void;\n}) {\n  if (conflicts.length === 0) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] overflow-hidden\">\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n          <h2 className=\"text-lg font-semibold flex items-center gap-2\">\n            <AlertCircle className=\"w-5 h-5 text-yellow-500\" />\n            同步衝突\n          </h2>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n            偵測到 {conflicts.length} 個衝突，請選擇保留的版本\n          </p>\n        </div>\n\n        <div className=\"p-4 space-y-4 max-h-[60vh] overflow-y-auto\">\n          {conflicts.map((conflict) => (\n            <div key={conflict.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n              <div className=\"mb-3\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  {conflict.table} - {conflict.id}\n                </span>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs font-medium text-blue-600\">本地版本</span>\n                    <button\n                      onClick={() => onResolve(conflict.id, 'local')}\n                      className=\"px-3 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600\"\n                    >\n                      使用此版本\n                    </button>\n                  </div>\n                  <pre className=\"text-xs bg-gray-50 dark:bg-gray-900 p-2 rounded overflow-auto max-h-48\">\n                    {JSON.stringify(conflict.localData, null, 2)}\n                  </pre>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs font-medium text-green-600\">遠端版本</span>\n                    <button\n                      onClick={() => onResolve(conflict.id, 'remote')}\n                      className=\"px-3 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600\"\n                    >\n                      使用此版本\n                    </button>\n                  </div>\n                  <pre className=\"text-xs bg-gray-50 dark:bg-gray-900 p-2 rounded overflow-auto max-h-48\">\n                    {JSON.stringify(conflict.remoteData, null, 2)}\n                  </pre>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/component-library-toolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { FileText, Image as ImageIcon, Users, Calendar, DollarSign, Plane, AlignLeft } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\n\ninterface ComponentLibraryToolbarProps {\n  onInsert: (componentData: any) => void;\n}\n\n// 定義快速組件（簡化版）\nconst quickComponents = [\n  {\n    id: 'logo',\n    name: 'Logo',\n    icon: ImageIcon,\n    template: [['【Logo 區】', '', ''], ['', '', ''], ['', '', '']]\n  },\n  {\n    id: 'title',\n    name: '標題',\n    icon: FileText,\n    template: [['', '團體旅遊報價單', '', '', '']]\n  },\n  {\n    id: 'customer-info',\n    name: '客戶資訊',\n    icon: Users,\n    template: [\n      ['客戶名稱', '{customer_name}', '', '報價日期', '{quote_date}'],\n      ['聯絡人', '{contact_person}', '', '承辦業務', '{sales_person}'],\n      ['聯絡電話', '{phone}', '', '預計日期', '{departure_date}']\n    ]\n  },\n  {\n    id: 'itinerary',\n    name: '行程表',\n    icon: Calendar,\n    template: [\n      ['天數', '行程內容', '早餐', '午餐', '晚餐', '住宿'],\n      ['第1天', '', '飯店', '機上', '當地餐廳', ''],\n      ['第2天', '', '飯店', '當地餐廳', '當地餐廳', '']\n    ]\n  },\n  {\n    id: 'price',\n    name: '價格表',\n    icon: DollarSign,\n    template: [\n      ['項目', '', '', '單位金額'],\n      ['大人費用', '', '', '$'],\n      ['小孩不佔床', '(滿12歲以下)', '', '$']\n    ]\n  },\n  {\n    id: 'flight',\n    name: '航班資訊',\n    icon: Plane,\n    template: [\n      ['航空公司', '航班代號', '出發機場', '抵達機場', '航行時間']\n    ]\n  },\n  {\n    id: 'notes',\n    name: '備註',\n    icon: AlignLeft,\n    template: [\n      ['備註'],\n      ['1. '],\n      ['2. ']\n    ]\n  }\n];\n\nexport function ComponentLibraryToolbar({ onInsert }: ComponentLibraryToolbarProps) {\n  const handleInsert = (component: typeof quickComponents[0]) => {\n    // 複製到剪貼簿\n    const templateText = component.template\n      .map(row => row.join('\\t'))\n      .join('\\n');\n\n    navigator.clipboard.writeText(templateText);\n\n    // 通知插入\n    onInsert(component.template);\n\n    // 提示用戶\n    alert(`已複製「${component.name}」模板！\\n請在左側 Excel 編輯器中按 Ctrl+V (Mac: Cmd+V) 貼上。`);\n  };\n\n  return (\n    <div className=\"flex items-center gap-2 px-4 py-2 overflow-x-auto\">\n      <span className=\"text-sm font-medium text-morandi-secondary whitespace-nowrap mr-2\">\n        快速插入：\n      </span>\n      {quickComponents.map((component) => {\n        const Icon = component.icon;\n        return (\n          <Button\n            key={component.id}\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleInsert(component)}\n            className=\"whitespace-nowrap\"\n          >\n            <Icon size={14} className=\"mr-1.5\" />\n            {component.name}\n          </Button>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/component-library.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { FileText, Image as ImageIcon, Table, AlignLeft, Calendar, Users, DollarSign, Plane } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\n\nimport { cn } from '@/lib/utils';\n\ninterface Component {\n  id: string;\n  name: string;\n  icon: React.ElementType;\n  description: string;\n  template: string[][];  // Excel 資料格式\n}\n\ninterface ComponentCategory {\n  name: string;\n  icon: React.ElementType;\n  components: Component[];\n}\n\n// 定義組件庫\nconst componentCategories: ComponentCategory[] = [\n  {\n    name: '標題與Logo',\n    icon: ImageIcon,\n    components: [\n      {\n        id: 'logo',\n        name: 'Logo 區塊',\n        icon: ImageIcon,\n        description: '公司 Logo 圖片區',\n        template: [\n          ['【Logo 區】', '', ''],\n          ['', '', ''],\n          ['', '', '']\n        ]\n      },\n      {\n        id: 'title',\n        name: '主標題',\n        icon: FileText,\n        description: '報價單標題',\n        template: [\n          ['', '團體旅遊報價單', '', '', '']\n        ]\n      }\n    ]\n  },\n  {\n    name: '基本資訊',\n    icon: AlignLeft,\n    components: [\n      {\n        id: 'customer-info',\n        name: '客戶資訊表',\n        icon: Users,\n        description: '客戶聯絡資訊表格',\n        template: [\n          ['客戶名稱', '{customer_name}', '', '報價日期', '{quote_date}'],\n          ['聯絡人', '{contact_person}', '', '承辦業務', '{sales_person}'],\n          ['聯絡電話', '{phone}', '', '預計日期', '{departure_date}'],\n          ['地址', '{address}', '', '', '']\n        ]\n      },\n      {\n        id: 'tour-info',\n        name: '旅遊資訊',\n        icon: Plane,\n        description: '行程基本資訊',\n        template: [\n          ['旅遊名稱', '{tour_name}'],\n          ['出發日期', '{departure_date}'],\n          ['返回日期', '{return_date}'],\n          ['預計人數', '{participants}', '人']\n        ]\n      }\n    ]\n  },\n  {\n    name: '行程與費用',\n    icon: Table,\n    components: [\n      {\n        id: 'itinerary-table',\n        name: '行程表',\n        icon: Calendar,\n        description: '每日行程詳細表格',\n        template: [\n          ['天數', '行程內容', '早餐', '午餐', '晚餐', '住宿'],\n          ['第1天', '', '飯店', '機上', '當地餐廳', ''],\n          ['第2天', '', '飯店', '當地餐廳', '當地餐廳', ''],\n          ['第3天', '', '飯店', '當地餐廳', '當地餐廳', '']\n        ]\n      },\n      {\n        id: 'price-table',\n        name: '價格表',\n        icon: DollarSign,\n        description: '費用明細表',\n        template: [\n          ['項目', '', '', '單位金額'],\n          ['大人費用', '', '', '$'],\n          ['小孩不佔床', '(滿12歲以下)', '', '$'],\n          ['嬰兒', '', '', '$']\n        ]\n      },\n      {\n        id: 'flight-info',\n        name: '航班資訊',\n        icon: Plane,\n        description: '航班時刻表',\n        template: [\n          ['航空公司', '航班代號', '出發機場', '抵達機場', '航行時間'],\n          ['', '', '', '', '']\n        ]\n      }\n    ]\n  },\n  {\n    name: '說明與備註',\n    icon: AlignLeft,\n    components: [\n      {\n        id: 'notes',\n        name: '備註區',\n        icon: FileText,\n        description: '注意事項與備註',\n        template: [\n          ['備註'],\n          ['1. '],\n          ['2. '],\n          ['3. ']\n        ]\n      },\n      {\n        id: 'inclusions',\n        name: '費用包含',\n        icon: DollarSign,\n        description: '費用包含項目',\n        template: [\n          ['費用包含'],\n          ['• 來回機票（含稅金）'],\n          ['• 行程表所列之住宿費用'],\n          ['• 行程表所列之餐食費用'],\n          ['• 旅遊期間參加活動費用']\n        ]\n      },\n      {\n        id: 'exclusions',\n        name: '費用不含',\n        icon: DollarSign,\n        description: '費用不包含項目',\n        template: [\n          ['費用不含'],\n          ['• 新辦護照費用'],\n          ['• 導遊、司機小費'],\n          ['• 個人消費'],\n          ['• 旅遊平安保險（建議自行投保）']\n        ]\n      }\n    ]\n  }\n];\n\ninterface ComponentLibraryProps {\n  onInsert: (componentData: string[][]) => void;\n}\n\nexport function ComponentLibrary({ onInsert }: ComponentLibraryProps) {\n  const handleComponentClick = (component: Component) => {\n    onInsert(component.template);\n\n    // 同時複製到剪貼簿\n    const templateText = component.template\n      .map(row => row.join('\\t'))\n      .join('\\n');\n    navigator.clipboard.writeText(templateText);\n  };\n\n  // 扁平化所有組件\n  const allComponents = componentCategories.flatMap(category => category.components);\n\n  return (\n    <div className=\"px-6 py-3\">\n      <div className=\"flex items-center gap-2 overflow-x-auto\">\n        <span className=\"text-sm font-medium text-morandi-secondary whitespace-nowrap mr-2\">\n          快速插入：\n        </span>\n        {allComponents.map((component) => {\n          const Icon = component.icon;\n          return (\n            <Button\n              key={component.id}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleComponentClick(component)}\n              className=\"whitespace-nowrap\"\n              title={component.description}\n            >\n              <Icon size={14} className=\"mr-1.5\" />\n              {component.name}\n            </Button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/field-mapping-editor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1063,1066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1063,1066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateAllFields' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":58,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":65,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":65,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nimport { Plus, Trash2 } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nimport { getAvailableFields, getSourceLabel, validateField } from '@/lib/template-helpers';\n\nimport { TemplateField, DataSource } from '@/types/template';\n\ninterface FieldMappingEditorProps {\n  fields: TemplateField[];\n  onChange: (fields: TemplateField[]) => void;\n}\n\nexport function FieldMappingEditor({ fields, onChange }: FieldMappingEditorProps) {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const addField = () => {\n    const newField: TemplateField = {\n      id: crypto.randomUUID(),\n      field_key: '',\n      display_name: '',\n      field_type: 'text',\n      is_required: false,\n      data_source: 'manual',\n    };\n\n    onChange([...fields, newField]);\n  };\n\n  const updateField = (index: number, key: keyof TemplateField, value: any) => {\n    const newFields = [...fields];\n    newFields[index] = { ...newFields[index], [key]: value };\n\n    // 如果切換資料來源，清空 source_field\n    if (key === 'data_source') {\n      newFields[index].source_field = undefined;\n    }\n\n    onChange(newFields);\n\n    // 清除該欄位的錯誤\n    const newErrors = { ...errors };\n    delete newErrors[newFields[index].id];\n    setErrors(newErrors);\n  };\n\n  const removeField = (index: number) => {\n    const newFields = fields.filter((_, i) => i !== index);\n    onChange(newFields);\n  };\n\n  const validateAllFields = () => {\n    const newErrors: Record<string, string> = {};\n    let hasError = false;\n\n    fields.forEach((field) => {\n      const validation = validateField(field as any);\n      if (!validation.valid) {\n        newErrors[field.id] = validation.error!;\n        hasError = true;\n      }\n    });\n\n    setErrors(newErrors);\n    return !hasError;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-bold text-morandi-primary\">欄位關聯設定</h3>\n          <p className=\"text-sm text-morandi-secondary mt-1\">\n            定義模板中需要的資料欄位及其來源\n          </p>\n        </div>\n        <Button size=\"sm\" onClick={addField}>\n          <Plus size={16} className=\"mr-2\" />\n          新增欄位\n        </Button>\n      </div>\n\n      {/* 欄位列表 */}\n      {fields.length === 0 ? (\n        <div className=\"bg-morandi-container/5 rounded-lg p-8 text-center\">\n          <p className=\"text-sm text-morandi-secondary mb-4\">\n            尚未新增任何欄位\n          </p>\n          <Button size=\"sm\" onClick={addField} variant=\"outline\">\n            <Plus size={16} className=\"mr-2\" />\n            新增第一個欄位\n          </Button>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {fields.map((field, index) => (\n            <div\n              key={field.id}\n              className=\"bg-card rounded-lg p-4 border border-morandi-container/20\"\n            >\n              <div className=\"grid grid-cols-12 gap-4 items-start\">\n                {/* 1. Excel 中的變數名稱 */}\n                <div className=\"col-span-3\">\n                  <label className=\"text-xs text-morandi-secondary mb-1 block\">\n                    變數名稱（Excel中）\n                    <span className=\"text-morandi-red ml-1\">*</span>\n                  </label>\n                  <Input\n                    value={field.field_key}\n                    onChange={(e) => updateField(index, 'field_key', e.target.value)}\n                    placeholder=\"例如：tour_name\"\n                    className=\"font-mono text-sm\"\n                  />\n                </div>\n\n                {/* 2. 顯示名稱 */}\n                <div className=\"col-span-3\">\n                  <label className=\"text-xs text-morandi-secondary mb-1 block\">\n                    顯示名稱\n                    <span className=\"text-morandi-red ml-1\">*</span>\n                  </label>\n                  <Input\n                    value={field.display_name}\n                    onChange={(e) => updateField(index, 'display_name', e.target.value)}\n                    placeholder=\"例如：旅遊團名稱\"\n                  />\n                </div>\n\n                {/* 3. 資料來源（關聯性）*/}\n                <div className=\"col-span-2\">\n                  <label className=\"text-xs text-morandi-secondary mb-1 block\">\n                    資料來源\n                    <span className=\"text-morandi-red ml-1\">*</span>\n                  </label>\n                  <Select\n                    value={field.data_source}\n                    onValueChange={(v) => updateField(index, 'data_source', v as DataSource)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"tour\">旅遊團</SelectItem>\n                      <SelectItem value=\"order\">訂單</SelectItem>\n                      <SelectItem value=\"customer\">客戶</SelectItem>\n                      <SelectItem value=\"employee\">員工</SelectItem>\n                      <SelectItem value=\"manual\">手動輸入</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* 4. 對應欄位 */}\n                <div className=\"col-span-3\">\n                  <label className=\"text-xs text-morandi-secondary mb-1 block\">\n                    對應欄位\n                    {field.data_source !== 'manual' && (\n                      <span className=\"text-morandi-red ml-1\">*</span>\n                    )}\n                  </label>\n                  <Select\n                    value={field.source_field || ''}\n                    onValueChange={(v) => updateField(index, 'source_field', v)}\n                    disabled={field.data_source === 'manual'}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"選擇欄位\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getAvailableFields(field.data_source).map((f) => (\n                        <SelectItem key={f.key} value={f.key}>\n                          {f.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* 5. 刪除按鈕 */}\n                <div className=\"col-span-1 flex items-end\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeField(index)}\n                    className=\"text-morandi-red h-10 w-10 p-0\"\n                  >\n                    <Trash2 size={16} />\n                  </Button>\n                </div>\n              </div>\n\n              {/* 錯誤訊息 */}\n              {errors[field.id] && (\n                <div className=\"mt-2 text-xs text-morandi-red\">\n                  {errors[field.id]}\n                </div>\n              )}\n\n              {/* 預覽 */}\n              <div className=\"mt-3 p-2 bg-morandi-container/5 rounded text-xs\">\n                <span className=\"text-morandi-muted\">Excel 中：</span>\n                <code className=\"ml-2 text-morandi-gold\">\n                  {field.field_key ? `{${field.field_key}}` : '{變數名稱}'}\n                </code>\n                <span className=\"mx-2 text-morandi-muted\">→</span>\n                <span className=\"text-morandi-secondary\">\n                  {field.data_source !== 'manual'\n                    ? `自動從「${getSourceLabel(field.data_source)}」取得「${\n                        field.source_field || '?'\n                      }」`\n                    : '使用時手動輸入'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/repeatable-section-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/repeatable-section-manager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/template-card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileBarChart' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4727,4730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4727,4730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nimport { MoreVertical, FileText, FileSpreadsheet, FileBarChart, File } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useTemplateStore } from '@/stores/template-store';\n\nimport { cn } from '@/lib/utils';\n\nimport { Template } from '@/types/template';\n\nimport { UseTemplateDialog } from './use-template-dialog';\n\ninterface TemplateCardProps {\n  template: Template;\n  onEdit: (template: Template) => void;\n}\n\n// 模板類型標籤\nfunction TemplateTypeBadge({ type }: { type: Template['type'] }) {\n  const configs = {\n    quote: { label: '報價單', icon: FileText, color: 'text-morandi-gold bg-morandi-gold/10' },\n    itinerary: { label: '行程表', icon: FileSpreadsheet, color: 'text-morandi-green bg-morandi-green/10' },\n    invoice: { label: '發票', icon: FileText, color: 'text-morandi-blue bg-morandi-blue/10' },\n    receipt: { label: '收據', icon: FileText, color: 'text-morandi-purple bg-morandi-purple/10' },\n    other: { label: '其他', icon: File, color: 'text-morandi-secondary bg-morandi-secondary/10' },\n  };\n\n  const config = configs[type];\n  const Icon = config.icon;\n\n  return (\n    <div className={cn('inline-flex items-center gap-1.5 px-3 py-1 rounded-full text-xs font-medium', config.color)}>\n      <Icon size={14} />\n      {config.label}\n    </div>\n  );\n}\n\nexport function TemplateCard({ template, onEdit }: TemplateCardProps) {\n  const { deleteTemplate, duplicateTemplate } = useTemplateStore();\n  const [useDialogOpen, setUseDialogOpen] = useState(false);\n\n  const handleDelete = () => {\n    if (confirm(`確定要刪除模板「${template.name}」嗎？`)) {\n      deleteTemplate(template.id, 'current-user-id'); // TODO: 使用實際的用戶 ID\n    }\n  };\n\n  const handleDuplicate = async () => {\n    const newName = prompt('請輸入新模板名稱', `${template.name} (副本)`);\n    if (newName) {\n      await duplicateTemplate(template.id, newName);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit' });\n  };\n\n  return (\n    <>\n      <div className=\"bg-card rounded-xl p-6 border border-morandi-container/20 hover:border-morandi-gold/40 transition-all group\">\n        {/* 模板類型標籤 */}\n        <div className=\"flex items-start justify-between mb-4\">\n          <TemplateTypeBadge type={template.type} />\n\n          {/* 更多選單 */}\n          <DropdownMenu>\n            <DropdownMenuTrigger className=\"h-8 w-8 p-0 hover:bg-morandi-container rounded-md\">\n              <MoreVertical size={16} />\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => onEdit(template)}>編輯模板</DropdownMenuItem>\n              <DropdownMenuItem onClick={handleDuplicate}>複製模板</DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleDelete} className=\"text-morandi-red\">\n                刪除\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* 模板資訊 */}\n        <h3 className=\"text-lg font-bold text-morandi-primary mb-2 line-clamp-1\">{template.name}</h3>\n        <p className=\"text-sm text-morandi-secondary mb-4 line-clamp-2 min-h-[40px]\">\n          {template.description || '無說明'}\n        </p>\n\n        {/* 關聯欄位摘要 */}\n        <div className=\"bg-morandi-container/5 rounded-lg p-3 mb-4\">\n          <div className=\"text-xs text-morandi-muted mb-2\">需要的資料：</div>\n          <div className=\"flex flex-wrap gap-1\">\n            {template.field_mappings && template.field_mappings.length > 0 ? (\n              <>\n                {template.field_mappings.slice(0, 5).map((field) => (\n                  <span\n                    key={field.id}\n                    className=\"text-xs px-2 py-1 bg-morandi-gold/10 text-morandi-gold rounded\"\n                  >\n                    {field.display_name}\n                  </span>\n                ))}\n                {template.field_mappings.length > 5 && (\n                  <span className=\"text-xs text-morandi-muted px-2 py-1\">\n                    +{template.field_mappings.length - 5} 更多\n                  </span>\n                )}\n              </>\n            ) : (\n              <span className=\"text-xs text-morandi-muted\">尚未設定欄位</span>\n            )}\n          </div>\n        </div>\n\n        {/* 統計資訊 */}\n        <div className=\"flex items-center justify-between text-xs text-morandi-muted mb-4\">\n          <span>已使用 {template.usage_count || 0} 次</span>\n          <span>{formatDate((template.metadata as any).updated_at)}</span>\n        </div>\n\n        {/* 快速動作 */}\n        <div className=\"flex gap-2 pt-4 border-t border-morandi-container/10\">\n          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" onClick={() => onEdit(template)}>\n            編輯\n          </Button>\n          <Button\n            size=\"sm\"\n            className=\"flex-1 bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n            onClick={() => setUseDialogOpen(true)}\n          >\n            使用模板\n          </Button>\n        </div>\n      </div>\n\n      {/* 使用模板對話框 */}\n      <UseTemplateDialog\n        template={template}\n        open={useDialogOpen}\n        onOpenChange={setUseDialogOpen}\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/template-editor-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2965,2968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2965,2968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4791,4794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4791,4794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useTemplateStore } from '@/stores/template-store';\n\nimport { Template, TemplateType, TemplateField } from '@/types/template';\n\nimport { FieldMappingEditor } from './field-mapping-editor';\n\ninterface TemplateEditorDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  template: Template | null; // null = 新增模式\n}\n\n// 預設範本\nconst TEMPLATE_PRESETS = {\n  blank: {\n    name: '空白模板',\n    fields: [],\n    excel: Array.from({ length: 60 }, () => Array.from({ length: 12 }, () => ''))\n  },\n  confirmation: {\n    name: '行程確認單',\n    fields: [\n      { id: '1', field_key: 'customer_name', display_name: '客戶名稱', field_type: 'text', data_source: 'manual', is_required: true },\n      { id: '2', field_key: 'contact_person', display_name: '聯絡人', field_type: 'text', data_source: 'manual', is_required: true },\n      { id: '3', field_key: 'phone', display_name: '聯絡電話', field_type: 'text', data_source: 'manual', is_required: true },\n      { id: '4', field_key: 'departure_date', display_name: '出發日期', field_type: 'date', data_source: 'manual', is_required: true },\n      { id: '5', field_key: 'destination', display_name: '目的地', field_type: 'text', data_source: 'manual', is_required: true },\n    ],\n    excel: [\n      ['#標題'],\n      ['', '', '旅遊行程確認單'],\n      [''],\n      ['#客戶資訊'],\n      ['客戶名稱：', '{customer_name}', '', '聯絡人：', '{contact_person}'],\n      ['聯絡電話：', '{phone}', '', '出發日期：', '{departure_date}'],\n      ['目的地：', '{destination}'],\n      [''],\n      ['#表格'],\n      ['天數', '日期', '行程內容', '餐食', '住宿'],\n      ['第1天', '{day1_date}', '{day1_itinerary}', '{day1_meals}', '{day1_hotel}'],\n      ['第2天', '{day2_date}', '{day2_itinerary}', '{day2_meals}', '{day2_hotel}'],\n      ['第3天', '{day3_date}', '{day3_itinerary}', '{day3_meals}', '{day3_hotel}'],\n      [''],\n      ['#備註'],\n      ['1. 本確認單僅供參考，實際行程以出團通知為準'],\n      ['2. 如有任何問題，請隨時與我們聯繫'],\n      [''],\n      ...Array.from({ length: 40 }, () => Array.from({ length: 12 }, () => ''))\n    ]\n  }\n};\n\nexport function TemplateEditorDialog({ open, onOpenChange, template }: TemplateEditorDialogProps) {\n  const { addTemplate, updateTemplate } = useTemplateStore();\n  const isEdit = !!template;\n\n  const [selectedPreset, setSelectedPreset] = useState<'blank' | 'confirmation'>('blank');\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'quote' as TemplateType,\n    description: '',\n  });\n\n  const [fields, setFields] = useState<TemplateField[]>([]);\n  const [excelData, setExcelData] = useState<any>(null);\n\n  // 載入編輯的模板資料\n  useEffect(() => {\n    if (template) {\n      setFormData({\n        name: template.name,\n        type: template.type,\n        description: template.description || '',\n      });\n      setFields(template.field_mappings || []);\n      setExcelData(template.excel_structure);\n    } else {\n      // 重置表單\n      setFormData({ name: '', type: 'quote', description: '' });\n      setSelectedPreset('blank');\n      setFields([]);\n      setExcelData(null);\n    }\n  }, [template, open]);\n\n  // 當選擇範本時，載入範本資料\n  const handlePresetChange = (preset: 'blank' | 'confirmation') => {\n    setSelectedPreset(preset);\n    const presetData = TEMPLATE_PRESETS[preset];\n    setFields(presetData.fields as TemplateField[]);\n    setExcelData(presetData.excel);\n  };\n\n  const handleSubmit = async () => {\n    if (!formData.name.trim()) {\n      alert('請輸入模板名稱');\n      return;\n    }\n\n    try {\n      if (isEdit) {\n        // 更新模板\n        await updateTemplate(template.id, {\n          name: formData.name,\n          type: formData.type,\n          description: formData.description,\n          field_mappings: fields,\n          excel_structure: excelData,\n        });\n      } else {\n        // 新增模板\n        await addTemplate({\n          name: formData.name,\n          type: formData.type,\n          description: formData.description,\n          paper_settings: {\n            size: 'A4',\n            orientation: 'portrait',\n            margins: { top: 2.0, bottom: 2.0, left: 2.0, right: 2.0 },\n            show_grid: true,\n            show_ruler: true,\n          },\n          cells: {},\n          dynamic_blocks: [],\n          field_mappings: fields,\n          excel_structure: excelData || { data: [['']], settings: {} },\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        } as any);\n      }\n\n      onOpenChange(false);\n    } catch (error) {\n      console.error('儲存模板失敗:', error);\n      alert('儲存失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle>{isEdit ? '編輯模板' : '新增模板'}</DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"basic\" className=\"flex-1 flex flex-col overflow-hidden\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"basic\">基本資訊</TabsTrigger>\n            <TabsTrigger value=\"fields\">欄位設定</TabsTrigger>\n            <TabsTrigger value=\"design\">模板設計</TabsTrigger>\n          </TabsList>\n\n          <div className=\"flex-1 overflow-y-auto mt-4\">\n            {/* 基本資訊 */}\n            <TabsContent value=\"basic\" className=\"space-y-4 mt-0\">\n              {/* 範本選擇（僅新增模式） */}\n              {!isEdit && (\n                <div>\n                  <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                    選擇範本\n                  </label>\n                  <Select value={selectedPreset} onValueChange={handlePresetChange}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"blank\">📄 空白模板</SelectItem>\n                      <SelectItem value=\"confirmation\">✈️ 行程確認單</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-morandi-muted mt-1\">\n                    選擇範本後可以直接編輯，或從空白開始自行設計\n                  </p>\n                </div>\n              )}\n\n              <div>\n                <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                  模板名稱 <span className=\"text-morandi-red\">*</span>\n                </label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"例如：2025 清邁行程報價單\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                  模板類型 <span className=\"text-morandi-red\">*</span>\n                </label>\n                <Select\n                  value={formData.type}\n                  onValueChange={(value) => setFormData({ ...formData, type: value as TemplateType })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"quote\">報價單</SelectItem>\n                    <SelectItem value=\"itinerary\">行程表</SelectItem>\n                    <SelectItem value=\"invoice\">發票</SelectItem>\n                    <SelectItem value=\"receipt\">收據</SelectItem>\n                    <SelectItem value=\"other\">其他</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                  說明\n                </label>\n                <Textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"簡單描述這個模板的用途...\"\n                  rows={3}\n                />\n              </div>\n            </TabsContent>\n\n            {/* 欄位設定 */}\n            <TabsContent value=\"fields\" className=\"mt-0\">\n              <FieldMappingEditor fields={fields} onChange={setFields} />\n            </TabsContent>\n\n            {/* 模板設計 */}\n            <TabsContent value=\"design\" className=\"mt-0\">\n              <div className=\"bg-morandi-container/5 rounded-lg p-8 text-center\">\n                <div className=\"text-4xl mb-4\">📊</div>\n                <h3 className=\"text-lg font-bold text-morandi-primary mb-2\">Excel 編輯器</h3>\n                <p className=\"text-sm text-morandi-secondary mb-4\">\n                  即將整合 Handsontable 編輯器\n                </p>\n                <p className=\"text-xs text-morandi-muted\">\n                  目前可以先設定基本資訊和欄位，稍後再設計 Excel 樣式\n                </p>\n              </div>\n            </TabsContent>\n          </div>\n        </Tabs>\n\n        {/* 底部按鈕 */}\n        <div className=\"flex justify-end gap-3 pt-4 border-t border-morandi-container/20\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            取消\n          </Button>\n          <Button onClick={handleSubmit} className=\"bg-morandi-gold hover:bg-morandi-gold-hover\">\n            {isEdit ? '儲存變更' : '建立模板'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/template-excel-editor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Handsontable' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'field_mappings' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1534,1537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1534,1537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1544,1547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1544,1547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1554,1557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1554,1557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1565,1568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1565,1568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1577,1580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1577,1580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isRowInRepeatableSection'. Either include it or remove the dependency array.","line":128,"column":6,"nodeType":"ArrayExpression","endLine":128,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [repeatable_sections, highlightedSection, isRowInRepeatableSection]","fix":{"range":[4265,4306],"text":"[repeatable_sections, highlightedSection, isRowInRepeatableSection]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6094,6097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6094,6097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6103,6106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6103,6106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6113,6116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6113,6116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6123,6126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6123,6126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6134,6137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6134,6137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6146,6149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6146,6149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cellProperties' is defined but never used. Allowed unused args must match /^_/u.","line":181,"column":101,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":115},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6167,6170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6167,6170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newSize' is defined but never used. Allowed unused args must match /^_/u.","line":206,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'column' is defined but never used. Allowed unused args must match /^_/u.","line":206,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newSize' is defined but never used. Allowed unused args must match /^_/u.","line":221,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'row' is defined but never used. Allowed unused args must match /^_/u.","line":221,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRef, useEffect } from 'react';\n\nimport { HotTable } from '@handsontable/react';\nimport { registerLanguageDictionary, zhTW } from 'handsontable/i18n';\nimport { registerAllModules } from 'handsontable/registry';\nimport Handsontable from 'handsontable';\n\nimport 'handsontable/dist/handsontable.full.css';\nimport { TemplateField, RepeatableSection } from '@/types/template';\n\n// 註冊所有模組和中文語言包\nregisterAllModules();\nregisterLanguageDictionary(zhTW);\n\ninterface TemplateExcelEditorProps {\n  data: any;\n  onChange: (data: any) => void;\n  onColumnWidthChange?: (widths: number[]) => void;\n  field_mappings?: TemplateField[];\n  repeatable_sections?: RepeatableSection[];\n  highlightedSection?: RepeatableSection | null;\n}\n\nexport function TemplateExcelEditor({\n  data,\n  onChange,\n  onColumnWidthChange,\n  field_mappings,\n  repeatable_sections = [],\n  highlightedSection\n}: TemplateExcelEditorProps) {\n  const hotRef = useRef<any>(null);\n\n  // 初始化空白資料（60 列 × 20 欄，給予足夠的欄位讓使用者調整）\n  const initialData = (data && Array.isArray(data) && data.length > 0)\n    ? data\n    : Array.from({ length: 60 }, () => Array.from({ length: 20 }, () => ''));\n\n  // 檢查某一列是否在可重複區塊內\n  const isRowInRepeatableSection = (row: number) => {\n    return repeatable_sections.find(\n      section => row >= section.range.start_row && row <= section.range.end_row\n    );\n  };\n\n  // 儲存格樣式自定義 + A4 邊框繪製\n  useEffect(() => {\n    const hot = hotRef.current?.hotInstance;\n    if (!hot) return;\n\n    // 添加樣式，讓變數欄位有特殊顏色\n    hot.addHook('afterRenderer', (TD: any, row: any, col: any, prop: any, value: any) => {\n      // 變數高亮\n      if (typeof value === 'string' && value.match(/\\{.+?\\}/)) {\n        TD.style.background = '#fff3cd';\n        TD.style.color = '#856404';\n        TD.style.fontWeight = 'bold';\n      }\n\n      // 可重複區塊樣式\n      const section = isRowInRepeatableSection(row);\n      if (section) {\n        // 如果是高亮的區塊，使用更明顯的顏色\n        if (highlightedSection && section.id === highlightedSection.id) {\n          TD.style.backgroundColor = '#fef3c7'; // 金色背景\n          TD.style.borderLeft = col === 0 ? '3px solid #f59e0b' : TD.style.borderLeft;\n          TD.style.borderRight = '1px solid #f59e0b';\n          TD.style.borderTop = row === section.range.start_row ? '3px solid #f59e0b' : '1px solid #f59e0b';\n          TD.style.borderBottom = row === section.range.end_row ? '3px solid #f59e0b' : '1px solid #f59e0b';\n        } else {\n          // 普通可重複區塊樣式\n          TD.style.backgroundColor = '#fefce8'; // 淡黃色背景\n          TD.style.borderLeft = col === 0 ? '2px solid #eab308' : TD.style.borderLeft;\n          TD.style.borderTop = row === section.range.start_row ? '2px solid #eab308' : TD.style.borderTop;\n          TD.style.borderBottom = row === section.range.end_row ? '2px solid #eab308' : TD.style.borderBottom;\n        }\n      }\n    });\n\n    // 繪製 A4 列印範圍背景（白色背景 + 紅色邊框）\n    const drawA4Background = () => {\n      const container = hot.rootElement;\n      if (!container) return;\n\n      // 移除舊的背景\n      const oldBg = container.querySelector('.a4-print-area');\n      if (oldBg) oldBg.remove();\n\n      // 找到第一個儲存格 (A1) 的位置\n      const firstCell = hot.getCell(0, 0);\n      if (!firstCell) return;\n\n      const rect = firstCell.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n\n      // 計算相對於容器的偏移\n      const offsetTop = rect.top - containerRect.top;\n      const offsetLeft = rect.left - containerRect.left;\n\n      // 創建 A4 背景區域\n      const bg = document.createElement('div');\n      bg.className = 'a4-print-area';\n      bg.style.position = 'absolute';\n      bg.style.top = `${offsetTop}px`;\n      bg.style.left = `${offsetLeft}px`;\n      bg.style.width = '21cm';\n      bg.style.height = '29.7cm';\n      bg.style.backgroundColor = 'white';\n      bg.style.border = '3px solid #ef4444';\n      bg.style.pointerEvents = 'none';\n      bg.style.zIndex = '-1'; // 放在表格後面\n      bg.style.boxSizing = 'border-box';\n\n      container.style.position = 'relative';\n      container.appendChild(bg);\n    };\n\n    // 初始繪製和窗口大小改變時重新繪製\n    drawA4Background();\n    hot.addHook('afterRender', drawA4Background);\n    window.addEventListener('resize', drawA4Background);\n\n    return () => {\n      window.removeEventListener('resize', drawA4Background);\n    };\n  }, [repeatable_sections, highlightedSection]);\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      {/* 主標題卡片 */}\n      <div className=\"mb-4\">\n        <div className=\"bg-card rounded-lg border border-morandi-container/20 px-6 py-4\">\n          <div>\n            <h2 className=\"text-base font-bold text-morandi-primary\">Excel 編輯器</h2>\n            <p className=\"text-xs text-morandi-secondary mt-1\">60 列 × 12 欄 · 可調整欄寬與列高</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Handsontable 編輯器 - 全頁模式（灰色區域 = 工作區，紅框 = A4 列印範圍） */}\n      <div className=\"flex-1 overflow-auto bg-gray-800 rounded-lg border border-morandi-container/20 p-8\">\n        <div className=\"flex items-start justify-center\">\n          <div className=\"inline-block\">\n            <HotTable\n            ref={hotRef}\n            data={initialData}\n            colHeaders={true}\n            rowHeaders={true}\n            width=\"auto\"\n            height=\"29.7cm\"\n            minRows={60}\n            minCols={20}\n            licenseKey=\"non-commercial-and-evaluation\"\n            language=\"zh-TW\"\n            stretchH=\"none\"\n\n          // 功能設定\n          contextMenu={true}           // 右鍵選單\n          manualRowMove={true}         // 拖動調整列順序\n          manualColumnMove={true}      // 拖動調整欄順序\n          manualRowResize={true}       // 調整列高\n          manualColumnResize={true}    // 調整欄寬\n\n          // 編輯功能\n          copyPaste={true}             // 複製貼上\n          undo={true}                  // 復原/重做\n          search={true}                // 搜尋\n\n          // 合併儲存格\n          mergeCells={true}\n\n          // 儲存格樣式\n          cell={[\n            // 第一列作為標題列，加粗置中\n            ...Array(12).fill(null).map((_, col) => ({\n              row: 0,\n              col,\n              className: 'htCenter htMiddle',\n              renderer: function(instance: any, td: any, row: any, col: any, prop: any, value: any, cellProperties: any) {\n                td.style.fontWeight = 'bold';\n                td.style.textAlign = 'center';\n                td.style.backgroundColor = '#f8f9fa';\n                td.innerHTML = value || '';\n                return td;\n              }\n            }))\n          ]}\n\n          // 欄位設定（預設寬度）\n          colWidths={[80, 100, 150, 120, 100, 100, 100, 100, 100, 100, 100, 100]}\n\n          // 變更處理\n          afterChange={(changes) => {\n            if (changes) {\n              const hot = hotRef.current?.hotInstance;\n              if (hot) {\n                const currentData = hot.getData();\n                onChange(currentData);\n              }\n            }\n          }}\n\n          // 欄寬調整處理\n          afterColumnResize={(newSize, column) => {\n            const hot = hotRef.current?.hotInstance;\n            if (hot && onColumnWidthChange) {\n              // 獲取所有欄位的寬度\n              const widths: number[] = [];\n              for (let i = 0; i < 12; i++) {\n                const width = hot.getColWidth(i);\n                widths.push(width || 100);\n              }\n              onColumnWidthChange(widths);\n              hot.render();\n            }\n          }}\n\n          // 列高調整處理\n          afterRowResize={(newSize, row) => {\n            const hot = hotRef.current?.hotInstance;\n            if (hot) {\n              hot.render();\n            }\n          }}\n\n          // 格式化設定\n          className=\"template-excel-editor\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* 自定義樣式 */}\n      <style jsx global>{`\n        .template-excel-editor .handsontable td {\n          border-color: #e0e0e0;\n        }\n\n        .template-excel-editor .handsontable th {\n          background-color: #f8f9fa;\n          color: #495057;\n          font-weight: 500;\n        }\n\n        .template-excel-editor .htCore {\n          font-family: 'Arial', 'Microsoft JhengHei', sans-serif;\n        }\n      `}</style>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/template-pdf-preview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[129,132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[129,132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fieldMappings' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'repeatableSections' is assigned a value but never used. Allowed unused args must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'highlightedSection' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1354,1357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1354,1357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2031,2034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2031,2034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2798,2801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2798,2801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4925,4928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4925,4928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4983,4986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4983,4986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5450,5453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5450,5453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { TemplateField, RepeatableSection } from '@/types/template';\n\ninterface TemplatePDFPreviewProps {\n  data: any;\n  columnWidths?: number[];\n  fieldMappings?: TemplateField[];\n  repeatableSections?: RepeatableSection[];\n  highlightedSection?: RepeatableSection | null;\n}\n\nexport function TemplatePDFPreview({\n  data,\n  columnWidths = [80, 100, 150, 120, 100, 100, 100, 100, 100, 100, 100, 100],\n  fieldMappings,\n  repeatableSections = [],\n  highlightedSection\n}: TemplatePDFPreviewProps) {\n  // 如果沒有資料，顯示空白 A4\n  if (!data || !Array.isArray(data) || data.length === 0) {\n    return (\n      <div className=\"h-full flex flex-col bg-background\">\n        <div className=\"mb-4\">\n          <div className=\"bg-card rounded-lg border border-morandi-container/20 px-6 py-4\">\n            <div>\n              <h2 className=\"text-base font-bold text-morandi-primary\">即時預覽</h2>\n              <p className=\"text-xs text-morandi-secondary mt-1\">A4 尺寸 (21cm × 29.7cm) · 3mm 出血</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center text-morandi-secondary\">\n            <div className=\"text-4xl mb-4\">📄</div>\n            <p>開始在左側編輯，這裡會即時預覽</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // 偵測區塊類型標記\n  const detectBlockType = (row: any[]) => {\n    const firstCell = String(row[0] || '').trim();\n\n    if (firstCell.startsWith('#標題')) return 'title';\n    if (firstCell.startsWith('#客戶資訊') || firstCell.startsWith('#客戶')) return 'customer-info';\n    if (firstCell.startsWith('#表格') || firstCell.startsWith('#價格表')) return 'table';\n    if (firstCell.startsWith('#備註') || firstCell.startsWith('#說明')) return 'notes';\n    if (firstCell.startsWith('#總計') || firstCell.startsWith('#合計')) return 'total';\n    if (firstCell.startsWith('#行程')) return 'itinerary';\n    if (firstCell.startsWith('#Logo') || firstCell.startsWith('#logo')) return 'logo';\n\n    return null;\n  };\n\n  // 智能判斷儲存格類型\n  const getCellStyle = (cell: any, rowIndex: number, colIndex: number, blockType: string | null) => {\n    const cellStr = String(cell || '');\n\n    // 標籤判斷（冒號前的內容）\n    const isLabel = cellStr.includes('：') || cellStr.includes(':');\n\n    // 價格判斷\n    const isPrice = cellStr.includes('$') || cellStr.includes('NT') ||\n      /^\\d+,?\\d*$/.test(cellStr.trim());\n\n    // 動態變數\n    const isDynamic = typeof cell === 'string' && cell.match(/\\{.+?\\}/);\n\n    // 是否為表頭（表格區塊的第一列）\n    const isTableHeader = blockType === 'table';\n\n    return { isLabel, isPrice, isDynamic, isTableHeader };\n  };\n\n  // 將 Excel 資料轉換成美化的莫蘭迪風格預覽\n  const renderContent = () => {\n    let currentBlockType: string | null = null;\n    let isFirstRowOfBlock = false;\n\n    return (\n      <div className=\"space-y-4\">\n        {data.map((row: any[], rowIndex: number) => {\n          // 檢查這一列是否全部為空\n          const isEmpty = row.every(cell => !cell || cell === '');\n          if (isEmpty) return null;\n\n          // 檢測是否為新區塊標記\n          const detectedBlockType = detectBlockType(row);\n          if (detectedBlockType) {\n            currentBlockType = detectedBlockType;\n            isFirstRowOfBlock = true;\n            return null; // 不顯示標記列，只記錄區塊類型\n          }\n\n          // 區塊樣式配置\n          const blockStyles = {\n            title: {\n              container: 'bg-gradient-to-r from-morandi-primary to-morandi-primary/80 text-white py-6 px-8 rounded-lg shadow-md mb-6',\n              text: 'text-center text-2xl font-bold tracking-wide',\n            },\n            'customer-info': {\n              container: 'bg-morandi-container/20 rounded-lg p-6 border-l-4 border-morandi-gold',\n              text: 'text-sm',\n            },\n            table: {\n              container: isFirstRowOfBlock\n                ? 'bg-morandi-primary/90 text-white font-semibold rounded-t-lg'\n                : 'bg-white border-b border-morandi-container/20 hover:bg-morandi-container/10 transition-colors',\n              text: 'text-sm',\n            },\n            notes: {\n              container: 'bg-morandi-container/10 rounded-lg p-4 border border-morandi-container/30',\n              text: 'text-xs text-morandi-secondary leading-relaxed',\n            },\n            total: {\n              container: 'bg-morandi-gold/20 rounded-lg p-4 border-2 border-morandi-gold',\n              text: 'text-base font-bold text-morandi-gold',\n            },\n            logo: {\n              container: 'flex items-center justify-center py-8 border-2 border-dashed border-morandi-container/30 rounded-lg bg-morandi-container/5',\n              text: 'text-morandi-muted',\n            },\n          };\n\n          const currentStyle = currentBlockType && blockStyles[currentBlockType as keyof typeof blockStyles];\n\n          const content = (\n            <div key={rowIndex} className=\"relative\">\n              {/* 內容列 - 根據區塊類型美化 */}\n              <div className={`flex items-center ${(currentStyle as any)?.container || ''}`}>\n                {row.map((cell: any, colIndex: number) => {\n                  // 跳過空白儲存格（不渲染）\n                  if (!cell || cell === '') return null;\n\n                  const { isLabel, isPrice, isDynamic } = getCellStyle(cell, rowIndex, colIndex, currentBlockType);\n                  const width = columnWidths[colIndex] || 100;\n\n                  return (\n                    <div\n                      key={colIndex}\n                      className={`px-3 py-2 transition-all ${(currentStyle as any)?.text || ''}\n                        ${isLabel ? 'text-morandi-secondary font-medium' : ''}\n                        ${isPrice ? 'text-morandi-gold font-semibold' : ''}\n                        ${isDynamic ? 'bg-morandi-gold/10 text-morandi-gold font-medium rounded-md px-3 border border-morandi-gold/30' : ''}\n                        ${currentBlockType === 'title' ? 'w-full' : ''}\n                      `}\n                      style={{\n                        width: currentBlockType === 'title' ? '100%' : `${width}px`,\n                        minWidth: currentBlockType === 'title' ? '100%' : `${width}px`,\n                        maxWidth: currentBlockType === 'title' ? '100%' : `${width}px`,\n                        lineHeight: '1.8',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: currentBlockType === 'notes' ? 'normal' : 'nowrap',\n                      }}\n                    >\n                      {cell}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          );\n\n          isFirstRowOfBlock = false;\n          return content;\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      {/* 主標題卡片 */}\n      <div className=\"mb-4\">\n        <div className=\"bg-card rounded-lg border border-morandi-container/20 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-base font-bold text-morandi-primary\">即時預覽</h2>\n              <p className=\"text-xs text-morandi-secondary mt-1\">A4 尺寸 (21cm × 29.7cm) · 3mm 出血</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 預覽內容區 */}\n      <div className=\"flex-1 overflow-auto bg-gray-800 rounded-lg border border-morandi-container/20 p-8\">\n        <div className=\"flex items-start justify-center\">\n          {/* 出血區域（外框） */}\n          <div\n            className=\"relative bg-gray-100 shadow-2xl\"\n            style={{\n              width: 'calc(21cm + 6mm)',  // A4 + 左右各 3mm\n              minHeight: 'calc(29.7cm + 6mm)',  // A4 + 上下各 3mm\n              padding: '3mm'\n            }}\n          >\n        {/* 出血提示線 */}\n        <div className=\"absolute inset-[3mm] border-2 border-dashed border-red-400 pointer-events-none z-10\">\n          <div className=\"absolute -top-5 left-0 text-xs text-red-500 font-medium\">安全線</div>\n        </div>\n        <div className=\"absolute top-0 left-0 right-0 bottom-0 border-2 border-dashed border-blue-400 pointer-events-none z-10\">\n          <div className=\"absolute -top-5 right-0 text-xs text-blue-500 font-medium\">出血線</div>\n        </div>\n\n        {/* A4 實際內容區 */}\n        <div\n          className=\"bg-white relative\"\n          style={{\n            width: '21cm',\n            minHeight: '29.7cm',\n            padding: '0',\n            fontSize: '12px',\n            lineHeight: '1.5'\n          }}\n        >\n          {renderContent()}\n        </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/templates/use-template-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemberStore' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1212,1215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1212,1215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1702,1705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1702,1705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\n\nimport { ChevronLeft, ChevronRight, Download } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useTourStore, useOrderStore, useMemberStore } from '@/stores';\n// TODO: usePaymentStore deprecated\nimport { useTemplateStore } from '@/stores/template-store';\nimport type { Tour, Order } from '@/stores/types';\n\nimport { Template } from '@/types/template';\n\n\ninterface UseTemplateDialogProps {\n  template: Template;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ntype Step = 'select-data' | 'fill-manual' | 'preview';\n\nexport function UseTemplateDialog({ template, open, onOpenChange }: UseTemplateDialogProps) {\n  const { items: tours } = useTourStore();\n  const { items: orders } = useOrderStore();\n  const { addDocument } = useTemplateStore();\n\n  const [step, setStep] = useState<Step>('select-data');\n  const [selectedData, setSelectedData] = useState<Record<string, any>>({});\n  const [manualData, setManualData] = useState<Record<string, any>>({});\n\n  // 需要從資料來源選擇的欄位\n  const autoFields = useMemo(\n    () => template.field_mappings?.filter((f) => f.data_source !== 'manual') || [],\n    [template]\n  );\n\n  // 需要手動輸入的欄位\n  const manualFields = useMemo(\n    () => template.field_mappings?.filter((f) => f.data_source === 'manual') || [],\n    [template]\n  );\n\n  // 選擇資料來源項目時，自動填充相關欄位\n  const handleSelectSource = (source: string, sourceId: string, sourceData: any) => {\n    const newData = { ...selectedData };\n\n    // 找出使用這個資料來源的所有欄位\n    const fieldsFromSource = autoFields.filter((f) => f.data_source === source);\n\n    fieldsFromSource.forEach((field) => {\n      if (field.source_field) {\n        newData[field.field_key] = sourceData[field.source_field];\n      }\n    });\n\n    setSelectedData(newData);\n  };\n\n  const handleGeneratePDF = async () => {\n    try {\n      // 合併所有資料\n      const allData = { ...selectedData, ...manualData };\n\n      // 儲存生成記錄\n      await addDocument({\n        template_id: template.id,\n        template_name: template.name,\n        data_used: allData,\n        file_type: 'pdf',\n        created_by: 'current-user-id', // TODO: 使用實際的用戶 ID\n      });\n\n      // TODO: 實際的 PDF 生成邏輯\n      alert('PDF 生成功能即將整合');\n\n      onOpenChange(false);\n    } catch (error) {\n      console.error('生成文件失敗:', error);\n      alert('生成失敗，請稍後再試');\n    }\n  };\n\n  const canGoNext = () => {\n    if (step === 'select-data') {\n      // 檢查所有必填的自動欄位是否都已填寫\n      return autoFields.every((field) => {\n        if (!field.is_required) return true;\n        return selectedData[field.field_key] !== undefined;\n      });\n    }\n    if (step === 'fill-manual') {\n      // 檢查所有必填的手動欄位是否都已填寫\n      return manualFields.every((field) => {\n        if (!field.is_required) return true;\n        return manualData[field.field_key]?.toString().trim();\n      });\n    }\n    return true;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle>使用模板：{template.name}</DialogTitle>\n        </DialogHeader>\n\n        {/* 步驟指示器 */}\n        <div className=\"flex items-center justify-center gap-2 py-4\">\n          <div className={`px-4 py-2 rounded-full text-sm ${step === 'select-data' ? 'bg-morandi-gold text-white' : 'bg-morandi-container/20 text-morandi-muted'}`}>\n            1. 選擇資料\n          </div>\n          <ChevronRight size={16} className=\"text-morandi-muted\" />\n          <div className={`px-4 py-2 rounded-full text-sm ${step === 'fill-manual' ? 'bg-morandi-gold text-white' : 'bg-morandi-container/20 text-morandi-muted'}`}>\n            2. 填寫資料\n          </div>\n          <ChevronRight size={16} className=\"text-morandi-muted\" />\n          <div className={`px-4 py-2 rounded-full text-sm ${step === 'preview' ? 'bg-morandi-gold text-white' : 'bg-morandi-container/20 text-morandi-muted'}`}>\n            3. 預覽下載\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          {/* 步驟 1: 選擇資料來源 */}\n          {step === 'select-data' && (\n            <div className=\"space-y-4\">\n              {autoFields.length === 0 ? (\n                <div className=\"bg-morandi-container/5 rounded-lg p-8 text-center\">\n                  <p className=\"text-sm text-morandi-secondary\">\n                    此模板不需要選擇資料來源\n                  </p>\n                </div>\n              ) : (\n                <>\n                  <p className=\"text-sm text-morandi-secondary\">\n                    這個模板需要以下資料，請選擇：\n                  </p>\n\n                  {/* 旅遊團選擇 */}\n                  {autoFields.some((f) => f.data_source === 'tour') && (\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                        選擇旅遊團\n                        {autoFields.some((f) => f.data_source === 'tour' && f.is_required) && (\n                          <span className=\"text-morandi-red ml-1\">*</span>\n                        )}\n                      </label>\n                      <Select\n                        onValueChange={(tour_id) => {\n                          const tour = tours.find((t: Tour) => t.id === tour_id);\n                          if (tour) handleSelectSource('tour', tour_id, tour);\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"請選擇旅遊團\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {tours.map((tour: Tour) => (\n                            <SelectItem key={tour.id} value={tour.id}>\n                              {tour.code} - {tour.name} ({tour.departure_date})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {/* 訂單選擇 */}\n                  {autoFields.some((f) => f.data_source === 'order') && (\n                    <div>\n                      <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                        選擇訂單\n                        {autoFields.some((f) => f.data_source === 'order' && f.is_required) && (\n                          <span className=\"text-morandi-red ml-1\">*</span>\n                        )}\n                      </label>\n                      <Select\n                        onValueChange={(order_id) => {\n                          const order = orders.find((o: Order) => o.id === order_id);\n                          if (order) handleSelectSource('order', order_id, order);\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"請選擇訂單\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {orders.map((order: Order) => (\n                            <SelectItem key={order.id} value={order.id}>\n                              {order.order_number} - {order.contact_person}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n\n          {/* 步驟 2: 填寫手動資料 */}\n          {step === 'fill-manual' && (\n            <div className=\"space-y-4\">\n              {manualFields.length === 0 ? (\n                <div className=\"bg-morandi-container/5 rounded-lg p-8 text-center\">\n                  <p className=\"text-sm text-morandi-secondary\">\n                    此模板不需要手動輸入資料\n                  </p>\n                </div>\n              ) : (\n                <>\n                  <p className=\"text-sm text-morandi-secondary\">\n                    請填寫以下資料：\n                  </p>\n\n                  {manualFields.map((field) => (\n                    <div key={field.id}>\n                      <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                        {field.display_name}\n                        {field.is_required && <span className=\"text-morandi-red ml-1\">*</span>}\n                      </label>\n                      <Input\n                        type={field.field_type === 'number' ? 'number' : field.field_type === 'date' ? 'date' : 'text'}\n                        value={manualData[field.field_key] || field.default_value || ''}\n                        onChange={(e) =>\n                          setManualData((prev) => ({\n                            ...prev,\n                            [field.field_key]: e.target.value,\n                          }))\n                        }\n                        placeholder={field.default_value}\n                      />\n                      {field.description && (\n                        <p className=\"text-xs text-morandi-muted mt-1\">{field.description}</p>\n                      )}\n                    </div>\n                  ))}\n                </>\n              )}\n            </div>\n          )}\n\n          {/* 步驟 3: 預覽 */}\n          {step === 'preview' && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-morandi-container/5 rounded-lg p-8\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"text-4xl mb-4\">📄</div>\n                  <h3 className=\"text-lg font-bold text-morandi-primary mb-2\">文件預覽</h3>\n                  <p className=\"text-sm text-morandi-secondary\">\n                    即將整合 PDF 預覽功能\n                  </p>\n                </div>\n\n                {/* 顯示將要使用的資料 */}\n                <div className=\"bg-card rounded-lg p-4 border border-morandi-container/20\">\n                  <h4 className=\"text-sm font-bold text-morandi-primary mb-3\">使用的資料：</h4>\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    {Object.entries({ ...selectedData, ...manualData }).map(([key, value]) => {\n                      const field = template.field_mappings?.find((f) => f.field_key === key);\n                      return (\n                        <div key={key} className=\"flex items-start gap-2\">\n                          <span className=\"text-morandi-muted min-w-[120px]\">\n                            {field?.display_name || key}:\n                          </span>\n                          <span className=\"text-morandi-primary font-medium\">{String(value)}</span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 底部按鈕 */}\n        <div className=\"flex justify-between pt-4 border-t border-morandi-container/20\">\n          <div>\n            {step !== 'select-data' && (\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  if (step === 'fill-manual') setStep('select-data');\n                  if (step === 'preview') setStep('fill-manual');\n                }}\n              >\n                <ChevronLeft size={16} className=\"mr-2\" />\n                上一步\n              </Button>\n            )}\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              取消\n            </Button>\n\n            {step !== 'preview' ? (\n              <Button\n                onClick={() => {\n                  if (step === 'select-data') setStep('fill-manual');\n                  if (step === 'fill-manual') setStep('preview');\n                }}\n                disabled={!canGoNext()}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n              >\n                下一步\n                <ChevronRight size={16} className=\"ml-2\" />\n              </Button>\n            ) : (\n              <Button\n                onClick={handleGeneratePDF}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n              >\n                <Download size={16} className=\"mr-2\" />\n                下載 PDF\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/todos/quick-actions/quick-disbursement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12374,12377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12374,12377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\n\nimport { FileText, Search, Plus, Trash2 } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useSupplierStore, useTourStore, useOrderStore } from '@/stores';\nimport type { Tour, Order } from '@/stores/types';\n\nimport { cn } from '@/lib/utils';\nimport { generateUUID } from '@/lib/utils/uuid';\n\ninterface QuickDisbursementProps {\n  onSubmit?: (data: DisbursementData) => void;\n}\n\ninterface DisbursementItem {\n  id: string;\n  category: '住宿' | '交通' | '餐食' | '門票' | '導遊' | '其他';\n  supplier_id: string;\n  supplierName: string;\n  description: string;\n  unit_price: number;\n  quantity: number;\n}\n\ninterface DisbursementData {\n  tour_id: string;\n  order_id?: string;\n  request_date: string;\n  items: DisbursementItem[];\n  total_amount: number;\n  note?: string;\n  isSpecialBilling?: boolean;\n}\n\nconst categoryOptions = [\n  { value: '住宿', label: '🏨 住宿' },\n  { value: '交通', label: '🚌 交通' },\n  { value: '餐食', label: '🍽️ 餐食' },\n  { value: '門票', label: '🎫 門票' },\n  { value: '導遊', label: '👥 導遊' },\n  { value: '其他', label: '📦 其他' }\n];\n\nexport function QuickDisbursement({ onSubmit }: QuickDisbursementProps) {\n  const { items: tours } = useTourStore();\n  const { items: orders } = useOrderStore();\n  const { items: suppliers } = useSupplierStore();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTourId, setSelectedTourId] = useState('');\n  const [selectedOrderId, setSelectedOrderId] = useState<string | undefined>(undefined);\n  const [isSpecialBilling, setIsSpecialBilling] = useState(false);\n  const [requestDate, setRequestDate] = useState('');\n  const [note, setNote] = useState('');\n\n  // 請款項目列表\n  const [items, setItems] = useState<DisbursementItem[]>([]);\n\n  // 新增項目表單\n  const [newItem, setNewItem] = useState<{\n    category: '住宿' | '交通' | '餐食' | '門票' | '導遊' | '其他';\n    supplier_id: string;\n    description: string;\n    unit_price: number;\n    quantity: number;\n  }>({\n    category: '住宿',\n    supplier_id: '',\n    description: '',\n    unit_price: 0,\n    quantity: 1\n  });\n\n  // 模糊搜尋團體\n  const filteredTours = useMemo(() => {\n    if (!searchTerm.trim()) return tours;\n\n    const term = searchTerm.toLowerCase();\n    return tours.filter((tour: Tour) => {\n      const code = tour.code?.toLowerCase() || '';\n      const name = tour.name?.toLowerCase() || '';\n      const location = tour.location?.toLowerCase() || '';\n\n      return code.includes(term) ||\n             name.includes(term) ||\n             location.includes(term);\n    });\n  }, [tours, searchTerm]);\n\n  // 該團體的訂單列表\n  const tourOrders = useMemo(() => {\n    if (!selectedTourId) return [];\n\n    return orders\n      .filter((order: Order) => order.tour_id === selectedTourId)\n      .map((order: Order) => ({\n        id: order.id,\n        label: `${order.order_number || 'N/A'} - ${order.contact_person} - ${order.sales_person || '未指派'}`\n      }));\n  }, [selectedTourId, orders]);\n\n  const selectedTour = tours.find((t: Tour) => t.id === selectedTourId);\n\n  // 生成接下來8週的週四日期\n  const upcomingThursdays = useMemo(() => {\n    const thursdays = [];\n    const today = new Date();\n    const currentDay = today.getDay();\n\n    let daysUntilThursday = (4 - currentDay + 7) % 7;\n    if (daysUntilThursday === 0 && today.getHours() >= 12) {\n      daysUntilThursday = 7;\n    }\n\n    for (let i = 0; i < 8; i++) {\n      const thursdayDate = new Date(today);\n      thursdayDate.setDate(today.getDate() + daysUntilThursday + (i * 7));\n\n      thursdays.push({\n        value: thursdayDate.toISOString().split('T')[0],\n        label: `${thursdayDate.toLocaleDateString('zh-TW')} (${thursdayDate.toLocaleDateString('zh-TW', { weekday: 'short' })})`\n      });\n    }\n\n    return thursdays;\n  }, []);\n\n  // 新增項目到列表\n  const addItemToList = () => {\n    if (!newItem.supplier_id || !newItem.description) {\n      alert('請選擇供應商並填寫項目描述');\n      return;\n    }\n\n    const selectedSupplier = suppliers.find(s => s.id === newItem.supplier_id);\n    if (!selectedSupplier) return;\n\n    const itemId = generateUUID();\n    setItems(prev => [...prev, {\n      id: itemId,\n      ...newItem,\n      supplierName: selectedSupplier.name\n    }]);\n\n    // 重置表單\n    setNewItem({\n      category: '住宿',\n      supplier_id: '',\n      description: '',\n      unit_price: 0,\n      quantity: 1\n    });\n  };\n\n  // 移除項目\n  const removeItem = (itemId: string) => {\n    setItems(prev => prev.filter(item => item.id !== itemId));\n  };\n\n  // 計算總金額\n  const total_amount = useMemo(() =>\n    items.reduce((sum, item) => sum + (item.unit_price * item.quantity), 0)\n  , [items]);\n\n  const handleSubmit = () => {\n    if (!selectedTourId || items.length === 0 || !requestDate) {\n      alert('請填寫必填欄位（團體、請款日期、至少一項請款項目）');\n      return;\n    }\n\n    if (onSubmit) {\n      onSubmit({\n        tour_id: selectedTourId,\n        order_id: selectedOrderId,\n        request_date: requestDate,\n        items,\n        total_amount,\n        note,\n        isSpecialBilling\n      });\n    }\n\n    // 重置表單\n    setSearchTerm('');\n    setSelectedTourId('');\n    setSelectedOrderId(undefined);\n    setRequestDate('');\n    setNote('');\n    setIsSpecialBilling(false);\n    setItems([]);\n  };\n\n  return (\n    <div className=\"space-y-4 max-h-[80vh] overflow-y-auto pr-2\">\n      <div className=\"space-y-4\">\n        {/* 團體搜尋選擇器 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            選擇團體 <span className=\"text-morandi-red\">*</span>\n          </label>\n\n          <div className=\"relative mb-2\">\n            <Search size={16} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" />\n            <Input\n              placeholder=\"搜尋團號、團名或地點（如：0801、東京、TYO）\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 border-morandi-container/30\"\n            />\n          </div>\n\n          {searchTerm && (\n            <div className=\"border border-morandi-container/30 rounded-lg max-h-48 overflow-y-auto mb-2\">\n              {filteredTours.length > 0 ? (\n                filteredTours.map((tour) => (\n                  <button\n                    key={tour.id}\n                    onClick={() => {\n                      setSelectedTourId(tour.id);\n                      setSearchTerm('');\n                      setSelectedOrderId(undefined);\n                    }}\n                    className={cn(\n                      'w-full text-left px-4 py-3 hover:bg-morandi-container/10 transition-colors border-b border-morandi-container/20 last:border-0',\n                      selectedTourId === tour.id && 'bg-morandi-gold/10'\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-sm font-medium text-morandi-primary\">\n                          {tour.code || 'N/A'} - {tour.name}\n                        </div>\n                        <div className=\"text-xs text-morandi-secondary mt-1\">\n                          {tour.location} • {tour.departure_date}\n                        </div>\n                      </div>\n                      {selectedTourId === tour.id && (\n                        <div className=\"text-morandi-gold text-xs font-medium\">已選</div>\n                      )}\n                    </div>\n                  </button>\n                ))\n              ) : (\n                <div className=\"px-4 py-6 text-center text-sm text-morandi-secondary\">\n                  找不到相關團體\n                </div>\n              )}\n            </div>\n          )}\n\n          {selectedTour && !searchTerm && (\n            <div className=\"bg-morandi-gold/10 border border-morandi-gold/30 rounded-lg p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-sm font-medium text-morandi-primary\">\n                    {selectedTour.code || 'N/A'} - {selectedTour.name}\n                  </div>\n                  <div className=\"text-xs text-morandi-secondary mt-1\">\n                    {selectedTour.location} • {selectedTour.departure_date}\n                  </div>\n                </div>\n                <button\n                  onClick={() => {\n                    setSelectedTourId('');\n                    setSelectedOrderId(undefined);\n                  }}\n                  className=\"text-xs text-morandi-red hover:underline\"\n                >\n                  清除\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 訂單選擇（選填） */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            選擇訂單（選填，團體層級支出可不選）\n          </label>\n          <Select\n            value={selectedOrderId}\n            onValueChange={(value) => setSelectedOrderId(value === 'none' ? undefined : value)}\n            disabled={!selectedTourId}\n          >\n            <SelectTrigger className=\"border-morandi-container/30\">\n              <SelectValue placeholder={selectedTourId ? '選擇訂單或留空' : '請先選擇團體'} />\n            </SelectTrigger>\n            <SelectContent>\n              {tourOrders.length > 0 ? (\n                <>\n                  <SelectItem value=\"none\">不指定訂單（團體支出）</SelectItem>\n                  {tourOrders.map((order) => (\n                    <SelectItem key={order.id} value={order.id}>\n                      {order.label}\n                    </SelectItem>\n                  ))}\n                </>\n              ) : (\n                <div className=\"px-2 py-4 text-center text-sm text-morandi-secondary\">\n                  此團體尚無訂單\n                </div>\n              )}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* 請款日期 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            請款日期 <span className=\"text-morandi-red\">*</span>\n          </label>\n\n          <div className=\"mb-2 flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"isSpecialBilling\"\n              checked={isSpecialBilling}\n              onChange={(e) => {\n                setIsSpecialBilling(e.target.checked);\n                setRequestDate('');\n              }}\n              className=\"rounded border-border\"\n            />\n            <label htmlFor=\"isSpecialBilling\" className=\"text-sm text-morandi-primary cursor-pointer\">\n              特殊出帳 (可選擇任何日期)\n            </label>\n          </div>\n\n          {isSpecialBilling ? (\n            <div>\n              <Input\n                type=\"date\"\n                value={requestDate}\n                onChange={(e) => setRequestDate(e.target.value)}\n                className=\"bg-morandi-gold/10 border-morandi-gold/50\"\n              />\n              <p className=\"text-xs text-morandi-gold mt-1\">⚠️ 特殊出帳：可選擇任何日期</p>\n            </div>\n          ) : (\n            <div>\n              <Select\n                value={requestDate}\n                onValueChange={(value) => setRequestDate(value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"選擇請款日期 (週四)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {upcomingThursdays.map((thursday) => (\n                    <SelectItem key={thursday.value} value={thursday.value}>\n                      {thursday.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-morandi-secondary mt-1\">💼 一般請款固定每週四</p>\n            </div>\n          )}\n        </div>\n\n        {/* 新增項目區塊 */}\n        <div className=\"border border-morandi-container/30 rounded-lg p-4 bg-morandi-container/5\">\n          <h6 className=\"font-medium text-morandi-primary mb-3\">新增請款項目</h6>\n\n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <label className=\"text-xs font-medium text-morandi-secondary mb-1 block\">類別</label>\n                <Select\n                  value={newItem.category}\n                  onValueChange={(value: any) => setNewItem(prev => ({ ...prev, category: value }))}\n                >\n                  <SelectTrigger className=\"border-morandi-container/30\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categoryOptions.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-xs font-medium text-morandi-secondary mb-1 block\">供應商</label>\n                <Select\n                  value={newItem.supplier_id}\n                  onValueChange={(value) => setNewItem(prev => ({ ...prev, supplier_id: value }))}\n                >\n                  <SelectTrigger className=\"border-morandi-container/30\">\n                    <SelectValue placeholder=\"選擇供應商\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {suppliers.map((supplier) => (\n                      <SelectItem key={supplier.id} value={supplier.id}>\n                        {supplier.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-xs font-medium text-morandi-secondary mb-1 block\">項目描述</label>\n              <Input\n                value={newItem.description}\n                onChange={(e) => setNewItem(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"輸入項目描述\"\n                className=\"border-morandi-container/30\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3\">\n              <div>\n                <label className=\"text-xs font-medium text-morandi-secondary mb-1 block\">單價</label>\n                <Input\n                  type=\"number\"\n                  value={newItem.unit_price || ''}\n                  onChange={(e) => setNewItem(prev => ({ ...prev, unit_price: Number(e.target.value) }))}\n                  placeholder=\"0\"\n                  className=\"border-morandi-container/30\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-xs font-medium text-morandi-secondary mb-1 block\">數量</label>\n                <Input\n                  type=\"number\"\n                  value={newItem.quantity || ''}\n                  onChange={(e) => setNewItem(prev => ({ ...prev, quantity: Number(e.target.value) }))}\n                  placeholder=\"1\"\n                  className=\"border-morandi-container/30\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-xs font-medium text-morandi-secondary mb-1 block\">小計</label>\n                <Input\n                  value={`NT$ ${(newItem.unit_price * newItem.quantity).toLocaleString()}`}\n                  disabled\n                  className=\"bg-morandi-container/30\"\n                />\n              </div>\n            </div>\n\n            <Button\n              onClick={addItemToList}\n              disabled={!newItem.supplier_id || !newItem.description}\n              className=\"w-full bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              size=\"sm\"\n            >\n              <Plus size={16} className=\"mr-2\" />\n              新增項目\n            </Button>\n          </div>\n        </div>\n\n        {/* 項目列表 */}\n        {items.length > 0 && (\n          <div className=\"border border-morandi-container/30 rounded-lg p-4\">\n            <h6 className=\"font-medium text-morandi-primary mb-3\">請款項目列表 ({items.length})</h6>\n            <div className=\"space-y-2\">\n              {items.map((item) => (\n                <div key={item.id} className=\"flex items-center justify-between p-3 bg-morandi-container/10 rounded\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"text-xs bg-morandi-gold/20 text-morandi-gold px-2 py-0.5 rounded\">\n                        {categoryOptions.find(c => c.value === item.category)?.label}\n                      </span>\n                      <span className=\"text-sm font-medium text-morandi-primary\">{item.supplierName}</span>\n                    </div>\n                    <div className=\"text-xs text-morandi-secondary\">{item.description}</div>\n                    <div className=\"text-xs text-morandi-secondary mt-1\">\n                      NT$ {item.unit_price.toLocaleString()} × {item.quantity} =\n                      <span className=\"font-semibold text-morandi-gold ml-1\">\n                        NT$ {(item.unit_price * item.quantity).toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => removeItem(item.id)}\n                    className=\"ml-4 text-morandi-red hover:bg-morandi-red/10 p-2 rounded\"\n                  >\n                    <Trash2 size={16} />\n                  </button>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-3 pt-3 border-t border-morandi-container/30 flex justify-between items-center\">\n              <span className=\"text-sm font-semibold text-morandi-primary\">總金額:</span>\n              <span className=\"text-lg font-bold text-morandi-gold\">NT$ {total_amount.toLocaleString()}</span>\n            </div>\n          </div>\n        )}\n\n        {/* 備註 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            備註\n          </label>\n          <Textarea\n            placeholder=\"請款相關說明...\"\n            rows={2}\n            value={note}\n            onChange={(e) => setNote(e.target.value)}\n            className=\"border-morandi-container/30\"\n          />\n        </div>\n\n        {/* 提交按鈕 */}\n        <Button\n          onClick={handleSubmit}\n          disabled={!selectedTourId || items.length === 0 || !requestDate}\n          className=\"w-full bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n        >\n          <FileText size={16} className=\"mr-2\" />\n          建立請款單 ({items.length} 項，NT$ {total_amount.toLocaleString()})\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/todos/quick-actions/quick-group.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1170,1173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1170,1173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1767,1770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1767,1770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\n\nimport { Users } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { SmartDateInput } from '@/components/ui/smart-date-input';\nimport { useTourStore, useOrderStore } from '@/stores';\n\ninterface QuickGroupProps {\n  onSubmit?: () => void;\n}\n\nexport function QuickGroup({ onSubmit }: QuickGroupProps) {\n  const tourStore = useTourStore();\n  const orderStore = useOrderStore();\n  const [submitting, setSubmitting] = useState(false);\n\n  const [newTour, setNewTour] = useState({\n    name: '',\n    location: 'Tokyo',\n    departure_date: '',\n    return_date: '',\n    price: 0,\n    max_participants: 20,\n    description: '',\n    isSpecial: false\n  });\n\n  const [newOrder, setNewOrder] = useState({\n    contact_person: '',\n    sales_person: '',\n    assistant: '',\n    member_count: 1,\n    total_amount: 0\n  });\n\n  const handleSubmit = async () => {\n    if (!newTour.name.trim() || !newTour.departure_date || !newTour.return_date) {\n      alert('請填寫必填欄位（團名、出發日期、返回日期）');\n      return;\n    }\n\n    setSubmitting(true);\n    try {\n      const tourData: any = {\n        name: newTour.name,\n        location: newTour.location,\n        departure_date: newTour.departure_date,\n        return_date: newTour.return_date,\n        price: newTour.price,\n        max_participants: newTour.max_participants,\n        description: newTour.description,\n        status: 'draft' as const,\n        contract_status: 'pending' as const,\n        total_revenue: 0,\n        total_cost: 0,\n        profit: 0\n      };\n\n      const createdTour = await tourStore.create(tourData);\n\n      // 如果有填寫聯絡人，同時建立訂單\n      if (newOrder.contact_person.trim()) {\n        const orderData: any = {\n          tour_id: createdTour.id,\n          code: createdTour.code,\n          tour_name: createdTour.name,\n          contact_person: newOrder.contact_person,\n          sales_person: newOrder.sales_person || '未指派',\n          assistant: newOrder.assistant || '未指派',\n          member_count: newOrder.member_count,\n          total_amount: newOrder.total_amount,\n          paid_amount: 0,\n          remaining_amount: newOrder.total_amount,\n          payment_status: 'unpaid' as const\n        };\n\n        await orderStore.create(orderData);\n      }\n\n      // 重置表單\n      setNewTour({\n        name: '',\n        location: 'Tokyo',\n        departure_date: '',\n        return_date: '',\n        price: 0,\n        max_participants: 20,\n        description: '',\n        isSpecial: false\n      });\n      setNewOrder({\n        contact_person: '',\n        sales_person: '',\n        assistant: '',\n        member_count: 1,\n        total_amount: 0\n      });\n\n      alert(newOrder.contact_person ? '成功建立旅遊團和訂單！' : '成功建立旅遊團！');\n      onSubmit?.();\n    } catch (error) {\n      console.error('建立失敗:', error);\n      alert('建立失敗，請稍後再試');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* 旅遊團資訊 */}\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            旅遊團名稱 <span className=\"text-morandi-red\">*</span>\n          </label>\n          <Input\n            value={newTour.name}\n            onChange={(e) => setNewTour(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"例如：東京五日遊\"\n            className=\"border-morandi-container/30\"\n          />\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            目的地 <span className=\"text-morandi-red\">*</span>\n          </label>\n          <select\n            value={newTour.location}\n            onChange={(e) => setNewTour(prev => ({ ...prev, location: e.target.value }))}\n            className=\"w-full p-2 border border-morandi-container/30 rounded-md bg-background text-sm\"\n          >\n            <option value=\"Tokyo\">Tokyo 東京</option>\n            <option value=\"Okinawa\">Okinawa 沖繩</option>\n            <option value=\"Osaka\">Osaka 大阪</option>\n            <option value=\"Kyoto\">Kyoto 京都</option>\n            <option value=\"Hokkaido\">Hokkaido 北海道</option>\n            <option value=\"Fukuoka\">Fukuoka 福岡</option>\n            <option value=\"Other\">其他</option>\n          </select>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n              出發日期 <span className=\"text-morandi-red\">*</span>\n            </label>\n            <SmartDateInput\n              value={newTour.departure_date}\n              onChange={(departure_date) => {\n                setNewTour(prev => {\n                  const newReturnDate = prev.return_date && prev.return_date < departure_date\n                    ? departure_date\n                    : prev.return_date;\n                  return { ...prev, departure_date, return_date: newReturnDate };\n                });\n              }}\n              min={new Date().toISOString().split('T')[0]}\n              className=\"border-morandi-container/30\"\n              required\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n              返回日期 <span className=\"text-morandi-red\">*</span>\n            </label>\n            <SmartDateInput\n              value={newTour.return_date}\n              onChange={(return_date) => {\n                setNewTour(prev => ({ ...prev, return_date }));\n              }}\n              min={newTour.departure_date || new Date().toISOString().split('T')[0]}\n              className=\"border-morandi-container/30\"\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n              價格\n            </label>\n            <Input\n              type=\"number\"\n              value={newTour.price}\n              onChange={(e) => setNewTour(prev => ({ ...prev, price: Number(e.target.value) }))}\n              className=\"border-morandi-container/30\"\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n              最大人數\n            </label>\n            <Input\n              type=\"number\"\n              value={newTour.max_participants}\n              onChange={(e) => setNewTour(prev => ({ ...prev, max_participants: Number(e.target.value) }))}\n              className=\"border-morandi-container/30\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            id=\"isSpecial-quick\"\n            checked={newTour.isSpecial}\n            onChange={(e) => setNewTour(prev => ({ ...prev, isSpecial: e.target.checked }))}\n            className=\"rounded\"\n          />\n          <label htmlFor=\"isSpecial-quick\" className=\"text-sm text-morandi-primary\">特殊團</label>\n        </div>\n      </div>\n\n      {/* 訂單資訊（選填） */}\n      <div className=\"border-t border-morandi-container/30 pt-4 space-y-4\">\n        <h4 className=\"text-sm font-semibold text-morandi-primary\">同時新增訂單（選填）</h4>\n\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            聯絡人\n          </label>\n          <Input\n            value={newOrder.contact_person}\n            onChange={(e) => setNewOrder(prev => ({ ...prev, contact_person: e.target.value }))}\n            placeholder=\"留空則不建立訂單\"\n            className=\"border-morandi-container/30\"\n          />\n        </div>\n\n        {newOrder.contact_person && (\n          <>\n            <div>\n              <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                業務人員\n              </label>\n              <Input\n                value={newOrder.sales_person}\n                onChange={(e) => setNewOrder(prev => ({ ...prev, sales_person: e.target.value }))}\n                className=\"border-morandi-container/30\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                助理\n              </label>\n              <Input\n                value={newOrder.assistant}\n                onChange={(e) => setNewOrder(prev => ({ ...prev, assistant: e.target.value }))}\n                className=\"border-morandi-container/30\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                  團員人數\n                </label>\n                <Input\n                  type=\"number\"\n                  value={newOrder.member_count}\n                  onChange={(e) => setNewOrder(prev => ({ ...prev, member_count: Number(e.target.value) }))}\n                  min=\"1\"\n                  className=\"border-morandi-container/30\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n                  訂單金額\n                </label>\n                <Input\n                  type=\"number\"\n                  value={newOrder.total_amount}\n                  onChange={(e) => setNewOrder(prev => ({ ...prev, total_amount: Number(e.target.value) }))}\n                  className=\"border-morandi-container/30\"\n                />\n              </div>\n            </div>\n          </>\n        )}\n\n        <div className=\"bg-morandi-container/10 p-3 rounded-lg\">\n          <p className=\"text-xs text-morandi-secondary\">\n            提示：如果填寫了聯絡人，將會同時建立一筆訂單。如果留空，則只建立旅遊團。\n          </p>\n        </div>\n      </div>\n\n      {/* 提交按鈕 */}\n      <Button\n        onClick={handleSubmit}\n        disabled={submitting || !newTour.name.trim() || !newTour.departure_date || !newTour.return_date}\n        className=\"w-full bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n      >\n        <Users size={16} className=\"mr-2\" />\n        {submitting ? '建立中...' : (newOrder.contact_person ? '建立旅遊團 & 訂單' : '建立旅遊團')}\n      </Button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/todos/quick-actions/quick-receipt.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":77,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":77,"endColumn":35},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":78,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":78,"endColumn":31},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":79,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":79,"endColumn":45},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":80,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":80,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\n\nimport { Receipt, Search } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useTourStore, useOrderStore } from '@/stores';\nimport type { Tour, Order } from '@/stores/types';\n\nimport { cn } from '@/lib/utils';\n\ninterface QuickReceiptProps {\n  onSubmit?: (data: ReceiptData) => void;\n}\n\ninterface ReceiptData {\n  tour_id: string;\n  order_id: string;\n  amount: number;\n  paymentMethod: string;\n  payment_date: string;\n  note?: string;\n}\n\nexport function QuickReceipt({ onSubmit }: QuickReceiptProps) {\n  const { items: tours } = useTourStore();\n  const { items: orders } = useOrderStore();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTourId, setSelectedTourId] = useState('');\n  const [formData, setFormData] = useState<Partial<ReceiptData>>({\n    paymentMethod: 'transfer',\n    payment_date: new Date().toISOString().split('T')[0]\n  });\n\n  // 模糊搜尋團體（團號/團名/代碼）\n  const filteredTours = useMemo(() => {\n    if (!searchTerm.trim()) return tours || [];\n\n    const term = searchTerm.toLowerCase();\n    return (tours || []).filter((tour: Tour) => {\n      const code = tour.code?.toLowerCase() || '';\n      const name = tour.name?.toLowerCase() || '';\n      const location = tour.location?.toLowerCase() || '';\n\n      return code.includes(term) ||\n             name.includes(term) ||\n             location.includes(term);\n    });\n  }, [tours, searchTerm]);\n\n  // 該團體的訂單列表（訂單編號-聯絡人-業務）\n  const tourOrders = useMemo(() => {\n    if (!selectedTourId) return [];\n\n    return orders\n      .filter((order: Order) => order.tour_id === selectedTourId)\n      .map((order: Order) => ({\n        id: order.id,\n        label: `${order.order_number || 'N/A'} - ${order.contact_person} - ${order.sales_person || '未指派'}`\n      }));\n  }, [selectedTourId, orders]);\n\n  const selectedTour = (tours || []).find((t: Tour) => t.id === selectedTourId);\n\n  const handleSubmit = () => {\n    if (!formData.order_id || !formData.amount) {\n      alert('請填寫必填欄位（團體、訂單、金額）');\n      return;\n    }\n\n    onSubmit?.({\n      tour_id: selectedTourId,\n      order_id: formData.order_id!,\n      amount: formData.amount!,\n      paymentMethod: formData.paymentMethod!,\n      payment_date: formData.payment_date!,\n      note: formData.note\n    });\n\n    // 重置表單\n    setSearchTerm('');\n    setSelectedTourId('');\n    setFormData({\n      paymentMethod: 'transfer',\n      payment_date: new Date().toISOString().split('T')[0]\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* 團體搜尋選擇器 */}\n      <div>\n        <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n          選擇團體 <span className=\"text-morandi-red\">*</span>\n        </label>\n\n        {/* 搜尋輸入框 */}\n        <div className=\"relative mb-2\">\n          <Search size={16} className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" />\n          <Input\n            placeholder=\"搜尋團號、團名或地點（如：0801、東京、TYO）\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 border-morandi-container/30\"\n          />\n        </div>\n\n        {/* 搜尋結果列表 */}\n        {searchTerm && (\n          <div className=\"border border-morandi-container/30 rounded-lg max-h-48 overflow-y-auto\">\n            {filteredTours.length > 0 ? (\n              filteredTours.map((tour: Tour) => (\n                <button\n                    key={tour.id}\n                    onClick={() => {\n                      setSelectedTourId(tour.id);\n                      setSearchTerm('');\n                      setFormData(prev => ({ ...prev, order_id: undefined })); // 重置訂單\n                    }}\n                    className={cn(\n                      'w-full text-left px-4 py-3 hover:bg-morandi-container/10 transition-colors border-b border-morandi-container/20 last:border-0',\n                      selectedTourId === tour.id && 'bg-morandi-gold/10'\n                    )}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-sm font-medium text-morandi-primary\">\n                          {tour.code || 'N/A'} - {tour.name}\n                        </div>\n                        <div className=\"text-xs text-morandi-secondary mt-1\">\n                          {tour.location} • {tour.departure_date}\n                        </div>\n                      </div>\n                      {selectedTourId === tour.id && (\n                        <div className=\"text-morandi-gold text-xs font-medium\">已選</div>\n                      )}\n                    </div>\n                  </button>\n                ))\n              ) : (\n                <div className=\"px-4 py-6 text-center text-sm text-morandi-secondary\">\n                  找不到相關團體\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* 已選團體顯示 */}\n          {selectedTour && !searchTerm && (\n            <div className=\"bg-morandi-gold/10 border border-morandi-gold/30 rounded-lg p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-sm font-medium text-morandi-primary\">\n                    {selectedTour.code || 'N/A'} - {selectedTour.name}\n                  </div>\n                  <div className=\"text-xs text-morandi-secondary mt-1\">\n                    {selectedTour.location} • {selectedTour.departure_date}\n                  </div>\n                </div>\n                <button\n                  onClick={() => {\n                    setSelectedTourId('');\n                    setFormData(prev => ({ ...prev, order_id: undefined }));\n                  }}\n                  className=\"text-xs text-morandi-red hover:underline\"\n                >\n                  清除\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 訂單選擇（必須先選團體） */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            選擇訂單 <span className=\"text-morandi-red\">*</span>\n          </label>\n          <Select\n            value={formData.order_id}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, order_id: value }))}\n            disabled={!selectedTourId}\n          >\n            <SelectTrigger className=\"border-morandi-container/30\">\n              <SelectValue placeholder={selectedTourId ? '請選擇訂單' : '請先選擇團體'} />\n            </SelectTrigger>\n            <SelectContent>\n              {tourOrders.length > 0 ? (\n                tourOrders.map((order: { id: string; label: string }) => (\n                  <SelectItem key={order.id} value={order.id}>\n                    {order.label}\n                  </SelectItem>\n                ))\n              ) : (\n                <div className=\"px-2 py-4 text-center text-sm text-morandi-secondary\">\n                  此團體尚無訂單\n                </div>\n              )}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* 收款金額 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            收款金額 <span className=\"text-morandi-red\">*</span>\n          </label>\n          <Input\n            type=\"number\"\n            placeholder=\"請輸入金額\"\n            value={formData.amount || ''}\n            onChange={(e) => setFormData(prev => ({ ...prev, amount: Number(e.target.value) }))}\n            className=\"border-morandi-container/30\"\n          />\n        </div>\n\n        {/* 付款方式 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            付款方式 <span className=\"text-morandi-red\">*</span>\n          </label>\n          <Select\n            value={formData.paymentMethod}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, paymentMethod: value }))}\n          >\n            <SelectTrigger className=\"border-morandi-container/30\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"cash\">現金</SelectItem>\n              <SelectItem value=\"transfer\">轉帳</SelectItem>\n              <SelectItem value=\"card\">信用卡</SelectItem>\n              <SelectItem value=\"check\">支票</SelectItem>\n              <SelectItem value=\"other\">其他</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* 收款日期 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            收款日期 <span className=\"text-morandi-red\">*</span>\n          </label>\n          <Input\n            type=\"date\"\n            value={formData.payment_date}\n            onChange={(e) => setFormData(prev => ({ ...prev, payment_date: e.target.value }))}\n            className=\"border-morandi-container/30\"\n          />\n        </div>\n\n        {/* 備註 */}\n        <div>\n          <label className=\"text-sm font-medium text-morandi-secondary mb-2 block\">\n            備註\n          </label>\n          <Textarea\n            placeholder=\"收款相關說明...\"\n            rows={2}\n            value={formData.note || ''}\n            onChange={(e) => setFormData(prev => ({ ...prev, note: e.target.value }))}\n            className=\"border-morandi-container/30\"\n          />\n        </div>\n\n      {/* 提交按鈕 */}\n      <Button\n        onClick={handleSubmit}\n        disabled={!selectedTourId || !formData.order_id || !formData.amount}\n        className=\"w-full bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n      >\n        <Receipt size={16} className=\"mr-2\" />\n        建立收款單\n      </Button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/todos/todo-card-groups.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/todos/todo-expanded-view.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progressPercentage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":125,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'todo' is defined but never used. Allowed unused args must match /^_/u.","line":562,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":562,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { StarRating } from '@/components/ui/star-rating';\nimport { Todo } from '@/stores/types';\nimport { cn } from '@/lib/utils';\nimport { useEnterSubmit, useEnterSubmitWithShift } from '@/hooks/useEnterSubmit';\nimport { useUserStore } from '@/stores/user-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport {\n  Receipt,\n  FileText,\n  Users,\n  DollarSign,\n  UserPlus,\n  Calendar,\n  Clock,\n  MessageSquare,\n  Check,\n  X,\n  CheckCircle,\n  Edit2\n} from 'lucide-react';\nimport { generateUUID } from '@/lib/utils/uuid';\n\ninterface TodoExpandedViewProps {\n  todo: Todo;\n  onUpdate: (updates: Partial<Todo>) => void;\n  onClose: () => void;\n}\n\ntype QuickActionTab = 'receipt' | 'invoice' | 'group' | 'quote' | 'share';\n\nexport function TodoExpandedView({ todo, onUpdate, onClose }: TodoExpandedViewProps) {\n  const [activeTab, setActiveTab] = useState<QuickActionTab>('receipt');\n  const [newSubTask, setNewSubTask] = useState('');\n  const [newNote, setNewNote] = useState('');\n  const [editingNoteIndex, setEditingNoteIndex] = useState<number | null>(null);\n  const [editingNoteContent, setEditingNoteContent] = useState('');\n  const [editingSubTaskId, setEditingSubTaskId] = useState<string | null>(null);\n  const [editingSubTaskContent, setEditingSubTaskContent] = useState('');\n\n  const quickActionTabs = [\n    { key: 'receipt' as const, label: '收款', icon: Receipt },\n    { key: 'invoice' as const, label: '請款', icon: FileText },\n    { key: 'group' as const, label: '開團', icon: Users },\n    { key: 'quote' as const, label: '報價', icon: DollarSign },\n    { key: 'share' as const, label: '共享', icon: UserPlus },\n  ];\n\n  const addSubTask = () => {\n    if (!newSubTask.trim()) return;\n\n    const newTask = {\n      id: generateUUID(),\n      title: newSubTask,\n      done: false,\n    };\n\n    // 如果目前狀態是「待辦」，自動切換到「進行中」\n    const updates: Partial<Todo> = {\n      sub_tasks: [...(todo.sub_tasks || []), newTask]\n    };\n\n    if (todo.status === 'pending') {\n      updates.status = 'in_progress';\n    }\n\n    onUpdate(updates);\n    setNewSubTask('');\n  };\n\n  const addNote = () => {\n    if (!newNote.trim()) return;\n\n    const note = {\n      timestamp: new Date().toISOString(),\n      content: newNote\n    };\n\n    // 如果目前狀態是「待辦」，自動切換到「進行中」\n    const updates: Partial<Todo> = {\n      notes: [...(todo.notes || []), note]\n    };\n\n    if (todo.status === 'pending') {\n      updates.status = 'in_progress';\n    }\n\n    onUpdate(updates);\n    setNewNote('');\n  };\n\n  const { handleKeyDown: handleSubTaskKeyDown, compositionProps: subTaskCompositionProps } = useEnterSubmit(addSubTask);\n  const { handleKeyDown: handleNoteKeyDown, compositionProps: noteCompositionProps } = useEnterSubmitWithShift(addNote);\n\n  const toggleSubTask = (taskId: string) => {\n    const updatedSubTasks = (todo.sub_tasks || []).map(task =>\n      task.id === taskId\n        ? { ...task, done: !task.done, completed_at: !task.done ? new Date().toISOString() : undefined }\n        : task\n    );\n\n    onUpdate({ sub_tasks: updatedSubTasks });\n  };\n\n  const getDeadlineColor = () => {\n    if (!todo.deadline) return 'text-morandi-secondary';\n\n    const deadline = new Date(todo.deadline);\n    const today = new Date();\n    const diffDays = Math.ceil((deadline.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (diffDays < 0) return 'text-morandi-red'; // 逾期\n    if (diffDays === 0) return 'text-morandi-gold'; // 今天\n    if (diffDays <= 3) return 'text-morandi-gold'; // 3天內\n    return 'text-morandi-secondary'; // 充裕\n  };\n\n  const completedSubTasks = (todo.sub_tasks || []).filter(task => task.done).length;\n  const progressPercentage = (todo.sub_tasks || []).length > 0 ? (completedSubTasks / (todo.sub_tasks || []).length) * 100 : 0;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-gray-50 rounded-2xl shadow-2xl w-full max-w-[1400px] h-[90vh] flex flex-col relative\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* 右上角關閉按鈕 */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-3 right-3 z-10 p-1 hover:bg-morandi-red/10 hover:text-morandi-red transition-colors rounded-lg text-morandi-secondary\"\n        >\n          <X size={14} />\n        </button>\n\n        {/* 主要內容區 */}\n        <div className=\"flex flex-1 overflow-hidden pt-4\">\n          {/* 左半部：詳情資料 */}\n          <div className=\"w-1/2 px-6 py-4 border-r border-border flex flex-col\">\n            {/* 標題與星級 */}\n            <div className=\"mb-4 bg-card border border-border rounded-xl p-4 shadow-sm\">\n              <div className=\"flex items-center justify-between gap-4\">\n                {/* 左邊：標題 */}\n                <div className=\"flex-1\">\n                  <Input\n                    value={todo.title}\n                    onChange={(e) => onUpdate({ title: e.target.value })}\n                    className=\"text-lg font-bold border-none shadow-none p-0 h-auto focus-visible:ring-0 bg-transparent\"\n                    placeholder=\"輸入任務標題...\"\n                  />\n                </div>\n\n                {/* 右邊：優先級 */}\n                <div className=\"flex items-center gap-2 flex-shrink-0\">\n                  <span className=\"text-xs text-morandi-secondary\">優先級:</span>\n                  <StarRating\n                    value={todo.priority}\n                    onChange={(value) => onUpdate({ priority: value as 1 | 2 | 3 | 4 | 5 })}\n                    size=\"sm\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 基本資訊 */}\n            <div className=\"bg-card border border-border rounded-xl p-4 mb-4 shadow-sm\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Calendar size={18} className=\"text-morandi-secondary\" />\n                  <span className=\"text-sm text-morandi-secondary min-w-[60px]\">期限:</span>\n                  <Input\n                    type=\"date\"\n                    value={todo.deadline || ''}\n                    onChange={(e) => onUpdate({ deadline: e.target.value })}\n                    className={cn('text-sm font-medium h-8 w-auto', getDeadlineColor())}\n                  />\n                  {todo.deadline && (\n                    <button\n                      onClick={() => onUpdate({ deadline: '' })}\n                      className=\"p-1 hover:bg-morandi-red/10 rounded text-morandi-secondary hover:text-morandi-red\"\n                      title=\"清除期限\"\n                    >\n                      <X size={14} />\n                    </button>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Clock size={16} className=\"text-morandi-secondary\" />\n                  <span className=\"text-xs text-morandi-secondary min-w-[50px]\">狀態:</span>\n                  <div className=\"flex gap-1.5 flex-wrap\">\n                    <button\n                      onClick={() => onUpdate({ status: 'pending' })}\n                      className={cn(\n                        'px-3 py-1.5 text-xs rounded-lg transition-all font-medium',\n                        todo.status === 'pending'\n                          ? 'bg-morandi-muted text-white shadow-sm'\n                          : 'bg-white/60 border border-morandi-container/30 text-morandi-secondary hover:bg-white hover:border-morandi-muted/50'\n                      )}\n                    >\n                      待辦\n                    </button>\n                    <button\n                      onClick={() => onUpdate({ status: 'in_progress' })}\n                      className={cn(\n                        'px-3 py-1.5 text-xs rounded-lg transition-all font-medium',\n                        todo.status === 'in_progress'\n                          ? 'bg-morandi-gold text-white shadow-sm'\n                          : 'bg-white/60 border border-morandi-container/30 text-morandi-secondary hover:bg-white hover:border-morandi-gold/50'\n                      )}\n                    >\n                      進行中\n                    </button>\n                    <button\n                      onClick={() => onUpdate({ status: 'completed' })}\n                      className={cn(\n                        'px-3 py-1.5 text-xs rounded-lg transition-all font-medium',\n                        todo.status === 'completed'\n                          ? 'bg-morandi-green text-white shadow-sm'\n                          : 'bg-white/60 border border-morandi-container/30 text-morandi-secondary hover:bg-white hover:border-morandi-green/50'\n                      )}\n                    >\n                      完成\n                    </button>\n                    <button\n                      onClick={() => onUpdate({ status: 'cancelled' })}\n                      className={cn(\n                        'px-3 py-1.5 text-xs rounded-lg transition-all font-medium',\n                        todo.status === 'cancelled'\n                          ? 'bg-morandi-red text-white shadow-sm'\n                          : 'bg-white/60 border border-morandi-container/30 text-morandi-secondary hover:bg-white hover:border-morandi-red/50'\n                      )}\n                    >\n                      取消\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {todo.related_items && todo.related_items.length > 0 && (\n                <div className=\"pt-3 mt-3 border-t border-border\">\n                  <span className=\"text-xs font-medium text-morandi-primary flex items-center gap-1.5 mb-2\">\n                    <FileText size={12} className=\"text-morandi-gold\" />\n                    關聯項目\n                  </span>\n                  <div className=\"flex flex-wrap gap-1.5\">\n                    {todo.related_items.map((item, index) => (\n                      <button\n                        key={index}\n                        onClick={() => {\n                          const basePath = {\n                            'group': '/tours',\n                            'quote': '/quotes',\n                            'order': '/orders',\n                            'invoice': '/finance/treasury/disbursement',\n                            'receipt': '/finance/payments'\n                          }[item.type];\n                          if (basePath) {\n                            window.location.href = `${basePath}?highlight=${item.id}`;\n                          }\n                        }}\n                        className=\"bg-white/60 border border-morandi-gold/30 text-morandi-primary text-xs px-2 py-1 rounded-lg hover:bg-morandi-gold/10 hover:border-morandi-gold/50 transition-all font-medium\"\n                      >\n                        {item.title}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 子任務清單 */}\n            <div className=\"mb-4 bg-card border border-border rounded-xl p-4 shadow-sm\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"text-sm font-semibold text-morandi-primary flex items-center gap-1.5\">\n                  <CheckCircle size={14} className=\"text-morandi-gold\" />\n                  子任務清單\n                </h4>\n                <span className=\"text-xs text-morandi-primary bg-morandi-gold/10 border border-morandi-gold/30 px-2 py-1 rounded-lg font-medium\">\n                  {completedSubTasks}/{(todo.sub_tasks || []).length}\n                </span>\n              </div>\n\n              <div className=\"space-y-1.5 mb-3\">\n                {(todo.sub_tasks || []).map((task) => (\n                  <div key={task.id} className=\"flex items-center gap-2 p-2 rounded-lg bg-morandi-container/10 hover:bg-morandi-container/20 transition-colors border border-transparent hover:border-morandi-gold/30 group relative\">\n                    {editingSubTaskId === task.id ? (\n                      // 編輯模式\n                      <>\n                        <button\n                          onClick={() => toggleSubTask(task.id)}\n                          className={cn(\n                            'w-4 h-4 rounded border-2 transition-all flex items-center justify-center shadow-sm flex-shrink-0',\n                            task.done\n                              ? 'bg-morandi-gold border-morandi-gold scale-110'\n                              : 'border-morandi-muted hover:border-morandi-gold bg-white'\n                          )}\n                        >\n                          {task.done && <Check size={12} className=\"text-white\" />}\n                        </button>\n                        <Input\n                          value={editingSubTaskContent}\n                          onChange={(e) => setEditingSubTaskContent(e.target.value)}\n                          className=\"text-xs h-7 flex-1\"\n                          autoFocus\n                        />\n                        <Button\n                          size=\"sm\"\n                          onClick={() => {\n                            const updatedSubTasks = (todo.sub_tasks || []).map(t =>\n                              t.id === task.id ? { ...t, title: editingSubTaskContent } : t\n                            );\n                            onUpdate({ sub_tasks: updatedSubTasks });\n                            setEditingSubTaskId(null);\n                          }}\n                          className=\"bg-morandi-gold hover:bg-morandi-gold/90 h-7 text-xs px-2\"\n                        >\n                          儲存\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingSubTaskId(null)}\n                          className=\"h-7 text-xs px-2\"\n                        >\n                          取消\n                        </Button>\n                      </>\n                    ) : (\n                      // 顯示模式\n                      <>\n                        <button\n                          onClick={() => toggleSubTask(task.id)}\n                          className={cn(\n                            'w-4 h-4 rounded border-2 transition-all flex items-center justify-center shadow-sm flex-shrink-0',\n                            task.done\n                              ? 'bg-morandi-gold border-morandi-gold scale-110'\n                              : 'border-morandi-muted hover:border-morandi-gold bg-white'\n                          )}\n                        >\n                          {task.done && <Check size={12} className=\"text-white\" />}\n                        </button>\n                        <span className={cn(\n                          'text-xs flex-1 font-medium',\n                          task.done\n                            ? 'line-through text-morandi-muted'\n                            : 'text-morandi-primary'\n                        )}>\n                          {task.title}\n                        </span>\n                        <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n                          <button\n                            onClick={() => {\n                              setEditingSubTaskId(task.id);\n                              setEditingSubTaskContent(task.title);\n                            }}\n                            className=\"p-1 hover:bg-morandi-gold/10 rounded text-morandi-secondary hover:text-morandi-gold\"\n                            title=\"編輯子任務\"\n                          >\n                            <Edit2 size={12} />\n                          </button>\n                          <button\n                            onClick={() => {\n                              const updatedSubTasks = (todo.sub_tasks || []).filter(t => t.id !== task.id);\n                              onUpdate({ sub_tasks: updatedSubTasks });\n                            }}\n                            className=\"p-1 hover:bg-morandi-red/10 rounded text-morandi-red\"\n                            title=\"刪除子任務\"\n                          >\n                            <X size={12} />\n                          </button>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"新增子任務... (Enter)\"\n                  value={newSubTask}\n                  onChange={(e) => setNewSubTask(e.target.value)}\n                  onKeyDown={handleSubTaskKeyDown}\n                  {...subTaskCompositionProps}\n                  className=\"text-sm border-morandi-container/30 focus-visible:ring-morandi-gold\"\n                />\n                <Button size=\"sm\" onClick={addSubTask} className=\"bg-morandi-gold hover:bg-morandi-gold/90\">\n                  新增\n                </Button>\n              </div>\n            </div>\n\n            {/* 備註區 */}\n            <div className=\"bg-card border border-border rounded-xl p-4 shadow-sm flex-1 flex flex-col min-h-0\">\n              <h4 className=\"text-sm font-semibold text-morandi-primary mb-3 flex items-center gap-1.5\">\n                <MessageSquare size={14} className=\"text-morandi-gold\" />\n                備註\n              </h4>\n              <div className=\"space-y-2 mb-3 flex-1 overflow-y-auto\">\n                {todo.notes.map((note, index) => (\n                  <div key={index} className=\"bg-gradient-to-br from-morandi-container/20 to-morandi-container/10 border border-morandi-container/30 rounded-lg p-3 hover:shadow-sm transition-shadow group relative\">\n                    {editingNoteIndex === index ? (\n                      // 編輯模式\n                      <div>\n                        <span className=\"text-xs text-morandi-muted font-medium\">\n                          {new Date(note.timestamp).toLocaleString()}\n                        </span>\n                        <Textarea\n                          value={editingNoteContent}\n                          onChange={(e) => setEditingNoteContent(e.target.value)}\n                          className=\"text-xs mt-2 resize-none border-morandi-gold/50 focus-visible:ring-morandi-gold\"\n                          rows={3}\n                          autoFocus\n                        />\n                        <div className=\"flex gap-2 mt-2\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() => {\n                              const newNotes = [...todo.notes];\n                              newNotes[index] = { ...note, content: editingNoteContent };\n                              onUpdate({ notes: newNotes });\n                              setEditingNoteIndex(null);\n                            }}\n                            className=\"bg-morandi-gold hover:bg-morandi-gold/90 h-7 text-xs\"\n                          >\n                            儲存\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => setEditingNoteIndex(null)}\n                            className=\"h-7 text-xs\"\n                          >\n                            取消\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      // 顯示模式\n                      <>\n                        <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n                          <button\n                            onClick={() => {\n                              setEditingNoteIndex(index);\n                              setEditingNoteContent(note.content);\n                            }}\n                            className=\"p-1 hover:bg-morandi-gold/10 rounded text-morandi-secondary hover:text-morandi-gold\"\n                            title=\"編輯備註\"\n                          >\n                            <Edit2 size={12} />\n                          </button>\n                          <button\n                            onClick={() => {\n                              const newNotes = todo.notes.filter((_, i) => i !== index);\n                              onUpdate({ notes: newNotes });\n                            }}\n                            className=\"p-1 hover:bg-morandi-red/10 rounded text-morandi-red\"\n                            title=\"刪除備註\"\n                          >\n                            <X size={12} />\n                          </button>\n                        </div>\n                        <span className=\"text-xs text-morandi-muted font-medium\">\n                          {new Date(note.timestamp).toLocaleString()}\n                        </span>\n                        <div className=\"text-xs text-morandi-primary mt-1.5 leading-relaxed whitespace-pre-wrap\">{note.content}</div>\n                      </>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Textarea\n                  placeholder=\"新增備註... (Enter 送出，Shift+Enter 換行)\"\n                  value={newNote}\n                  onChange={(e) => setNewNote(e.target.value)}\n                  onKeyDown={handleNoteKeyDown}\n                  {...noteCompositionProps}\n                  className=\"text-sm resize-none border-morandi-container/40 focus-visible:ring-morandi-gold focus-visible:border-morandi-gold shadow-sm\"\n                  rows={3}\n                />\n                <Button size=\"sm\" onClick={addNote} className=\"bg-morandi-gold hover:bg-morandi-gold/90 shadow-sm\">\n                  新增\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* 右半部：快速功能 */}\n          <div className=\"w-1/2 px-6 py-4 flex flex-col\">\n            {/* 快速功能分頁 */}\n            <div className=\"mb-4 bg-card border border-border rounded-xl p-2 shadow-sm\">\n              <div className=\"flex gap-2\">\n                {quickActionTabs.map((tab) => {\n                  const Icon = tab.icon;\n                  return (\n                    <button\n                      key={tab.key}\n                      onClick={() => setActiveTab(tab.key)}\n                      className={cn(\n                        'flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium transition-all flex-1 rounded-lg',\n                        activeTab === tab.key\n                          ? 'bg-morandi-container/30 text-morandi-primary'\n                          : 'bg-transparent text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/10'\n                      )}\n                    >\n                      <Icon size={16} />\n                      {tab.label}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* 分頁內容 */}\n            <div className=\"flex-1 bg-card border border-border rounded-xl p-4 overflow-y-auto shadow-sm\">\n              <QuickActionContent activeTab={activeTab} todo={todo} />\n            </div>\n\n            {/* 快速操作按鈕 */}\n            <div className=\"flex gap-2 mt-4\">\n              <Button\n                onClick={() => {\n                  onUpdate({ status: 'completed', completed: true });\n                  onClose();\n                }}\n                className=\"flex-1 bg-gradient-to-r from-morandi-gold to-yellow-400 hover:from-morandi-gold/90 hover:to-yellow-400/90 text-white shadow-md hover:shadow-lg transition-all\"\n              >\n                <Check size={16} className=\"mr-1\" />\n                標記完成\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  const newDeadline = new Date();\n                  newDeadline.setDate(newDeadline.getDate() + 7);\n                  onUpdate({ deadline: newDeadline.toISOString().split('T')[0] });\n                }}\n                className=\"flex-1 border-morandi-container/50 hover:bg-morandi-container/20 hover:border-morandi-gold/50 shadow-sm transition-all\"\n              >\n                <Calendar size={16} className=\"mr-1\" />\n                延期一週\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// 快速功能內容組件\nfunction QuickActionContent({ activeTab, todo }: { activeTab: QuickActionTab; todo: Todo }) {\n  const { items: employees, fetchAll } = useUserStore();\n  const { user: currentUser } = useAuthStore();\n\n  // 使用 ref 建立穩定的函數參考\n  const fetchAllRef = useRef(fetchAll);\n\n  // 更新 ref 當 fetchAll 改變時\n  useEffect(() => {\n    fetchAllRef.current = fetchAll;\n  }, [fetchAll]);\n\n  // 只在共享分頁時載入員工資料\n  useEffect(() => {\n    if (activeTab === 'share' && employees.length === 0) {\n      console.log('📥 載入員工資料...');\n      fetchAllRef.current();\n    }\n  }, [activeTab, employees.length]);\n\n  // 過濾掉自己\n  const otherEmployees = employees.filter(emp => emp.id !== currentUser?.id);\n\n  switch (activeTab) {\n    case 'receipt':\n      return (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-2 pb-3 border-b border-morandi-container/20\">\n            <div className=\"p-1.5 bg-morandi-gold/10 rounded-lg\">\n              <Receipt size={16} className=\"text-morandi-gold\" />\n            </div>\n            <div>\n              <h5 className=\"text-sm font-semibold text-morandi-primary\">快速收款</h5>\n              <p className=\"text-xs text-morandi-secondary\">建立新的收款記錄</p>\n            </div>\n          </div>\n          <div className=\"space-y-2.5\">\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">選擇訂單</label>\n              <Select>\n                <SelectTrigger className=\"shadow-sm h-9 text-xs\">\n                  <SelectValue placeholder=\"選擇訂單\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"order1\">東京5日遊 - 王小明</SelectItem>\n                  <SelectItem value=\"order2\">沖繩度假 - 李小華</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">收款金額</label>\n              <Input placeholder=\"輸入金額\" type=\"number\" className=\"shadow-sm h-9 text-xs\" />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">付款方式</label>\n              <Select>\n                <SelectTrigger className=\"shadow-sm h-9 text-xs\">\n                  <SelectValue placeholder=\"選擇付款方式\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cash\">現金</SelectItem>\n                  <SelectItem value=\"transfer\">轉帳</SelectItem>\n                  <SelectItem value=\"card\">信用卡</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">收款日期</label>\n              <Input placeholder=\"選擇日期\" type=\"date\" className=\"shadow-sm h-9 text-xs\" />\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">備註</label>\n              <Textarea placeholder=\"補充說明（選填）\" rows={2} className=\"shadow-sm text-xs\" />\n            </div>\n            <Button className=\"w-full bg-morandi-gold hover:bg-morandi-gold/90 shadow-md mt-1 h-9 text-xs\">\n              <Receipt size={14} className=\"mr-1.5\" />\n              建立收款單\n            </Button>\n          </div>\n        </div>\n      );\n\n    case 'invoice':\n      return (\n        <div className=\"space-y-4\">\n          <h5 className=\"font-medium text-morandi-primary\">快速請款</h5>\n          <div className=\"space-y-3\">\n            <Select>\n              <SelectTrigger>\n                <SelectValue placeholder=\"選擇供應商\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hotel1\">清邁假日酒店</SelectItem>\n                <SelectItem value=\"transport1\">清邁包車服務</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input placeholder=\"請款項目\" />\n            <Input placeholder=\"金額\" type=\"number\" />\n            <Select>\n              <SelectTrigger>\n                <SelectValue placeholder=\"類別\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"accommodation\">住宿</SelectItem>\n                <SelectItem value=\"transport\">交通</SelectItem>\n                <SelectItem value=\"meals\">餐食</SelectItem>\n                <SelectItem value=\"tickets\">門票</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"w-full\">建立請款單</Button>\n          </div>\n        </div>\n      );\n\n    case 'group':\n      return (\n        <div className=\"space-y-4\">\n          <h5 className=\"font-medium text-morandi-primary\">快速開團</h5>\n          <div className=\"space-y-3\">\n            <Input placeholder=\"團名\" />\n            <Input placeholder=\"預計人數\" type=\"number\" />\n            <Input placeholder=\"出發日期\" type=\"date\" />\n            <Input placeholder=\"返回日期\" type=\"date\" />\n            <Select>\n              <SelectTrigger>\n                <SelectValue placeholder=\"團體狀態\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"planning\">籌備中</SelectItem>\n                <SelectItem value=\"confirmed\">確認成團</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"w-full\">建立旅遊團</Button>\n          </div>\n        </div>\n      );\n\n    case 'quote':\n      return (\n        <div className=\"space-y-4\">\n          <h5 className=\"font-medium text-morandi-primary\">快速報價</h5>\n          <div className=\"space-y-3\">\n            <Input placeholder=\"客戶名稱\" />\n            <Input placeholder=\"聯絡人\" />\n            <Input placeholder=\"聯絡電話\" />\n            <Input placeholder=\"Email\" type=\"email\" />\n            <Input placeholder=\"人數\" type=\"number\" />\n            <Textarea placeholder=\"需求說明\" rows={3} />\n            <Input placeholder=\"預算範圍\" />\n            <Input placeholder=\"報價有效期\" type=\"date\" />\n            <Button className=\"w-full\">建立報價單</Button>\n          </div>\n        </div>\n      );\n\n    case 'share':\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2 pb-3 border-b border-morandi-container/20\">\n            <div className=\"p-1.5 bg-morandi-gold/10 rounded-lg\">\n              <UserPlus size={16} className=\"text-morandi-gold\" />\n            </div>\n            <div>\n              <h5 className=\"text-sm font-semibold text-morandi-primary\">共享待辦</h5>\n              <p className=\"text-xs text-morandi-secondary\">分享這個任務給團隊成員</p>\n            </div>\n          </div>\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">共享給</label>\n              <Select>\n                <SelectTrigger className=\"shadow-sm h-9 text-xs\">\n                  <SelectValue placeholder=\"選擇成員\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {otherEmployees.length > 0 ? (\n                    otherEmployees.map((emp) => (\n                      <SelectItem key={emp.id} value={emp.id}>\n                        {emp.display_name || emp.english_name}\n                      </SelectItem>\n                    ))\n                  ) : (\n                    <SelectItem value=\"none\" disabled>\n                      尚無其他員工\n                    </SelectItem>\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">權限</label>\n              <Select>\n                <SelectTrigger className=\"shadow-sm h-9 text-xs\">\n                  <SelectValue placeholder=\"選擇權限\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"view\">僅檢視</SelectItem>\n                  <SelectItem value=\"edit\">可編輯</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-xs font-medium text-morandi-primary mb-1\">訊息（選填）</label>\n              <Textarea placeholder=\"給成員的訊息...\" rows={2} className=\"shadow-sm text-xs\" />\n            </div>\n            <Button className=\"w-full bg-morandi-gold hover:bg-morandi-gold/90 shadow-md h-9 text-xs\">\n              <UserPlus size={14} className=\"mr-1.5\" />\n              共享待辦\n            </Button>\n          </div>\n        </div>\n      );\n\n    default:\n      return null;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/room-allocation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1360,1363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1360,1363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1483,1486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1483,1486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1528,1531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1528,1531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1785,1788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1785,1788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateRoomOptions'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [tour.id, paymentRequests, tourMembers, generateRoomOptions]","fix":{"range":[3148,3187],"text":"[tour.id, paymentRequests, tourMembers, generateRoomOptions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Tour, Member } from '@/stores/types';\nimport { useOrderStore, useMemberStore, usePaymentRequestStore } from '@/stores';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { cn } from '@/lib/utils';\nimport { Bed, Users, AlertTriangle, Home } from 'lucide-react';\n\ninterface RoomAllocationProps {\n  tour: Tour;\n}\n\ninterface RoomOption {\n  value: string;\n  label: string;\n  room_type: string;\n  capacity: number;\n  currentCount: number;\n}\n\ninterface MemberWithRoom extends Member {\n  assignedRoom?: string;\n}\n\nexport function RoomAllocation({ tour }: RoomAllocationProps) {\n  const { items: orders } = useOrderStore();\n  const { items: members } = useMemberStore();\n  const { items: paymentRequests } = usePaymentRequestStore();\n  const [roomOptions, setRoomOptions] = useState<RoomOption[]>([]);\n  const [membersWithRooms, setMembersWithRooms] = useState<MemberWithRoom[]>([]);\n\n  // 獲取屬於這個旅遊團的所有訂單和團員\n  const tourOrders = orders.filter(order => order.tour_id === tour.id);\n  const tourMembers = members.filter(member =>\n    tourOrders.some(order => order.id === member.order_id)\n  );\n\n  // 從請款單解析房間配額，生成房間選項\n  const generateRoomOptions = (): RoomOption[] => {\n    const tourPaymentRequests = paymentRequests.filter((request: any) => request.tour_id === tour.id);\n    const roomOptions: RoomOption[] = [];\n\n    tourPaymentRequests.forEach((request: any) => {\n      request.items.forEach((item: any) => {\n        if (item.category === '住宿' && item.description) {\n          // 解析房型和數量（例如：雙人房 x5, 三人房 x2）\n          const roomMatches = item.description.match(/(\\S+房)\\s*[x×]\\s*(\\d+)/g);\n          if (roomMatches) {\n            roomMatches.forEach((match: any) => {\n              const matchResult = match.match(/(\\S+房)\\s*[x×]\\s*(\\d+)/);\n              if (matchResult) {\n                const [, room_type, quantity] = matchResult;\n                if (room_type && quantity) {\n                  const capacity = getRoomCapacity(room_type);\n                  const roomCount = parseInt(quantity);\n\n                  // 生成具體房間選項（如：雙人房-1、雙人房-2...）\n                  for (let i = 1; i <= roomCount; i++) {\n                    roomOptions.push({\n                      value: `${room_type}-${i}`,\n                      label: `${room_type}-${i}`,\n                      room_type,\n                      capacity,\n                      currentCount: 0\n                    });\n                  }\n                }\n              }\n            });\n          }\n        }\n      });\n    });\n\n    return roomOptions;\n  };\n\n  // 根據房型名稱推算容量\n  const getRoomCapacity = (room_type: string): number => {\n    if (room_type.includes('單人')) return 1;\n    if (room_type.includes('雙人')) return 2;\n    if (room_type.includes('三人')) return 3;\n    if (room_type.includes('四人')) return 4;\n    return 2; // 預設雙人房\n  };\n\n  // 初始化資料\n  useEffect(() => {\n    const rooms = generateRoomOptions();\n    setRoomOptions(rooms);\n    // 保留 members 中原有的 assignedRoom 數據\n    setMembersWithRooms(tourMembers.map(member => ({ ...member } as MemberWithRoom)));\n  }, [tour.id, paymentRequests, tourMembers]);\n\n  // 分配房間\n  const assignMemberToRoom = (member_id: string, roomValue: string) => {\n    setMembersWithRooms(prev =>\n      prev.map(member =>\n        member.id === member_id\n          ? { ...member, assignedRoom: roomValue || undefined }\n          : member\n      )\n    );\n\n    // 更新房間使用情況\n    updateRoomCounts();\n  };\n\n  // 更新房間使用人數\n  const updateRoomCounts = () => {\n    setRoomOptions(prev =>\n      prev.map(room => ({\n        ...room,\n        currentCount: membersWithRooms.filter(member => member.assignedRoom === room.value).length\n      }))\n    );\n  };\n\n  // 統計資料\n  const totalRooms = roomOptions.length;\n  const assignedCount = membersWithRooms.filter(member => member.assignedRoom).length;\n  const unassignedCount = membersWithRooms.length - assignedCount;\n  const totalCapacity = roomOptions.reduce((sum, room) => sum + room.capacity, 0);\n\n  // 檢查房間是否已滿\n  const isRoomFull = (roomValue: string) => {\n    const room = roomOptions.find(r => r.value === roomValue);\n    if (!room) return false;\n    const currentOccupancy = membersWithRooms.filter(m => m.assignedRoom === roomValue).length;\n    return currentOccupancy >= room.capacity;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 房間配額總覽 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n          <Home size={24} className=\"mx-auto mb-2 text-morandi-gold\" />\n          <div className=\"text-xl font-bold text-morandi-primary\">{totalRooms}</div>\n          <div className=\"text-sm text-morandi-secondary\">總房間數</div>\n        </div>\n\n        <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n          <Bed size={24} className=\"mx-auto mb-2 text-morandi-primary\" />\n          <div className=\"text-xl font-bold text-morandi-primary\">{totalCapacity}</div>\n          <div className=\"text-sm text-morandi-secondary\">總床位數</div>\n        </div>\n\n        <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n          <Users size={24} className=\"mx-auto mb-2 text-morandi-green\" />\n          <div className=\"text-xl font-bold text-morandi-primary\">{assignedCount}</div>\n          <div className=\"text-sm text-morandi-secondary\">已分房</div>\n        </div>\n\n        <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n          <AlertTriangle size={24} className=\"mx-auto mb-2 text-morandi-red\" />\n          <div className=\"text-xl font-bold text-morandi-primary\">{unassignedCount}</div>\n          <div className=\"text-sm text-morandi-secondary\">未分房</div>\n        </div>\n      </div>\n\n      {/* 團員分房表格 */}\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"w-full overflow-x-auto\">\n          <table className=\"w-full text-sm border-collapse\">\n            <thead className=\"bg-morandi-container/30\">\n              <tr>\n                <th className=\"w-[40px] py-3 px-4 text-left text-xs font-medium text-morandi-secondary border border-gray-300\">序號</th>\n                <th className=\"min-w-[80px] py-3 px-4 text-left text-xs font-medium text-morandi-secondary border border-gray-300\">姓名</th>\n                <th className=\"min-w-[80px] py-3 px-4 text-left text-xs font-medium text-morandi-secondary border border-gray-300\">性別</th>\n                <th className=\"min-w-[60px] py-3 px-4 text-left text-xs font-medium text-morandi-secondary border border-gray-300\">年齡</th>\n                <th className=\"min-w-[120px] py-3 px-4 text-left text-xs font-medium text-morandi-secondary border border-gray-300\">分房</th>\n                <th className=\"min-w-[80px] py-3 px-4 text-left text-xs font-medium text-morandi-secondary border border-gray-300\">狀態</th>\n              </tr>\n            </thead>\n            <tbody>\n              {membersWithRooms.map((member, index) => {\n                const assignedRoom = member.assignedRoom;\n                const roomIsFull = assignedRoom && isRoomFull(assignedRoom);\n\n                return (\n                  <tr key={member.id} className=\"hover:bg-morandi-container/10\">\n                    <td className=\"py-3 px-4 text-center border border-gray-300\">\n                      {index + 1}\n                    </td>\n                    <td className=\"py-3 px-4 font-medium text-morandi-primary border border-gray-300\">\n                      {member.name}\n                    </td>\n                    <td className=\"py-3 px-4 text-morandi-secondary border border-gray-300\">\n                      {member.gender === 'M' ? '男' : member.gender === 'F' ? '女' : '-'}\n                    </td>\n                    <td className=\"py-3 px-4 text-morandi-secondary border border-gray-300\">\n                      {member.age > 0 ? `${member.age}歲` : '-'}\n                    </td>\n                    <td className=\"py-3 px-4 border border-gray-300\">\n                      <Select\n                        value={member.assignedRoom || ''}\n                        onValueChange={(value) => assignMemberToRoom(member.id, value)}\n                      >\n                        <SelectTrigger className=\"w-full h-8\">\n                          <SelectValue placeholder=\"選擇房間\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"\">未分配</SelectItem>\n                          {roomOptions.map(room => {\n                            const isFull = isRoomFull(room.value);\n                            const isCurrentRoom = member.assignedRoom === room.value;\n\n                            return (\n                              <SelectItem\n                                key={room.value}\n                                value={room.value}\n                                disabled={isFull && !isCurrentRoom}\n                                className={cn(\n                                  isFull && !isCurrentRoom && \"text-gray-400\"\n                                )}\n                              >\n                                {room.label} ({room.currentCount}/{room.capacity})\n                                {isFull && !isCurrentRoom && \" - 已滿\"}\n                              </SelectItem>\n                            );\n                          })}\n                        </SelectContent>\n                      </Select>\n                    </td>\n                    <td className=\"py-3 px-4 border border-gray-300\">\n                      {assignedRoom ? (\n                        <span className={cn(\n                          \"inline-flex items-center px-2 py-1 rounded text-xs font-medium\",\n                          roomIsFull\n                            ? \"bg-morandi-red text-white\"\n                            : \"bg-morandi-green text-white\"\n                        )}>\n                          {roomIsFull ? \"已滿房\" : \"已分房\"}\n                        </span>\n                      ) : (\n                        <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-morandi-container text-morandi-secondary\">\n                          未分房\n                        </span>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n\n              {membersWithRooms.length === 0 && (\n                <tr>\n                  <td colSpan={6} className=\"py-12 text-center text-morandi-secondary\">\n                    <Users size={32} className=\"mx-auto mb-4 opacity-50\" />\n                    <p>尚無團員資料</p>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* 房間使用狀況 */}\n      {roomOptions.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">房間使用狀況</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {roomOptions.map(room => {\n              const occupants = membersWithRooms.filter(m => m.assignedRoom === room.value);\n              const isFull = occupants.length >= room.capacity;\n\n              return (\n                <div key={room.value} className={cn(\n                  \"bg-card border rounded-lg p-4\",\n                  isFull ? \"border-morandi-red\" : \"border-border\"\n                )}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-morandi-primary\">{room.label}</h4>\n                    <span className={cn(\n                      \"text-xs px-2 py-1 rounded\",\n                      isFull\n                        ? \"bg-morandi-red text-white\"\n                        : \"bg-morandi-container text-morandi-secondary\"\n                    )}>\n                      {occupants.length}/{room.capacity}\n                    </span>\n                  </div>\n\n                  <div className=\"space-y-1\">\n                    {occupants.map(member => (\n                      <div key={member.id} className=\"text-sm text-morandi-primary\">\n                        • {member.name}\n                      </div>\n                    ))}\n\n                    {occupants.length === 0 && (\n                      <div className=\"text-sm text-morandi-secondary\">空房</div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {roomOptions.length === 0 && (\n        <div className=\"text-center py-12 text-morandi-secondary\">\n          <Bed size={24} className=\"mx-auto mb-4 opacity-50\" />\n          <p>尚未找到住宿配額</p>\n          <p className=\"text-sm mt-2\">請檢查該旅遊團是否有住宿相關的請款單</p>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-add-ons.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1595,1598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1595,1598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5347,5350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5347,5350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Tour } from '@/stores/types';\nimport { useTourAddOnStore } from '@/stores';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Plus, Trash2, ShoppingCart } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface TourAddOnsProps {\n  tour: Tour;\n  triggerAdd?: boolean;\n  onTriggerAddComplete?: () => void;\n}\n\nexport const TourAddOns = React.memo(function TourAddOns({ tour, triggerAdd, onTriggerAddComplete }: TourAddOnsProps) {\n  const { items: tour_add_ons, create: addTourAddOn, update: updateTourAddOn, delete: deleteTourAddOn } = useTourAddOnStore();\n  const [isAddingNew, setIsAddingNew] = useState(false);\n  const [newAddOn, setNewAddOn] = useState({\n    name: '',\n    price: 0,\n    description: ''\n  });\n\n  // 監聽外部觸發新增\n  React.useEffect(() => {\n    if (triggerAdd) {\n      setIsAddingNew(true);\n      onTriggerAddComplete?.();\n    }\n  }, [triggerAdd, onTriggerAddComplete]);\n\n  // 獲取此旅遊團的加購項目\n  const addOns = tour_add_ons.filter((addOn: any) => addOn.tour_id === tour.id);\n\n  const handleAddNew = () => {\n    if (!newAddOn.name.trim()) return;\n\n    addTourAddOn({\n      tour_id: tour.id,\n      name: newAddOn.name,\n      price: newAddOn.price,\n      description: newAddOn.description,\n      is_active: true,\n    });\n\n    setNewAddOn({ name: '', price: 0, description: '' });\n    setIsAddingNew(false);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteTourAddOn(id);\n  };\n\n  const toggleActive = (id: string) => {\n    const addOn = addOns.find((item: any) => item.id === id);\n    if (addOn) {\n      updateTourAddOn(id, { is_active: !addOn.is_active });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n\n      {/* 加購項目列表 */}\n      <div className=\"border border-border rounded-lg overflow-hidden\">\n        {addOns.length === 0 && !isAddingNew ? (\n          <div className=\"text-center py-12 text-morandi-secondary\">\n            <ShoppingCart size={24} className=\"mx-auto mb-4 opacity-50\" />\n            <p>尚未設定任何加購項目</p>\n            <p className=\"text-sm mt-1\">點擊「新增加購項目」開始建立</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-morandi-container/30\">\n                <tr>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">項目名稱</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">價格</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">說明</th>\n                  <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary\">狀態</th>\n                  <th className=\"text-center py-3 px-4 text-sm font-medium text-morandi-secondary\">操作</th>\n                </tr>\n              </thead>\n              <tbody>\n                {/* 新增表單行 */}\n                {isAddingNew && (\n                  <tr className=\"border-b border-border bg-morandi-gold/10\">\n                    <td className=\"py-3 px-4\">\n                      <Input\n                        value={newAddOn.name}\n                        onChange={(e) => setNewAddOn({...newAddOn, name: e.target.value})}\n                        placeholder=\"項目名稱\"\n                        className=\"h-8\"\n                        autoFocus\n                      />\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <Input\n                        type=\"number\"\n                        value={newAddOn.price}\n                        onChange={(e) => setNewAddOn({...newAddOn, price: Number(e.target.value)})}\n                        placeholder=\"價格\"\n                        className=\"h-8\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <Input\n                        value={newAddOn.description}\n                        onChange={(e) => setNewAddOn({...newAddOn, description: e.target.value})}\n                        placeholder=\"說明（選填）\"\n                        className=\"h-8\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <span className=\"text-morandi-green text-sm\">啟用</span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex justify-center space-x-2\">\n                        <Button\n                          onClick={handleAddNew}\n                          size=\"sm\"\n                          className=\"bg-morandi-green hover:bg-morandi-green-hover text-white\"\n                        >\n                          確定\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            setIsAddingNew(false);\n                            setNewAddOn({ name: '', price: 0, description: '' });\n                          }}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                        >\n                          取消\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n\n                {/* 現有項目列表 */}\n                {addOns.map((addOn: any) => (\n                  <tr key={addOn.id} className=\"border-b border-border\">\n                    <td className=\"py-3 px-4 font-medium text-morandi-primary\">\n                      {addOn.name}\n                    </td>\n                    <td className=\"py-3 px-4 text-morandi-primary\">\n                      NT$ {addOn.price.toLocaleString()}\n                    </td>\n                    <td className=\"py-3 px-4 text-morandi-secondary text-sm\">\n                      {addOn.description || '無'}\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <button\n                        onClick={() => toggleActive(addOn.id)}\n                        className={cn(\n                          'px-2 py-1 rounded text-xs font-medium cursor-pointer',\n                          addOn.is_active\n                            ? 'bg-morandi-green text-white'\n                            : 'bg-morandi-container text-morandi-secondary'\n                        )}\n                      >\n                        {addOn.is_active ? '啟用' : '停用'}\n                      </button>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex justify-center\">\n                        <Button\n                          onClick={() => handleDelete(addOn.id)}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-morandi-red hover:text-morandi-red hover:bg-morandi-red/10\"\n                        >\n                          <Trash2 size={14} />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* 使用說明 */}\n      <div className=\"bg-morandi-container/20 p-4 rounded-lg\">\n        <h4 className=\"text-sm font-medium text-morandi-primary mb-2\">使用說明</h4>\n        <ul className=\"text-xs text-morandi-secondary space-y-1\">\n          <li>• 加購項目可供團員在訂單中選擇購買</li>\n          <li>• 停用的項目不會顯示給團員選擇，但已購買的仍然有效</li>\n          <li>• 價格修改不會影響已建立的訂單</li>\n          <li>• 建議在團組確定前完成所有加購項目設定</li>\n        </ul>\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-costs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[779,782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[779,782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[861,864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[861,864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tourCosts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2186,2189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2186,2189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5372,5375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5372,5375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7258,7261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7258,7261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7350,7353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7350,7353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8780,8783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8780,8783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tour } from '@/stores/types';\nimport { useOrderStore } from '@/stores';\n// TODO: usePaymentStore deprecated\nimport { Receipt, Calendar, FileText, Plus, Truck, Hotel, Utensils, MapPin } from 'lucide-react';\n\ninterface TourCostsProps {\n  tour: Tour;\n  orderFilter?: string; // 選填：只顯示特定訂單相關的成本\n}\n\nexport const TourCosts = React.memo(function TourCosts({ tour, orderFilter }: TourCostsProps) {\n  const { items: orders } = useOrderStore();\n  const payments: any[] = []; // TODO: usePaymentStore deprecated\n  const addPayment = async (data: any) => { console.warn(\"addPayment not implemented\"); };\n// TODO: usePaymentStore deprecated -   const { items: payments, create: addPayment } = usePaymentStore();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newCost, setNewCost] = useState({\n    amount: 0,\n    description: '',\n    category: 'transport',\n    status: '待確認' as const,\n    vendor: ''\n  });\n\n  const tourCosts = payments.filter(payment => {\n    if (payment.type !== '請款') return false;\n\n    if (orderFilter) {\n      return payment.order_id === orderFilter;\n    }\n\n    return payment.tour_id === tour.id;\n  });\n\n  const handleAddCost = () => {\n    if (!newCost.amount || !newCost.description) return;\n\n    addPayment({\n      type: '請款',\n      tour_id: tour.id,\n      ...newCost\n    });\n\n    setNewCost({\n      amount: 0,\n      description: '',\n      category: 'transport',\n      status: '待確認',\n      vendor: ''\n    });\n    setIsAddDialogOpen(false);\n  };\n\n  // 獲取屬於這個旅遊團的所有訂單\n  const tourOrders = orders.filter(order => order.tour_id === tour.id);\n\n  // 獲取所有相關的成本支出記錄\n  const costPayments = payments.filter(payment =>\n    payment.type === '請款' &&\n    (payment.tour_id === tour.id ||\n     tourOrders.some(order => order.id === payment.order_id))\n  );\n\n  const getCategoryIcon = (category: string) => {\n    const icons: Record<string, any> = {\n      'transport': Truck,\n      'accommodation': Hotel,\n      'food': Utensils,\n      'attraction': MapPin,\n      '交通': Truck,\n      '住宿': Hotel,\n      '餐食': Utensils,\n      '景點': MapPin\n    };\n    return icons[category] || Receipt;\n  };\n\n  const getCategoryDisplayName = (category: string) => {\n    const names: Record<string, string> = {\n      'transport': '交通',\n      'accommodation': '住宿',\n      'food': '餐食',\n      'attraction': '景點',\n      'other': '其他'\n    };\n    return names[category] || category;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, string> = {\n      '已確認': 'bg-morandi-green text-white',\n      '待確認': 'bg-morandi-gold text-white',\n      '已付款': 'bg-morandi-container text-morandi-secondary'\n    };\n    return badges[status] || 'bg-morandi-container text-morandi-secondary';\n  };\n\n  const getReceiptBadge = (receipt: string) => {\n    return receipt === '已上傳'\n      ? 'bg-morandi-green text-white'\n      : 'bg-morandi-red text-white';\n  };\n\n  const totalCosts = costPayments.reduce((sum, cost) => sum + cost.amount, 0);\n  const confirmedCosts = costPayments.filter(cost => cost.status === '已確認').reduce((sum, cost) => sum + cost.amount, 0);\n  const pendingCosts = costPayments.filter(cost => cost.status === '待確認').reduce((sum, cost) => sum + cost.amount, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 成本統計 */}\n      <ContentContainer>\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">成本概況</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">\n              NT$ {totalCosts.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">總成本</div>\n          </div>\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-green\">\n              NT$ {confirmedCosts.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">已確認</div>\n          </div>\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-gold\">\n              NT$ {pendingCosts.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">待確認</div>\n          </div>\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-red\">\n              NT$ {Math.max(0, tour.total_revenue - totalCosts).toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">預估利潤</div>\n          </div>\n        </div>\n      </ContentContainer>\n\n      {/* 分類統計 */}\n      <ContentContainer>\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">成本分類</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-4\">\n          {['transport', 'accommodation', 'food', 'attraction', 'other'].map((category) => {\n            const categoryTotal = costPayments\n              .filter(cost => (cost as any).category === category)\n              .reduce((sum, cost) => sum + cost.amount, 0);\n            const Icon = getCategoryIcon(category);\n            const displayName = getCategoryDisplayName(category);\n\n            return (\n              <div key={category} className=\"bg-card border border-border p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Icon size={20} className=\"text-morandi-gold\" />\n                  <div className=\"text-lg font-bold text-morandi-primary\">\n                    NT$ {categoryTotal.toLocaleString()}\n                  </div>\n                </div>\n                <div className=\"text-sm text-morandi-secondary\">{displayName}</div>\n              </div>\n            );\n          })}\n        </div>\n      </ContentContainer>\n\n      {/* 新增支出按鈕 - 右上角 */}\n      <div className=\"flex justify-end mb-6\">\n        <Button\n          onClick={() => setIsAddDialogOpen(true)}\n          className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n        >\n          <Plus size={16} className=\"mr-2\" />\n          新增支出\n        </Button>\n      </div>\n\n      {/* 成本列表 */}\n      <ContentContainer>\n        <div className=\"space-y-4\">\n          {/* 表格標頭 */}\n          <div className=\"grid grid-cols-12 gap-4 p-4 bg-morandi-container rounded-lg text-sm font-medium text-morandi-secondary\">\n            <div className=\"col-span-2\">日期</div>\n            <div className=\"col-span-2\">金額</div>\n            <div className=\"col-span-2\">類別</div>\n            <div className=\"col-span-2\">說明</div>\n            <div className=\"col-span-2\">供應商</div>\n            <div className=\"col-span-1\">收據</div>\n            <div className=\"col-span-1\">狀態</div>\n          </div>\n\n          {/* 成本項目 */}\n          <div className=\"space-y-2\">\n            {costPayments.map((cost) => {\n              const Icon = getCategoryIcon((cost as any).category || '');\n              const displayCategory = getCategoryDisplayName((cost as any).category || '');\n              const relatedOrder = tourOrders.find(order => order.id === cost.order_id);\n\n              return (\n                <div key={cost.id} className=\"grid grid-cols-12 gap-4 p-4 bg-card border border-border rounded-lg\">\n                  <div className=\"col-span-2\">\n                    <div className=\"flex items-center text-sm text-morandi-primary\">\n                      <Calendar size={14} className=\"mr-1\" />\n                      {new Date(cost.created_at).toLocaleDateString()}\n                    </div>\n                  </div>\n\n                  <div className=\"col-span-2\">\n                    <div className=\"font-medium text-morandi-red\">\n                      NT$ {cost.amount.toLocaleString()}\n                    </div>\n                  </div>\n\n                  <div className=\"col-span-2\">\n                    <div className=\"flex items-center text-sm text-morandi-primary\">\n                      <Icon size={14} className=\"mr-1\" />\n                      {displayCategory}\n                    </div>\n                  </div>\n\n                  <div className=\"col-span-2\">\n                    <div className=\"text-sm text-morandi-primary\">\n                      {cost.description}\n                    </div>\n                  </div>\n\n                  <div className=\"col-span-2\">\n                    <div className=\"text-sm text-morandi-primary\">\n                      {(cost as any).vendor || relatedOrder?.order_number || '-'}\n                    </div>\n                  </div>\n\n                  <div className=\"col-span-1\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getReceiptBadge('待上傳')}`}>\n                      待上傳\n                    </span>\n                  </div>\n\n                  <div className=\"col-span-1\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(cost.status)}`}>\n                      {cost.status}\n                    </span>\n                  </div>\n                </div>\n              );\n            })}\n\n            {costPayments.length === 0 && (\n              <div className=\"text-center py-12 text-morandi-secondary\">\n                <Receipt size={24} className=\"mx-auto mb-4 opacity-50\" />\n                <p>尚無成本支出記錄</p>\n                <p className=\"text-sm mt-1\">點擊上方「新增支出」按鈕開始記錄成本</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </ContentContainer>\n\n      {/* 新增成本對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>新增成本支出</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">支出金額</label>\n              <Input\n                type=\"number\"\n                value={newCost.amount}\n                onChange={(e) => setNewCost(prev => ({ ...prev, amount: Number(e.target.value) }))}\n                placeholder=\"0\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">支出說明</label>\n              <Input\n                value={newCost.description}\n                onChange={(e) => setNewCost(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"例：機票費用\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">類別</label>\n              <select\n                value={newCost.category}\n                onChange={(e) => setNewCost(prev => ({ ...prev, category: e.target.value }))}\n                className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"transport\">交通</option>\n                <option value=\"accommodation\">住宿</option>\n                <option value=\"food\">餐食</option>\n                <option value=\"attraction\">景點</option>\n                <option value=\"other\">其他</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">供應商</label>\n              <Input\n                value={newCost.vendor}\n                onChange={(e) => setNewCost(prev => ({ ...prev, vendor: e.target.value }))}\n                placeholder=\"供應商名稱\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsAddDialogOpen(false)}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleAddCost}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-documents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tour' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2590,2593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2590,2593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { ContentContainer } from '@/components/layout/content-container';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tour } from '@/stores/types';\nimport { FileText, Upload, Download, Eye, CheckCircle, AlertCircle, Clock, Plus } from 'lucide-react';\n\ninterface TourDocumentsProps {\n  tour: Tour;\n  orderFilter?: string; // 選填：只顯示特定訂單的文件\n}\n\nexport function TourDocuments({ tour, orderFilter }: TourDocumentsProps) {\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [newDocument, setNewDocument] = useState({\n    name: '',\n    type: 'contract',\n    description: ''\n  });\n\n  // 模擬文件資料（實際使用時會從 store 取得）\n  const allMockDocuments = [\n    {\n      id: '1',\n      name: '旅遊合約書',\n      type: '合約',\n      status: '已簽署',\n      uploadDate: '2024-11-01',\n      size: '2.5 MB',\n      format: 'PDF',\n      description: '客戶已簽署完成',\n      signedBy: '王小明'\n    },\n    {\n      id: '2',\n      name: '行程表',\n      type: '行程',\n      status: '已確認',\n      uploadDate: '2024-11-05',\n      size: '1.2 MB',\n      format: 'PDF',\n      description: '詳細行程安排',\n      signedBy: ''\n    },\n    {\n      id: '3',\n      name: '保險單',\n      type: '保險',\n      status: '待確認',\n      uploadDate: '2024-11-10',\n      size: '800 KB',\n      format: 'PDF',\n      description: '旅遊保險證明',\n      signedBy: ''\n    },\n    {\n      id: '4',\n      name: '機票確認書',\n      type: '票務',\n      status: '已確認',\n      uploadDate: '2024-11-08',\n      size: '1.5 MB',\n      format: 'PDF',\n      description: '航班資訊確認',\n      signedBy: ''\n    },\n    {\n      id: '5',\n      name: '飯店確認書',\n      type: '住宿',\n      status: '已確認',\n      uploadDate: '2024-11-09',\n      size: '900 KB',\n      format: 'PDF',\n      description: '住宿預訂確認',\n      signedBy: ''\n    }\n  ];\n\n  // 根據 orderFilter 過濾文件（實際使用時會從 store 根據 order_id 過濾）\n  const mockDocuments = orderFilter\n    ? allMockDocuments.filter(doc => {\n        // 模擬：當有 orderFilter 時，只顯示部分文件\n        // 實際使用時會根據 doc.order_id === orderFilter 過濾\n        return doc.type === '合約' || doc.type === '行程表';\n      })\n    : allMockDocuments;\n\n  const handleUploadDocument = () => {\n    if (!newDocument.name) return;\n\n    // 這裡應該實作文件上傳邏輯\n    console.log('Uploading document:', newDocument);\n\n    setNewDocument({\n      name: '',\n      type: 'contract',\n      description: ''\n    });\n    setIsUploadDialogOpen(false);\n  };\n\n  const getStatusIcon = (status: string) => {\n    const icons: Record<string, any> = {\n      '已簽署': CheckCircle,\n      '已確認': CheckCircle,\n      '待確認': Clock,\n      '待簽署': AlertCircle\n    };\n    return icons[status] || Clock;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, string> = {\n      '已簽署': 'bg-morandi-green text-white',\n      '已確認': 'bg-morandi-green text-white',\n      '待確認': 'bg-morandi-gold text-white',\n      '待簽署': 'bg-morandi-red text-white'\n    };\n    return badges[status] || 'bg-morandi-container text-morandi-secondary';\n  };\n\n  const getTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      '合約': 'text-red-600',\n      '行程': 'text-blue-600',\n      '保險': 'text-green-600',\n      '票務': 'text-purple-600',\n      '住宿': 'text-orange-600'\n    };\n    return colors[type] || 'text-gray-600';\n  };\n\n  const documentsByType = mockDocuments.reduce((acc, doc) => {\n    if (!acc[doc.type]) acc[doc.type] = [];\n    acc[doc.type].push(doc);\n    return acc;\n  }, {} as Record<string, typeof mockDocuments>);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 文件統計 */}\n      <ContentContainer>\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">文件狀態概覽</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">\n              {mockDocuments.length}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">總文件數</div>\n          </div>\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-green\">\n              {mockDocuments.filter(doc => doc.status.includes('已')).length}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">已確認</div>\n          </div>\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-gold\">\n              {mockDocuments.filter(doc => doc.status.includes('待')).length}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">待處理</div>\n          </div>\n          <div className=\"bg-morandi-container p-4 rounded-lg\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">\n              {mockDocuments.filter(doc => doc.signedBy).length}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">已簽署</div>\n          </div>\n        </div>\n      </ContentContainer>\n\n      {/* 文件操作按鈕 - 右上角 */}\n      <div className=\"flex justify-end gap-2 mb-6\">\n        <Button variant=\"outline\">\n          <Download size={16} className=\"mr-2\" />\n          批量下載\n        </Button>\n        <Button\n          onClick={() => setIsUploadDialogOpen(true)}\n          className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n        >\n          <Plus size={16} className=\"mr-2\" />\n          上傳文件\n        </Button>\n      </div>\n\n      {/* 文件分類展示 */}\n      <div className=\"space-y-6\">\n        {Object.entries(documentsByType).map(([type, documents]) => (\n          <ContentContainer key={type}>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-medium text-morandi-primary flex items-center\">\n                <FileText size={20} className={`mr-2 ${getTypeColor(type)}`} />\n                {type}文件\n                <span className=\"ml-2 text-sm text-morandi-secondary\">\n                  ({documents.length} 個文件)\n                </span>\n              </h4>\n            </div>\n\n            <div className=\"space-y-2\">\n              {documents.map((doc) => {\n                const StatusIcon = getStatusIcon(doc.status);\n                return (\n                  <div key={doc.id} className=\"grid grid-cols-12 gap-4 p-4 bg-card border border-border rounded-lg hover:shadow-md transition-shadow\">\n                    <div className=\"col-span-3\">\n                      <div className=\"flex items-center\">\n                        <StatusIcon\n                          size={16}\n                          className={\n                            doc.status.includes('已') ? 'text-morandi-green' :\n                            doc.status.includes('待') ? 'text-morandi-gold' :\n                            'text-morandi-red'\n                          }\n                        />\n                        <div className=\"ml-2\">\n                          <div className=\"font-medium text-morandi-primary\">{doc.name}</div>\n                          <div className=\"text-xs text-morandi-secondary\">\n                            {doc.format} • {doc.size}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"col-span-3\">\n                      <div className=\"text-sm text-morandi-primary\">{doc.description}</div>\n                      {doc.signedBy && (\n                        <div className=\"text-xs text-morandi-secondary\">\n                          簽署人：{doc.signedBy}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"col-span-2\">\n                      <div className=\"text-sm text-morandi-primary\">{doc.uploadDate}</div>\n                    </div>\n\n                    <div className=\"col-span-2\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(doc.status)}`}>\n                        {doc.status}\n                      </span>\n                    </div>\n\n                    <div className=\"col-span-2\">\n                      <div className=\"flex gap-1\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye size={12} className=\"mr-1\" />\n                          預覽\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Download size={12} className=\"mr-1\" />\n                          下載\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </ContentContainer>\n        ))}\n      </div>\n\n      {/* 上傳文件對話框 */}\n      <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>上傳文件</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">文件名稱</label>\n              <Input\n                value={newDocument.name}\n                onChange={(e) => setNewDocument(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"輸入文件名稱\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">文件類型</label>\n              <select\n                value={newDocument.type}\n                onChange={(e) => setNewDocument(prev => ({ ...prev, type: e.target.value }))}\n                className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"contract\">合約</option>\n                <option value=\"itinerary\">行程</option>\n                <option value=\"insurance\">保險</option>\n                <option value=\"ticket\">票務</option>\n                <option value=\"accommodation\">住宿</option>\n                <option value=\"other\">其他</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">說明</label>\n              <Input\n                value={newDocument.description}\n                onChange={(e) => setNewDocument(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"文件說明\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary mb-2 block\">選擇檔案</label>\n              <div className=\"border-2 border-dashed border-morandi-container rounded-lg p-6 text-center\">\n                <Upload size={32} className=\"mx-auto mb-2 text-morandi-secondary\" />\n                <p className=\"text-sm text-morandi-secondary mb-2\">\n                  拖拽檔案到此處或點擊選擇\n                </p>\n                <Button variant=\"outline\" size=\"sm\">\n                  選擇檔案\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsUploadDialogOpen(false)}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleUploadDocument}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                上傳\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-members.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateIdNumber' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validatePassportNumber' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2432,2435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2432,2435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3956,3959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3956,3959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4665,4668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4665,4668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4709,4712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4709,4712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4761,4764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4761,4764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4813,4816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4813,4816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4886,4889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4886,4889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5517,5520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5517,5520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5561,5564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5561,5564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5613,5616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5613,5616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5665,5668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5665,5668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5734,5737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5734,5737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addMemberToOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":180,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":220,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'relatedOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":355,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":355,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { Tour } from '@/stores/types';\nimport { useOrderStore, useMemberStore } from '@/stores';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  getGenderFromIdNumber,\n  calculateAge,\n  validateIdNumber,\n  validatePassportNumber\n} from '@/lib/utils';\nimport { Plus, Trash2, GripVertical, Users } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface TourMembersProps {\n  tour: Tour;\n  orderFilter?: string; // 選填：只顯示特定訂單的團員\n}\n\ninterface EditingMember {\n  id?: string;\n  order_id: string;\n  name: string;\n  nameEn: string;\n  birthday: string;\n  passportNumber: string;\n  passportExpiry: string;\n  idNumber: string;\n  gender: string;\n  age: number;\n  isNew?: boolean;\n  order_number?: string;\n  contact_person?: string;\n  assignedRoom?: string;\n}\n\ninterface EditingCell {\n  rowIndex: number;\n  field: keyof EditingMember;\n}\n\nexport const TourMembers = React.memo(function TourMembers({ tour, orderFilter }: TourMembersProps) {\n  const { items: orders } = useOrderStore();\n  const { items: members, create: addMember, update: updateMember, delete: deleteMember } = useMemberStore();\n  const [tableMembers, setTableMembers] = useState<EditingMember[]>([]);\n  const [editingCell, setEditingCell] = useState<EditingCell | null>(null);\n  const [draggedRow, setDraggedRow] = useState<number | null>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // 獲取屬於這個旅遊團的所有訂單（如果有 orderFilter，則只取該訂單）\n  const tourOrders = useMemo(() => {\n    return orders.filter(order => {\n      if (orderFilter) {\n        return order.id === orderFilter;\n      }\n      return order.tour_id === tour.id;\n    });\n  }, [orders, tour.id, orderFilter]);\n\n  // 獲取所有團員，包含訂單信息\n  useEffect(() => {\n    const allTourMembers = members.filter(member =>\n      tourOrders.some(order => order.id === member.order_id)\n    ).map(member => {\n      const relatedOrder = tourOrders.find(order => order.id === member.order_id);\n      return {\n        ...member,\n        nameEn: member.name_en || '',\n        passportNumber: member.passport_number || '',\n        passportExpiry: member.passport_expiry || '',\n        idNumber: member.id_number || '',\n        order_number: relatedOrder?.order_number || '',\n        contact_person: relatedOrder?.contact_person || '',\n        assignedRoom: member.assigned_room\n      } as any;\n    });\n\n    setTableMembers(allTourMembers);\n  }, [members, tourOrders]);\n\n  const totalMembers = tableMembers.length;\n  const completedMembers = tableMembers.filter(member =>\n    member.name && member.idNumber\n  ).length;\n\n  // 點擊單元格開始編輯\n  const startCellEdit = (rowIndex: number, field: keyof EditingMember) => {\n    if (field === 'age' || field === 'order_number' || field === 'contact_person' || field === 'assignedRoom') return;\n\n    setEditingCell({ rowIndex, field });\n    setTimeout(() => {\n      inputRef.current?.focus();\n      inputRef.current?.select();\n    }, 0);\n  };\n\n  // 更新單元格值\n  const updateCellValue = (value: string) => {\n    if (!editingCell) return;\n\n    const { rowIndex, field } = editingCell;\n    const updatedMembers = [...tableMembers];\n    const member = { ...updatedMembers[rowIndex] };\n\n    if (field === 'idNumber') {\n      member.idNumber = value.toUpperCase();\n      // 只有當性別欄位為空時才自動填入\n      if (!member.gender) {\n        member.gender = getGenderFromIdNumber(value);\n      }\n    } else if (field === 'birthday') {\n      member.birthday = value;\n      member.age = calculateAge(value, tour.departure_date, tour.return_date);\n    } else if (field === 'gender') {\n      // 手動輸入性別，轉換成 M/F 格式\n      if (value === '男' || value.toLowerCase() === 'm' || value === '1') {\n        member.gender = 'M';\n      } else if (value === '女' || value.toLowerCase() === 'f' || value === '2') {\n        member.gender = 'F';\n      } else {\n        member.gender = '';\n      }\n    } else {\n      (member as any)[field] = value;\n    }\n\n    updatedMembers[rowIndex] = member;\n    setTableMembers(updatedMembers);\n\n    // 自動儲存\n    autoSaveMember(member, rowIndex);\n  };\n\n  // 自動儲存成員\n  const autoSaveMember = async (member: EditingMember, index: number) => {\n    if (member.isNew && member.name.trim()) {\n      const { isNew, order_number, contact_person, assignedRoom, ...memberData } = member;\n      const convertedData = {\n        ...memberData,\n        name_en: memberData.nameEn,\n        passport_number: memberData.passportNumber,\n        passport_expiry: memberData.passportExpiry,\n        id_number: memberData.idNumber,\n        assigned_room: assignedRoom\n      };\n      // 移除舊欄位\n      delete (convertedData as any).nameEn;\n      delete (convertedData as any).passportNumber;\n      delete (convertedData as any).passportExpiry;\n      delete (convertedData as any).idNumber;\n\n      const newMember = await addMember(convertedData as any);\n\n      const updatedMembers = [...tableMembers];\n      updatedMembers[index] = { ...member, id: newMember.id, isNew: false };\n      setTableMembers(updatedMembers);\n    } else if (member.id && !member.isNew) {\n      const { isNew, order_number, contact_person, assignedRoom, ...memberData } = member;\n      const convertedData = {\n        ...memberData,\n        name_en: memberData.nameEn,\n        passport_number: memberData.passportNumber,\n        passport_expiry: memberData.passportExpiry,\n        id_number: memberData.idNumber,\n        assigned_room: assignedRoom\n      };\n      // 移除舊欄位\n      delete (convertedData as any).nameEn;\n      delete (convertedData as any).passportNumber;\n      delete (convertedData as any).passportExpiry;\n      delete (convertedData as any).idNumber;\n\n      await updateMember(member.id, convertedData as any);\n    }\n  };\n\n  // 新增成員到指定訂單\n  const addMemberToOrder = (order_id: string) => {\n    const relatedOrder = tourOrders.find(order => order.id === order_id);\n    if (!relatedOrder) return;\n\n    const newMember: EditingMember = {\n      order_id,\n      name: '',\n      nameEn: '',\n      birthday: '',\n      passportNumber: '',\n      passportExpiry: '',\n      idNumber: '',\n      gender: '',\n      age: 0,\n      isNew: true,\n      order_number: relatedOrder.order_number,\n      contact_person: relatedOrder.contact_person\n    };\n    setTableMembers([...tableMembers, newMember]);\n  };\n\n  // 刪除成員\n  const deleteRow = (index: number) => {\n    const member = tableMembers[index];\n    if (member.id && !member.isNew) {\n      deleteMember(member.id);\n    }\n    const updatedMembers = tableMembers.filter((_, i) => i !== index);\n    setTableMembers(updatedMembers);\n  };\n\n  // 拖拽處理 - 重新實現更可靠的拖拽功能\n  const handleDragStart = (e: React.DragEvent, index: number) => {\n    console.log('=== DRAG START ===', index);\n    console.log('Member being dragged:', tableMembers[index]?.name);\n    setDraggedRow(index);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/plain', index.toString());\n  };\n\n  const handleDragOver = (e: React.DragEvent, index: number) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, dropIndex: number) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    console.log('=== DROP EVENT ===');\n    console.log('Drop at index:', dropIndex);\n    console.log('Dragged from index:', draggedRow);\n\n    if (draggedRow === null) {\n      console.log('No dragged row, aborting');\n      return;\n    }\n\n    if (draggedRow === dropIndex) {\n      console.log('Same position, aborting');\n      setDraggedRow(null);\n      return;\n    }\n\n    console.log('Before reorder:', tableMembers.map((m, i) => `${i}: ${m.name}`));\n\n    // 執行重排序\n    const newMembers = [...tableMembers];\n    const draggedMember = newMembers[draggedRow];\n\n    // 移除原位置的成員\n    newMembers.splice(draggedRow, 1);\n    // 插入到新位置\n    newMembers.splice(dropIndex, 0, draggedMember);\n\n    console.log('After reorder:', newMembers.map((m, i) => `${i}: ${m.name}`));\n\n    setTableMembers(newMembers);\n    setDraggedRow(null);\n  };\n\n  const handleDragEnd = () => {\n    console.log('=== DRAG END ===');\n    setDraggedRow(null);\n  };\n\n  const renderCell = (member: EditingMember, rowIndex: number, field: keyof EditingMember) => {\n    const isEditing = editingCell?.rowIndex === rowIndex && editingCell?.field === field;\n    const isAutoField = field === 'age' || field === 'order_number' || field === 'contact_person' || field === 'assignedRoom';\n    let value = member[field] as string;\n\n    // 格式化顯示值\n    if (field === 'gender') {\n      value = member.gender === 'M' ? '男' : member.gender === 'F' ? '女' : '';\n    } else if (field === 'age') {\n      value = member.age > 0 ? `${member.age}歲` : '';\n    } else if (field === 'assignedRoom') {\n      value = member.assignedRoom || '未分房';\n    }\n\n    if (isEditing) {\n      return (\n        <input\n          ref={inputRef}\n          value={field === 'age' ? '' :\n            field === 'gender' ? (member.gender === 'M' ? '男' : member.gender === 'F' ? '女' : '') :\n            member[field] as string}\n          onChange={(e) => updateCellValue(e.target.value)}\n          onBlur={() => setEditingCell(null)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' || e.key === 'Tab') {\n              e.preventDefault();\n              setEditingCell(null);\n            }\n            if (e.key === 'Escape') {\n              setEditingCell(null);\n            }\n          }}\n          type={field === 'birthday' || field === 'passportExpiry' ? 'date' : 'text'}\n          className=\"h-8 w-full border-none outline-none bg-transparent p-0 px-2 focus:ring-0 focus:border-none\"\n        />\n      );\n    }\n\n    return (\n      <div\n        className={cn(\n          \"h-8 px-2 py-1 flex items-center\",\n          isAutoField ? \"cursor-not-allowed text-gray-500\" : \"cursor-text\",\n          member[field] && !isAutoField && \"font-medium\"\n        )}\n        onClick={() => !isAutoField && startCellEdit(rowIndex, field)}\n      >\n        {value || ''}\n      </div>\n    );\n  };\n\n  if (tourOrders.length === 0) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-morandi-secondary\">此旅遊團尚無訂單</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n\n      {/* 統一團員表格 */}\n      <div className=\"overflow-hidden bg-card\">\n        <div className=\"w-full overflow-x-auto\">\n          <table className=\"w-full text-sm border-collapse min-w-[1200px] bg-white rounded-lg overflow-hidden shadow-sm\">\n            <thead className=\"bg-morandi-container/10 sticky top-0 border-b-2 border-morandi-gold/20\">\n              <tr>\n                <th className=\"w-[30px] py-2 px-1 text-xs font-medium text-morandi-secondary border border-gray-300\"></th>\n                <th className=\"w-[40px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">序號</th>\n                <th className=\"min-w-[80px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">姓名</th>\n                <th className=\"min-w-[100px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">英文姓名</th>\n                <th className=\"min-w-[100px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">生日</th>\n                <th className=\"min-w-[60px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">年齡</th>\n                <th className=\"min-w-[50px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">性別</th>\n                <th className=\"min-w-[120px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">身分證字號</th>\n                <th className=\"min-w-[100px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">護照號碼</th>\n                <th className=\"min-w-[100px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">護照效期</th>\n                <th className=\"min-w-[100px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">所屬訂單</th>\n                <th className=\"min-w-[80px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">聯絡人</th>\n                <th className=\"min-w-[100px] py-2 px-2 text-xs font-medium text-morandi-secondary border border-gray-300\">分房</th>\n                <th className=\"w-[40px] py-2 px-1 text-xs font-medium text-morandi-secondary border border-gray-300\">操作</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tableMembers.map((member, index) => {\n                const relatedOrder = tourOrders.find(order => order.id === member.order_id);\n                const orderIndex = tourOrders.findIndex(order => order.id === member.order_id);\n                const bgColor = orderIndex % 2 === 0 ? 'bg-white' : 'bg-blue-50/30';\n\n                return (\n                  <tr\n                    key={member.id || `row-${index}`}\n                    className={cn(\n                      bgColor,\n                      draggedRow === index && \"opacity-50\"\n                    )}\n                    draggable={true}\n                    onDragStart={(e) => handleDragStart(e, index)}\n                    onDragOver={(e) => handleDragOver(e, index)}\n                    onDrop={(e) => handleDrop(e, index)}\n                    onDragEnd={handleDragEnd}\n                  >\n                    {/* 拖拽把手 */}\n                    <td className=\"border border-gray-300 text-center py-1\">\n                      <GripVertical\n                        size={14}\n                        className=\"text-gray-400 cursor-grab active:cursor-grabbing mx-auto\"\n                      />\n                    </td>\n\n                    {/* 統一序號 */}\n                    <td className=\"border border-gray-300 text-center py-1\">\n                      <span className=\"text-morandi-secondary font-medium\">{index + 1}</span>\n                    </td>\n\n                    {/* 可編輯欄位 */}\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'name')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'nameEn')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'birthday')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'age')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'gender')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'idNumber')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'passportNumber')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'passportExpiry')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'order_number')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'contact_person')}</td>\n                    <td className=\"border border-gray-300\">{renderCell(member, index, 'assignedRoom')}</td>\n\n                    {/* 刪除按鈕 */}\n                    <td className=\"border border-gray-300 text-center py-1\">\n                      <Button\n                        onClick={() => deleteRow(index)}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6 p-0 hover:bg-red-100\"\n                      >\n                        <Trash2 size={12} className=\"text-red-500\" />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n\n              {tableMembers.length === 0 && (\n                <tr>\n                  <td colSpan={14} className=\"py-12 text-center text-morandi-secondary\">\n                    <Users size={24} className=\"mx-auto mb-4 opacity-50\" />\n                    <p>尚無團員資料</p>\n                    <p className=\"text-sm mt-1\">點擊上方按鈕新增團員到指定訂單</p>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"text-xs text-morandi-secondary px-2 py-1 space-y-1\">\n          <p>• 點擊任意單元格即可編輯，自動儲存</p>\n          <p>• 年齡和性別為自動計算欄位</p>\n          <p>• 可拖拽行首圖示調整順序</p>\n          <p>• 不同訂單用底色區分，方便識別</p>\n        </div>\n      </div>\n\n      {/* 統計區域 */}\n      <div className=\"bg-morandi-container/20 p-4\">\n        <div className={cn(\n          \"grid gap-4\",\n          orderFilter ? \"grid-cols-1 sm:grid-cols-3\" : \"grid-cols-1 sm:grid-cols-4\"\n        )}>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">{totalMembers}</div>\n            <div className=\"text-sm text-morandi-secondary\">{orderFilter ? '訂單成員數' : '總成員數'}</div>\n          </div>\n          {!orderFilter && (\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-morandi-primary\">{tourOrders.length}</div>\n              <div className=\"text-sm text-morandi-secondary\">訂單數</div>\n            </div>\n          )}\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">{completedMembers}</div>\n            <div className=\"text-sm text-morandi-secondary\">已完成資料</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">\n              {totalMembers > 0 ? Math.round((completedMembers / totalMembers) * 100) : 0}%\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">完成率</div>\n          </div>\n        </div>\n\n        {/* 按訂單分組的統計 - 只在整團視圖顯示 */}\n        {!orderFilter && tourOrders.length > 1 && (\n          <div className=\"mt-6\">\n            <h4 className=\"text-md font-medium text-morandi-primary mb-3\">各訂單成員數</h4>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n              {tourOrders.map(order => {\n                const orderMemberCount = tableMembers.filter(member => member.order_id === order.id).length;\n                return (\n                  <div key={order.id} className=\"bg-card border border-border p-3 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <div className=\"font-medium text-morandi-primary text-sm\">{order.order_number}</div>\n                        <div className=\"text-xs text-morandi-secondary\">{order.contact_person}</div>\n                      </div>\n                      <div className=\"text-lg font-bold text-morandi-primary\">{orderMemberCount}</div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-operations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateFormula' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getMemberContext' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1260,1263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1260,1263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsFormulaModeActive' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFormulaInputRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":63,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getRoomCapacityFromOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":78,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFieldClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":151,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7132,7135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7132,7135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7255,7258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7255,7258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7300,7303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7300,7303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7557,7560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7557,7560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":286,"column":28,"nodeType":"Identifier","endLine":286,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9779,9782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9779,9782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":298,"column":28,"nodeType":"Identifier","endLine":298,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":303,"column":28,"nodeType":"Identifier","endLine":303,"endColumn":39},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":308,"column":30,"nodeType":"Identifier","endLine":308,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'updateMember'. Either exclude it or remove the dependency array.","line":336,"column":6,"nodeType":"ArrayExpression","endLine":336,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [tableMembers]","fix":{"range":[11128,11156],"text":"[tableMembers]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":383,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12930,12933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12930,12933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { Tour } from '@/stores/types';\nimport { useOrderStore, useMemberStore, useTourAddOnStore, usePaymentRequestStore } from '@/stores';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Users, Eye } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { calculateFormula, getMemberContext, getFieldCoordinate } from '@/lib/formula-calculator';\nimport { ReactDataSheetWrapper, DataSheetColumn } from '@/components/shared/react-datasheet-wrapper';\n\ninterface TourOperationsProps {\n  tour: Tour;\n  orderFilter?: string; // 選填：只顯示特定訂單的團員\n  extraFields?: {\n    addOns: boolean;\n    refunds: boolean;\n    customFields: Array<{ id: string; name: string; }>;\n  };\n}\n\ninterface EditingMember {\n  id?: string;\n  order_id: string;\n  name: string;\n  nameEn: string;\n  birthday: string;\n  passportNumber: string;\n  passportExpiry: string;\n  idNumber: string;\n  gender: string;\n  age: number;\n  isNew?: boolean;\n  order_number?: string;\n  contact_person?: string;\n  assignedRoom?: string;\n  isChildNoBed?: boolean;\n  reservationCode?: string;\n  addOns?: string[];\n  refunds?: string[];\n  customFields?: Record<string, any>;\n}\n\ninterface RoomOption {\n  value: string;\n  label: string;\n  room_type: string;\n  capacity: number;\n  currentCount: number;\n}\n\nexport const TourOperations = React.memo(function TourOperations({ tour, orderFilter, extraFields }: TourOperationsProps) {\n  const { items: orders } = useOrderStore();\n  const { items: members, update: updateMember } = useMemberStore();\n  const { items: tourAddOns } = useTourAddOnStore();\n  const { items: paymentRequests } = usePaymentRequestStore();\n  const [tableMembers, setTableMembers] = useState<EditingMember[]>([]);\n  const [roomOptions, setRoomOptions] = useState<RoomOption[]>([]);\n\n  // Excel 式公式編輯狀態\n  const [isFormulaModeActive, setIsFormulaModeActive] = useState(false);\n  const [formulaInputRef, setFormulaInputRef] = useState<HTMLInputElement | null>(null);\n\n  // 欄位管理狀態\n  const [hiddenColumns, setHiddenColumns] = useState<string[]>([]);\n\n  // 根據房型名稱推算容量\n  const getRoomCapacity = (room_type: string): number => {\n    if (room_type.includes('單人')) return 1;\n    if (room_type.includes('雙人')) return 2;\n    if (room_type.includes('三人')) return 3;\n    if (room_type.includes('四人')) return 4;\n    return 2; // 預設雙人房\n  };\n\n  // 動態獲取房間容量\n  const getRoomCapacityFromOptions = (roomValue: string): number => {\n    const room = roomOptions.find(option => option.value === roomValue);\n    return room ? room.capacity : 0;\n  };\n\n  // 獲取所有可用房間的映射\n  const roomCapacity = roomOptions.reduce((acc, option) => {\n    acc[option.value] = option.capacity;\n    return acc;\n  }, {} as Record<string, number>);\n\n  // 分配房間\n  const assignMemberToRoom = (member_id: string, roomValue: string) => {\n    if (roomValue === 'no-bed') {\n      // 選擇「不佔床」，更新狀態但不分配房間\n      setTableMembers(prev =>\n        prev.map(member =>\n          member.id === member_id\n            ? { ...member, isChildNoBed: true, assignedRoom: undefined }\n            : member\n        )\n      );\n      updateMember(member_id, { is_child_no_bed: true, assigned_room: undefined });\n    } else if (roomValue.startsWith('no-bed-')) {\n      // 不佔床但選擇特定房間\n      const actualRoom = roomValue.replace('no-bed-', '');\n      setTableMembers(prev =>\n        prev.map(member =>\n          member.id === member_id\n            ? { ...member, isChildNoBed: true, assignedRoom: actualRoom }\n            : member\n        )\n      );\n      updateMember(member_id, { is_child_no_bed: true, assigned_room: actualRoom });\n    } else {\n      // 一般分房，檢查容量\n      if (roomValue && isRoomFull(roomValue, member_id)) {\n        alert('該房間已滿，無法分配！');\n        return;\n      }\n\n      setTableMembers(prev =>\n        prev.map(member =>\n          member.id === member_id\n            ? { ...member, assignedRoom: roomValue || undefined, isChildNoBed: false }\n            : member\n        )\n      );\n      updateMember(member_id, { assigned_room: roomValue || undefined, is_child_no_bed: false });\n    }\n  };\n\n  // 檢查房間是否已滿（不佔床的人不計入容量）\n  const isRoomFull = (roomValue: string, excludeMemberId?: string) => {\n    const capacity = roomCapacity[roomValue] || 0;\n    const currentOccupants = tableMembers.filter(member =>\n      member.assignedRoom === roomValue &&\n      member.id !== excludeMemberId &&\n      !member.isChildNoBed  // 不佔床的人不計入容量\n    );\n    return currentOccupants.length >= capacity;\n  };\n\n  // 獲取房間使用情況（分別統計佔床和不佔床）\n  const getRoomUsage = (roomValue: string) => {\n    const capacity = roomCapacity[roomValue] || 0;\n    const occupants = tableMembers.filter(member => member.assignedRoom === roomValue);\n    const bedCount = occupants.filter(member => !member.isChildNoBed).length; // 佔床人數\n    const noBedCount = occupants.filter(member => member.isChildNoBed).length; // 不佔床人數\n    return { bedCount, noBedCount, totalCount: occupants.length, capacity };\n  };\n\n  // 處理欄位點擊以插入公式引用\n  const handleFieldClick = (fieldName: string) => {\n    if (isFormulaModeActive && formulaInputRef) {\n      const customFields = extraFields?.customFields || [];\n      const coordinate = getFieldCoordinate(fieldName, customFields);\n      if (coordinate) {\n        const currentValue = formulaInputRef.value;\n        const cursorPosition = formulaInputRef.selectionStart || currentValue.length;\n        const newValue = currentValue.slice(0, cursorPosition) + coordinate + currentValue.slice(cursorPosition);\n\n        // 更新輸入框值\n        formulaInputRef.value = newValue;\n\n        // 觸發 change 事件\n        const event = new Event('input', { bubbles: true });\n        formulaInputRef.dispatchEvent(event);\n\n        // 設置游標位置\n        setTimeout(() => {\n          formulaInputRef.focus();\n          formulaInputRef.setSelectionRange(cursorPosition + coordinate.length, cursorPosition + coordinate.length);\n        }, 0);\n      }\n    }\n  };\n\n  // 獲取屬於這個旅遊團的所有訂單（如果有 orderFilter，則只取該訂單）\n  const tourOrders = orders.filter(order => {\n    if (orderFilter) {\n      return order.id === orderFilter;\n    }\n    return order.tour_id === tour.id;\n  });\n\n  // 初始化團員\n  useEffect(() => {\n    const tourOrdersFiltered = orders.filter(order => order.tour_id === tour.id);\n    const allTourMembers = members.filter(member =>\n      tourOrdersFiltered.some(order => order.id === member.order_id)\n    ).map(member => {\n      const relatedOrder = tourOrdersFiltered.find(order => order.id === member.order_id);\n      return {\n        ...member,\n        nameEn: member.name_en,\n        passportNumber: member.passport_number,\n        passportExpiry: member.passport_expiry,\n        idNumber: member.id_number,\n        order_number: relatedOrder?.order_number || '',\n        contact_person: relatedOrder?.contact_person || '',\n        // 保留現有的分房數據，不要覆蓋\n        assignedRoom: member.assigned_room,\n        isChildNoBed: member.is_child_no_bed\n      } as EditingMember;\n    });\n\n    setTableMembers(allTourMembers);\n  }, [members, orders, tour.id]);\n\n  // 單獨處理房間選項\n  useEffect(() => {\n    const tourPaymentRequests = paymentRequests.filter((request: any) => request.tour_id === tour.id);\n    const roomOptions: RoomOption[] = [];\n\n    tourPaymentRequests.forEach((request: any) => {\n      request.items.forEach((item: any) => {\n        if (item.category === '住宿' && item.description) {\n          // 解析房型和數量（例如：雙人房 x5, 三人房 x2）\n          const roomMatches = item.description.match(/(\\S+房)\\s*[x×]\\s*(\\d+)/g);\n          if (roomMatches) {\n            roomMatches.forEach((match: any) => {\n              const [, room_type, quantity] = match.match(/(\\S+房)\\s*[x×]\\s*(\\d+)/) || [];\n              if (room_type && quantity) {\n                const capacity = getRoomCapacity(room_type);\n                const roomCount = parseInt(quantity);\n\n                // 生成具體房間選項（如：雙人房-1、雙人房-2...）\n                for (let i = 1; i <= roomCount; i++) {\n                  roomOptions.push({\n                    value: `${room_type}-${i}`,\n                    label: `${room_type}-${i}`,\n                    room_type,\n                    capacity,\n                    currentCount: 0\n                  });\n                }\n              }\n            });\n          }\n        }\n      });\n    });\n\n    setRoomOptions(roomOptions);\n  }, [paymentRequests, tour.id]);\n\n  const totalMembers = tableMembers.length;\n  const completedMembers = tableMembers.filter(member =>\n    member.name && member.idNumber\n  ).length;\n\n\n  if (tourOrders.length === 0) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-morandi-secondary\">此旅遊團尚無訂單</p>\n        </div>\n      </div>\n    );\n  }\n\n  // 配置 DataSheet 欄位\n  const dataSheetColumns: DataSheetColumn[] = [\n    { key: 'index', label: '序號', width: 40, readOnly: true },\n    { key: 'name', label: '姓名', width: 80 },\n    { key: 'nameEn', label: '英文姓名', width: 100 },\n    { key: 'birthday', label: '生日', width: 100 },\n    { key: 'age', label: '年齡', width: 60, readOnly: true },\n    { key: 'gender', label: '性別', width: 50, readOnly: true },\n    { key: 'idNumber', label: '身分證字號', width: 120 },\n    { key: 'passportNumber', label: '護照號碼', width: 100 },\n    { key: 'passportExpiry', label: '護照效期', width: 100 },\n    { key: 'reservationCode', label: '訂位代號', width: 100 },\n    { key: 'assignedRoom', label: '分房', width: 120 },\n\n    // 動態欄位\n    ...(extraFields?.addOns ? [{ key: 'addOns', label: '加購項目', width: 100, readOnly: true }] : []),\n    ...(extraFields?.refunds ? [{ key: 'refunds', label: '退費項目', width: 100 }] : []),\n    ...(extraFields?.customFields?.map(field => ({\n      key: field.id,\n      label: field.name,\n      width: 100\n    })) || [])\n  ];\n\n  // 處理資料更新\n  const handleDataUpdate = useCallback((newData: any[]) => {\n    setTableMembers(newData);\n\n    // 更新到 store\n    newData.forEach(member => {\n      if (member.id) {\n        updateMember(member.id, member);\n      }\n    });\n  }, [updateMember]);\n\n  // 處理欄位隱藏\n  const handleColumnHide = useCallback((columnKey: string) => {\n    setHiddenColumns(prev => [...prev, columnKey]);\n  }, []);\n\n  // 處理欄位顯示\n  const handleColumnShow = useCallback((columnKey: string) => {\n    setHiddenColumns(prev => prev.filter(key => key !== columnKey));\n  }, []);\n\n  // 處理欄位刪除\n  const handleColumnDelete = useCallback((columnKey: string) => {\n    // 確認刪除\n    if (confirm('確定要刪除此欄位嗎？這將會刪除所有團員在此欄位的資料。')) {\n      // 從所有團員中移除此欄位的資料\n      const updatedMembers = tableMembers.map(member => {\n        if (member.customFields) {\n          const { [columnKey]: deleted, ...remainingFields } = member.customFields;\n          return {\n            ...member,\n            customFields: remainingFields\n          };\n        }\n        return member;\n      });\n\n      setTableMembers(updatedMembers);\n\n      // 更新到 store\n      updatedMembers.forEach(member => {\n        if (member.id) {\n          // customFields 不是 Member 型別的欄位，移除此更新\n          // updateMember(member.id, { customFields: member.customFields });\n        }\n      });\n\n      // 從隱藏列表中移除（如果存在）\n      setHiddenColumns(prev => prev.filter(key => key !== columnKey));\n    }\n  }, [tableMembers, updateMember]);\n\n  return (\n    <div>\n      {/* 隱藏欄位控制 */}\n      {hiddenColumns.length > 0 && (\n        <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n          <div className=\"text-sm text-gray-600 mb-2\">隱藏的欄位：</div>\n          <div className=\"flex flex-wrap gap-2\">\n            {hiddenColumns.map(columnKey => {\n              // 先找自定義欄位\n              let columnName = extraFields?.customFields?.find(f => f.id === columnKey)?.name;\n\n              // 如果不是自定義欄位，找系統欄位\n              if (!columnName) {\n                const systemColumn = dataSheetColumns.find(col => col.key === columnKey);\n                columnName = systemColumn?.label;\n              }\n\n              return columnName ? (\n                <button\n                  key={columnKey}\n                  onClick={() => handleColumnShow(columnKey)}\n                  className=\"inline-flex items-center gap-1 px-2 py-1 bg-white border border-gray-300 rounded text-xs\"\n                >\n                  <Eye size={12} />\n                  {columnName}\n                </button>\n              ) : null;\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* 使用 ReactDataSheet 替代原來的表格 */}\n      <div className=\"overflow-hidden bg-white rounded-lg shadow-sm\">\n        <ReactDataSheetWrapper\n          columns={dataSheetColumns}\n          data={tableMembers.map((member, index) => ({\n            ...member,\n            index: index + 1,\n            age: member.age > 0 ? `${member.age}歲` : '',\n            gender: member.gender === 'M' ? '男' : member.gender === 'F' ? '女' : '',\n            assignedRoom: member.isChildNoBed\n              ? `不佔床${member.assignedRoom ? ` - ${member.assignedRoom}` : ''}`\n              : (member.assignedRoom || '未分配')\n          }))}\n          tour_add_ons={tourAddOns.filter((a: any) => a.tour_id === tour.id)}\n          onDataUpdate={handleDataUpdate}\n          onColumnHide={handleColumnHide}\n          onColumnDelete={handleColumnDelete}\n          hiddenColumns={hiddenColumns}\n          orderFilter={orderFilter}\n          roomOptions={roomOptions}\n          onRoomAssign={assignMemberToRoom}\n          getRoomUsage={getRoomUsage}\n          isRoomFull={isRoomFull}\n          tour_id={tour.id}\n          className=\"min-h-[400px]\"\n        />\n      </div>\n\n      {/* 團務統計 */}\n      <div className=\"bg-morandi-container/20 p-4\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">{totalMembers}</div>\n            <div className=\"text-sm text-morandi-secondary\">總成員數</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">{completedMembers}</div>\n            <div className=\"text-sm text-morandi-secondary\">已完成資料</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">\n              {totalMembers > 0 ? Math.round((completedMembers / totalMembers) * 100) : 0}%\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">完成率</div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-orders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-overview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-payments.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":24,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1008,1011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1008,1011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8268,8271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8268,8271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8369,8372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8369,8372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12118,12121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12118,12121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Tour } from '@/stores/types';\nimport { useOrderStore } from '@/stores';\n// TODO: usePaymentStore deprecated\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { DollarSign, Calendar, TrendingUp, TrendingDown, CreditCard, Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface TourPaymentsProps {\n  tour: Tour;\n  orderFilter?: string; // 選填：只顯示特定訂單的收款記錄\n  triggerAdd?: boolean;\n  onTriggerAddComplete?: () => void;\n}\n\nexport const TourPayments = React.memo(function TourPayments({ tour, orderFilter, triggerAdd, onTriggerAddComplete }: TourPaymentsProps) {\n  const { items: orders } = useOrderStore();\n  const payments: any[] = []; // TODO: usePaymentStore deprecated\n  const addPayment = async (data: any) => { console.warn(\"addPayment not implemented\"); };\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  // 監聽外部觸發新增\n  React.useEffect(() => {\n    if (triggerAdd) {\n      setIsAddDialogOpen(true);\n      onTriggerAddComplete?.();\n    }\n  }, [triggerAdd, onTriggerAddComplete]);\n  const [selectedOrderId, setSelectedOrderId] = useState<string>('');\n  const [newPayment, setNewPayment] = useState({\n    amount: 0,\n    description: '',\n    method: 'bank_transfer',\n    status: '已確認' as const\n  });\n\n  // 獲取屬於這個旅遊團的所有訂單（如果有 orderFilter，則只取該訂單）\n  const tourOrders = orders.filter(order => {\n    if (orderFilter) {\n      return order.id === orderFilter;\n    }\n    return order.tour_id === tour.id;\n  });\n\n  // 獲取所有相關的收款記錄（根據 orderFilter 過濾）\n  const tourPayments = payments.filter(payment => {\n    if (payment.type !== '收款') return false;\n\n    if (orderFilter) {\n      return payment.order_id === orderFilter;\n    }\n\n    return payment.tour_id === tour.id ||\n           tourOrders.some(order => order.id === payment.order_id);\n  });\n\n  const handleAddPayment = () => {\n    if (!newPayment.amount || !newPayment.description) return;\n\n    addPayment({\n      type: '收款',\n      tour_id: tour.id,\n      order_id: selectedOrderId || undefined,\n      ...newPayment\n    });\n\n    setNewPayment({\n      amount: 0,\n      description: '',\n      method: 'bank_transfer',\n      status: '已確認'\n    });\n    setSelectedOrderId('');\n    setIsAddDialogOpen(false);\n  };\n\n  // 統計數據計算\n  const confirmedPayments = tourPayments.filter(p => p.status === '已確認');\n  const pendingPayments = tourPayments.filter(p => p.status === '待確認');\n  const totalConfirmed = confirmedPayments.reduce((sum, p) => sum + p.amount, 0);\n  const totalPending = pendingPayments.reduce((sum, p) => sum + p.amount, 0);\n  const totalPayments = totalConfirmed + totalPending;\n\n  // 計算應收金額 (基於訂單)\n  const totalOrderAmount = tourOrders.reduce((sum, order) => sum + order.total_amount, 0);\n  const remaining_amount = Math.max(0, totalOrderAmount - totalConfirmed);\n\n  const getStatusBadge = (status: string) => {\n    const badges: Record<string, string> = {\n      '已確認': 'bg-morandi-green text-white',\n      '待確認': 'bg-morandi-gold text-white',\n      '已完成': 'bg-morandi-container text-morandi-primary'\n    };\n    return badges[status] || 'bg-morandi-container text-morandi-secondary';\n  };\n\n  const getMethodBadge = (method: string) => {\n    const badges: Record<string, string> = {\n      'bank_transfer': 'bg-blue-100 text-blue-800',\n      'credit_card': 'bg-purple-100 text-purple-800',\n      'cash': 'bg-green-100 text-green-800',\n      'check': 'bg-yellow-100 text-yellow-800'\n    };\n    return badges[method] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getMethodDisplayName = (method: string) => {\n    const names: Record<string, string> = {\n      'bank_transfer': '銀行轉帳',\n      'credit_card': '信用卡',\n      'cash': '現金',\n      'check': '支票'\n    };\n    return names[method] || method;\n  };\n\n  const getPaymentTypeIcon = (type: string) => {\n    if (type === '收款') return <TrendingUp size={16} className=\"text-morandi-green\" />;\n    if (type === '請款') return <TrendingDown size={16} className=\"text-morandi-red\" />;\n    return <CreditCard size={16} className=\"text-morandi-gold\" />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 收款統計 */}\n      <div className=\"bg-morandi-container/20 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">收款概況</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-green\">\n              NT$ {totalConfirmed.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">已收款</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-gold\">\n              NT$ {totalPending.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">待確認</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-primary\">\n              NT$ {totalPayments.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">總收款</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-morandi-red\">\n              NT$ {remaining_amount.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-morandi-secondary\">待收款</div>\n          </div>\n        </div>\n      </div>\n\n\n      {/* 收款紀錄表格 */}\n      <div className=\"border border-border rounded-lg overflow-hidden bg-card\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-morandi-container/30\">\n              <tr>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">日期</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">類型</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">金額</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">說明</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">付款方式</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">訂單</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-morandi-secondary\">狀態</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tourPayments.length > 0 ? (\n                tourPayments.map((payment) => {\n                  const relatedOrder = tourOrders.find(order => order.id === payment.order_id);\n\n                  return (\n                    <tr key={payment.id} className=\"border-b border-border/30\">\n                      <td className=\"py-3 px-4 text-morandi-primary\">\n                        {new Date(payment.created_at).toLocaleDateString()}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getPaymentTypeIcon(payment.type)}\n                          <span className=\"text-morandi-primary\">{payment.type}</span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <span className={cn(\n                          \"font-medium\",\n                          payment.type === '收款' ? 'text-morandi-green' : 'text-morandi-red'\n                        )}>\n                          {payment.type === '收款' ? '+' : '-'} NT$ {payment.amount.toLocaleString()}\n                        </span>\n                      </td>\n                      <td className=\"py-3 px-4 text-morandi-primary\">\n                        {payment.description}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <span className={cn(\n                          'inline-flex items-center px-2 py-1 rounded text-xs font-medium',\n                          getMethodBadge((payment as any).method)\n                        )}>\n                          {getMethodDisplayName((payment as any).method)}\n                        </span>\n                      </td>\n                      <td className=\"py-3 px-4 text-morandi-primary\">\n                        {relatedOrder ? relatedOrder.order_number : '-'}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <span className={cn(\n                          'inline-flex items-center px-2 py-1 rounded text-xs font-medium',\n                          getStatusBadge(payment.status)\n                        )}>\n                          {payment.status}\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })\n              ) : (\n                <tr>\n                  <td colSpan={7} className=\"py-12 text-center text-morandi-secondary\">\n                    <DollarSign size={24} className=\"mx-auto mb-4 opacity-50\" />\n                    <p>尚無收款紀錄</p>\n                    <p className=\"text-sm mt-1\">點擊上方「新增收款」按鈕開始記錄收款</p>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* 新增收款對話框 */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>新增收款紀錄</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">關聯訂單 (選填)</label>\n              <select\n                value={selectedOrderId}\n                onChange={(e) => setSelectedOrderId(e.target.value)}\n                className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"\">- 不關聯特定訂單 -</option>\n                {tourOrders.map(order => (\n                  <option key={order.id} value={order.id}>\n                    {order.order_number} - {order.contact_person}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">收款金額</label>\n              <Input\n                type=\"number\"\n                value={newPayment.amount || ''}\n                onChange={(e) => setNewPayment(prev => ({ ...prev, amount: Number(e.target.value) }))}\n                placeholder=\"0\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">收款說明</label>\n              <Input\n                value={newPayment.description}\n                onChange={(e) => setNewPayment(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"例：王小明訂金\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">付款方式</label>\n              <select\n                value={newPayment.method}\n                onChange={(e) => setNewPayment(prev => ({ ...prev, method: e.target.value }))}\n                className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"bank_transfer\">銀行轉帳</option>\n                <option value=\"credit_card\">信用卡</option>\n                <option value=\"cash\">現金</option>\n                <option value=\"check\">支票</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">確認狀態</label>\n              <select\n                value={newPayment.status}\n                onChange={(e) => setNewPayment(prev => ({ ...prev, status: e.target.value as any }))}\n                className=\"mt-1 w-full p-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"已確認\">已確認</option>\n                <option value=\"待確認\">待確認</option>\n              </select>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsAddDialogOpen(false)}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleAddPayment}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                新增\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n});","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-refunds.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-tabs-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/tours/tour-task-assignment.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getTemplatesByCategory' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateTodo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3186,3189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3186,3189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5988,5991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5988,5991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7034,7037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7034,7037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { StarRating } from '@/components/ui/star-rating';\nimport { EnhancedTable } from '@/components/ui/enhanced-table';\nimport { Tour, Todo } from '@/stores/types';\nimport { useTodoStore } from '@/stores';\nimport { taskTemplates, getTemplatesByCategory, calculateDeadlineFromDeparture } from '@/lib/task-templates';\nimport { cn } from '@/lib/utils';\nimport { Plus, Eye, Calendar, User, CheckCircle, Clock } from 'lucide-react';\n\ninterface TourTaskAssignmentProps {\n  tour: Tour;\n}\n\nconst employees = [\n  { id: '1', name: '張經理', role: '主管' },\n  { id: '2', name: '李助理', role: 'OP' },\n  { id: '3', name: '王財務', role: '財務' },\n  { id: '4', name: '陳業務', role: '業務' },\n];\n\nexport function TourTaskAssignment({ tour }: TourTaskAssignmentProps) {\n  const { items: todos, create: addTodo, update: updateTodo } = useTodoStore();\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [taskForm, setTaskForm] = useState({\n    title: '',\n    assignee: '',\n    deadline: '',\n    priority: 3 as 1 | 2 | 3 | 4 | 5,\n    sub_tasks: [''] as string[]\n  });\n\n  // 獲取與此旅遊團相關的任務\n  const tourTasks = todos.filter(todo =>\n    todo.related_items.some(item => item.type === 'group' && item.id === tour.id)\n  );\n\n  useEffect(() => {\n    // 根據出發日期設定預設期限\n    if (tour.departure_date) {\n      const defaultDeadline = calculateDeadlineFromDeparture(tour.departure_date, -7);\n      setTaskForm(prev => ({ ...prev, deadline: defaultDeadline }));\n    }\n  }, [tour.departure_date]);\n\n  const handleTemplateChange = (templateId: string) => {\n    setSelectedTemplate(templateId);\n\n    if (templateId && taskTemplates[templateId]) {\n      const template = taskTemplates[templateId];\n      const deadline = calculateDeadlineFromDeparture(tour.departure_date, template.defaultDeadlineDays);\n\n      setTaskForm({\n        title: template.title,\n        assignee: '',\n        deadline,\n        priority: template.defaultPriority,\n        sub_tasks: [...template.sub_tasks, ''] // 加一個空欄位供自訂\n      });\n    }\n  };\n\n  const handleSubTaskChange = (index: number, value: string) => {\n    const newSubTasks = [...taskForm.sub_tasks];\n    newSubTasks[index] = value;\n    setTaskForm(prev => ({ ...prev, sub_tasks: newSubTasks }));\n  };\n\n  const addSubTask = () => {\n    setTaskForm(prev => ({\n      ...prev,\n      sub_tasks: [...prev.sub_tasks, '']\n    }));\n  };\n\n  const removeSubTask = (index: number) => {\n    if (taskForm.sub_tasks.length > 1) {\n      const newSubTasks = taskForm.sub_tasks.filter((_, i) => i !== index);\n      setTaskForm(prev => ({ ...prev, sub_tasks: newSubTasks }));\n    }\n  };\n\n  const handleCreateTask = () => {\n    if (!taskForm.title.trim() || !taskForm.assignee) return;\n\n    const sub_tasks = taskForm.sub_tasks\n      .filter((task: string) => task.trim())\n      .map((task: string, index: number) => ({\n        id: `${Date.now()}-${index}`,\n        title: task.trim(),\n        done: false\n      }));\n\n    const newTodo: any = {\n      title: taskForm.title,\n      priority: taskForm.priority,\n      deadline: taskForm.deadline,\n      status: 'pending' as const,\n      creator: '1', // 當前用戶\n      assignee: taskForm.assignee,\n      visibility: ['1', taskForm.assignee],\n      related_items: [\n        {\n          type: 'group' as const,\n          id: tour.id,\n          title: tour.name\n        }\n      ],\n      sub_tasks,\n      notes: [\n        {\n          timestamp: new Date().toISOString(),\n          content: `從旅遊團「${tour.name}」指派的任務`\n        }\n      ]\n    };\n\n    addTodo(newTodo);\n\n    // 重置表單\n    setTaskForm({\n      title: '',\n      assignee: '',\n      deadline: calculateDeadlineFromDeparture(tour.departure_date, -7),\n      priority: 3,\n      sub_tasks: ['']\n    });\n    setSelectedTemplate('');\n  };\n\n  const getStatusLabel = (status: Todo['status']) => {\n    const statusMap = {\n      pending: '待辦',\n      in_progress: '進行中',\n      completed: '完成',\n      cancelled: '取消'\n    };\n    return statusMap[status];\n  };\n\n  const getStatusColor = (status: Todo['status']) => {\n    const colorMap = {\n      pending: 'text-morandi-muted',\n      in_progress: 'text-blue-600',\n      completed: 'text-green-600',\n      cancelled: 'text-morandi-red'\n    };\n    return colorMap[status];\n  };\n\n  const getEmployeeName = (employee_id: string) => {\n    return employees.find(emp => emp.id === employee_id)?.name || '未指派';\n  };\n\n  const getProgressInfo = (todo: Todo) => {\n    const completed = todo.sub_tasks.filter(task => task.done).length;\n    const total = todo.sub_tasks.length;\n    return { completed, total, percentage: total > 0 ? (completed / total) * 100 : 0 };\n  };\n\n  // 任務列表表格欄位\n  const taskColumns = [\n    {\n      key: 'title',\n      label: '任務標題',\n      sortable: true,\n      render: (value: string, todo: Todo) => (\n        <div className=\"flex items-center gap-2\">\n          <StarRating value={todo.priority} readonly size=\"sm\" />\n          <span className=\"font-medium text-morandi-primary\">{value}</span>\n        </div>\n      )\n    },\n    {\n      key: 'assignee',\n      label: '負責人',\n      render: (value: string) => (\n        <div className=\"flex items-center gap-2\">\n          <User size={14} className=\"text-morandi-secondary\" />\n          <span className=\"text-morandi-primary\">{getEmployeeName(value)}</span>\n        </div>\n      )\n    },\n    {\n      key: 'deadline',\n      label: '期限',\n      sortable: true,\n      render: (value: string) => (\n        <div className=\"flex items-center gap-2\">\n          <Calendar size={14} className=\"text-morandi-secondary\" />\n          <span className=\"text-sm text-morandi-primary\">\n            {value ? new Date(value).toLocaleDateString() : '未設定'}\n          </span>\n        </div>\n      )\n    },\n    {\n      key: 'progress',\n      label: '進度',\n      render: (value: any, todo: Todo) => {\n        const { completed, total, percentage } = getProgressInfo(todo);\n        return (\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-16 bg-morandi-container/30 rounded-full h-2\">\n              <div\n                className=\"bg-morandi-gold h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${percentage}%` }}\n              />\n            </div>\n            <span className=\"text-sm text-morandi-secondary\">\n              {completed}/{total}\n            </span>\n          </div>\n        );\n      }\n    },\n    {\n      key: 'status',\n      label: '狀態',\n      render: (value: Todo['status']) => (\n        <span className={cn('inline-flex items-center gap-1 text-sm font-medium', getStatusColor(value))}>\n          {value === 'completed' && <CheckCircle size={14} />}\n          {value === 'in_progress' && <Clock size={14} />}\n          {getStatusLabel(value)}\n        </span>\n      )\n    },\n    {\n      key: 'actions',\n      label: '操作',\n      render: (value: any, todo: Todo) => (\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => {\n            // 這裡可以實現跳轉到待辦事項詳細頁面\n            window.location.href = `/todos?expand=${todo.id}`;\n          }}\n        >\n          <Eye size={14} className=\"mr-1\" />\n          查看\n        </Button>\n      )\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 快速指派區 */}\n      <div className=\"border border-border rounded-lg p-6 bg-morandi-container/10\">\n        <h3 className=\"text-lg font-semibold text-morandi-primary mb-4\">快速指派任務</h3>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* 左側：基本資訊 */}\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-morandi-primary mb-2\">選擇任務模板</label>\n              <Select value={selectedTemplate} onValueChange={handleTemplateChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"選擇預設模板或自訂任務\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">自訂任務</SelectItem>\n                  <SelectItem value=\"pre-tour\">行前準備</SelectItem>\n                  <SelectItem value=\"documents\">文件準備</SelectItem>\n                  <SelectItem value=\"booking\">訂房訂車</SelectItem>\n                  <SelectItem value=\"collection\">收款作業</SelectItem>\n                  <SelectItem value=\"cost-control\">成本控制</SelectItem>\n                  <SelectItem value=\"quality-check\">品質檢查</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-morandi-primary mb-2\">任務標題</label>\n              <Input\n                value={taskForm.title}\n                onChange={(e) => setTaskForm(prev => ({ ...prev, title: e.target.value }))}\n                placeholder={`例：準備${tour.name}相關資料`}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-morandi-primary mb-2\">指派給</label>\n              <Select value={taskForm.assignee} onValueChange={(value) => setTaskForm(prev => ({ ...prev, assignee: value }))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"選擇負責人\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {employees.map((emp) => (\n                    <SelectItem key={emp.id} value={emp.id}>\n                      {emp.name} ({emp.role})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-2\">期限</label>\n                <Input\n                  type=\"date\"\n                  value={taskForm.deadline}\n                  onChange={(e) => setTaskForm(prev => ({ ...prev, deadline: e.target.value }))}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-morandi-primary mb-2\">緊急度</label>\n                <StarRating\n                  value={taskForm.priority}\n                  onChange={(value) => setTaskForm(prev => ({ ...prev, priority: value as 1 | 2 | 3 | 4 | 5 }))}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 右側：子任務清單 */}\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <label className=\"block text-sm font-medium text-morandi-primary\">子任務清單</label>\n              <Button size=\"sm\" variant=\"outline\" onClick={addSubTask}>\n                <Plus size={14} className=\"mr-1\" />\n                新增\n              </Button>\n            </div>\n            <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n              {taskForm.sub_tasks.map((subTask, index) => (\n                <div key={index} className=\"flex gap-2\">\n                  <Input\n                    value={subTask}\n                    onChange={(e) => handleSubTaskChange(index, e.target.value)}\n                    placeholder={`子任務 ${index + 1}`}\n                    className=\"text-sm\"\n                  />\n                  {taskForm.sub_tasks.length > 1 && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => removeSubTask(index)}\n                      className=\"px-2\"\n                    >\n                      ×\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button\n            onClick={handleCreateTask}\n            disabled={!taskForm.title.trim() || !taskForm.assignee}\n            className=\"px-6\"\n          >\n            建立並指派任務\n          </Button>\n        </div>\n      </div>\n\n      {/* 已指派任務列表 */}\n      <div className=\"border border-border rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-morandi-primary\">\n            此團已指派的任務 ({tourTasks.length})\n          </h3>\n          <div className=\"text-sm text-morandi-secondary\">\n            出發日期：{new Date(tour.departure_date).toLocaleDateString()}\n          </div>\n        </div>\n\n        {tourTasks.length > 0 ? (\n          <EnhancedTable\n            columns={taskColumns}\n            data={tourTasks}\n            initialPageSize={10}\n            showFilters={false}\n          />\n        ) : (\n          <div className=\"text-center py-8 text-morandi-muted\">\n            <Clock size={48} className=\"mx-auto mb-4 opacity-50\" />\n            <p>尚未指派任何任務</p>\n            <p className=\"text-sm\">使用上方表單開始指派任務給團隊成員</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/bento-grid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":57,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2426,2429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2426,2429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2556,2559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2556,2559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport * as React from 'react'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport { DayPicker } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell:\n          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle:\n          'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation, ...props }: any) =>\n          orientation === 'left' ? <ChevronLeft className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />,\n      } as any}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = 'Calendar'\n\nexport { Calendar }\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/checkbox.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":15,"column":40,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":15,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[624,627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[624,627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & { indeterminate?: boolean }\n>(({ className, indeterminate, ...props }, ref) => {\n  const checkboxRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useImperativeHandle(ref, () => checkboxRef.current!);\n\n  React.useEffect(() => {\n    if (checkboxRef.current) {\n      (checkboxRef.current as any).indeterminate = indeterminate ?? false;\n    }\n  }, [indeterminate]);\n\n  return (\n    <CheckboxPrimitive.Root\n      ref={checkboxRef}\n      className={cn(\n        \"peer h-4 w-4 shrink-0 rounded-sm border border-morandi-container ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-morandi-gold focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-morandi-gold data-[state=checked]:text-white\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        className={cn(\"flex items-center justify-center text-current\")}\n      >\n        <Check className=\"h-4 w-4\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n})\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/color-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/combobox.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[325,328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[325,328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[569,572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[569,572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1669,1672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1669,1672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":376,"column":40,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":376,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":385,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10221,10224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10221,10224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10276,10279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10276,10279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10338,10341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10338,10341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":388,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10404,10407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10404,10407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":389,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10462,10465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10462,10465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10526,10529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10526,10529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronDown, X, Search } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\n/**\n * 通用的 Combobox 選項類型\n * @template T - 可選的額外資料類型\n */\nexport interface ComboboxOption<T = any> {\n  /** 選項的唯一識別值 */\n  value: string;\n  /** 顯示的標籤文字 */\n  label: string;\n  /** 可選的額外資料，用於傳遞更多資訊 */\n  data?: T;\n  /** 是否禁用此選項 */\n  disabled?: boolean;\n}\n\n/**\n * Combobox 組件的屬性\n * @template T - 選項額外資料的類型\n */\nexport interface ComboboxProps<T = any> {\n  /** 當前選中的值 */\n  value: string;\n  /** 值改變時的回調函數 */\n  onChange: (value: string) => void;\n  /** 選項被選中時的回調函數，可獲取完整的選項物件 */\n  onSelect?: (option: ComboboxOption<T>) => void;\n  /** 可選項列表 */\n  options: ComboboxOption<T>[];\n  /** 輸入框佔位符 */\n  placeholder?: string;\n  /** 自定義樣式類名 */\n  className?: string;\n  /** 無搜尋結果時顯示的訊息 */\n  emptyMessage?: string;\n  /** 是否顯示搜尋圖示 */\n  showSearchIcon?: boolean;\n  /** 是否顯示清除按鈕 */\n  showClearButton?: boolean;\n  /** 是否禁用整個組件 */\n  disabled?: boolean;\n  /** 自定義選項渲染函數 */\n  renderOption?: (option: ComboboxOption<T>) => React.ReactNode;\n  /** 下拉選單最大高度 */\n  maxHeight?: string;\n}\n\n/**\n * 可搜尋的下拉選單組件（Combobox/Autocomplete）\n *\n * 功能特點：\n * - 支援輸入搜尋/篩選選項\n * - 鍵盤導航（上下方向鍵、Enter、Escape）\n * - 清除按鈕\n * - 無結果提示\n * - 靈活的資料類型支援\n * - 莫蘭迪配色風格\n *\n * @example\n * ```tsx\n * const options = [\n *   { value: '1', label: '台北' },\n *   { value: '2', label: '台中' },\n *   { value: '3', label: '高雄' }\n * ];\n *\n * <Combobox\n *   value={selectedCity}\n *   onChange={setSelectedCity}\n *   options={options}\n *   placeholder=\"選擇城市\"\n *   showClearButton\n * />\n * ```\n */\nexport function Combobox<T = any>({\n  value,\n  onChange,\n  onSelect,\n  options,\n  placeholder = \"輸入或選擇項目\",\n  className,\n  emptyMessage = \"無符合的選項\",\n  showSearchIcon = true,\n  showClearButton = true,\n  disabled = false,\n  renderOption,\n  maxHeight = \"16rem\"\n}: ComboboxProps<T>) {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [highlightedIndex, setHighlightedIndex] = React.useState(-1);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\n  const optionRefs = React.useRef<(HTMLButtonElement | null)[]>([]);\n\n  // 當 value 改變時，更新搜尋值為對應的 label\n  React.useEffect(() => {\n    const selectedOption = options.find(opt => opt.value === value);\n    setSearchValue(selectedOption?.label || \"\");\n  }, [value, options]);\n\n  // 篩選選項\n  const filteredOptions = React.useMemo(() => {\n    return options.filter(option =>\n      option.label?.toLowerCase().includes(searchValue.toLowerCase())\n    );\n  }, [options, searchValue]);\n\n  // 處理輸入變化\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setSearchValue(newValue);\n\n    // 只有在真正輸入內容時才打開下拉選單\n    if (!isOpen) {\n      setIsOpen(true);\n    }\n\n    setHighlightedIndex(-1);\n\n    // 如果輸入為空，清除選擇\n    if (!newValue) {\n      onChange(\"\");\n    }\n  };\n\n  // 處理輸入框點擊（打開下拉選單）\n  const handleInputClick = () => {\n    if (!disabled && !isOpen) {\n      setIsOpen(true);\n    }\n  };\n\n  // 處理選項選擇\n  const handleOptionSelect = (option: ComboboxOption<T>) => {\n    if (option.disabled) return;\n\n    setSearchValue(option.label);\n    onChange(option.value);\n    onSelect?.(option);\n    setIsOpen(false);\n    setHighlightedIndex(-1);\n  };\n\n  // 清除選擇\n  const handleClear = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSearchValue(\"\");\n    onChange(\"\");\n    setIsOpen(false);\n    inputRef.current?.focus();\n  };\n\n  // 切換下拉選單\n  const handleToggleDropdown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!disabled) {\n      setIsOpen(!isOpen);\n      if (!isOpen) {\n        inputRef.current?.focus();\n      }\n    }\n  };\n\n  // 鍵盤導航\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (!isOpen) {\n      if (e.key === 'ArrowDown' || e.key === 'Enter') {\n        setIsOpen(true);\n        setHighlightedIndex(0);\n        e.preventDefault();\n      }\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setHighlightedIndex(prev =>\n          prev < filteredOptions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setHighlightedIndex(prev => prev > 0 ? prev - 1 : 0);\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (highlightedIndex >= 0 && highlightedIndex < filteredOptions.length) {\n          handleOptionSelect(filteredOptions[highlightedIndex]);\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        setIsOpen(false);\n        setHighlightedIndex(-1);\n        inputRef.current?.blur();\n        break;\n      case 'Tab':\n        setIsOpen(false);\n        break;\n    }\n  };\n\n  // 滾動到高亮的選項\n  React.useEffect(() => {\n    if (highlightedIndex >= 0 && optionRefs.current[highlightedIndex]) {\n      optionRefs.current[highlightedIndex]?.scrollIntoView({\n        block: 'nearest',\n        behavior: 'smooth'\n      });\n    }\n  }, [highlightedIndex]);\n\n  // 點擊外部關閉下拉選單\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // 預設選項渲染\n  const defaultRenderOption = (option: ComboboxOption<T>) => (\n    <span className=\"text-morandi-primary\">{option.label}</span>\n  );\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* 輸入框 */}\n      <div className=\"relative\">\n        {showSearchIcon && (\n          <Search\n            size={16}\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-morandi-secondary pointer-events-none\"\n          />\n        )}\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          value={searchValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onClick={handleInputClick}\n          placeholder={placeholder}\n          disabled={disabled}\n          className={cn(\n            \"pr-8\",\n            showSearchIcon && \"pl-9\"\n          )}\n        />\n        <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-1\">\n          {showClearButton && searchValue && !disabled && (\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClear}\n              className=\"h-6 w-6 p-0 hover:bg-morandi-container/50\"\n            >\n              <X size={14} className=\"text-morandi-secondary\" />\n            </Button>\n          )}\n          <button\n            type=\"button\"\n            onClick={handleToggleDropdown}\n            className=\"h-6 w-6 flex items-center justify-center hover:bg-morandi-container/50 rounded transition-colors\"\n            disabled={disabled}\n          >\n            <ChevronDown\n              size={16}\n              className={cn(\n                \"text-morandi-secondary transition-transform\",\n                isOpen && \"transform rotate-180\"\n              )}\n            />\n          </button>\n        </div>\n      </div>\n\n      {/* 下拉選單 */}\n      {isOpen && !disabled && (\n        <div\n          ref={dropdownRef}\n          className=\"absolute top-full left-0 right-0 z-[100] mt-1 bg-card border border-border rounded-lg shadow-lg overflow-hidden\"\n          style={{ maxHeight }}\n        >\n          <div className=\"overflow-y-auto\" style={{ maxHeight }}>\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <button\n                  key={option.value}\n                  ref={el => { optionRefs.current[index] = el; }}\n                  onClick={() => handleOptionSelect(option)}\n                  disabled={option.disabled}\n                  className={cn(\n                    \"w-full px-3 py-2 text-left text-sm transition-colors\",\n                    \"hover:bg-morandi-container/30 focus:bg-morandi-container/30 focus:outline-none\",\n                    highlightedIndex === index && \"bg-morandi-container/50\",\n                    option.value === value && \"bg-morandi-gold/10 font-medium\",\n                    option.disabled && \"opacity-50 cursor-not-allowed\"\n                  )}\n                >\n                  {renderOption ? renderOption(option) : defaultRenderOption(option)}\n                </button>\n              ))\n            ) : (\n              <div className=\"px-3 py-6 text-center text-sm text-morandi-secondary\">\n                {emptyMessage}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// 保留舊版相容性的類型定義\nexport interface LegacyComboboxOption {\n  id: string;\n  name: string;\n  price_per_person?: number;\n  pricePerGroup?: number;\n  isGroupCost?: boolean;\n}\n\nexport interface LegacyComboboxProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSelect?: (option: LegacyComboboxOption) => void;\n  options: LegacyComboboxOption[];\n  placeholder?: string;\n  className?: string;\n}\n\n/**\n * 舊版 Combobox（用於向後相容）\n * @deprecated 請使用新版 Combobox 組件\n */\nexport function LegacyCombobox({\n  value,\n  onChange,\n  onSelect,\n  options,\n  placeholder = \"輸入或選擇項目\",\n  className\n}: LegacyComboboxProps) {\n  const transformedOptions: ComboboxOption<LegacyComboboxOption>[] = options.map(opt => ({\n    value: opt.id,\n    label: opt.name,\n    data: opt\n  }));\n\n  return (\n    <Combobox\n      value={value}\n      onChange={onChange}\n      onSelect={(option) => onSelect?.(option.data!)}\n      options={transformedOptions}\n      placeholder={placeholder}\n      className={className}\n      renderOption={(option) => (\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-morandi-primary\">{option.label}</span>\n          {option.data && (\n            <span className=\"text-xs text-morandi-secondary\">\n              {(option.data as any).pricePerGroup ? (\n                (option.data as any).isGroupCost\n                  ? `團體 NT$${(option.data as any).pricePerGroup}`\n                  : `個人 NT$${(option.data as any).price_per_person}`\n              ) : (option.data as any).price_per_person ? (\n                `NT$${(option.data as any).price_per_person}`\n              ) : ''}\n            </span>\n          )}\n        </div>\n      )}\n    />\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/comet-card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'motion' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'translateDepth' is assigned a value but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\ninterface CometCardProps {\n  rotateDepth?: number;\n  translateDepth?: number;\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport function CometCard({\n  rotateDepth = 17.5,\n  translateDepth = 20,\n  className,\n  children,\n}: CometCardProps) {\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\n  const ref = useRef<HTMLDivElement>(null);\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    if (!ref.current) return;\n\n    const rect = ref.current.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n\n    const mouseX = event.clientX - centerX;\n    const mouseY = event.clientY - centerY;\n\n    const rotateX = (mouseY / rect.height) * rotateDepth;\n    const rotateY = -(mouseX / rect.width) * rotateDepth;\n\n    setRotation({ x: rotateX, y: rotateY });\n  };\n\n  const handleMouseLeave = () => {\n    setRotation({ x: 0, y: 0 });\n  };\n\n  return (\n    <div\n      ref={ref}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      className={cn(\n        \"relative transform-style-3d transition-transform duration-100 ease-out\",\n        className\n      )}\n      style={{\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg)`,\n        transformStyle: \"preserve-3d\",\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/date-input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'placeholder' is assigned a value but never used. Allowed unused args must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useRef, useEffect, KeyboardEvent } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface DateInputProps {\n  value: string // ISO 8601 格式 (YYYY-MM-DD)\n  onChange: (value: string) => void\n  placeholder?: string\n  disabled?: boolean\n  className?: string\n  min?: string\n  max?: string\n}\n\nexport function DateInput({\n  value,\n  onChange,\n  placeholder = 'YYYY/MM/DD',\n  disabled = false,\n  className,\n  min,\n  max,\n}: DateInputProps) {\n  // 將 ISO 格式轉換為顯示格式\n  const formatToDisplay = (isoDate: string): { year: string; month: string; day: string } => {\n    if (!isoDate || isoDate.length < 10) {\n      return { year: '', month: '', day: '' }\n    }\n    const [year, month, day] = isoDate.split('-')\n    return { year, month, day }\n  }\n\n  const initial = formatToDisplay(value)\n  const [year, setYear] = useState(initial.year)\n  const [month, setMonth] = useState(initial.month)\n  const [day, setDay] = useState(initial.day)\n\n  const yearRef = useRef<HTMLInputElement>(null)\n  const monthRef = useRef<HTMLInputElement>(null)\n  const dayRef = useRef<HTMLInputElement>(null)\n\n  // 同步外部 value 的變化\n  useEffect(() => {\n    const formatted = formatToDisplay(value)\n    setYear(formatted.year)\n    setMonth(formatted.month)\n    setDay(formatted.day)\n  }, [value])\n\n  // 組合日期並回傳 ISO 格式\n  const emitDate = (y: string, m: string, d: string) => {\n    if (y.length === 4 && m.length === 2 && d.length === 2) {\n      const isoDate = `${y}-${m}-${d}`\n\n      // 驗證日期有效性\n      const date = new Date(isoDate)\n      if (isNaN(date.getTime())) return\n\n      // 檢查 min/max 限制\n      if (min && isoDate < min) return\n      if (max && isoDate > max) return\n\n      onChange(isoDate)\n    }\n  }\n\n  const handleYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = e.target.value.replace(/\\D/g, '').slice(0, 4)\n    setYear(val)\n    if (val.length === 4) {\n      monthRef.current?.focus()\n      monthRef.current?.select()\n    }\n    emitDate(val, month, day)\n  }\n\n  const handleMonthChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let val = e.target.value.replace(/\\D/g, '')\n\n    // 避免預設零的問題：如果輸入的第一個數字 > 1，自動補零\n    if (val.length === 1 && parseInt(val) > 1) {\n      val = '0' + val\n    }\n\n    // 限制最多 2 位數\n    val = val.slice(0, 2)\n\n    // 限制範圍 01-12\n    if (val.length === 2) {\n      const num = parseInt(val)\n      if (num < 1) val = '01'\n      if (num > 12) val = '12'\n    }\n\n    setMonth(val)\n\n    if (val.length === 2) {\n      dayRef.current?.focus()\n      dayRef.current?.select()\n    }\n\n    emitDate(year, val, day)\n  }\n\n  const handleDayChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let val = e.target.value.replace(/\\D/g, '')\n\n    // 避免預設零的問題：如果輸入的第一個數字 > 3，自動補零\n    if (val.length === 1 && parseInt(val) > 3) {\n      val = '0' + val\n    }\n\n    // 限制最多 2 位數\n    val = val.slice(0, 2)\n\n    // 限制範圍 01-31\n    if (val.length === 2) {\n      const num = parseInt(val)\n      if (num < 1) val = '01'\n      if (num > 31) val = '31'\n    }\n\n    setDay(val)\n    emitDate(year, month, val)\n  }\n\n  const handleYearKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Backspace' && year.length === 0 && e.currentTarget.selectionStart === 0) {\n      // 在年份欄位開頭按 Backspace，不做任何事\n      return\n    }\n  }\n\n  const handleMonthKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Backspace' && month.length === 0 && e.currentTarget.selectionStart === 0) {\n      yearRef.current?.focus()\n      const len = year.length\n      yearRef.current?.setSelectionRange(len, len)\n    }\n  }\n\n  const handleDayKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Backspace' && day.length === 0 && e.currentTarget.selectionStart === 0) {\n      monthRef.current?.focus()\n      const len = month.length\n      monthRef.current?.setSelectionRange(len, len)\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center h-10 w-full rounded-md border border-input bg-background px-3 text-sm',\n        'focus-within:outline-none focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2',\n        disabled && 'cursor-not-allowed opacity-50',\n        className\n      )}\n    >\n      <input\n        ref={yearRef}\n        type=\"text\"\n        inputMode=\"numeric\"\n        value={year}\n        onChange={handleYearChange}\n        onKeyDown={handleYearKeyDown}\n        placeholder=\"YYYY\"\n        disabled={disabled}\n        className=\"w-12 bg-transparent outline-none text-center\"\n        maxLength={4}\n      />\n      <span className=\"text-muted-foreground mx-1\">/</span>\n      <input\n        ref={monthRef}\n        type=\"text\"\n        inputMode=\"numeric\"\n        value={month}\n        onChange={handleMonthChange}\n        onKeyDown={handleMonthKeyDown}\n        placeholder=\"MM\"\n        disabled={disabled}\n        className=\"w-8 bg-transparent outline-none text-center\"\n        maxLength={2}\n      />\n      <span className=\"text-muted-foreground mx-1\">/</span>\n      <input\n        ref={dayRef}\n        type=\"text\"\n        inputMode=\"numeric\"\n        value={day}\n        onChange={handleDayChange}\n        onKeyDown={handleDayKeyDown}\n        placeholder=\"DD\"\n        disabled={disabled}\n        className=\"w-8 bg-transparent outline-none text-center\"\n        maxLength={2}\n      />\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/date-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/dropdown-menu.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[852,855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[852,855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1418,1421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1418,1421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ref' is defined but never used. Allowed unused args must match /^_/u.","line":90,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n    children: React.ReactNode\n  }\n>(({ className, open, onOpenChange, children, ...props }, ref) => {\n  const [isOpen, setIsOpen] = React.useState(open || false)\n\n  React.useEffect(() => {\n    if (open !== undefined) {\n      setIsOpen(open)\n    }\n  }, [open])\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setIsOpen(newOpen)\n    onOpenChange?.(newOpen)\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      {React.Children.map(children, child =>\n        React.isValidElement(child)\n          ? React.cloneElement(child as React.ReactElement<any>, {\n              isOpen,\n              onOpenChange: handleOpenChange\n            })\n          : child\n      )}\n    </div>\n  )\n})\nDropdownMenu.displayName = \"DropdownMenu\"\n\nconst DropdownMenuTrigger = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n    asChild?: boolean\n  }\n>(({ className, children, isOpen, onOpenChange, asChild, ...props }, ref) => {\n  if (asChild && React.isValidElement(children)) {\n    const child = children as React.ReactElement<any>\n    return React.cloneElement(child, {\n      onClick: (e: React.MouseEvent) => {\n        onOpenChange?.(!isOpen)\n        child.props.onClick?.(e)\n      },\n      ...props\n    })\n  }\n\n  return (\n    <button\n      ref={ref}\n      className={cn(\n        \"flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors\",\n        \"focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        className\n      )}\n      onClick={() => onOpenChange?.(!isOpen)}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n})\nDropdownMenuTrigger.displayName = \"DropdownMenuTrigger\"\n\nconst DropdownMenuContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    isOpen?: boolean\n    onOpenChange?: (open: boolean) => void\n    align?: 'start' | 'center' | 'end'\n  }\n>(({ className, children, isOpen, onOpenChange, align = 'start', ...props }, ref) => {\n  const contentRef = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (contentRef.current && !contentRef.current.contains(event.target as Node)) {\n        onOpenChange?.(false)\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [isOpen, onOpenChange])\n\n  if (!isOpen) return null\n\n  return (\n    <div\n      ref={contentRef}\n      className={cn(\n        \"absolute top-full z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-white p-1 shadow-md\",\n        \"animate-in fade-in-0 zoom-in-95 data-[side=bottom]:slide-in-from-top-2\",\n        align === 'start' && 'left-0',\n        align === 'center' && 'left-1/2 -translate-x-1/2',\n        align === 'end' && 'right-0',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n})\nDropdownMenuContent.displayName = \"DropdownMenuContent\"\n\nconst DropdownMenuItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none\",\n      \"hover:bg-morandi-container hover:text-morandi-primary\",\n      \"focus:bg-morandi-container focus:text-morandi-primary\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\n\nconst DropdownMenuSeparator = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/enhanced-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExpandDown' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[746,749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[746,749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[756,759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[756,759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[981,984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[981,984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1167,1170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1167,1170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1266,1269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1266,1269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1372,1375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1372,1375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1577,1580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1577,1580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1636,1639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1636,1639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2044,2047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2044,2047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2092,2095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2092,2095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bordered' is assigned a value but never used. Allowed unused args must match /^_/u.","line":97,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5333,5336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5333,5336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5590,5593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5590,5593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5781,5784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5781,5784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5976,5979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5976,5979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toggleExpansion' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":231,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6989,6992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6989,6992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":406,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  ChevronUp,\n  ChevronDown,\n  ChevronsUpDown,\n  Filter,\n  ChevronRight,\n  ChevronDown as ExpandDown,\n  Loader2\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport interface TableColumn {\n  key: string;\n  label: string | React.ReactNode;\n  sortable?: boolean;\n  filterable?: boolean;\n  filterType?: 'text' | 'number' | 'date' | 'select';\n  filterOptions?: Array<{ value: string; label: string }>;\n  render?: (value: any, row: any) => React.ReactNode;\n  width?: string;\n  align?: 'left' | 'center' | 'right';\n  className?: string;\n}\n\nexport interface SelectionConfig {\n  selected: string[];\n  onChange: (selected: string[]) => void;\n  disabled?: (row: any) => boolean;\n  getRowId?: (row: any, index: number) => string;\n}\n\nexport interface ExpandableConfig {\n  expanded: string[];\n  onExpand: (id: string) => void;\n  renderExpanded: (row: any) => React.ReactNode;\n  expandIcon?: (expanded: boolean) => React.ReactNode;\n  getRowId?: (row: any, index: number) => string;\n}\n\nexport interface EnhancedTableProps {\n  columns: TableColumn[];\n  data: any[];\n  loading?: boolean;\n  error?: string | null;\n\n  // 原有功能\n  onSort?: (column: string, direction: 'asc' | 'desc') => void;\n  onFilter?: (filters: Record<string, string>) => void;\n  onRowClick?: (row: any, rowIndex: number) => void;\n  onRowDoubleClick?: (row: any, rowIndex: number) => void;\n  className?: string;\n  showFilters?: boolean;\n  searchableFields?: string[];\n  initialPageSize?: number;\n  searchTerm?: string;\n  emptyState?: React.ReactNode;\n  defaultSort?: { key: string; direction: 'asc' | 'desc' };\n  searchable?: boolean;\n  searchPlaceholder?: string;\n\n  // DataTable 功能\n  selection?: SelectionConfig;\n  expandable?: ExpandableConfig;\n  actions?: (row: any) => React.ReactNode;\n  rowClassName?: (row: any) => string;\n  bordered?: boolean;\n  striped?: boolean;\n  hoverable?: boolean;\n}\n\nexport function EnhancedTable({\n  columns,\n  data,\n  loading = false,\n  error = null,\n  onSort,\n  onFilter,\n  onRowClick,\n  onRowDoubleClick,\n  className,\n  showFilters: defaultShowFilters = false,\n  searchableFields = [],\n  initialPageSize = 10,\n  searchTerm: externalSearchTerm = '',\n  emptyState,\n  selection,\n  expandable,\n  actions,\n  rowClassName,\n  bordered = true,\n  striped = false,\n  hoverable = true\n}: EnhancedTableProps) {\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [filters, setFilters] = useState<Record<string, string>>({});\n  const [showFilters, setShowFilters] = useState(defaultShowFilters);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(initialPageSize);\n\n  // 搜尋和過濾邏輯\n  const processedData = React.useMemo(() => {\n    let filtered = [...data];\n\n    // 全文搜尋\n    if (externalSearchTerm && searchableFields.length > 0) {\n      filtered = filtered.filter(row =>\n        searchableFields.some(field => {\n          const value = row[field];\n          return value && value.toString().toLowerCase().includes(externalSearchTerm.toLowerCase());\n        })\n      );\n    }\n\n    // 篩選器\n    Object.keys(filters).forEach(key => {\n      if (filters[key]) {\n        filtered = filtered.filter(row => {\n          const value = row[key];\n          return value && value.toString().toLowerCase().includes(filters[key].toLowerCase());\n        });\n      }\n    });\n\n    // 排序\n    if (sortColumn) {\n      filtered.sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n\n        if (aValue === bValue) return 0;\n\n        const result = aValue < bValue ? -1 : 1;\n        return sortDirection === 'asc' ? result : -result;\n      });\n    }\n\n    return filtered;\n  }, [data, externalSearchTerm, searchableFields, filters, sortColumn, sortDirection]);\n\n  // 分頁邏輯\n  const totalPages = Math.ceil(processedData.length / pageSize);\n  const startIndex = (currentPage - 1) * pageSize;\n  const paginatedData = processedData.slice(startIndex, startIndex + pageSize);\n\n  // 重置頁面當資料變化時\n  React.useEffect(() => {\n    setCurrentPage(1);\n  }, [processedData.length]);\n\n  const handleSort = (columnKey: string) => {\n    const newDirection = sortColumn === columnKey && sortDirection === 'asc' ? 'desc' : 'asc';\n    setSortColumn(columnKey);\n    setSortDirection(newDirection);\n    onSort?.(columnKey, newDirection);\n  };\n\n  const getSortIcon = (columnKey: string) => {\n    if (sortColumn !== columnKey) {\n      return <ChevronsUpDown size={14} className=\"text-morandi-secondary opacity-50\" />;\n    }\n    return sortDirection === 'asc' ?\n      <ChevronUp size={14} className=\"text-morandi-gold transition-colors\" /> :\n      <ChevronDown size={14} className=\"text-morandi-gold transition-colors\" />;\n  };\n\n  const updateFilter = (key: string, value: string) => {\n    const newFilters = { ...filters, [key]: value === '__all__' ? '' : value };\n    setFilters(newFilters);\n    onFilter?.(newFilters);\n  };\n\n  // Helper functions for selection and expandable\n  const getRowId = (row: any, index: number): string => {\n    if (selection?.getRowId) return selection.getRowId(row, index);\n    if (expandable?.getRowId) return expandable.getRowId(row, index);\n    return row.id || row._id || index.toString();\n  };\n\n  const isRowSelected = (row: any, index: number): boolean => {\n    if (!selection) return false;\n    const rowId = getRowId(row, index);\n    return selection.selected.includes(rowId);\n  };\n\n  const isRowExpanded = (row: any, index: number): boolean => {\n    if (!expandable) return false;\n    const rowId = getRowId(row, index);\n    return expandable.expanded.includes(rowId);\n  };\n\n  const toggleSelection = (row: any, index: number) => {\n    if (!selection) return;\n    const rowId = getRowId(row, index);\n    const isSelected = selection.selected.includes(rowId);\n\n    if (isSelected) {\n      selection.onChange(selection.selected.filter(id => id !== rowId));\n    } else {\n      selection.onChange([...selection.selected, rowId]);\n    }\n  };\n\n  const toggleSelectAll = () => {\n    if (!selection) return;\n    const allRowIds = paginatedData.map((row, index) => getRowId(row, startIndex + index));\n    const allSelected = allRowIds.every(id => selection.selected.includes(id));\n\n    if (allSelected) {\n      // Deselect all visible rows\n      selection.onChange(selection.selected.filter(id => !allRowIds.includes(id)));\n    } else {\n      // Select all visible rows\n      const newSelected = [...selection.selected];\n      allRowIds.forEach(id => {\n        if (!newSelected.includes(id)) {\n          newSelected.push(id);\n        }\n      });\n      selection.onChange(newSelected);\n    }\n  };\n\n  const toggleExpansion = (row: any, index: number) => {\n    if (!expandable) return;\n    const rowId = getRowId(row, index);\n    expandable.onExpand(rowId);\n  };\n\n  // Calculate if all visible rows are selected\n  const allVisibleSelected = selection ? paginatedData.length > 0 &&\n    paginatedData.every((row, index) => isRowSelected(row, startIndex + index)) : false;\n  const someVisibleSelected = selection ? paginatedData.some((row, index) => isRowSelected(row, startIndex + index)) : false;\n\n\n  // Loading and error states\n  if (loading) {\n    return (\n      <div className={cn(\"border border-border rounded-lg overflow-hidden bg-card\", className)}>\n        <div className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-morandi-primary\" />\n          <span className=\"ml-2 text-morandi-secondary\">載入中...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={cn(\"border border-border rounded-lg overflow-hidden bg-card\", className)}>\n        <div className=\"flex items-center justify-center py-8 text-red-500\">\n          <span>錯誤: {error}</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"border border-border rounded-lg overflow-hidden bg-card shadow-sm flex flex-col h-full\", className)}>\n      <div className=\"overflow-auto flex-1\">\n        <table className=\"w-full\">\n          <thead className=\"sticky top-0 z-10 bg-white border-b-2 border-morandi-gold/20\">\n            {/* 主標題行 */}\n            <tr className=\"relative bg-gradient-to-r from-morandi-container/40 via-morandi-gold/10 to-morandi-container/40\">\n              {/* Selection checkbox column */}\n              {selection && (\n                <th className=\"w-12 py-1.5 sm:py-2 px-3 sm:px-4\">\n                  <Checkbox\n                    checked={allVisibleSelected}\n                    indeterminate={someVisibleSelected && !allVisibleSelected}\n                    onCheckedChange={toggleSelectAll}\n                  />\n                </th>\n              )}\n\n              {columns.map((column, index) => (\n                <th key={column.key} className={cn(\n                  \"text-left py-1.5 sm:py-2 relative\",\n                  index === columns.length - 1 ? \"pl-4 pr-1\" : \"px-3 sm:px-4\"\n                )}>\n                  <div className=\"absolute right-0 top-1/2 -translate-y-1/2 h-5 w-px bg-morandi-gold/30\"></div>\n                  <div className=\"flex items-center gap-1.5 sm:gap-2\">\n                    {column.sortable ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-auto p-0 hover:bg-transparent text-[10px] sm:text-xs font-medium text-morandi-secondary hover:text-morandi-primary transition-colors [&_svg]:!size-[14px]\"\n                        onClick={() => handleSort(column.key)}\n                      >\n                        {column.label}\n                        {getSortIcon(column.key)}\n                      </Button>\n                    ) : (\n                      <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">{column.label}</span>\n                    )}\n                    {index === columns.length - 1 && columns.some(col => col.filterable) && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => setShowFilters(!showFilters)}\n                      >\n                        <Filter size={12} className={cn(\n                          \"transition-colors\",\n                          showFilters ? \"text-morandi-primary\" : \"text-morandi-muted\"\n                        )} />\n                      </Button>\n                    )}\n                  </div>\n                </th>\n              ))}\n\n              {/* Actions column */}\n              {actions && (\n                <th className=\"text-left py-1.5 sm:py-2 px-3 sm:px-4\">\n                  <span className=\"text-[10px] sm:text-xs font-medium text-morandi-secondary\">操作</span>\n                </th>\n              )}\n            </tr>\n\n            {/* 篩選行 */}\n            {showFilters && (\n              <tr className=\"bg-background border-t border-border/50\">\n                {/* Selection checkbox column - empty */}\n                {selection && <td className=\"py-2 px-4\"></td>}\n\n                {columns.map((column) => (\n                  <td key={column.key} className=\"py-2 px-4\">\n                    {column.filterable ? (\n                      column.filterType === 'select' ? (\n                        <Select\n                          value={filters[column.key] || '__all__'}\n                          onValueChange={(value) => updateFilter(column.key, value)}\n                        >\n                          <SelectTrigger className=\"h-8 text-xs\">\n                            <SelectValue placeholder={`選擇${column.label}...`} />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"__all__\">全部{column.label}</SelectItem>\n                            {column.filterOptions?.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <Input\n                          type={column.filterType || 'text'}\n                          placeholder={`搜尋${column.label}...`}\n                          value={filters[column.key] || ''}\n                          onChange={(e) => updateFilter(column.key, e.target.value)}\n                          className=\"h-8 text-xs\"\n                        />\n                      )\n                    ) : null}\n                  </td>\n                ))}\n\n                {/* Actions column - empty */}\n                {actions && <td className=\"py-2 px-4\"></td>}\n\n                {/* Expandable icon column - empty */}\n                {expandable && <td className=\"py-2 px-4\"></td>}\n              </tr>\n            )}\n          </thead>\n          <tbody>\n            {paginatedData.length === 0 ? (\n              <tr>\n                <td colSpan={\n                  columns.length +\n                  (selection ? 1 : 0) +\n                  (expandable ? 1 : 0) +\n                  (actions ? 1 : 0)\n                } className=\"py-8 px-6\">\n                  {emptyState}\n                </td>\n              </tr>\n            ) : (\n              paginatedData.map((row, index) => {\n                const actualRowIndex = startIndex + index;\n                const rowId = getRowId(row, actualRowIndex);\n                const isSelected = isRowSelected(row, actualRowIndex);\n                const isExpanded = isRowExpanded(row, actualRowIndex);\n                const isDisabled = selection?.disabled?.(row) ?? false;\n\n                return (\n                  <React.Fragment key={rowId}>\n                    <tr\n                      className={cn(\n                        \"relative group border-b border-border/50 last:border-b-0\",\n                        isSelected && \"bg-morandi-gold/10\",\n                        (onRowClick || onRowDoubleClick) && !selection && !expandable && \"cursor-pointer\",\n                        hoverable && \"hover:bg-morandi-container/20 transition-all duration-150\",\n                        striped && index % 2 === 0 && \"bg-morandi-container/5\",\n                        rowClassName?.(row)\n                      )}\n                      onClick={(e) => {\n                        // Don't trigger row click if clicking on selection checkbox or expand button\n                        if (selection || expandable) return;\n                        onRowClick?.(row, actualRowIndex);\n                      }}\n                      onDoubleClick={() => onRowDoubleClick?.(row, actualRowIndex)}\n                    >\n                      {/* Selection checkbox */}\n                      {selection && (\n                        <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                          <Checkbox\n                            checked={isSelected}\n                            disabled={isDisabled}\n                            onCheckedChange={() => toggleSelection(row, actualRowIndex)}\n                            onClick={(e) => e.stopPropagation()}\n                          />\n                        </td>\n                      )}\n\n                      {/* Data columns */}\n                      {columns.map((column, colIndex) => (\n                        <td\n                          key={column.key}\n                          className={cn(\n                            \"py-1.5 sm:py-2\",\n                            colIndex === columns.length - 1 ? \"pl-4 pr-1\" : \"px-3 sm:px-4\",\n                            column.align === 'center' && \"text-center\",\n                            column.align === 'right' && \"text-right\",\n                            column.className\n                          )}\n                          style={{ width: column.width }}\n                        >\n                          {column.render ? column.render(row[column.key], row) : (\n                            <div className=\"text-[10px] sm:text-xs text-morandi-primary\">\n                              {row[column.key]}\n                            </div>\n                          )}\n                        </td>\n                      ))}\n\n                      {/* Actions column */}\n                      {actions && (\n                        <td className=\"py-1.5 sm:py-2 px-3 sm:px-4\">\n                          <div onClick={(e) => e.stopPropagation()}>\n                            {actions(row)}\n                          </div>\n                        </td>\n                      )}\n                    </tr>\n\n                    {/* Expanded content row */}\n                    {expandable && isExpanded && (\n                      <tr>\n                        <td colSpan={\n                          columns.length +\n                          (selection ? 1 : 0) +\n                          (expandable ? 1 : 0) +\n                          (actions ? 1 : 0)\n                        } className=\"py-0 px-0\">\n                          <div className=\"bg-morandi-container/20 p-4 border-t border-border/50\">\n                            {expandable.renderExpanded(row)}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* 分頁控制 - 永遠顯示 */}\n      {processedData.length > 0 && (\n        <div className=\"p-2 sm:p-3 flex flex-col sm:flex-row items-center justify-between gap-2 sm:gap-3 border-t border-border bg-morandi-container/5\">\n          {/* 左側：資料統計 */}\n          <div className=\"text-[10px] sm:text-xs text-morandi-secondary\">\n            顯示第 <span className=\"font-medium text-morandi-primary\">{startIndex + 1}</span> 到 <span className=\"font-medium text-morandi-primary\">{Math.min(startIndex + pageSize, processedData.length)}</span> 筆，\n            共 <span className=\"font-medium text-morandi-primary\">{processedData.length}</span> 筆資料\n          </div>\n\n          {/* 右側：分頁控制 */}\n          <div className=\"flex items-center gap-1.5 sm:gap-2\">\n            {/* 每頁顯示筆數 */}\n            <div className=\"flex items-center gap-1.5 sm:gap-2\">\n              <span className=\"text-[10px] sm:text-xs text-morandi-secondary\">每頁</span>\n              <Select value={pageSize.toString()} onValueChange={(value) => setPageSize(Number(value))}>\n                <SelectTrigger className=\"w-14 sm:w-16 h-7 sm:h-8 text-[10px] sm:text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"10\">10</SelectItem>\n                  <SelectItem value=\"15\">15</SelectItem>\n                  <SelectItem value=\"20\">20</SelectItem>\n                  <SelectItem value=\"50\">50</SelectItem>\n                  <SelectItem value=\"100\">100</SelectItem>\n                </SelectContent>\n              </Select>\n              <span className=\"text-[10px] sm:text-xs text-morandi-secondary\">筆</span>\n            </div>\n\n            {/* 分頁按鈕 - 只在有多頁時顯示 */}\n            {totalPages > 1 && (\n              <>\n                <div className=\"w-px h-5 sm:h-6 bg-border mx-0.5 sm:mx-1\"></div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                  className=\"h-7 sm:h-8 px-2 sm:px-3 text-[10px] sm:text-xs\"\n                >\n                  上一頁\n                </Button>\n\n                <div className=\"flex items-center gap-0.5 sm:gap-1\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    let pageNum;\n                    if (totalPages <= 5) {\n                      pageNum = i + 1;\n                    } else if (currentPage <= 3) {\n                      pageNum = i + 1;\n                    } else if (currentPage >= totalPages - 2) {\n                      pageNum = totalPages - 4 + i;\n                    } else {\n                      pageNum = currentPage - 2 + i;\n                    }\n\n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(pageNum)}\n                        className=\"w-7 h-7 sm:w-8 sm:h-8 p-0 text-[10px] sm:text-xs\"\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                  className=\"h-7 sm:h-8 px-2 sm:px-3 text-[10px] sm:text-xs\"\n                >\n                  下一頁\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// 便利的 Hook 用於處理排序和篩選邏輯\nexport function useEnhancedTable<T>(\n  originalData: T[],\n  sortFunction?: (data: T[], column: string, direction: 'asc' | 'desc') => T[],\n  filterFunction?: (data: T[], filters: Record<string, string>) => T[]\n) {\n  const [sortedData, setSortedData] = useState(originalData);\n  const [filteredData, setFilteredData] = useState(originalData);\n\n  const handleSort = (column: string, direction: 'asc' | 'desc') => {\n    if (sortFunction) {\n      const sorted = sortFunction(filteredData, column, direction);\n      setSortedData(sorted);\n    }\n  };\n\n  const handleFilter = (filters: Record<string, string>) => {\n    if (filterFunction) {\n      const filtered = filterFunction(originalData, filters);\n      setFilteredData(filtered);\n      setSortedData(filtered);\n    }\n  };\n\n  return {\n    data: sortedData,\n    handleSort,\n    handleFilter\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/floating-dock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/focus-cards.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[209,212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[209,212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":1,"message":"'Card' is already defined.","line":60,"column":6,"nodeType":"Identifier","messageId":"redeclared","endLine":60,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const Card = React.memo(\n  ({\n    card,\n    index,\n    hovered,\n    setHovered,\n    viewMode,\n  }: {\n    card: any;\n    index: number;\n    hovered: number | null;\n    setHovered: React.Dispatch<React.SetStateAction<number | null>>;\n    viewMode?: 'desktop' | 'mobile';\n  }) => (\n    <div\n      onMouseEnter={() => setHovered(index)}\n      onMouseLeave={() => setHovered(null)}\n      className={cn(\n        \"relative overflow-hidden transition-all duration-300 ease-out\",\n        viewMode === 'mobile' ? 'h-96 w-80 flex-shrink-0 rounded-2xl' : 'rounded-lg h-60 md:h-96 w-full bg-gray-100 dark:bg-neutral-900',\n        hovered !== null && hovered !== index && viewMode !== 'mobile' && \"blur-sm scale-[0.98]\"\n      )}\n    >\n      <img\n        src={card.src}\n        alt={card.title}\n        className=\"object-cover absolute inset-0 w-full h-full\"\n      />\n      {/* 手機版：標題直接顯示 */}\n      {viewMode === 'mobile' ? (\n        <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent py-6 px-6\">\n          <div className=\"text-xl font-bold text-white\">\n            {card.title}\n          </div>\n        </div>\n      ) : (\n        // 桌面版：hover 顯示\n        <div\n          className={cn(\n            \"absolute inset-0 bg-black/50 flex items-end py-8 px-4 transition-opacity duration-300\",\n            hovered === index ? \"opacity-100\" : \"opacity-0\"\n          )}\n        >\n          <div className=\"text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-neutral-50 to-neutral-200\">\n            {card.title}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n);\n\nCard.displayName = \"Card\";\n\ntype Card = {\n  title: string;\n  src: string;\n};\n\nexport function FocusCards({ cards, viewMode }: { cards: Card[]; viewMode?: 'desktop' | 'mobile' }) {\n  const [hovered, setHovered] = useState<number | null>(null);\n\n  return (\n    <div className={viewMode === 'mobile' ? 'overflow-x-auto -mx-4 px-4' : 'grid grid-cols-1 md:grid-cols-3 gap-10 max-w-5xl mx-auto md:px-8 w-full'}>\n      <div className={viewMode === 'mobile' ? 'flex gap-4 pb-4' : 'contents'}>\n        {cards.map((card, index) => (\n          <Card\n            key={card.title}\n            card={card}\n            index={index}\n            hovered={hovered}\n            setHovered={setHovered}\n            viewMode={viewMode}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/glowing-stars.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/hero-parallax.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/location-select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/smart-date-input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'placeholder' is assigned a value but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Input } from './input';\nimport { cn } from '@/lib/utils';\nimport { Calendar as CalendarIcon } from 'lucide-react';\nimport { DayPicker } from 'react-day-picker';\nimport { format, parse, isValid } from 'date-fns';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport 'react-day-picker/style.css';\n\ninterface SmartDateInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  min?: string;\n  className?: string;\n  placeholder?: string;\n  required?: boolean;\n  initialMonth?: string; // 初始顯示的月份（YYYY-MM-DD 格式）\n}\n\nexport function SmartDateInput({\n  value,\n  onChange,\n  min,\n  className,\n  placeholder = 'YYYY-MM-DD',\n  required = false,\n  initialMonth\n}: SmartDateInputProps) {\n  const yearRef = useRef<HTMLInputElement>(null);\n  const monthRef = useRef<HTMLInputElement>(null);\n  const dayRef = useRef<HTMLInputElement>(null);\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n\n  // 分解日期字串\n  const parts = value ? value.split('-') : [];\n  const year = parts[0] || '';\n  const month = parts[1] || '';\n  const day = parts[2] || '';\n\n  // 將字串轉換為 Date 物件用於日曆\n  const dateValue = value ? parse(value, 'yyyy-MM-dd', new Date()) : undefined;\n  const minDate = min ? parse(min, 'yyyy-MM-dd', new Date()) : undefined;\n  const initialMonthDate = initialMonth ? parse(initialMonth, 'yyyy-MM-dd', new Date()) : undefined;\n\n  // 從日曆選擇日期\n  const handleCalendarSelect = (date: Date | undefined) => {\n    if (date) {\n      const formatted = format(date, 'yyyy-MM-dd');\n      onChange(formatted);\n      setIsCalendarOpen(false);\n    }\n  };\n\n  const handleYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = e.target.value.replace(/\\D/g, ''); // 只允許數字\n\n    // 直接更新，不補0\n    onChange(val ? `${val}${month ? '-' + month : ''}${day ? '-' + day : ''}` : '');\n\n    // 當輸入4位數時，自動跳到月份\n    if (val.length === 4) {\n      setTimeout(() => monthRef.current?.focus(), 0);\n    }\n  };\n\n  const handleMonthChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let val = e.target.value.replace(/\\D/g, '');\n\n    // 只有當輸入值大於12時才調整為12，允許 '0' 開頭的輸入\n    if (val.length === 2 && parseInt(val) > 12) {\n      val = '12';\n    }\n\n    // 完整輸入 \"00\" 時清空（但允許輸入過程中的 \"0\"）\n    if (val === '00') {\n      val = '';\n    }\n\n    // 直接更新，不補0\n    onChange(`${year}${val ? '-' + val : ''}${day ? '-' + day : ''}`);\n\n    // 當輸入2位數時，自動跳到日期\n    if (val.length === 2 && parseInt(val) > 0 && parseInt(val) <= 12) {\n      setTimeout(() => dayRef.current?.focus(), 0);\n    }\n  };\n\n  const handleDayChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let val = e.target.value.replace(/\\D/g, '');\n\n    // 只有當輸入值大於31時才調整為31，允許 '0' 開頭的輸入\n    if (val.length === 2 && parseInt(val) > 31) {\n      val = '31';\n    }\n\n    // 完整輸入 \"00\" 時清空（但允許輸入過程中的 \"0\"）\n    if (val === '00') {\n      val = '';\n    }\n\n    // 直接更新，不補0\n    onChange(`${year}${month ? '-' + month : ''}${val ? '-' + val : ''}`);\n  };\n\n  const handleKeyDown = (\n    e: React.KeyboardEvent<HTMLInputElement>,\n    type: 'year' | 'month' | 'day'\n  ) => {\n    // 按下 Backspace 時，如果當前欄位是空的，跳到前一個欄位\n    if (e.key === 'Backspace') {\n      const input = e.currentTarget;\n      if (input.value.length === 0 || input.selectionStart === 0) {\n        if (type === 'day') monthRef.current?.focus();\n        if (type === 'month') yearRef.current?.focus();\n      }\n    }\n\n    // 按下 / 或 - 時，跳到下一個欄位\n    if (e.key === '/' || e.key === '-') {\n      e.preventDefault();\n      if (type === 'year') monthRef.current?.focus();\n      if (type === 'month') dayRef.current?.focus();\n    }\n  };\n\n  return (\n    <div className={cn(\"flex items-center gap-1\", className)}>\n      <div className=\"flex items-center gap-1 px-3 h-10 border rounded-md bg-background flex-1\">\n        <input\n          ref={yearRef}\n          type=\"text\"\n          inputMode=\"numeric\"\n          value={year}\n          onChange={handleYearChange}\n          onKeyDown={(e) => handleKeyDown(e, 'year')}\n          placeholder=\"YYYY\"\n          className=\"w-14 bg-transparent outline-none text-center\"\n          maxLength={4}\n          required={required}\n        />\n        <span className=\"text-morandi-secondary\">/</span>\n        <input\n          ref={monthRef}\n          type=\"text\"\n          inputMode=\"numeric\"\n          value={month}\n          onChange={handleMonthChange}\n          onKeyDown={(e) => handleKeyDown(e, 'month')}\n          placeholder=\"MM\"\n          className=\"w-10 bg-transparent outline-none text-center\"\n          maxLength={2}\n          required={required}\n        />\n        <span className=\"text-morandi-secondary\">/</span>\n        <input\n          ref={dayRef}\n          type=\"text\"\n          inputMode=\"numeric\"\n          value={day}\n          onChange={handleDayChange}\n          onKeyDown={(e) => handleKeyDown(e, 'day')}\n          placeholder=\"DD\"\n          className=\"w-10 bg-transparent outline-none text-center\"\n          maxLength={2}\n          required={required}\n        />\n      </div>\n\n      <Popover open={isCalendarOpen} onOpenChange={setIsCalendarOpen}>\n        <PopoverTrigger asChild>\n          <button\n            type=\"button\"\n            className=\"h-10 w-10 flex items-center justify-center border rounded-md bg-background hover:bg-morandi-bg-subtle transition-colors\"\n            title=\"選擇日期\"\n          >\n            <CalendarIcon className=\"h-4 w-4 text-morandi-primary\" />\n          </button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <DayPicker\n            mode=\"single\"\n            selected={dateValue && isValid(dateValue) ? dateValue : undefined}\n            onSelect={handleCalendarSelect}\n            disabled={minDate ? { before: minDate } : undefined}\n            defaultMonth={initialMonthDate && isValid(initialMonthDate) ? initialMonthDate : undefined}\n            className=\"p-3\"\n            classNames={{\n              months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n              month: \"space-y-4\",\n              caption: \"flex justify-center pt-1 relative items-center\",\n              caption_label: \"text-sm font-medium\",\n              nav: \"space-x-1 flex items-center\",\n              nav_button: \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n              nav_button_previous: \"absolute left-1\",\n              nav_button_next: \"absolute right-1\",\n              table: \"w-full border-collapse space-y-1\",\n              head_row: \"flex\",\n              head_cell: \"text-morandi-secondary rounded-md w-9 font-normal text-[0.8rem]\",\n              row: \"flex w-full mt-2\",\n              cell: \"text-center text-sm p-0 relative [&:has([aria-selected])]:bg-morandi-bg-subtle first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n              day: \"h-9 w-9 p-0 font-normal aria-selected:opacity-100 hover:bg-morandi-bg-subtle rounded-md transition-colors\",\n              day_selected: \"bg-morandi-primary text-white hover:bg-morandi-primary hover:text-white focus:bg-morandi-primary focus:text-white\",\n              day_today: \"bg-morandi-bg-subtle text-morandi-primary\",\n              day_outside: \"text-morandi-secondary opacity-50\",\n              day_disabled: \"text-morandi-secondary opacity-50\",\n              day_range_middle: \"aria-selected:bg-morandi-bg-subtle aria-selected:text-morandi-primary\",\n              day_hidden: \"invisible\",\n            }}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/star-rating.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/status-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/thursday-date-picker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dayNames' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport * as React from 'react'\nimport { format } from 'date-fns'\nimport { zhTW } from 'date-fns/locale'\nimport { Calendar as CalendarIcon, AlertCircle } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\n\ninterface ThursdayDatePickerProps {\n  value: string // YYYY-MM-DD\n  onChange: (value: string) => void\n  disabled?: boolean\n  className?: string\n  allowAnyDay?: boolean // 特殊請款允許任何日期\n}\n\nconst dayNames = ['日', '一', '二', '三', '四', '五', '六']\n\nexport function ThursdayDatePicker({\n  value,\n  onChange,\n  disabled = false,\n  className,\n  allowAnyDay = false,\n}: ThursdayDatePickerProps) {\n  const [date, setDate] = React.useState<Date | undefined>(\n    value ? new Date(value) : undefined\n  )\n  const [showWarning, setShowWarning] = React.useState(false)\n\n  // 同步外部 value 到內部 state\n  React.useEffect(() => {\n    if (value) {\n      setDate(new Date(value))\n    } else {\n      setDate(undefined)\n    }\n  }, [value])\n\n  const handleSelect = (selectedDate: Date | undefined) => {\n    if (!selectedDate) {\n      setDate(undefined)\n      onChange('')\n      setShowWarning(false)\n      return\n    }\n\n    const dayOfWeek = selectedDate.getDay()\n    const isThursday = dayOfWeek === 4\n\n    // 如果不是特殊請款且不是週四，顯示警告\n    if (!allowAnyDay && !isThursday) {\n      setShowWarning(true)\n      setTimeout(() => setShowWarning(false), 3000) // 3秒後自動隱藏\n      return\n    }\n\n    setDate(selectedDate)\n    const formattedDate = format(selectedDate, 'yyyy-MM-dd')\n    onChange(formattedDate)\n    setShowWarning(false)\n  }\n\n  return (\n    <div>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            disabled={disabled}\n            className={cn(\n              'w-full justify-start text-left font-normal',\n              !date && 'text-muted-foreground',\n              allowAnyDay && 'bg-morandi-gold/10 border-morandi-gold/50',\n              className\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date ? format(date, 'yyyy/MM/dd') : <span>選擇日期</span>}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            mode=\"single\"\n            selected={date}\n            onSelect={handleSelect}\n            locale={zhTW}\n            initialFocus\n          />\n        </PopoverContent>\n      </Popover>\n      {showWarning && (\n        <div className=\"mt-2 flex items-center gap-2 text-sm text-morandi-red\">\n          <AlertCircle size={16} />\n          <span>請選擇週四作為請款日期</span>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1065,1068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1065,1068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface TooltipContextValue {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst TooltipContext = React.createContext<TooltipContextValue>({\n  open: false,\n  setOpen: () => {},\n});\n\nexport function TooltipProvider({ children }: { children: React.ReactNode }) {\n  return <>{children}</>;\n}\n\nexport function Tooltip({ children }: { children: React.ReactNode }) {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <TooltipContext.Provider value={{ open, setOpen }}>\n      <div className=\"relative inline-block\">{children}</div>\n    </TooltipContext.Provider>\n  );\n}\n\nexport function TooltipTrigger({\n  children,\n  asChild = false\n}: {\n  children: React.ReactNode;\n  asChild?: boolean;\n}) {\n  const { setOpen } = React.useContext(TooltipContext);\n\n  const handleMouseEnter = () => setOpen(true);\n  const handleMouseLeave = () => setOpen(false);\n\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(children as React.ReactElement<any>, {\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n    });\n  }\n\n  return (\n    <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n      {children}\n    </div>\n  );\n}\n\nexport function TooltipContent({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  const { open } = React.useContext(TooltipContext);\n\n  if (!open) return null;\n\n  return (\n    <div\n      className={cn(\n        'absolute z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95',\n        'bottom-full left-1/2 -translate-x-1/2 mb-2',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/tracing-beam.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useVelocity' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  motion,\n  useTransform,\n  useScroll,\n  useVelocity,\n  useSpring,\n} from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport const TracingBeam = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"],\n  });\n\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [svgHeight, setSvgHeight] = useState(0);\n\n  useEffect(() => {\n    if (contentRef.current) {\n      setSvgHeight(contentRef.current.offsetHeight);\n    }\n  }, []);\n\n  const y1 = useSpring(\n    useTransform(scrollYProgress, [0, 0.8], [50, svgHeight]),\n    {\n      stiffness: 500,\n      damping: 90,\n    },\n  );\n  const y2 = useSpring(\n    useTransform(scrollYProgress, [0, 1], [50, svgHeight - 200]),\n    {\n      stiffness: 500,\n      damping: 90,\n    },\n  );\n\n  return (\n    <motion.div\n      ref={ref}\n      className={cn(\"relative mx-auto h-full w-full max-w-4xl\", className)}\n    >\n      <div className=\"absolute top-3 -left-4 md:-left-20\">\n        <motion.div\n          transition={{\n            duration: 0.2,\n            delay: 0.5,\n          }}\n          animate={{\n            boxShadow:\n              scrollYProgress.get() > 0\n                ? \"none\"\n                : \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\n          }}\n          className=\"border-netural-200 ml-[27px] flex h-4 w-4 items-center justify-center rounded-full border shadow-sm\"\n        >\n          <motion.div\n            transition={{\n              duration: 0.2,\n              delay: 0.5,\n            }}\n            animate={{\n              backgroundColor: scrollYProgress.get() > 0 ? \"white\" : \"#10b981\",\n              borderColor: scrollYProgress.get() > 0 ? \"white\" : \"#059669\",\n            }}\n            className=\"h-2 w-2 rounded-full border border-neutral-300 bg-white\"\n          />\n        </motion.div>\n        <svg\n          viewBox={`0 0 20 ${svgHeight}`}\n          width=\"20\"\n          height={svgHeight} // Set the SVG height\n          className=\"ml-4 block\"\n          aria-hidden=\"true\"\n        >\n          <motion.path\n            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}\n            fill=\"none\"\n            stroke=\"#9091A0\"\n            strokeOpacity=\"0.16\"\n            transition={{\n              duration: 10,\n            }}\n          ></motion.path>\n          <motion.path\n            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}\n            fill=\"none\"\n            stroke=\"url(#gradient)\"\n            strokeWidth=\"1.25\"\n            className=\"motion-reduce:hidden\"\n            transition={{\n              duration: 10,\n            }}\n          ></motion.path>\n          <defs>\n            <motion.linearGradient\n              id=\"gradient\"\n              gradientUnits=\"userSpaceOnUse\"\n              x1=\"0\"\n              x2=\"0\"\n              y1={y1} // set y1 for gradient\n              y2={y2} // set y2 for gradient\n            >\n              <stop stopColor=\"#18CCFC\" stopOpacity=\"0\"></stop>\n              <stop stopColor=\"#18CCFC\"></stop>\n              <stop offset=\"0.325\" stopColor=\"#6344F5\"></stop>\n              <stop offset=\"1\" stopColor=\"#AE48FF\" stopOpacity=\"0\"></stop>\n            </motion.linearGradient>\n          </defs>\n        </svg>\n      </div>\n      <div ref={contentRef}>{children}</div>\n    </motion.div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/ui/world-map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/calculator-widget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calculator' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef } from 'react';\nimport { Calculator } from 'lucide-react';\n// import { useCalculator } from './calculator/useCalculator';\n// import { useCalculatorKeyboard } from './calculator/useCalculatorKeyboard';\n// import { CalculatorDisplay } from './calculator/CalculatorDisplay';\n// import { CalculatorButtons } from './calculator/CalculatorButtons';\n\n/**\n * 計算機主元件\n * - 支援鍵盤輸入（0-9, +, -, *, /, Enter, Esc, Backspace）\n * - 支援貼上功能（自動移除文字、轉換全形半形）\n * - 顯示完整計算式與即時結果\n * - 雙擊 Backspace（在 0 狀態下）快速清除記錄\n */\nexport function CalculatorWidget() {\n  // TODO: 實作計算機功能\n  // 需要實作 calculator 子模組才能啟用此功能\n  return <div className=\"p-4 text-morandi-secondary\">計算機功能開發中...</div>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/calculator/calculator-buttons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/calculator/calculator-display.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/calculator/calculatorUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/calculator/useCalculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/calculator/useCalculatorKeyboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/currency-widget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Input } from '@/components/ui/input';\nimport { DollarSign } from 'lucide-react';\n// import { useCurrency } from './currency/useCurrency';\n// import { currencies } from './currency/currencyData';\n// import { getCurrencyInfo, getCurrentRate, convertAmount } from './currency/currencyUtils';\n// import { CurrencySelector } from './currency/CurrencySelector';\n// import { ExchangeRateDisplay } from './currency/ExchangeRateDisplay';\n\n/**\n * 匯率轉換小工具\n * - 支援多種貨幣轉換\n * - 可自訂匯率\n * - 即時顯示轉換結果\n */\nexport function CurrencyWidget() {\n  // TODO: 實作貨幣轉換功能\n  // 需要實作 currency 子模組才能啟用此功能\n  return <div className=\"p-4 text-morandi-secondary\">貨幣轉換功能開發中...</div>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/currency/currency-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/currency/currencyData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/currency/currencyUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/currency/exchange-rate-display.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/currency/useCurrency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/widgets/widget-settings-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/AdvanceListCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[285,288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[285,288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentUserId' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Receipt, Check, Trash2 } from 'lucide-react';\nimport { AdvanceList } from '@/stores/workspace-store';\n\ninterface AdvanceListCardProps {\n  advanceList: AdvanceList;\n  userName?: string;\n  onCreatePayment: (itemId: string, item: any) => void;\n  onDelete?: (listId: string) => void;\n  currentUserId: string;\n  userRole?: 'admin' | 'finance' | 'member';\n}\n\nexport function AdvanceListCard({\n  advanceList,\n  userName = '使用者',\n  onCreatePayment,\n  onDelete,\n  currentUserId,\n  userRole = 'member'\n}: AdvanceListCardProps) {\n  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());\n\n  const pendingItems = advanceList.items.filter(item => item.status === 'pending');\n  const totalAmount = advanceList.items.reduce((sum, item) => sum + item.amount, 0);\n  const canProcess = userRole === 'admin' || userRole === 'finance';\n\n  const toggleSelection = (itemId: string) => {\n    const newSelected = new Set(selectedItems);\n    if (newSelected.has(itemId)) {\n      newSelected.delete(itemId);\n    } else {\n      newSelected.add(itemId);\n    }\n    setSelectedItems(newSelected);\n  };\n\n  const handleBatchPayment = () => {\n    const itemsToProcess = advanceList.items.filter(item => selectedItems.has(item.id));\n    if (itemsToProcess.length > 0) {\n      onCreatePayment('batch', itemsToProcess);\n    }\n  };\n\n  const handleDelete = () => {\n    if (window.confirm('確定要刪除這個代墊清單嗎？（已建立的請款單不會被刪除）')) {\n      onDelete?.(advanceList.id);\n    }\n  };\n\n  return (\n    <div className=\"card-morandi-elevated my-3\">\n      {/* 標題 */}\n      <div className=\"flex items-start gap-2 mb-3\">\n        <Receipt className=\"text-morandi-gold shrink-0 mt-1\" size={20} />\n        <div className=\"flex-1\">\n          <div className=\"font-medium text-morandi-primary\">\n            {userName} 分享了代墊清單\n          </div>\n          <div className=\"text-xs text-morandi-secondary mt-1\">\n            {new Date(advanceList.created_at).toLocaleString('zh-TW')}\n          </div>\n        </div>\n        {onDelete && (\n          <button\n            onClick={handleDelete}\n            className=\"btn-icon-morandi !w-8 !h-8 hover:bg-red-50 hover:text-red-600 transition-colors\"\n            title=\"刪除代墊清單\"\n          >\n            <Trash2 size={16} />\n          </button>\n        )}\n      </div>\n\n      {/* 代墊項目卡片 */}\n      <div className=\"bg-gradient-to-br from-morandi-container/5 to-morandi-container/10 rounded-lg p-4 border border-morandi-gold/20\">\n        {/* 摘要資訊 */}\n        <div className=\"flex items-center justify-between mb-3 pb-3 border-b border-morandi-gold/20\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-morandi-secondary\">📋 待請款項目</span>\n            <span className=\"badge-morandi\">{pendingItems.length} 筆</span>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-xs text-morandi-secondary\">總計</div>\n            <div className=\"text-lg font-semibold text-morandi-primary\">\n              ${totalAmount.toLocaleString()}\n            </div>\n          </div>\n        </div>\n\n        {/* 項目列表 */}\n        <div className=\"space-y-2\">\n          {advanceList.items.map((item, index) => (\n            <div\n              key={item.id}\n              className={`flex items-center gap-3 p-2 rounded transition-colors ${\n                item.status === 'completed'\n                  ? 'bg-morandi-container/20 opacity-60'\n                  : 'hover:bg-morandi-container/10'\n              }`}\n            >\n              {/* 序號 */}\n              <div className=\"text-sm font-medium text-morandi-secondary w-6\">\n                {index + 1}\n              </div>\n\n              {/* 複選框（僅未處理項目且有權限時顯示） */}\n              {item.status === 'pending' && canProcess && (\n                <input\n                  type=\"checkbox\"\n                  checked={selectedItems.has(item.id)}\n                  onChange={() => toggleSelection(item.id)}\n                  className=\"w-4 h-4 rounded border-morandi-gold/30 text-morandi-gold focus:ring-morandi-gold/20\"\n                />\n              )}\n\n              {/* 項目資訊 */}\n              <div className=\"flex-1 grid grid-cols-4 gap-2 items-center\">\n                <div className=\"font-medium text-morandi-primary\">{item.name}</div>\n                <div className=\"text-sm text-morandi-secondary\">{item.description || '-'}</div>\n                <div className=\"text-sm font-medium text-morandi-primary\">\n                  ${item.amount.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-morandi-secondary\">{item.advance_person}</div>\n              </div>\n\n              {/* 操作按鈕 */}\n              <div className=\"shrink-0 w-24\">\n                {item.status === 'completed' ? (\n                  <div className=\"flex items-center gap-1 text-xs text-morandi-secondary\">\n                    <Check size={14} className=\"text-green-600\" />\n                    <span>已請款</span>\n                  </div>\n                ) : canProcess ? (\n                  <button\n                    onClick={() => onCreatePayment(item.id, item)}\n                    className=\"btn-morandi-primary !py-1 !px-2 text-xs w-full\"\n                  >\n                    請款\n                  </button>\n                ) : (\n                  <div className=\"text-xs text-morandi-secondary text-center\">待處理</div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* 批次請款按鈕 */}\n        {canProcess && selectedItems.size > 0 && (\n          <div className=\"mt-3 pt-3 border-t border-morandi-gold/20 flex items-center justify-between\">\n            <span className=\"text-sm text-morandi-secondary\">\n              已選擇 {selectedItems.size} 筆項目\n            </span>\n            <button\n              onClick={handleBatchPayment}\n              className=\"btn-morandi-primary !py-1.5 !px-4 text-sm\"\n            >\n              批次請款\n            </button>\n          </div>\n        )}\n\n        {/* 已處理資訊 */}\n        {advanceList.items.some(item => item.status === 'completed') && (\n          <div className=\"mt-3 pt-3 border-t border-morandi-gold/20\">\n            <div className=\"text-xs text-morandi-secondary\">\n              {advanceList.items.filter(item => item.status === 'completed').length} 筆已處理\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/BulletinBoard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2269,2272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2269,2272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getBorderColor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":124,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9367,9370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9367,9370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Pin, Calendar, AlertCircle, Plus, Edit, Trash2, Building2 } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useWorkspaceStore } from '@/stores/workspace-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\n\ninterface Bulletin {\n  id: string;\n  title: string;\n  content: string;\n  type: 'announcement' | 'notice' | 'event';\n  is_pinned: boolean;\n  author?: {\n    display_name: string;\n    english_name: string;\n  };\n  created_at: string;\n  updated_at: string;\n}\n\nexport function BulletinBoard() {\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [editingBulletin, setEditingBulletin] = useState<Bulletin | null>(null);\n  const [newBulletin, setNewBulletin] = useState({\n    title: '',\n    content: '',\n    type: 'announcement' as const,\n    is_pinned: false\n  });\n\n  const {\n    bulletins,\n    currentWorkspace,\n    loading,\n    loadBulletins,\n    createBulletin,\n    updateBulletin,\n    deleteBulletin\n  } = useWorkspaceStore();\n\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    if (currentWorkspace?.id) {\n      loadBulletins(currentWorkspace.id);\n    }\n  }, [currentWorkspace?.id, loadBulletins]);\n\n  const handleSubmit = async () => {\n    if (!user?.id || !currentWorkspace?.id) return;\n\n    try {\n      if (editingBulletin) {\n        await updateBulletin(editingBulletin.id, newBulletin);\n        setEditingBulletin(null);\n      } else {\n        await createBulletin({\n          ...newBulletin,\n          workspace_id: currentWorkspace.id,\n          author_id: user.id,\n          priority: newBulletin.is_pinned ? 10 : 0\n        });\n      }\n\n      setShowAddDialog(false);\n      resetForm();\n    } catch (error) {\n      console.error('操作失敗:', error);\n    }\n  };\n\n  const handleEdit = (bulletin: Bulletin) => {\n    setNewBulletin({\n      title: bulletin.title,\n      content: bulletin.content,\n      type: bulletin.type as any,\n      is_pinned: bulletin.is_pinned\n    });\n    setEditingBulletin(bulletin);\n    setShowAddDialog(true);\n  };\n\n  const handleDelete = async (bulletinId: string) => {\n    if (confirm('確定要刪除這則公告嗎？')) {\n      await deleteBulletin(bulletinId);\n    }\n  };\n\n  const resetForm = () => {\n    setNewBulletin({ title: '', content: '', type: 'announcement', is_pinned: false });\n    setEditingBulletin(null);\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'announcement':\n        return <AlertCircle className=\"w-4 h-4 text-morandi-gold\" />;\n      case 'notice':\n        return <AlertCircle className=\"w-4 h-4 text-morandi-red\" />;\n      case 'event':\n        return <Calendar className=\"w-4 h-4 text-morandi-green\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4 text-morandi-secondary\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    const labels = {\n      'announcement': '一般公告',\n      'notice': '重要通知',\n      'event': '活動訊息'\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const getBorderColor = (type: string, is_pinned: boolean) => {\n    if (is_pinned) return 'border-morandi-gold';\n    switch (type) {\n      case 'notice': return 'border-morandi-red/30';\n      case 'event': return 'border-morandi-green/30';\n      default: return 'border-border';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-card border-b border-border px-6 py-4\">\n        <div className=\"animate-pulse space-y-4 px-6 py-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"morandi-card p-4 h-32\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 頂部操作列 */}\n      <div className=\"morandi-card p-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-lg sm:text-xl font-bold text-morandi-primary\">公告欄</h2>\n            <p className=\"text-xs sm:text-sm text-morandi-secondary mt-1\">\n              {currentWorkspace?.name || '工作空間'} 的最新消息\n            </p>\n          </div>\n          <Button\n            onClick={() => setShowAddDialog(true)}\n            className=\"bg-morandi-gold hover:bg-morandi-gold/80 text-white border-0\"\n          >\n            <Plus size={16} className=\"mr-2\" />\n            <span className=\"hidden sm:inline\">發布公告</span>\n            <span className=\"sm:hidden\">發布</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* 公告列表 */}\n      <div className=\"space-y-4\">\n        {bulletins.length === 0 ? (\n          <div className=\"morandi-card p-8 text-center\">\n            <Building2 className=\"w-12 h-12 mx-auto mb-4 text-morandi-secondary opacity-50\" />\n            <p className=\"text-morandi-secondary\">目前沒有任何公告</p>\n            <p className=\"text-sm text-morandi-secondary/70 mt-1\">\n              點擊上方按鈕發布第一則公告\n            </p>\n          </div>\n        ) : (\n          bulletins.map(bulletin => (\n            <div\n              key={bulletin.id}\n              className={cn(\n                \"morandi-card p-6 transition-all hover:shadow-md\",\n                bulletin.is_pinned && \"border-morandi-gold bg-morandi-gold/5\"\n              )}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    {bulletin.is_pinned && (\n                      <Pin className=\"w-4 h-4 text-morandi-gold fill-morandi-gold\" />\n                    )}\n                    {getTypeIcon(bulletin.type)}\n                    <span className=\"text-xs px-2 py-1 rounded-full bg-morandi-container text-morandi-secondary\">\n                      {getTypeLabel(bulletin.type)}\n                    </span>\n                    <h3 className=\"font-semibold text-morandi-primary text-sm sm:text-base\">\n                      {bulletin.title}\n                    </h3>\n                  </div>\n\n                  <p className=\"text-morandi-secondary whitespace-pre-wrap mb-3 leading-relaxed\">\n                    {bulletin.content}\n                  </p>\n\n                  <div className=\"flex items-center gap-4 text-sm text-morandi-secondary\">\n                    <span>\n                      {bulletin.author?.display_name || '系統'}\n                    </span>\n                    <span>\n                      {format(new Date(bulletin.created_at), 'yyyy/MM/dd HH:mm')}\n                    </span>\n                    {bulletin.created_at !== bulletin.updated_at && (\n                      <span className=\"text-xs\">(已編輯)</span>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex gap-1 ml-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"w-8 h-8 hover:bg-morandi-container text-morandi-secondary hover:text-morandi-primary\"\n                    onClick={() => handleEdit(bulletin)}\n                    title=\"編輯公告\"\n                  >\n                    <Edit size={14} />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"w-8 h-8 hover:bg-morandi-container text-morandi-secondary hover:text-morandi-red\"\n                    onClick={() => handleDelete(bulletin.id)}\n                    title=\"刪除公告\"\n                  >\n                    <Trash2 size={14} />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* 新增/編輯公告對話框 */}\n      <Dialog open={showAddDialog} onOpenChange={(open) => {\n        setShowAddDialog(open);\n        if (!open) resetForm();\n      }}>\n        <DialogContent className=\"max-w-md morandi-card border-0\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingBulletin ? '編輯公告' : '發布新公告'}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">標題</label>\n              <Input\n                value={newBulletin.title}\n                onChange={(e) => setNewBulletin({...newBulletin, title: e.target.value})}\n                className=\"mt-1\"\n                placeholder=\"請輸入公告標題\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-morandi-primary\">內容</label>\n              <Textarea\n                value={newBulletin.content}\n                onChange={(e) => setNewBulletin({...newBulletin, content: e.target.value})}\n                className=\"mt-1 min-h-[120px]\"\n                placeholder=\"請輸入公告內容\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <label className=\"text-sm font-medium text-morandi-primary\">類型</label>\n                <select\n                  value={newBulletin.type}\n                  onChange={(e) => setNewBulletin({...newBulletin, type: e.target.value as any})}\n                  className=\"mt-1 px-3 py-2 border border-border rounded-md text-sm\"\n                >\n                  <option value=\"announcement\">一般公告</option>\n                  <option value=\"notice\">重要通知</option>\n                  <option value=\"event\">活動訊息</option>\n                </select>\n              </div>\n\n              <label className=\"flex items-center gap-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={newBulletin.is_pinned}\n                  onChange={(e) => setNewBulletin({...newBulletin, is_pinned: e.target.checked})}\n                  className=\"rounded\"\n                />\n                <span>置頂公告</span>\n              </label>\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowAddDialog(false)}\n              >\n                取消\n              </Button>\n              <Button\n                onClick={handleSubmit}\n                className=\"bg-morandi-gold hover:bg-morandi-gold/80 text-morandi-primary border-0\"\n                disabled={!newBulletin.title.trim() || !newBulletin.content.trim()}\n              >\n                {editingBulletin ? '更新' : '發布'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/CanvasEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/ChannelChat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreHorizontal' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link2' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShoppingCart' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FinanceAlertDialog' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FinanceAlertCard' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3141,3144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3141,3144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3218,3221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3218,3221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showChannelForm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":86,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'processAdvanceItem' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":115,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateOrderReceiptStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":116,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChannels'. Either include it or remove the dependency array.","line":138,"column":6,"nodeType":"ArrayExpression","endLine":138,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [currentWorkspace.id, loadChannels]","fix":{"range":[4811,4833],"text":"[currentWorkspace.id, loadChannels]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'channelMessages', 'loadAdvanceLists', 'loadMessages', 'loadSharedOrderLists', and 'messages'. Either include them or remove the dependency array.","line":190,"column":6,"nodeType":"ArrayExpression","endLine":190,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [channelMessages, loadAdvanceLists, loadMessages, loadSharedOrderLists, messages, selectedChannel.id]","fix":{"range":[6264,6285],"text":"[channelMessages, loadAdvanceLists, loadMessages, loadSharedOrderLists, messages, selectedChannel.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'currentMessages' conditional could make the dependencies of useEffect Hook (at line 209) change on every render. To fix this, wrap the initialization of 'currentMessages' in its own useMemo() Hook.","line":203,"column":9,"nodeType":"VariableDeclarator","endLine":205,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCreateChannel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":265,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Hash,\n  Users,\n  Send,\n  Plus,\n  Settings,\n  Smile,\n  MoreHorizontal,\n  Trash2,\n  Paperclip,\n  X,\n  FileText,\n  Image as ImageIcon,\n  Receipt,\n  DollarSign,\n  CheckSquare,\n  Link2,\n  TrendingUp,\n  Download,\n  ShoppingCart,\n  Wallet,\n  AlertTriangle\n} from 'lucide-react';\nimport { useWorkspaceStore, type Message } from '@/stores/workspace-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { format, isToday, isYesterday } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { useAutoCreateTourChannels } from '@/hooks/use-auto-create-tour-channels';\nimport { useCleanupOrphanChannels } from '@/hooks/use-cleanup-orphan-channels';\nimport { ChannelSidebar } from './ChannelSidebar';\nimport { ChannelTabs } from './ChannelTabs';\nimport { ShareAdvanceDialog } from './ShareAdvanceDialog';\nimport { AdvanceListCard } from './AdvanceListCard';\nimport { FinanceAlertDialog } from './FinanceAlertDialog';\nimport { FinanceAlertCard } from './FinanceAlertCard';\nimport { ShareOrdersDialog } from './ShareOrdersDialog';\nimport { OrderListCard } from './OrderListCard';\nimport { CreateReceiptDialog } from './CreateReceiptDialog';\nimport { CreatePaymentRequestDialog } from './CreatePaymentRequestDialog';\n\n\nconst downloadFile = (path: string, bucket: string, fileName: string) => {\n  console.log('📦 本地模式：檔案下載功能暫時停用', { path, bucket, fileName });\n  alert('檔案下載功能目前僅支援線上模式');\n};\n\nexport function ChannelChat() {\n  // ❌ 移除本地 state，改用 store 管理\n  // const [selectedChannel, setSelectedChannel] = useState<any>(null);\n  const [messageText, setMessageText] = useState('');\n  const [showMemberSidebar, setShowMemberSidebar] = useState(false);\n  const [attachedFiles, setAttachedFiles] = useState<File[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [channelMessages, setChannelMessages] = useState<Record<string, Message[]>>({});\n  const [isLoadingMessages, setIsLoadingMessages] = useState(false);\n  const [isSwitching, setIsSwitching] = useState(false);\n  const [showQuickMenu, setShowQuickMenu] = useState(false);\n  const [showShareQuoteDialog, setShowShareQuoteDialog] = useState(false);\n  const [showShareTourDialog, setShowShareTourDialog] = useState(false);\n  const [showNewPaymentDialog, setShowNewPaymentDialog] = useState(false);\n  const [showNewReceiptDialog, setShowNewReceiptDialog] = useState(false);\n  const [showNewTaskDialog, setShowNewTaskDialog] = useState(false);\n  const [showShareAdvanceDialog, setShowShareAdvanceDialog] = useState(false);\n  const [showShareOrdersDialog, setShowShareOrdersDialog] = useState(false);\n  const [showCreateReceiptDialog, setShowCreateReceiptDialog] = useState(false);\n  const [showCreatePaymentDialog, setShowCreatePaymentDialog] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [selectedAdvanceItem, setSelectedAdvanceItem] = useState<any>(null);\n  const [selectedAdvanceListId, setSelectedAdvanceListId] = useState<string>('');\n  const [uploadingFiles, setUploadingFiles] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [showChannelForm, setShowChannelForm] = useState(false);\n  const [newChannelName, setNewChannelName] = useState('');\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const [editChannelName, setEditChannelName] = useState('');\n  const [editChannelDescription, setEditChannelDescription] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const messageInputRef = useRef<HTMLDivElement>(null);\n  const quickMenuRef = useRef<HTMLDivElement>(null);\n\n  const {\n    channels,\n    messages,\n    currentWorkspace,\n    loading,\n    selectedChannel,      // ✨ 從 store 取得\n    selectChannel,        // ✨ 從 store 取得\n    loadChannels,\n    createChannel,\n    updateChannel,\n    deleteChannel,\n    loadMessages,\n    sendMessage,\n    updateMessageReactions,\n    advanceLists,\n    sharedOrderLists,\n    loadAdvanceLists,\n    loadSharedOrderLists,\n    deleteAdvanceList,\n    processAdvanceItem,\n    updateOrderReceiptStatus\n  } = useWorkspaceStore();\n\n  const { user, currentProfile } = useAuthStore();\n\n\n  useAutoCreateTourChannels();\n\n\n  useCleanupOrphanChannels();\n\n  useEffect(() => {\n    console.log('ChannelChat - 用戶狀態:', user);\n  }, [user]);\n\n\n  useEffect(() => {\n    if (currentWorkspace?.id) {\n      console.log('載入頻道列表...');\n      loadChannels(currentWorkspace.id);\n    }\n\n  }, [currentWorkspace?.id]);\n\n  useEffect(() => {\n    if (channels.length > 0 && !selectedChannel) {\n      const defaultChannel = channels.find(c => c.name === '一般討論') || channels[0];\n      selectChannel(defaultChannel);  // ✨ 改用 store 的 selectChannel\n    }\n  }, [channels, selectedChannel, selectChannel]);\n\n\n  useEffect(() => {\n    if (showSettingsDialog && selectedChannel) {\n      setEditChannelName(selectedChannel.name);\n      setEditChannelDescription(selectedChannel.description || '');\n    }\n  }, [showSettingsDialog, selectedChannel]);\n\n\n  useEffect(() => {\n    if (selectedChannel?.id) {\n\n      if (!channelMessages[selectedChannel.id]) {\n        console.log('載入訊息列表...', selectedChannel.id);\n        setIsLoadingMessages(true);\n        Promise.all([\n          loadMessages(selectedChannel.id),\n          loadAdvanceLists(selectedChannel.id),\n          loadSharedOrderLists(selectedChannel.id)\n        ]).then(() => {\n          setIsLoadingMessages(false);\n\n          setChannelMessages(prev => ({\n            ...prev,\n            [selectedChannel.id]: messages\n          }));\n        });\n      } else {\n\n        Promise.all([\n          loadMessages(selectedChannel.id),\n          loadAdvanceLists(selectedChannel.id),\n          loadSharedOrderLists(selectedChannel.id)\n        ]).then(() => {\n\n          setChannelMessages(prev => ({\n            ...prev,\n            [selectedChannel.id]: messages\n          }));\n        });\n      }\n    }\n\n  }, [selectedChannel?.id]);\n\n\n  useEffect(() => {\n    if (selectedChannel?.id && messages.length > 0) {\n      setChannelMessages(prev => ({\n        ...prev,\n        [selectedChannel.id]: messages\n      }));\n    }\n  }, [messages, selectedChannel?.id]);\n\n\n  const currentMessages = selectedChannel?.id \n    ? (channelMessages[selectedChannel.id] || messages) \n    : [];\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [currentMessages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    console.log('嘗試發送訊息:', { messageText, selectedChannel, user, attachedFiles });\n\n    if (!messageText.trim() && attachedFiles.length === 0) {\n      console.log('訊息內容為空且無附件');\n      return;\n    }\n\n    if (!selectedChannel) {\n      console.log('未選擇頻道');\n      return;\n    }\n\n    if (!user) {\n      console.log('用戶未登入');\n      alert('請先登入才能發送訊息');\n      return;\n    }\n\n    try {\n      setUploadingFiles(true);\n      setUploadProgress(0);\n\n      await sendMessage({\n        channel_id: selectedChannel.id,\n        author_id: user.id,\n        content: messageText.trim() || '（傳送了附件）',\n        author: {\n          id: user.id,\n          display_name: currentProfile?.display_name || user.display_name || '未知用戶',\n          avatar: undefined\n        },\n        attachments: attachedFiles.length > 0 ? attachedFiles : undefined\n      });\n\n      setMessageText('');\n      setAttachedFiles([]);\n      setUploadProgress(100);\n      console.log('訊息發送成功');\n    } catch (error) {\n      console.error('發送訊息失敗:', error);\n      alert('發送訊息失敗，請稍後再試');\n    } finally {\n      setUploadingFiles(false);\n      setTimeout(() => setUploadProgress(0), 1000);\n    }\n  };\n\n  const handleCreateChannel = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newChannelName.trim() || !currentWorkspace) return;\n\n    try {\n      await createChannel({\n        workspace_id: currentWorkspace.id,\n        name: newChannelName.toLowerCase().replace(/\\s+/g, '-'),\n        type: 'public',\n        created_by: user?.id\n      });\n      setNewChannelName('');\n      setShowChannelForm(false);\n    } catch (error) {\n      console.error('建立頻道失敗:', error);\n    }\n  };\n\n  const handleReaction = async (messageId: string, emoji: string) => {\n    if (!user) return;\n\n    const message = messages.find(m => m.id === messageId);\n    if (!message) return;\n\n    const currentReactions = { ...message.reactions };\n    if (!currentReactions[emoji]) {\n      currentReactions[emoji] = [];\n    }\n\n    const userIndex = currentReactions[emoji].indexOf(user.id);\n    if (userIndex > -1) {\n      currentReactions[emoji].splice(userIndex, 1);\n      if (currentReactions[emoji].length === 0) {\n        delete currentReactions[emoji];\n      }\n    } else {\n      currentReactions[emoji].push(user.id);\n    }\n\n    await updateMessageReactions(messageId, currentReactions);\n  };\n\n  const formatMessageTime = (dateString: string) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return '';\n\n    if (isToday(date)) {\n      return format(date, 'HH:mm');\n    } else if (isYesterday(date)) {\n      return `昨天 ${format(date, 'HH:mm')}`;\n    } else {\n      return format(date, 'MM/dd HH:mm');\n    }\n  };\n\n\n  const MAX_FILE_SIZE = 10 * 1024 * 1024;\n  const ALLOWED_FILE_TYPES = {\n    'image/*': ['.jpg', '.jpeg', '.png', '.gif', '.webp'],\n    'application/pdf': ['.pdf'],\n    'application/msword': ['.doc'],\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n    'application/vnd.ms-excel': ['.xls'],\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\n    'text/plain': ['.txt']\n  };\n\n\n  const validateFile = (file: File): { valid: boolean; error?: string } => {\n\n    if (file.size > MAX_FILE_SIZE) {\n      return {\n        valid: false,\n        error: `檔案 \"${file.name}\" 超過 10 MB 限制 (${formatFileSize(file.size)})`\n      };\n    }\n\n\n    const isValidType = Object.keys(ALLOWED_FILE_TYPES).some(type => {\n      if (type.endsWith('/*')) {\n        return file.type.startsWith(type.replace('/*', '/'));\n      }\n      return file.type === type;\n    });\n\n    if (!isValidType) {\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n      const isValidExtension = Object.values(ALLOWED_FILE_TYPES)\n        .flat()\n        .includes(fileExtension);\n\n      if (!isValidExtension) {\n        return {\n          valid: false,\n          error: `不支援的檔案格式 \"${file.name}\" (僅支援圖片、PDF、Word、Excel、文字檔)`\n        };\n      }\n    }\n\n    return { valid: true };\n  };\n\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles: File[] = [];\n    const errors: string[] = [];\n\n    files.forEach(file => {\n      const validation = validateFile(file);\n      if (validation.valid) {\n        validFiles.push(file);\n      } else if (validation.error) {\n        errors.push(validation.error);\n      }\n    });\n\n    if (errors.length > 0) {\n      alert(errors.join('\\n'));\n    }\n\n    if (validFiles.length > 0) {\n      setAttachedFiles(prev => [...prev, ...validFiles]);\n    }\n\n\n    if (e.target) {\n      e.target.value = '';\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setAttachedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const files = Array.from(e.dataTransfer.files);\n    const validFiles: File[] = [];\n    const errors: string[] = [];\n\n    files.forEach(file => {\n      const validation = validateFile(file);\n      if (validation.valid) {\n        validFiles.push(file);\n      } else if (validation.error) {\n        errors.push(validation.error);\n      }\n    });\n\n    if (errors.length > 0) {\n      alert(errors.join('\\n'));\n    }\n\n    if (validFiles.length > 0) {\n      setAttachedFiles(prev => [...prev, ...validFiles]);\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent) => {\n    const items = e.clipboardData.items;\n    const files: File[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].kind === 'file') {\n        const file = items[i].getAsFile();\n        if (file) files.push(file);\n      }\n    }\n\n    if (files.length > 0) {\n      e.preventDefault();\n      const validFiles: File[] = [];\n      const errors: string[] = [];\n\n      files.forEach(file => {\n        const validation = validateFile(file);\n        if (validation.valid) {\n          validFiles.push(file);\n        } else if (validation.error) {\n          errors.push(validation.error);\n        }\n      });\n\n      if (errors.length > 0) {\n        alert(errors.join('\\n'));\n      }\n\n      if (validFiles.length > 0) {\n        setAttachedFiles(prev => [...prev, ...validFiles]);\n      }\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return bytes + ' B';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n  };\n\n\n  const quickMenuActions = [\n    {\n      id: 'share-order',\n      icon: Receipt,\n      label: '分享待收款',\n      color: 'text-indigo-600',\n      action: () => {\n        setShowShareOrdersDialog(true);\n        setShowQuickMenu(false);\n      }\n    },\n    {\n      id: 'share-quote',\n      icon: Receipt,\n      label: '分享報價單',\n      color: 'text-blue-600',\n      action: () => {\n        setShowShareQuoteDialog(true);\n        setShowQuickMenu(false);\n      }\n    },\n    {\n      id: 'new-payment',\n      icon: DollarSign,\n      label: '新增請款單',\n      color: 'text-orange-600',\n      action: () => {\n        setShowNewPaymentDialog(true);\n        setShowQuickMenu(false);\n      }\n    },\n    {\n      id: 'new-receipt',\n      icon: DollarSign,\n      label: '新增收款單',\n      color: 'text-emerald-600',\n      action: () => {\n        setShowNewReceiptDialog(true);\n        setShowQuickMenu(false);\n      }\n    },\n    {\n      id: 'share-advance',\n      icon: Wallet,\n      label: '分享代墊清單',\n      color: 'text-purple-600',\n      action: () => {\n        setShowShareAdvanceDialog(true);\n        setShowQuickMenu(false);\n      }\n    },\n    {\n      id: 'new-task',\n      icon: CheckSquare,\n      label: '新增任務',\n      color: 'text-morandi-gold',\n      action: () => {\n        setShowNewTaskDialog(true);\n        setShowQuickMenu(false);\n      }\n    },\n    {\n      id: 'upload-file',\n      icon: Paperclip,\n      label: '上傳檔案',\n      color: 'text-morandi-secondary',\n      action: () => {\n        fileInputRef.current?.click();\n        setShowQuickMenu(false);\n      }\n    }\n  ];\n\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (quickMenuRef.current && !quickMenuRef.current.contains(event.target as Node)) {\n        setShowQuickMenu(false);\n      }\n    };\n\n    if (showQuickMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showQuickMenu]);\n\n  if (loading && channels.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-2 border-morandi-gold border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex rounded-lg border border-border overflow-hidden bg-white\">\n      {/* 頻道側邊欄 - 使用新的 ChannelSidebar 組件 */}\n      <ChannelSidebar\n        selectedChannelId={selectedChannel?.id || null}\n        onSelectChannel={(channel) => {\n          if (selectedChannel?.id !== channel.id) {\n            // 設定切換狀態，產生淡出效果\n            setIsSwitching(true);\n\n            // 150ms 後切換頻道\n            setTimeout(() => {\n              selectChannel(channel);  // ✨ 改用 store 的 selectChannel\n\n              // 再 150ms 後移除切換狀態，產生淡入效果\n              setTimeout(() => setIsSwitching(false), 150);\n            }, 150);\n          }\n        }}\n      />\n\n      {/* 主要聊天區域 - 使用 ChannelTabs 包裹 */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {selectedChannel ? (\n        <ChannelTabs\n          channel={selectedChannel}\n          headerActions={\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"w-8 h-8\"\n                onClick={() => setShowMemberSidebar(!showMemberSidebar)}\n              >\n                <Users size={16} />\n              </Button>\n            </div>\n          }\n        >\n\n            {/* 訊息與成員區域 */}\n            <div className=\"flex-1 flex min-h-0\">\n              {/* 訊息區域 */}\n              <div className={cn(\n                \"flex-1 overflow-y-auto p-4 space-y-4 min-h-0 transition-opacity duration-150\",\n                isSwitching ? \"opacity-0\" : \"opacity-100\"\n              )}>\n              {isLoadingMessages ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"animate-spin w-6 h-6 border-2 border-morandi-gold border-t-transparent rounded-full\"></div>\n                </div>\n              ) : currentMessages.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-full text-center\">\n                  <Hash size={48} className=\"text-morandi-secondary/50 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-morandi-primary mb-2\">\n                    歡迎來到 #{selectedChannel.name}\n                  </h3>\n                  <p className=\"text-morandi-secondary\">\n                    這裡還沒有任何訊息。開始對話吧！\n                  </p>\n                </div>\n              ) : (\n                currentMessages.map(message => (\n                  <div key={message.id} className=\"flex gap-3 group hover:bg-morandi-container/5 -mx-2 px-3 py-1.5 rounded transition-colors\">\n                    {/* 用戶頭像 */}\n                    <div className=\"w-9 h-9 bg-gradient-to-br from-morandi-gold/30 to-morandi-gold/10 rounded-md flex items-center justify-center text-sm font-semibold text-morandi-gold shrink-0 mt-0.5\">\n                      {message.author?.display_name?.charAt(0) || '?'}\n                    </div>\n\n                    {/* 訊息內容 */}\n                    <div className=\"flex-1 min-w-0 relative pt-0.5\">\n                      {/* 訊息標題 */}\n                      <div className=\"flex items-baseline gap-2 mb-0.5\">\n                        <span className=\"font-semibold text-morandi-primary text-[15px]\">\n                          {message.author?.display_name || '未知用戶'}\n                        </span>\n                        <span className=\"text-[11px] text-morandi-secondary/80 font-normal\">\n                          {formatMessageTime(message.created_at)}\n                        </span>\n                        {message.edited_at && (\n                          <span className=\"text-[11px] text-morandi-secondary/60\">(已編輯)</span>\n                        )}\n                      </div>\n\n                      {/* 訊息文字 */}\n                      <div className=\"text-morandi-primary text-[15px] whitespace-pre-wrap leading-[1.46668] break-words\">\n                        {message.content}\n                      </div>\n\n                      {/* 附件列表 */}\n                      {message.attachments && message.attachments.length > 0 && (\n                        <div className=\"mt-2 space-y-2\">\n                          {message.attachments.map((attachment, index) => {\n                            const isImage = attachment.fileType.startsWith('image/');\n                            return (\n                              <div\n                                key={index}\n                                className=\"inline-flex items-center gap-2 px-3 py-2 bg-morandi-container/10 border border-morandi-container rounded-lg hover:bg-morandi-container/20 transition-colors group/attachment\"\n                              >\n                                {isImage ? (\n                                  <ImageIcon size={16} className=\"text-morandi-gold shrink-0\" />\n                                ) : (\n                                  <FileText size={16} className=\"text-morandi-secondary shrink-0\" />\n                                )}\n                                <div className=\"flex-1 min-w-0\">\n                                  <p className=\"text-sm text-morandi-primary truncate max-w-[200px]\">\n                                    {attachment.fileName}\n                                  </p>\n                                  <p className=\"text-xs text-morandi-secondary\">\n                                    {formatFileSize(attachment.fileSize)}\n                                  </p>\n                                </div>\n                                <button\n                                  onClick={() => downloadFile(attachment.path, 'workspace-files', attachment.fileName)}\n                                  className=\"opacity-0 group-hover/attachment:opacity-100 transition-opacity p-1 hover:bg-morandi-gold/10 rounded\"\n                                  title=\"下載檔案\"\n                                >\n                                  <Download size={14} className=\"text-morandi-gold\" />\n                                </button>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n\n                      {/* 反應列 */}\n                      {Object.keys(message.reactions).length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {Object.entries(message.reactions).map(([emoji, users]) => (\n                            <button\n                              key={emoji}\n                              onClick={() => handleReaction(message.id, emoji)}\n                              className={cn(\n                                \"flex items-center gap-1 px-2 py-1 text-xs rounded-full border transition-colors\",\n                                users.includes(user?.id || '')\n                                  ? \"bg-morandi-gold/20 border-morandi-gold text-morandi-primary\"\n                                  : \"bg-morandi-container/20 border-border text-morandi-secondary hover:bg-morandi-container/30\"\n                              )}\n                            >\n                              <span>{emoji}</span>\n                              <span>{users.length}</span>\n                            </button>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* 反應按鈕 & 刪除按鈕 - hover 訊息時顯示 */}\n                      <div className=\"flex items-center gap-2 mt-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <div className=\"flex gap-0.5\">\n                          {['👍', '❤️', '😄', '😮', '🎉'].map(emoji => (\n                            <button\n                              key={emoji}\n                              onClick={() => handleReaction(message.id, emoji)}\n                              className=\"w-6 h-6 flex items-center justify-center text-xs hover:bg-morandi-container/30 rounded border border-morandi-container hover:border-morandi-gold/40 transition-all hover:scale-110\"\n                              title={`加上 ${emoji} 反應`}\n                            >\n                              {emoji}\n                            </button>\n                          ))}\n                        </div>\n                        {/* 刪除按鈕 - 只有作者可以刪除 */}\n                        {user?.id === message.author_id && (\n                          <button\n                            onClick={async () => {\n                              if (confirm('確定要刪除這則訊息嗎？')) {\n                                const { deleteMessage } = useWorkspaceStore.getState();\n                                await deleteMessage(message.id);\n\n                                // 同時更新 local state 中的訊息列表\n                                if (selectedChannel?.id) {\n                                  setChannelMessages(prev => ({\n                                    ...prev,\n                                    [selectedChannel.id]: prev[selectedChannel.id]?.filter(m => m.id !== message.id) || []\n                                  }));\n                                }\n                              }\n                            }}\n                            className=\"w-6 h-6 flex items-center justify-center text-xs hover:bg-morandi-red/10 rounded border border-morandi-container hover:border-morandi-red/40 transition-all hover:scale-110\"\n                            title=\"刪除訊息\"\n                          >\n                            <Trash2 size={12} className=\"text-morandi-red\" />\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n\n              {/* 代墊清單卡片 */}\n              {advanceLists.map(advanceList => (\n                <AdvanceListCard\n                  key={advanceList.id}\n                  advanceList={advanceList}\n                  userName={advanceList.author?.display_name}\n                  currentUserId={user?.id || ''}\n                  userRole=\"admin\" // TODO: 從實際權限系統取得\n                  onCreatePayment={(itemId, item) => {\n                    setSelectedAdvanceItem(item);\n                    setSelectedAdvanceListId(advanceList.id);\n                    setShowCreatePaymentDialog(true);\n                  }}\n                  onDelete={(listId) => {\n                    deleteAdvanceList(listId);\n                  }}\n                />\n              ))}\n\n              {/* 訂單列表卡片 */}\n              {sharedOrderLists.map(orderList => (\n                <OrderListCard\n                  key={orderList.id}\n                  orderList={orderList}\n                  userName={orderList.author?.display_name}\n                  currentUserId={user?.id || ''}\n                  userRole=\"admin\" // TODO: 從實際權限系統取得\n                  onCreateReceipt={(orderId, order) => {\n                    setSelectedOrder(order);\n                    setShowCreateReceiptDialog(true);\n                  }}\n                />\n              ))}\n\n              <div ref={messagesEndRef} />\n              </div>\n\n              {/* 成員側邊欄 */}\n              {showMemberSidebar && (\n                <div className=\"w-64 border-l border-border bg-morandi-container/5 flex flex-col shrink-0\">\n                  <div className=\"p-4 border-b border-border\">\n                    <h3 className=\"font-medium text-morandi-primary\">成員列表</h3>\n                  </div>\n                  <div className=\"flex-1 overflow-y-auto p-2\">\n                    <div className=\"text-center text-morandi-secondary text-sm py-4\">\n                      載入成員列表中...\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 輸入區域 */}\n            <div\n              className={cn(\n                \"p-4 border-t border-morandi-gold/20 bg-morandi-container/5 shrink-0 transition-colors\",\n                isDragging && \"bg-morandi-gold/10 border-morandi-gold\"\n              )}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n            >\n              {/* 檔案預覽區 */}\n              {attachedFiles.length > 0 && (\n                <div className=\"mb-3 flex flex-wrap gap-2\">\n                  {attachedFiles.map((file, index) => {\n                    const isImage = file.type.startsWith('image/');\n                    return (\n                      <div\n                        key={index}\n                        className=\"relative bg-white border border-morandi-container rounded-lg p-2 pr-8 flex items-center gap-2 max-w-xs\"\n                      >\n                        {isImage ? (\n                          <ImageIcon size={16} className=\"text-morandi-gold shrink-0\" />\n                        ) : (\n                          <FileText size={16} className=\"text-morandi-secondary shrink-0\" />\n                        )}\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm text-morandi-primary truncate\">{file.name}</p>\n                          <p className=\"text-xs text-morandi-secondary\">{formatFileSize(file.size)}</p>\n                        </div>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveFile(index)}\n                          className=\"absolute right-2 top-1/2 -translate-y-1/2 text-morandi-secondary hover:text-morandi-red transition-colors\"\n                        >\n                          <X size={14} />\n                        </button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n\n              {/* 上傳進度條 */}\n              {uploadingFiles && uploadProgress > 0 && (\n                <div className=\"mb-3\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-xs text-morandi-secondary\">上傳檔案中...</span>\n                    <span className=\"text-xs text-morandi-secondary\">{uploadProgress}%</span>\n                  </div>\n                  <div className=\"w-full h-1.5 bg-morandi-container/20 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-morandi-gold transition-all duration-300\"\n                      style={{ width: `${uploadProgress}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n\n              <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n                <div className=\"flex items-center gap-1 relative\">\n                  {/* 快捷選單按鈕 */}\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"w-9 h-9 text-morandi-secondary hover:text-morandi-gold hover:bg-morandi-gold/10\"\n                    onClick={() => setShowQuickMenu(!showQuickMenu)}\n                  >\n                    <Plus size={18} />\n                  </Button>\n\n                  {/* 快捷選單 */}\n                  {showQuickMenu && (\n                    <div\n                      ref={quickMenuRef}\n                      className=\"absolute bottom-full left-0 mb-2 bg-white border border-morandi-gold/20 rounded-lg shadow-xl py-1.5 min-w-[220px] z-50 animate-in fade-in slide-in-from-bottom-2 duration-200\"\n                    >\n                      <div className=\"px-3 py-1.5 border-b border-morandi-container/30\">\n                        <p className=\"text-xs font-semibold text-morandi-secondary uppercase tracking-wider\">快捷操作</p>\n                      </div>\n                      {quickMenuActions.map((action, index) => {\n                        const Icon = action.icon;\n                        const isLast = index === quickMenuActions.length - 1;\n                        return (\n                          <div key={action.id}>\n                            {isLast && <div className=\"my-1 border-t border-morandi-container/30\" />}\n                            <button\n                              type=\"button\"\n                              onClick={action.action}\n                              className=\"w-full flex items-center gap-3 px-3 py-2 hover:bg-morandi-gold/10 transition-all text-left group\"\n                            >\n                              <div className={cn(\n                                \"w-8 h-8 rounded-md flex items-center justify-center transition-all\",\n                                \"bg-gradient-to-br from-morandi-container/20 to-morandi-container/5\",\n                                \"group-hover:from-morandi-gold/10 group-hover:to-morandi-gold/5\"\n                              )}>\n                                <Icon size={16} className={cn(action.color, \"group-hover:scale-110 transition-transform\")} />\n                              </div>\n                              <span className=\"text-sm text-morandi-primary font-medium\">{action.label}</span>\n                            </button>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n\n                  {/* 附件上傳按鈕 (隱藏的 input) */}\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    multiple\n                    className=\"hidden\"\n                    onChange={handleFileSelect}\n                    accept=\"image/*,.pdf,.doc,.docx,.xls,.xlsx,.txt\"\n                  />\n                </div>\n\n                <div\n                  className=\"flex-1 relative\"\n                  ref={messageInputRef}\n                  onPaste={handlePaste}\n                >\n                  <Input\n                    value={messageText}\n                    onChange={(e) => setMessageText(e.target.value)}\n                    placeholder={`在 #${selectedChannel.name} 中輸入訊息...`}\n                    className=\"pr-10 bg-white border-morandi-container\"\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2 p-1 text-morandi-secondary hover:text-morandi-gold transition-colors pointer-events-auto z-10\"\n                  >\n                    <Smile size={16} />\n                  </button>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={(!messageText.trim() && attachedFiles.length === 0) || uploadingFiles}\n                  className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {uploadingFiles ? (\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  ) : (\n                    <Send size={16} />\n                  )}\n                </Button>\n              </form>\n\n              {isDragging && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-morandi-gold/5 border-2 border-dashed border-morandi-gold rounded-lg pointer-events-none\">\n                  <div className=\"text-center\">\n                    <Paperclip size={32} className=\"mx-auto mb-2 text-morandi-gold\" />\n                    <p className=\"text-morandi-gold font-medium\">放開以上傳檔案</p>\n                  </div>\n                </div>\n              )}\n            </div>\n        </ChannelTabs>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Hash size={48} className=\"text-morandi-secondary/50 mx-auto mb-4\" />\n              <p className=\"text-morandi-secondary\">選擇一個頻道開始對話</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* 分享代墊對話框 */}\n      {showShareAdvanceDialog && selectedChannel && user && (\n        <ShareAdvanceDialog\n          channelId={selectedChannel.id}\n          currentUserId={user.id}\n          onClose={() => setShowShareAdvanceDialog(false)}\n          onSuccess={() => {\n            console.log('代墊已分享');\n            setShowShareAdvanceDialog(false);\n          }}\n        />\n      )}\n\n      {/* 分享訂單對話框 */}\n      {showShareOrdersDialog && selectedChannel && (\n        <ShareOrdersDialog\n          channelId={selectedChannel.id}\n          onClose={() => setShowShareOrdersDialog(false)}\n          onSuccess={() => {\n            console.log('訂單已分享');\n            setShowShareOrdersDialog(false);\n            // 重新載入訂單列表\n            if (selectedChannel?.id) {\n              loadSharedOrderLists(selectedChannel.id);\n            }\n          }}\n        />\n      )}\n\n      {/* 建立收款單對話框 */}\n      {showCreateReceiptDialog && selectedOrder && (\n        <CreateReceiptDialog\n          order={selectedOrder}\n          onClose={() => {\n            setShowCreateReceiptDialog(false);\n            setSelectedOrder(null);\n          }}\n          onSuccess={(receiptId) => {\n            console.log('收款單已建立:', receiptId);\n            // TODO: 更新訂單的收款狀態\n            setShowCreateReceiptDialog(false);\n            setSelectedOrder(null);\n          }}\n        />\n      )}\n\n      {/* 建立請款單對話框（從代墊項目） */}\n      {showCreatePaymentDialog && selectedAdvanceItem && selectedAdvanceListId && (\n        <CreatePaymentRequestDialog\n          items={selectedAdvanceItem}\n          listId={selectedAdvanceListId}\n          onClose={() => {\n            setShowCreatePaymentDialog(false);\n            setSelectedAdvanceItem(null);\n            setSelectedAdvanceListId('');\n          }}\n          onSuccess={() => {\n            console.log('請款單已建立');\n            setShowCreatePaymentDialog(false);\n            setSelectedAdvanceItem(null);\n            setSelectedAdvanceListId('');\n            // 重新載入代墊列表\n            if (selectedChannel?.id) {\n              loadAdvanceLists(selectedChannel.id);\n            }\n          }}\n        />\n      )}\n\n      {/* 頻道設定對話框 - 暫時保留以後實作 */}\n      <Dialog open={showSettingsDialog} onOpenChange={setShowSettingsDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>頻道設定</DialogTitle>\n            <DialogDescription>\n              管理 #{selectedChannel?.name} 的設定\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">頻道名稱</label>\n              <Input\n                value={editChannelName}\n                onChange={(e) => setEditChannelName(e.target.value)}\n                placeholder=\"頻道名稱\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">頻道描述</label>\n              <Input\n                value={editChannelDescription}\n                onChange={(e) => setEditChannelDescription(e.target.value)}\n                placeholder=\"頻道描述（選填）\"\n              />\n            </div>\n            <div className=\"pt-4 border-t border-border\">\n              <Button\n                variant=\"destructive\"\n                className=\"w-full\"\n                onClick={async () => {\n                  console.log('刪除按鈕被點擊', { selectedChannel });\n                  if (!selectedChannel) {\n                    console.log('沒有選擇頻道');\n                    return;\n                  }\n\n                  const confirmed = confirm(`確定要刪除 #${selectedChannel.name} 頻道嗎？此操作無法復原。`);\n                  console.log('確認刪除:', confirmed);\n\n                  if (confirmed) {\n                    try {\n                      console.log('開始刪除頻道:', selectedChannel.id);\n                      await deleteChannel(selectedChannel.id);\n                      console.log('頻道刪除成功');\n                      selectChannel(null);  // ✨ 改用 store 的 selectChannel\n                      setShowSettingsDialog(false);\n                      alert('頻道已刪除');\n                    } catch (error) {\n                      console.error('刪除頻道失敗:', error);\n                      alert('刪除頻道失敗，請稍後再試');\n                    }\n                  }\n                }}\n              >\n                <Trash2 size={16} className=\"mr-2\" />\n                刪除頻道\n              </Button>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowSettingsDialog(false)}>\n              取消\n            </Button>\n            <Button onClick={async () => {\n              console.log('儲存變更按鈕被點擊');\n              if (!selectedChannel) {\n                console.log('沒有選擇頻道');\n                return;\n              }\n\n              if (!editChannelName.trim()) {\n                alert('頻道名稱不能為空');\n                return;\n              }\n\n              try {\n                console.log('開始更新頻道:', selectedChannel.id, { name: editChannelName, description: editChannelDescription });\n                await updateChannel(selectedChannel.id, {\n                  name: editChannelName.toLowerCase().replace(/\\s+/g, '-'),\n                  description: editChannelDescription.trim() || undefined\n                });\n                setShowSettingsDialog(false);\n                alert('頻道設定已更新');\n              } catch (error) {\n                console.error('更新頻道失敗:', error);\n                alert('更新頻道失敗，請稍後再試');\n              }\n            }}>\n              儲存變更\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* 分享報價單對話框 */}\n      <Dialog open={showShareQuoteDialog} onOpenChange={setShowShareQuoteDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>分享報價單</DialogTitle>\n            <DialogDescription>\n              選擇要分享到頻道的報價單\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">報價單編號</label>\n              <Input placeholder=\"輸入報價單編號搜尋...\" />\n            </div>\n            <div className=\"border border-morandi-container rounded-lg p-3 space-y-2\">\n              <p className=\"text-sm text-morandi-secondary\">暫無報價單資料</p>\n              <p className=\"text-xs text-morandi-secondary\">提示：完整功能將連接報價單系統</p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowShareQuoteDialog(false)}>\n              取消\n            </Button>\n            <Button onClick={() => {\n              // TODO: 實作分享報價單卡片\n              console.log('分享報價單卡片');\n              setShowShareQuoteDialog(false);\n            }}>\n              分享到頻道\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* 分享團況對話框 */}\n      <Dialog open={showShareTourDialog} onOpenChange={setShowShareTourDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>分享團況</DialogTitle>\n            <DialogDescription>\n              選擇要分享到頻道的團況資訊\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">團號</label>\n              <Input placeholder=\"輸入團號搜尋...\" />\n            </div>\n            <div className=\"border border-morandi-container rounded-lg p-3 space-y-2\">\n              <p className=\"text-sm text-morandi-secondary\">暫無團況資料</p>\n              <p className=\"text-xs text-morandi-secondary\">提示：完整功能將連接團況管理系統</p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowShareTourDialog(false)}>\n              取消\n            </Button>\n            <Button onClick={() => {\n              // TODO: 實作分享團況卡片\n              console.log('分享團況卡片');\n              setShowShareTourDialog(false);\n            }}>\n              分享到頻道\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* 新增請款單對話框 */}\n      <Dialog open={showNewPaymentDialog} onOpenChange={setShowNewPaymentDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>新增請款單</DialogTitle>\n            <DialogDescription>\n              建立新請款單並分享到頻道\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">請款項目</label>\n              <Input placeholder=\"輸入請款項目...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">請款金額</label>\n              <Input type=\"number\" placeholder=\"輸入請款金額...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">請款原因</label>\n              <Input placeholder=\"輸入請款原因...\" />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowNewPaymentDialog(false)}>\n              取消\n            </Button>\n            <Button onClick={() => {\n              // TODO: 實作新增請款單\n              console.log('新增請款單');\n              setShowNewPaymentDialog(false);\n            }}>\n              建立並分享\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* 新增收款單對話框 */}\n      <Dialog open={showNewReceiptDialog} onOpenChange={setShowNewReceiptDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>新增收款單</DialogTitle>\n            <DialogDescription>\n              建立新收款單並分享到頻道\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">收款項目</label>\n              <Input placeholder=\"輸入收款項目...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">收款金額</label>\n              <Input type=\"number\" placeholder=\"輸入收款金額...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">付款人</label>\n              <Input placeholder=\"輸入付款人...\" />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowNewReceiptDialog(false)}>\n              取消\n            </Button>\n            <Button onClick={() => {\n              // TODO: 實作新增收款單\n              console.log('新增收款單');\n              setShowNewReceiptDialog(false);\n            }}>\n              建立並分享\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* 新增任務對話框 */}\n      <Dialog open={showNewTaskDialog} onOpenChange={setShowNewTaskDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>新增任務</DialogTitle>\n            <DialogDescription>\n              建立新任務並分享到頻道\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">任務標題</label>\n              <Input placeholder=\"輸入任務標題...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">任務描述</label>\n              <Input placeholder=\"輸入任務描述...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">指派給</label>\n              <Input placeholder=\"輸入成員名稱...\" />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-morandi-primary\">截止日期</label>\n              <Input type=\"date\" />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowNewTaskDialog(false)}>\n              取消\n            </Button>\n            <Button onClick={() => {\n              // TODO: 實作新增任務\n              console.log('新增任務');\n              setShowNewTaskDialog(false);\n            }}>\n              建立並分享\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/ChannelSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChannelGroup' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { Hash, Lock, Star, Search, ChevronDown, ChevronRight, Plus, Settings, Filter } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport { Channel, ChannelGroup, useWorkspaceStore } from '@/stores/workspace-store';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\ninterface ChannelSidebarProps {\n  selectedChannelId: string | null;\n  onSelectChannel: (channel: Channel) => void;\n}\n\nexport function ChannelSidebar({ selectedChannelId, onSelectChannel }: ChannelSidebarProps) {\n  const {\n    channels,\n    channelGroups,\n    currentWorkspace,\n    searchQuery,\n    channelFilter,\n    setSearchQuery,\n    setChannelFilter,\n    toggleChannelFavorite,\n    createChannelGroup,\n    toggleGroupCollapse,\n  } = useWorkspaceStore();\n\n  const [showNewGroupDialog, setShowNewGroupDialog] = useState(false);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [expandedSections, setExpandedSections] = useState({\n    favorites: true,\n    ungrouped: true\n  });\n\n  // 篩選頻道\n  const filteredChannels = useMemo(() => {\n    let filtered = channels;\n\n    // 搜尋篩選\n    if (searchQuery) {\n      filtered = filtered.filter(ch =>\n        ch.name.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // 狀態篩選\n    if (channelFilter === 'starred') {\n      filtered = filtered.filter(ch => ch.is_favorite);\n    }\n\n    return filtered;\n  }, [channels, searchQuery, channelFilter]);\n\n  // 分類頻道\n  const favoriteChannels = filteredChannels.filter(ch => ch.is_favorite);\n  const ungroupedChannels = filteredChannels.filter(ch => !ch.group_id && !ch.is_favorite);\n  const groupedChannels = channelGroups.map(group => ({\n    group,\n    channels: filteredChannels.filter(ch => ch.group_id === group.id)\n  }));\n\n  const renderChannel = (channel: Channel) => {\n    const isActive = channel.id === selectedChannelId;\n\n    return (\n      <div\n        key={channel.id}\n        className={cn(\n          'group flex items-center gap-2 px-2 py-1.5 text-sm rounded cursor-pointer transition-colors',\n          isActive\n            ? 'bg-morandi-gold/15 text-morandi-primary font-medium'\n            : 'text-morandi-secondary hover:bg-morandi-container/20 hover:text-morandi-primary'\n        )}\n        onClick={() => onSelectChannel(channel)}\n      >\n        {channel.type === 'private' ? (\n          <Lock size={14} className=\"shrink-0\" />\n        ) : (\n          <Hash size={14} className=\"shrink-0\" />\n        )}\n        <span className=\"flex-1 truncate\">{channel.name}</span>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            toggleChannelFavorite(channel.id);\n          }}\n          className={cn(\n            'opacity-0 group-hover:opacity-100 p-0.5 rounded hover:bg-morandi-gold/20 transition-opacity',\n            channel.is_favorite && 'opacity-100 text-morandi-gold'\n          )}\n        >\n          <Star size={12} fill={channel.is_favorite ? 'currentColor' : 'none'} />\n        </button>\n      </div>\n    );\n  };\n\n  const handleCreateGroup = () => {\n    if (newGroupName.trim() && currentWorkspace) {\n      createChannelGroup({\n        workspace_id: currentWorkspace.id,\n        name: newGroupName.trim(),\n        is_collapsed: false,\n        order: channelGroups.length\n      });\n      setNewGroupName('');\n      setShowNewGroupDialog(false);\n    }\n  };\n\n  return (\n    <div className=\"w-[280px] bg-morandi-container/5 border-r border-morandi-gold/20 flex flex-col shrink-0\">\n      {/* 工作空間標題列 */}\n      <div className=\"h-[52px] px-6 border-b border-morandi-gold/20 bg-gradient-to-r from-morandi-gold/5 to-transparent flex items-center\">\n        <div className=\"flex items-center justify-between w-full\">\n          <h2 className=\"font-semibold text-morandi-primary truncate flex-1\">\n            {currentWorkspace?.icon} {currentWorkspace?.name || '工作空間'}\n          </h2>\n          <div className=\"flex items-center gap-1\">\n            <button className=\"btn-icon-morandi !w-7 !h-7\">\n              <Search size={14} />\n            </button>\n            <DropdownMenu>\n              <DropdownMenuTrigger className=\"btn-icon-morandi !w-7 !h-7\">\n                <Filter size={14} />\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => setChannelFilter('all')} className=\"dropdown-item-morandi\">\n                  全部頻道\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setChannelFilter('starred')} className=\"dropdown-item-morandi\">\n                  已加星號\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setChannelFilter('unread')} className=\"dropdown-item-morandi\">\n                  未讀訊息\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => setChannelFilter('muted')} className=\"dropdown-item-morandi\">\n                  已靜音\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n            <button className=\"btn-icon-morandi !w-7 !h-7\">\n              <Settings size={14} />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 搜尋框 */}\n      <div className=\"px-4 py-2\">\n        <input\n          type=\"text\"\n          placeholder=\"搜尋頻道...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"input-morandi h-8 text-sm\"\n        />\n      </div>\n\n      {/* 頻道區塊 */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {/* 我的最愛 */}\n        {favoriteChannels.length > 0 && (\n          <div className=\"px-2 py-2\">\n            <button\n              className=\"flex items-center gap-1 px-2 py-1 text-xs font-semibold text-morandi-secondary uppercase tracking-wider w-full hover:bg-morandi-container/20 rounded transition-colors\"\n              onClick={() => setExpandedSections(prev => ({ ...prev, favorites: !prev.favorites }))}\n            >\n              {expandedSections.favorites ? <ChevronDown size={12} /> : <ChevronRight size={12} />}\n              <Star size={12} />\n              <span>我的最愛</span>\n            </button>\n            {expandedSections.favorites && (\n              <div className=\"mt-1 space-y-0.5\">\n                {favoriteChannels.map(renderChannel)}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 自訂群組 */}\n        {groupedChannels.map(({ group, channels: groupChannels }) => (\n          <div key={group.id} className=\"px-2 py-2\">\n            <div className=\"flex items-center justify-between group/section\">\n              <button\n                className=\"flex items-center gap-1 px-2 py-1 text-xs font-semibold text-morandi-secondary uppercase tracking-wider flex-1 hover:bg-morandi-container/20 rounded transition-colors\"\n                onClick={() => toggleGroupCollapse(group.id)}\n              >\n                {group.is_collapsed ? <ChevronRight size={12} /> : <ChevronDown size={12} />}\n                <span>{group.name}</span>\n              </button>\n            </div>\n            {!group.is_collapsed && groupChannels.length > 0 && (\n              <div className=\"mt-1 space-y-0.5\">\n                {groupChannels.map(renderChannel)}\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* 未分組頻道 */}\n        {ungroupedChannels.length > 0 && (\n          <div className=\"px-2 py-2\">\n            <div className=\"flex items-center justify-between group/section\">\n              <button\n                className=\"flex items-center gap-1 px-2 py-1 text-xs font-semibold text-morandi-secondary uppercase tracking-wider flex-1 hover:bg-morandi-container/20 rounded transition-colors\"\n                onClick={() => setExpandedSections(prev => ({ ...prev, ungrouped: !prev.ungrouped }))}\n              >\n                {expandedSections.ungrouped ? <ChevronDown size={12} /> : <ChevronRight size={12} />}\n                <Hash size={12} />\n                <span>頻道</span>\n              </button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-5 w-5 opacity-0 group-hover/section:opacity-100 transition-opacity\"\n                onClick={() => setShowNewGroupDialog(true)}\n              >\n                <Plus size={12} />\n              </Button>\n            </div>\n            {expandedSections.ungrouped && (\n              <div className=\"mt-1 space-y-0.5\">\n                {ungroupedChannels.map(renderChannel)}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* 新增群組對話框 */}\n      {showNewGroupDialog && (\n        <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center z-50\">\n          <div className=\"card-morandi-elevated w-80\">\n            <h3 className=\"font-semibold mb-3 text-morandi-primary\">新增群組</h3>\n            <input\n              type=\"text\"\n              placeholder=\"群組名稱\"\n              value={newGroupName}\n              onChange={(e) => setNewGroupName(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleCreateGroup()}\n              autoFocus\n              className=\"input-morandi\"\n            />\n            <div className=\"flex gap-2 mt-3 justify-end\">\n              <button className=\"btn-morandi-secondary !py-1.5 !px-3 text-sm\" onClick={() => setShowNewGroupDialog(false)}>\n                取消\n              </button>\n              <button className=\"btn-morandi-primary !py-1.5 !px-3 text-sm\" onClick={handleCreateGroup}>建立</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/ChannelTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/CreatePaymentRequestDialog.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'itemsArray' conditional could make the dependencies of useEffect Hook (at line 41) change on every render. To fix this, wrap the initialization of 'itemsArray' in its own useMemo() Hook.","line":25,"column":9,"nodeType":"VariableDeclarator","endLine":25,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2542,2545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2542,2545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { X, Calendar } from 'lucide-react';\nimport { useTourStore, usePaymentRequestStore } from '@/stores';\nimport { useWorkspaceStore, AdvanceItem } from '@/stores/workspace-store';\n\ninterface CreatePaymentRequestDialogProps {\n  items: AdvanceItem | AdvanceItem[]; // 單項或批次\n  listId: string;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport function CreatePaymentRequestDialog({\n  items,\n  listId,\n  onClose,\n  onSuccess\n}: CreatePaymentRequestDialogProps) {\n  const { items: tours } = useTourStore();\n  const { create: createPaymentRequest } = usePaymentRequestStore();\n  const { processAdvanceItem } = useWorkspaceStore();\n\n  const itemsArray = Array.isArray(items) ? items : [items];\n  const isBatch = Array.isArray(items);\n\n  const [selectedTourId, setSelectedTourId] = useState('');\n  const [category, setCategory] = useState('其他');\n  const [supplier, setSupplier] = useState('');\n  const [requestDate, setRequestDate] = useState('');\n\n  // 計算總金額\n  const totalAmount = itemsArray.reduce((sum, item) => sum + item.amount, 0);\n\n  // 自動設定供應商為第一個代墊人\n  useEffect(() => {\n    if (itemsArray.length > 0) {\n      setSupplier(`員工代墊-${itemsArray[0].advance_person}`);\n    }\n  }, [itemsArray]);\n\n  // 獲取下個週四\n  useEffect(() => {\n    const getNextThursday = () => {\n      const today = new Date();\n      const dayOfWeek = today.getDay();\n      const daysUntilThursday = (4 - dayOfWeek + 7) % 7;\n      const nextThursday = new Date(today);\n      nextThursday.setDate(today.getDate() + (daysUntilThursday === 0 ? 7 : daysUntilThursday));\n      return nextThursday.toISOString().split('T')[0];\n    };\n    setRequestDate(getNextThursday());\n  }, []);\n\n  const handleCreate = async () => {\n    if (!selectedTourId) {\n      alert('請選擇關聯旅遊團');\n      return;\n    }\n\n    try {\n      // 建立請款單\n      const paymentRequest = await createPaymentRequest({\n        tour_id: selectedTourId,\n        request_date: requestDate,\n        total_amount: totalAmount,\n        items: itemsArray.map((item, index) => ({\n          item_number: `${index + 1}`.padStart(3, '0'),\n          category,\n          supplier,\n          description: `${item.name} - ${item.description}`,\n          unit_price: item.amount,\n          quantity: 1,\n          subtotal: item.amount,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })),\n        status: 'pending',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      } as any);\n\n      // 更新代墊項目狀態\n      for (const item of itemsArray) {\n        await processAdvanceItem(\n          listId,\n          item.id,\n          paymentRequest.id,\n          'current-user' // TODO: 從 auth store 取得當前用戶 ID\n        );\n      }\n\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('建立請款單失敗:', error);\n      alert('建立請款單失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/20 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"card-morandi-elevated w-[600px]\" onClick={(e) => e.stopPropagation()}>\n        {/* 標題列 */}\n        <div className=\"flex items-center justify-between pb-3 border-b border-morandi-gold/20\">\n          <h3 className=\"text-lg font-semibold text-morandi-primary\">\n            {isBatch ? `批次請款 (${itemsArray.length} 筆)` : '建立請款單'}\n          </h3>\n          <button onClick={onClose} className=\"btn-icon-morandi !w-8 !h-8\">\n            <X size={16} />\n          </button>\n        </div>\n\n        {/* 內容 */}\n        <div className=\"space-y-4 my-4\">\n          {/* 代墊項目資訊 */}\n          <div className=\"bg-morandi-container/5 rounded-lg p-3 border border-morandi-gold/20\">\n            <div className=\"text-sm font-medium text-morandi-secondary mb-2\">代墊項目：</div>\n            <div className=\"space-y-1\">\n              {itemsArray.map((item, index) => (\n                <div key={item.id} className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-morandi-primary\">\n                    {index + 1}. {item.name} - {item.description}\n                  </span>\n                  <span className=\"font-medium text-morandi-primary\">\n                    ${item.amount.toLocaleString()}\n                  </span>\n                </div>\n              ))}\n            </div>\n            <div className=\"flex items-center justify-between mt-2 pt-2 border-t border-morandi-gold/20\">\n              <span className=\"text-sm font-medium text-morandi-secondary\">總計：</span>\n              <span className=\"text-lg font-semibold text-morandi-primary\">\n                ${totalAmount.toLocaleString()}\n              </span>\n            </div>\n          </div>\n\n          {/* 關聯旅遊團 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              關聯旅遊團 <span className=\"text-red-500\">*</span>\n            </label>\n            <select\n              value={selectedTourId}\n              onChange={(e) => setSelectedTourId(e.target.value)}\n              className=\"input-morandi\"\n            >\n              <option value=\"\">請選擇旅遊團</option>\n              {tours.map(tour => (\n                <option key={tour.id} value={tour.id}>\n                  {tour.name} ({tour.code})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* 類別 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              類別\n            </label>\n            <input\n              type=\"text\"\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n              className=\"input-morandi\"\n            />\n          </div>\n\n          {/* 供應商 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              供應商\n            </label>\n            <input\n              type=\"text\"\n              value={supplier}\n              onChange={(e) => setSupplier(e.target.value)}\n              className=\"input-morandi\"\n            />\n          </div>\n\n          {/* 請款日期 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              請款日期 (預設下個週四)\n            </label>\n            <div className=\"relative\">\n              <input\n                type=\"date\"\n                value={requestDate}\n                onChange={(e) => setRequestDate(e.target.value)}\n                className=\"input-morandi pl-10\"\n              />\n              <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" size={16} />\n            </div>\n          </div>\n        </div>\n\n        {/* 底部操作按鈕 */}\n        <div className=\"flex gap-2 justify-end pt-3 border-t border-morandi-gold/20\">\n          <button className=\"btn-morandi-secondary !py-2 !px-4\" onClick={onClose}>\n            取消\n          </button>\n          <button className=\"btn-morandi-primary !py-2 !px-4\" onClick={handleCreate}>\n            建立請款單\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/CreateReceiptDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1722,1725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1722,1725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5104,5107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5104,5107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { X, DollarSign, Calendar } from 'lucide-react';\nimport { useReceiptOrderStore } from '@/stores';\n\ninterface CreateReceiptDialogProps {\n  order: {\n    id: string;\n    order_number: string;\n    contact_person: string;\n    total_amount: number;\n    paid_amount: number;\n    gap: number;\n  };\n  onClose: () => void;\n  onSuccess: (receiptId: string) => void;\n}\n\nexport function CreateReceiptDialog({\n  order,\n  onClose,\n  onSuccess\n}: CreateReceiptDialogProps) {\n  const { create: createReceipt } = useReceiptOrderStore();\n\n  const [receiptDate, setReceiptDate] = useState(new Date().toISOString().split('T')[0]);\n  const [paymentMethod, setPaymentMethod] = useState<'現金' | '匯款' | '刷卡' | '支票'>('匯款');\n  const [amount, setAmount] = useState(order.gap.toString());\n  const [note, setNote] = useState('');\n\n  const handleCreate = async () => {\n    try {\n      const receiptData = {\n        order_id: order.id,\n        order_number: order.order_number,\n        tour_id: '', // TODO: 從訂單取得 tour_id\n        code: '', // TODO: 從訂單取得 code\n        tour_name: '', // TODO: 從訂單取得 tour_name\n        contact_person: order.contact_person,\n        receipt_date: receiptDate,\n        payment_items: [\n          {\n            payment_method: paymentMethod,\n            amount: parseFloat(amount),\n            transaction_date: receiptDate,\n            note\n          }\n        ],\n        total_amount: parseFloat(amount),\n        status: '已收款' as const,\n        note,\n        created_by: 'current-user', // TODO: 從 auth store 取得\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      const receipt = await createReceipt(receiptData as any);\n      onSuccess(receipt.id);\n      onClose();\n    } catch (error) {\n      console.error('建立收款單失敗:', error);\n      alert('建立收款單失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/20 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"card-morandi-elevated w-[500px]\" onClick={(e) => e.stopPropagation()}>\n        {/* 標題列 */}\n        <div className=\"flex items-center justify-between pb-3 border-b border-morandi-gold/20\">\n          <div className=\"flex items-center gap-2\">\n            <DollarSign className=\"text-morandi-gold\" size={20} />\n            <h3 className=\"text-lg font-semibold text-morandi-primary\">建立收款單</h3>\n          </div>\n          <button onClick={onClose} className=\"btn-icon-morandi !w-8 !h-8\">\n            <X size={16} />\n          </button>\n        </div>\n\n        {/* 內容 */}\n        <div className=\"space-y-4 my-4\">\n          {/* 訂單資訊 */}\n          <div className=\"bg-morandi-container/5 rounded-lg p-3 border border-morandi-gold/20\">\n            <div className=\"text-sm font-medium text-morandi-secondary mb-2\">訂單資訊：</div>\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-morandi-secondary\">訂單號：</span>\n                <span className=\"font-medium text-morandi-primary\">{order.order_number}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-morandi-secondary\">客戶：</span>\n                <span className=\"text-morandi-primary\">{order.contact_person}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-morandi-secondary\">總額：</span>\n                <span className=\"text-morandi-primary\">${order.total_amount.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-morandi-secondary\">已收：</span>\n                <span className=\"text-morandi-primary\">${order.paid_amount.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm pt-2 border-t border-morandi-gold/20\">\n                <span className=\"text-morandi-secondary\">待收金額：</span>\n                <span className=\"text-lg font-semibold text-red-600\">${order.gap.toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* 收款日期 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              收款日期\n            </label>\n            <div className=\"relative\">\n              <input\n                type=\"date\"\n                value={receiptDate}\n                onChange={(e) => setReceiptDate(e.target.value)}\n                className=\"input-morandi pl-10\"\n              />\n              <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" size={16} />\n            </div>\n          </div>\n\n          {/* 收款方式 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              收款方式\n            </label>\n            <select\n              value={paymentMethod}\n              onChange={(e) => setPaymentMethod(e.target.value as any)}\n              className=\"input-morandi\"\n            >\n              <option value=\"現金\">現金</option>\n              <option value=\"匯款\">匯款</option>\n              <option value=\"刷卡\">刷卡</option>\n              <option value=\"支票\">支票</option>\n            </select>\n          </div>\n\n          {/* 收款金額 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              收款金額\n            </label>\n            <input\n              type=\"number\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              className=\"input-morandi\"\n              placeholder=\"輸入收款金額\"\n            />\n          </div>\n\n          {/* 備註 */}\n          <div>\n            <label className=\"block text-sm font-medium text-morandi-secondary mb-2\">\n              備註（選填）\n            </label>\n            <textarea\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              className=\"input-morandi\"\n              rows={3}\n              placeholder=\"輸入備註...\"\n            />\n          </div>\n        </div>\n\n        {/* 底部操作按鈕 */}\n        <div className=\"flex gap-2 justify-end pt-3 border-t border-morandi-gold/20\">\n          <button className=\"btn-morandi-secondary !py-2 !px-4\" onClick={onClose}>\n            取消\n          </button>\n          <button\n            className=\"btn-morandi-primary !py-2 !px-4\"\n            onClick={handleCreate}\n            disabled={!amount || parseFloat(amount) <= 0}\n          >\n            建立收款單\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/FinanceAlertCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getRiskBadge' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { AlertTriangle, ChevronDown, ChevronUp, Send } from 'lucide-react';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useTourStore } from '@/stores';\n\ninterface FinanceAlertCardProps {\n  tourIds: string[];\n  authorName: string;\n  createdAt: string;\n}\n\nexport function FinanceAlertCard({ tourIds, authorName, createdAt }: FinanceAlertCardProps) {\n  const { items: tours } = useTourStore();\n  const [expanded, setExpanded] = useState(false);\n\n  // 取得選中的旅遊團資料\n  const selectedTours = tours.filter(tour => tourIds.includes(tour.id)).map(tour => ({\n    ...tour,\n    totalCost: tour.total_cost || 0,\n    totalRevenue: tour.total_revenue || 0,\n    gap: (tour.total_cost || 0) - (tour.total_revenue || 0),\n    riskLevel: ((tour.total_cost || 0) - (tour.total_revenue || 0)) > 50000 ? 'high' : 'medium'\n  }));\n\n  // 分類訂單\n  const criticalTours = selectedTours.filter(t => t.totalCost > 0 && t.totalRevenue === 0);\n  const partialTours = selectedTours.filter(t => t.totalRevenue > 0 && t.gap > 0);\n\n  const totalGap = selectedTours.reduce((sum, tour) => sum + tour.gap, 0);\n\n  const getRiskBadge = (level: string) => {\n    switch (level) {\n      case 'high':\n        return '🔴';\n      case 'medium':\n        return '🟡';\n      default:\n        return '🟢';\n    }\n  };\n\n  const handleSendReminder = (tour: typeof selectedTours[0]) => {\n    // TODO: 實作發送提醒功能\n    alert(`發送收款提醒：${tour.name}`);\n  };\n\n  return (\n    <div className=\"card-morandi p-4 space-y-3\">\n      {/* 標題 */}\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"text-morandi-gold\" size={20} />\n          <div>\n            <p className=\"font-semibold text-morandi-primary\">\n              {authorName} 分享了財務預警訂單\n            </p>\n            <p className=\"text-xs text-morandi-secondary mt-0.5\">\n              {new Date(createdAt).toLocaleString('zh-TW')}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* 高風險區：已支出未收款 */}\n      {criticalTours.length > 0 && (\n        <div className=\"bg-morandi-red/10 border border-morandi-red/20 rounded-lg p-3\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <span className=\"text-sm font-semibold text-morandi-red\">\n              🔴 已支出未收款（{criticalTours.length}筆）- 優先處理\n            </span>\n          </div>\n\n          <div className=\"space-y-2\">\n            {criticalTours.map(tour => (\n              <div\n                key={tour.id}\n                className=\"bg-white rounded p-3 space-y-2\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium text-morandi-primary\">\n                      {tour.name} <span className=\"text-xs text-morandi-secondary\">#{tour.code}</span>\n                    </p>\n                    <p className=\"text-sm text-morandi-secondary mt-1\">\n                      已支出：<span className=\"text-morandi-primary font-medium\">\n                        NT$ {tour.totalCost.toLocaleString()}\n                      </span> | 已收：<span className=\"text-morandi-red font-medium\">NT$ 0</span> ⚠️\n                    </p>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleSendReminder(tour)}\n                    className=\"btn-morandi-primary !h-8\"\n                  >\n                    <Send size={14} className=\"mr-1\" />\n                    催款\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-3 pt-3 border-t border-morandi-red/20\">\n            <p className=\"text-sm font-semibold text-morandi-red\">\n              總計已墊：NT$ {criticalTours.reduce((sum, t) => sum + t.totalCost, 0).toLocaleString()}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* 中風險區：部分收款 */}\n      {partialTours.length > 0 && (\n        <div>\n          <button\n            onClick={() => setExpanded(!expanded)}\n            className=\"flex items-center gap-2 text-sm font-semibold text-morandi-gold hover:text-morandi-primary transition-colors\"\n          >\n            🟡 部分收款（{partialTours.length}筆）- 一般追蹤\n            {expanded ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n          </button>\n\n          {expanded && (\n            <div className=\"mt-2 space-y-2\">\n              {partialTours.map(tour => (\n                <div\n                  key={tour.id}\n                  className=\"bg-morandi-container/20 rounded p-3\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-morandi-primary text-sm\">\n                        {tour.name}\n                      </p>\n                      <p className=\"text-xs text-morandi-secondary mt-1\">\n                        已付 ${(tour.totalCost / 1000).toFixed(0)}k |\n                        已收 ${(tour.totalRevenue / 1000).toFixed(0)}k |\n                        缺 <span className=\"text-morandi-red font-medium\">\n                          ${(tour.gap / 1000).toFixed(0)}k\n                        </span>\n                      </p>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleSendReminder(tour)}\n                      className=\"btn-morandi-secondary !h-8\"\n                    >\n                      提醒\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 底部統計 */}\n      <div className=\"pt-3 border-t border-morandi-gold/20\">\n        <div className=\"flex items-center justify-between\">\n          <p className=\"text-sm text-morandi-secondary\">\n            共 {selectedTours.length} 筆訂單\n          </p>\n          <p className=\"text-sm font-semibold text-morandi-primary\">\n            總缺口：<span className=\"text-morandi-red\">NT$ {totalGap.toLocaleString()}</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/FinanceAlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/OrderListCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Order' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[782,785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[782,785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentUserId' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1255,1258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1255,1258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":142,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Receipt, ChevronDown, ChevronUp, DollarSign, Check } from 'lucide-react';\nimport { Order } from '@/stores/types';\n\ninterface SharedOrderList {\n  id: string;\n  channel_id: string;\n  orders: Array<{\n    id: string;\n    order_number: string;\n    contact_person: string;\n    total_amount: number;\n    paid_amount: number;\n    gap: number;\n    collection_rate: number;\n    invoice_status?: 'not_invoiced' | 'invoiced';\n    receipt_status?: 'not_received' | 'received';\n  }>;\n  created_by: string;\n  created_at: string;\n  author?: {\n    id: string;\n    display_name: string;\n    avatar?: string;\n  };\n}\n\ninterface OrderListCardProps {\n  orderList: SharedOrderList;\n  userName?: string;\n  onCreateReceipt: (orderId: string, order: any) => void;\n  currentUserId: string;\n  userRole?: 'admin' | 'finance' | 'member';\n}\n\nexport function OrderListCard({\n  orderList,\n  userName = '會計',\n  onCreateReceipt,\n  currentUserId,\n  userRole = 'member'\n}: OrderListCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const totalGap = orderList.orders.reduce((sum, order) => sum + order.gap, 0);\n  const canProcess = userRole === 'admin' || userRole === 'finance';\n\n  const getOrderStatus = (order: any) => {\n    const isFullyUnpaid = order.total_amount > 0 && order.paid_amount === 0;\n    const isLowRate = order.collection_rate < 30;\n\n    if (isFullyUnpaid) {\n      return {\n        text: '❌❌ 未請款/未收款',\n        color: 'text-red-600',\n        bgColor: 'bg-red-50'\n      };\n    } else if (isLowRate) {\n      return {\n        text: '✅❌ 已請款/未收款',\n        color: 'text-orange-600',\n        bgColor: 'bg-orange-50'\n      };\n    } else {\n      return {\n        text: '部分收款',\n        color: 'text-yellow-600',\n        bgColor: 'bg-yellow-50'\n      };\n    }\n  };\n\n  return (\n    <div className=\"card-morandi-elevated my-3\">\n      {/* 標題 */}\n      <div className=\"flex items-start gap-2 mb-3\">\n        <Receipt className=\"text-morandi-gold shrink-0 mt-1\" size={20} />\n        <div className=\"flex-1\">\n          <div className=\"font-medium text-morandi-primary\">\n            {userName} 分享了待收款訂單\n          </div>\n          <div className=\"text-xs text-morandi-secondary mt-1\">\n            {new Date(orderList.created_at).toLocaleString('zh-TW')}\n          </div>\n        </div>\n      </div>\n\n      {/* 訂單卡片 */}\n      <div className=\"bg-gradient-to-br from-morandi-container/5 to-morandi-container/10 rounded-lg border border-morandi-gold/20 overflow-hidden\">\n        {/* 收合摘要 */}\n        <div\n          className=\"p-4 cursor-pointer hover:bg-morandi-gold/5 transition-colors\"\n          onClick={() => setIsExpanded(!isExpanded)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"text-2xl\">💰</div>\n              <div>\n                <div className=\"font-medium text-morandi-primary\">\n                  📋 待處理訂單 ({orderList.orders.length}筆 / ${totalGap.toLocaleString()})\n                </div>\n                <div className=\"text-xs text-morandi-secondary mt-1\">\n                  {isExpanded ? '點擊收合詳情' : '點擊展開詳情'}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"text-right\">\n                <div className=\"text-xs text-morandi-secondary\">總缺口</div>\n                <div className=\"text-lg font-semibold text-red-600\">\n                  ${totalGap.toLocaleString()}\n                </div>\n              </div>\n              {isExpanded ? (\n                <ChevronUp className=\"text-morandi-secondary\" size={20} />\n              ) : (\n                <ChevronDown className=\"text-morandi-secondary\" size={20} />\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* 展開詳情表格 */}\n        {isExpanded && (\n          <div className=\"border-t border-morandi-gold/20\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-morandi-container/5 border-b border-morandi-gold/20\">\n                  <tr>\n                    <th className=\"text-left py-2 px-3 text-xs font-semibold text-morandi-secondary\">訂單號</th>\n                    <th className=\"text-left py-2 px-3 text-xs font-semibold text-morandi-secondary\">客戶</th>\n                    <th className=\"text-right py-2 px-3 text-xs font-semibold text-morandi-secondary\">總額</th>\n                    <th className=\"text-right py-2 px-3 text-xs font-semibold text-morandi-secondary\">已收</th>\n                    <th className=\"text-right py-2 px-3 text-xs font-semibold text-morandi-secondary\">缺口</th>\n                    <th className=\"text-center py-2 px-3 text-xs font-semibold text-morandi-secondary\">狀態</th>\n                    <th className=\"text-center py-2 px-3 text-xs font-semibold text-morandi-secondary\">操作</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {orderList.orders.map((order, index) => {\n                    const status = getOrderStatus(order);\n                    const isProcessed = order.receipt_status === 'received';\n\n                    return (\n                      <tr\n                        key={order.id}\n                        className={`border-b border-morandi-container/10 hover:bg-morandi-container/5 transition-colors ${\n                          isProcessed ? 'opacity-60' : ''\n                        }`}\n                      >\n                        <td className=\"py-2 px-3 text-sm font-medium text-morandi-primary\">\n                          {order.order_number}\n                        </td>\n                        <td className=\"py-2 px-3 text-sm text-morandi-primary\">\n                          {order.contact_person || '-'}\n                        </td>\n                        <td className=\"py-2 px-3 text-sm text-right text-morandi-primary\">\n                          ${order.total_amount.toLocaleString()}\n                        </td>\n                        <td className=\"py-2 px-3 text-sm text-right text-morandi-primary\">\n                          ${order.paid_amount.toLocaleString()}\n                        </td>\n                        <td className=\"py-2 px-3 text-sm text-right font-semibold text-red-600\">\n                          ${order.gap.toLocaleString()}\n                        </td>\n                        <td className=\"py-2 px-3 text-center\">\n                          <span className={`text-xs px-2 py-0.5 rounded ${status.bgColor} ${status.color}`}>\n                            {status.text}\n                          </span>\n                        </td>\n                        <td className=\"py-2 px-3 text-center\">\n                          {isProcessed ? (\n                            <div className=\"flex items-center justify-center gap-1 text-xs text-morandi-secondary\">\n                              <Check size={14} className=\"text-green-600\" />\n                              <span>已處理</span>\n                            </div>\n                          ) : canProcess ? (\n                            <button\n                              onClick={() => onCreateReceipt(order.id, order)}\n                              className=\"btn-morandi-primary !py-1 !px-2 text-xs flex items-center gap-1 mx-auto\"\n                            >\n                              <DollarSign size={12} />\n                              <span>建立收款單</span>\n                            </button>\n                          ) : (\n                            <div className=\"text-xs text-morandi-secondary\">待處理</div>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n\n            {/* 底部統計 */}\n            <div className=\"p-3 bg-morandi-container/5 border-t border-morandi-gold/20\">\n              <div className=\"flex items-center justify-between text-xs text-morandi-secondary\">\n                <div>\n                  共 {orderList.orders.length} 筆訂單\n                  {orderList.orders.filter(o => o.receipt_status === 'received').length > 0 && (\n                    <span className=\"ml-2\">\n                      ({orderList.orders.filter(o => o.receipt_status === 'received').length} 筆已處理)\n                    </span>\n                  )}\n                </div>\n                <div className=\"font-medium text-morandi-primary\">\n                  總缺口：${totalGap.toLocaleString()}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/PersonalCanvas.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tag' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3938,3941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3938,3941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleUpdateTags' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":186,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  FileText,\n  Plus,\n  Edit,\n  Trash2,\n  Star,\n  Search,\n  Grid,\n  List,\n  Eye,\n  Settings,\n  Tag\n} from 'lucide-react';\nimport { RichTextEditor, RichTextViewer } from './RichTextEditor';\nimport { useWorkspaceStore, PersonalCanvas as PersonalCanvasType, RichDocument } from '@/stores/workspace-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\n\ninterface PersonalCanvasProps {\n  canvasId?: string;\n}\n\ntype ViewMode = 'grid' | 'list';\ntype EditMode = 'view' | 'create' | 'edit';\n\nexport function PersonalCanvas({ canvasId }: PersonalCanvasProps) {\n  const [viewMode, setViewMode] = useState<ViewMode>('grid');\n  const [editMode, setEditMode] = useState<EditMode>('view');\n  const [selectedDocument, setSelectedDocument] = useState<RichDocument | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTag, setSelectedTag] = useState<string>('');\n  const [activeCanvasId, setActiveCanvasId] = useState<string | null>(canvasId || null);\n\n  const {\n    richDocuments,\n    personalCanvases,\n    currentWorkspace,\n    loadRichDocuments,\n    createRichDocument,\n    updateRichDocument,\n    deleteRichDocument,\n    loadPersonalCanvases,\n    createPersonalCanvas\n  } = useWorkspaceStore();\n\n  const { user } = useAuthStore();\n\n  // Load personal canvases when component mounts\n  useEffect(() => {\n    if (user?.id && currentWorkspace?.id) {\n      loadPersonalCanvases(user.id, currentWorkspace.id);\n    }\n  }, [user?.id, currentWorkspace?.id, loadPersonalCanvases]);\n\n  // Load documents when canvas changes\n  useEffect(() => {\n    if (activeCanvasId) {\n      loadRichDocuments(activeCanvasId);\n    }\n  }, [activeCanvasId, loadRichDocuments]);\n\n  // Get current canvas info\n  const currentCanvas = personalCanvases.find((canvas: PersonalCanvasType) => canvas.id === activeCanvasId);\n\n  // Function to add new canvas\n  const addNewCanvas = async () => {\n    if (!user?.id || !currentWorkspace?.id) return;\n\n    // 限制最多只能有 5 個自訂工作區\n    if (personalCanvases.length >= 5) {\n      alert('最多只能建立 5 個自訂工作區，請刪除不需要的工作區後再新增。');\n      return;\n    }\n\n    const canvasNumber = personalCanvases.length + 1;\n    const newCanvas = {\n      employee_id: user.id,\n      workspace_id: currentWorkspace.id,\n      canvas_number: canvasNumber,\n      title: `我的工作區 ${canvasNumber}`,\n      type: 'custom' as const,\n      content: {},\n      layout: {}\n    };\n\n    try {\n      const createdCanvas = await createPersonalCanvas(newCanvas);\n      // 自動切換到新建立的工作區\n      if (createdCanvas) {\n        setActiveCanvasId(createdCanvas.id);\n      }\n    } catch (error) {\n      console.error('建立工作區失敗:', error);\n      alert('建立工作區失敗，請稍後再試。');\n    }\n  };\n\n  // Filter documents based on search and tags\n  const filteredDocuments = richDocuments.filter((doc: RichDocument) => {\n    const matchesSearch = !searchTerm ||\n      doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      doc.content.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesTag = !selectedTag || (doc.tags?.includes(selectedTag) ?? false);\n\n    return matchesSearch && matchesTag;\n  });\n\n  // Get all unique tags\n  const allTags = [...new Set(richDocuments.flatMap((doc: RichDocument) => doc.tags || []).filter(Boolean))];\n\n  const handleCreateDocument = () => {\n    setSelectedDocument(null);\n    setEditMode('create');\n  };\n\n  const handleEditDocument = (document: RichDocument) => {\n    setSelectedDocument(document);\n    setEditMode('edit');\n  };\n\n  const handleViewDocument = (document: RichDocument) => {\n    setSelectedDocument(document);\n    setEditMode('view');\n  };\n\n  const handleSaveDocument = async (title: string, content: string, formatData: Record<string, any>) => {\n    if (!activeCanvasId) return;\n\n    try {\n      if (editMode === 'create') {\n        await createRichDocument({\n          canvas_id: activeCanvasId,\n          title,\n          content,\n          format_data: formatData,\n          tags: [], // Start with empty tags, can be added later\n          is_favorite: false\n        });\n      } else if (editMode === 'edit' && selectedDocument) {\n        await updateRichDocument(selectedDocument.id, {\n          title,\n          content,\n          format_data: formatData\n        });\n      }\n      setEditMode('view');\n      setSelectedDocument(null);\n    } catch (error) {\n      console.error('儲存文件失敗:', error);\n      throw error;\n    }\n  };\n\n  const handleDeleteDocument = async (documentId: string) => {\n    if (confirm('確定要刪除這個文件嗎？')) {\n      try {\n        await deleteRichDocument(documentId);\n        if (selectedDocument?.id === documentId) {\n          setSelectedDocument(null);\n          setEditMode('view');\n        }\n      } catch (error) {\n        console.error('刪除文件失敗:', error);\n      }\n    }\n  };\n\n  const handleToggleFavorite = async (document: RichDocument) => {\n    try {\n      await updateRichDocument(document.id, {\n        is_favorite: !document.is_favorite\n      });\n    } catch (error) {\n      console.error('更新收藏失敗:', error);\n    }\n  };\n\n  const handleUpdateTags = async (documentId: string, tags: string[]) => {\n    try {\n      await updateRichDocument(documentId, { tags });\n    } catch (error) {\n      console.error('更新標籤失敗:', error);\n    }\n  };\n\n  // Render document editing/viewing\n  if (editMode === 'create' || (editMode === 'edit' && selectedDocument)) {\n    return (\n      <div className=\"h-full p-6\">\n        <RichTextEditor\n          initialTitle={selectedDocument?.title || ''}\n          initialContent={selectedDocument?.content || ''}\n          onSave={handleSaveDocument}\n          onCancel={() => {\n            setEditMode('view');\n            setSelectedDocument(null);\n          }}\n          className=\"h-full\"\n        />\n      </div>\n    );\n  }\n\n  // Render document viewer\n  if (editMode === 'view' && selectedDocument) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        {/* 文件檢視工具列 */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border bg-white\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setEditMode('view')}\n            >\n              ← 返回\n            </Button>\n            <div className=\"flex items-center gap-2\">\n              <Star\n                className={cn(\n                  \"w-5 h-5 cursor-pointer\",\n                  selectedDocument.is_favorite\n                    ? \"text-morandi-gold fill-morandi-gold\"\n                    : \"text-morandi-secondary\"\n                )}\n                onClick={() => handleToggleFavorite(selectedDocument)}\n              />\n              <span className=\"text-sm text-morandi-secondary\">\n                {selectedDocument.created_at ? format(new Date(selectedDocument.created_at), 'yyyy/MM/dd HH:mm') : '未知時間'}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleEditDocument(selectedDocument)}\n            >\n              <Edit size={16} className=\"mr-2\" />\n              編輯\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"hover:bg-morandi-red/10 hover:text-morandi-red\"\n              onClick={() => handleDeleteDocument(selectedDocument.id)}\n            >\n              <Trash2 size={16} />\n            </Button>\n          </div>\n        </div>\n\n        {/* 文件內容 */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          <RichTextViewer\n            title={selectedDocument.title}\n            content={selectedDocument.content}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // If no active canvas selected, show canvas selection interface\n  if (!activeCanvasId) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        {/* 工作區選擇頭部 */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border bg-white\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-morandi-primary\">私人畫布</h2>\n            <p className=\"text-sm text-morandi-secondary\">\n              選擇或創建您的個人工作區\n            </p>\n          </div>\n          <Button\n            onClick={addNewCanvas}\n            disabled={personalCanvases.length >= 5}\n            className={cn(\n              \"text-sm\",\n              personalCanvases.length >= 5\n                ? \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                : \"bg-morandi-gold hover:bg-morandi-gold/80 text-white\"\n            )}\n            title={personalCanvases.length >= 5 ? \"最多只能建立 5 個自訂工作區\" : \"新增自訂工作區\"}\n          >\n            <Plus size={16} className=\"mr-2\" />\n            新增工作區 ({personalCanvases.length}/5)\n          </Button>\n        </div>\n\n        {/* 工作區卡片列表 */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {personalCanvases.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-center\">\n              <FileText className=\"w-16 h-16 text-morandi-secondary/50 mb-4\" />\n              <h3 className=\"text-lg font-medium text-morandi-primary mb-2\">\n                還沒有任何工作區\n              </h3>\n              <p className=\"text-morandi-secondary mb-4\">\n                建立您的第一個個人工作區來開始使用\n              </p>\n              <Button\n                onClick={addNewCanvas}\n                className=\"bg-morandi-gold hover:bg-morandi-gold/80 text-white\"\n              >\n                <Plus size={16} className=\"mr-2\" />\n                建立工作區\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {personalCanvases.map((canvas: PersonalCanvasType) => (\n                <div\n                  key={canvas.id}\n                  className=\"morandi-card p-6 transition-all hover:shadow-md cursor-pointer\"\n                  onClick={() => setActiveCanvasId(canvas.id)}\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <h3 className=\"font-medium text-morandi-primary text-base\">\n                      {canvas.title}\n                    </h3>\n                    <FileText className=\"w-5 h-5 text-morandi-secondary\" />\n                  </div>\n                  <p className=\"text-sm text-morandi-secondary mb-4\">\n                    工作區 #{canvas.canvas_number}\n                  </p>\n                  <div className=\"flex items-center justify-between text-xs text-morandi-secondary\">\n                    <span>\n                      {canvas.updated_at ? format(new Date(canvas.updated_at), 'MM/dd') : '未知日期'}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"w-6 h-6\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setActiveCanvasId(canvas.id);\n                      }}\n                    >\n                      <Eye size={12} />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Render document list/grid view for selected canvas\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* 工具列 */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border bg-white\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setActiveCanvasId(null)}\n          >\n            ← 返回工作區列表\n          </Button>\n          <div>\n            <h2 className=\"text-lg font-semibold text-morandi-primary\">\n              {currentCanvas?.title || '個人工作區'}\n            </h2>\n            <p className=\"text-sm text-morandi-secondary\">\n              {filteredDocuments.length} 個文件\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            onClick={handleCreateDocument}\n            className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n          >\n            <Plus size={16} className=\"mr-2\" />\n            新增文件\n          </Button>\n        </div>\n      </div>\n\n      {/* 搜尋和篩選 */}\n      <div className=\"flex items-center gap-4 p-4 border-b border-border bg-morandi-container/10\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-morandi-secondary\" />\n          <Input\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            placeholder=\"搜尋文件...\"\n            className=\"pl-10\"\n          />\n        </div>\n\n        {allTags.length > 0 && (\n          <select\n            value={selectedTag}\n            onChange={(e) => setSelectedTag(e.target.value)}\n            className=\"px-3 py-2 border border-border rounded-md text-sm\"\n          >\n            <option value=\"\">全部標籤</option>\n            {allTags.map((tag: string) => (\n              <option key={tag} value={tag}>{tag}</option>\n            ))}\n          </select>\n        )}\n\n        <div className=\"flex gap-1\">\n          <Button\n            variant={viewMode === 'grid' ? 'default' : 'ghost'}\n            size=\"icon\"\n            className=\"w-8 h-8\"\n            onClick={() => setViewMode('grid')}\n          >\n            <Grid size={16} />\n          </Button>\n          <Button\n            variant={viewMode === 'list' ? 'default' : 'ghost'}\n            size=\"icon\"\n            className=\"w-8 h-8\"\n            onClick={() => setViewMode('list')}\n          >\n            <List size={16} />\n          </Button>\n        </div>\n      </div>\n\n      {/* 文件列表 */}\n      <div className=\"flex-1 overflow-auto p-4\">\n        {filteredDocuments.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-center\">\n            <FileText className=\"w-16 h-16 text-morandi-secondary/50 mb-4\" />\n            <h3 className=\"text-lg font-medium text-morandi-primary mb-2\">\n              {searchTerm || selectedTag ? '沒有找到符合的文件' : '還沒有任何文件'}\n            </h3>\n            <p className=\"text-morandi-secondary mb-4\">\n              {searchTerm || selectedTag\n                ? '嘗試調整搜尋條件或清除篩選器'\n                : '開始創建您的第一個文件'\n              }\n            </p>\n            {!searchTerm && !selectedTag && (\n              <Button\n                onClick={handleCreateDocument}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n              >\n                <Plus size={16} className=\"mr-2\" />\n                新增文件\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className={cn(\n            viewMode === 'grid'\n              ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n              : \"space-y-3\"\n          )}>\n            {filteredDocuments.map((document: RichDocument) => (\n              <div\n                key={document.id}\n                className={cn(\n                  \"morandi-card transition-all hover:shadow-md cursor-pointer\",\n                  viewMode === 'list' && \"flex items-center\"\n                )}\n                onClick={() => handleViewDocument(document)}\n              >\n                <div className={cn(\n                  \"p-4\",\n                  viewMode === 'list' && \"flex-1 flex items-center justify-between\"\n                )}>\n                  <div className={cn(\n                    viewMode === 'grid' && \"mb-3\",\n                    viewMode === 'list' && \"flex-1\"\n                  )}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h3 className={cn(\n                        \"font-medium text-morandi-primary\",\n                        viewMode === 'grid' && \"text-base line-clamp-2\",\n                        viewMode === 'list' && \"text-sm\"\n                      )}>\n                        {document.title}\n                      </h3>\n                      <Star\n                        className={cn(\n                          \"w-4 h-4 ml-2 cursor-pointer\",\n                          document.is_favorite\n                            ? \"text-morandi-gold fill-morandi-gold\"\n                            : \"text-morandi-secondary\"\n                        )}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleToggleFavorite(document);\n                        }}\n                      />\n                    </div>\n\n                    {viewMode === 'grid' && (\n                      <p className=\"text-sm text-morandi-secondary line-clamp-3 mb-3\">\n                        {document.content.replace(/<[^>]*>/g, '')}\n                      </p>\n                    )}\n\n                    <div className={cn(\n                      \"flex items-center justify-between text-xs text-morandi-secondary\",\n                      viewMode === 'list' && \"mt-1\"\n                    )}>\n                      <span>\n                        {document.updated_at ? format(new Date(document.updated_at), 'MM/dd') : '未知'}\n                      </span>\n                      <div className=\"flex items-center gap-2\">\n                        {document.tags && document.tags.length > 0 && (\n                          <div className=\"flex gap-1\">\n                            {document.tags.slice(0, 2).map((tag: string) => (\n                              <span\n                                key={tag}\n                                className=\"px-2 py-1 bg-morandi-container/30 text-morandi-secondary rounded-full text-xs\"\n                              >\n                                {tag}\n                              </span>\n                            ))}\n                            {document.tags.length > 2 && (\n                              <span className=\"text-morandi-secondary\">+{document.tags.length - 2}</span>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {viewMode === 'list' && (\n                    <div className=\"flex items-center gap-1 ml-4\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"w-8 h-8\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleEditDocument(document);\n                        }}\n                      >\n                        <Edit size={14} />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"w-8 h-8 hover:bg-morandi-red/10 hover:text-morandi-red\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDeleteDocument(document.id);\n                        }}\n                      >\n                        <Trash2 size={14} />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n\n                {viewMode === 'grid' && (\n                  <div className=\"px-4 pb-4 flex justify-end gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"w-8 h-8\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEditDocument(document);\n                      }}\n                    >\n                      <Edit size={14} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"w-8 h-8 hover:bg-morandi-red/10 hover:text-morandi-red\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteDocument(document.id);\n                      }}\n                    >\n                      <Trash2 size={14} />\n                    </Button>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/QuickTools.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newChecklist' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNewChecklist' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4345,4348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4345,4348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Calculator,\n  DollarSign,\n  FileText,\n  CheckSquare,\n  Plus,\n  Trash2,\n  Save,\n  X\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface Note {\n  id: string;\n  title: string;\n  content: string;\n  created_at: string;\n}\n\ninterface ChecklistItem {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\ninterface Checklist {\n  id: string;\n  title: string;\n  items: ChecklistItem[];\n  created_at: string;\n}\n\nexport function QuickTools() {\n  const [activeTab, setActiveTab] = useState<'calculator' | 'currency' | 'notes' | 'checklist'>('calculator');\n\n  // Calculator state\n  const [display, setDisplay] = useState('0');\n  const [previousValue, setPreviousValue] = useState<number | null>(null);\n  const [operation, setOperation] = useState<string | null>(null);\n  const [waitingForOperand, setWaitingForOperand] = useState(false);\n\n  // Currency converter state\n  const [amount, setAmount] = useState('');\n  const [fromCurrency, setFromCurrency] = useState('USD');\n  const [toCurrency, setToCurrency] = useState('TWD');\n  const [convertedAmount, setConvertedAmount] = useState<number | null>(null);\n  const [exchangeRates] = useState({\n    USD: { TWD: 31.5, EUR: 0.85, JPY: 110 },\n    TWD: { USD: 0.032, EUR: 0.027, JPY: 3.5 },\n    EUR: { USD: 1.18, TWD: 37.1, JPY: 129 },\n    JPY: { USD: 0.009, TWD: 0.29, EUR: 0.008 }\n  });\n\n  // Notes state\n  const [notes, setNotes] = useState<Note[]>([]);\n  const [newNote, setNewNote] = useState({ title: '', content: '' });\n  const [editingNote, setEditingNote] = useState<Note | null>(null);\n\n  // Checklist state\n  const [checklists, setChecklists] = useState<Checklist[]>([]);\n  const [newChecklist, setNewChecklist] = useState({ title: '', items: [] as ChecklistItem[] });\n  const [editingChecklist, setEditingChecklist] = useState<Checklist | null>(null);\n\n  // Load data from localStorage\n  useEffect(() => {\n    const savedNotes = localStorage.getItem('venturo-notes');\n    if (savedNotes) {\n      setNotes(JSON.parse(savedNotes));\n    }\n\n    const savedChecklists = localStorage.getItem('venturo-checklists');\n    if (savedChecklists) {\n      setChecklists(JSON.parse(savedChecklists));\n    }\n  }, []);\n\n  // Calculator functions\n  const inputNumber = (num: string) => {\n    if (waitingForOperand) {\n      setDisplay(num);\n      setWaitingForOperand(false);\n    } else {\n      setDisplay(display === '0' ? num : display + num);\n    }\n  };\n\n  const inputOperation = (nextOperation: string) => {\n    const inputValue = parseFloat(display);\n\n    if (previousValue === null) {\n      setPreviousValue(inputValue);\n    } else if (operation) {\n      const currentValue = previousValue || 0;\n      const newValue = calculate(currentValue, inputValue, operation);\n\n      setDisplay(`${parseFloat(newValue.toFixed(7))}`);\n      setPreviousValue(newValue);\n    }\n\n    setWaitingForOperand(true);\n    setOperation(nextOperation);\n  };\n\n  const calculate = (firstValue: number, secondValue: number, operation: string): number => {\n    switch (operation) {\n      case '+': return firstValue + secondValue;\n      case '-': return firstValue - secondValue;\n      case '×': return firstValue * secondValue;\n      case '÷': return firstValue / secondValue;\n      case '=': return secondValue;\n      default: return secondValue;\n    }\n  };\n\n  const performCalculation = () => {\n    const inputValue = parseFloat(display);\n\n    if (previousValue !== null && operation) {\n      const newValue = calculate(previousValue, inputValue, operation);\n      setDisplay(`${parseFloat(newValue.toFixed(7))}`);\n      setPreviousValue(null);\n      setOperation(null);\n      setWaitingForOperand(true);\n    }\n  };\n\n  const clearCalculator = () => {\n    setDisplay('0');\n    setPreviousValue(null);\n    setOperation(null);\n    setWaitingForOperand(false);\n  };\n\n  // Currency converter functions\n  const convertCurrency = () => {\n    const amountNum = parseFloat(amount);\n    if (isNaN(amountNum) || amountNum <= 0) return;\n\n    if (fromCurrency === toCurrency) {\n      setConvertedAmount(amountNum);\n      return;\n    }\n\n    const rate = (exchangeRates as any)[fromCurrency]?.[toCurrency];\n    if (rate) {\n      setConvertedAmount(amountNum * rate);\n    }\n  };\n\n  // Notes functions\n  const saveNote = () => {\n    if (!newNote.title.trim() || !newNote.content.trim()) return;\n\n    const note: Note = {\n      id: Date.now().toString(),\n      title: newNote.title,\n      content: newNote.content,\n      created_at: new Date().toISOString()\n    };\n\n    const updatedNotes = [note, ...notes];\n    setNotes(updatedNotes);\n    localStorage.setItem('venturo-notes', JSON.stringify(updatedNotes));\n    setNewNote({ title: '', content: '' });\n  };\n\n  const updateNote = () => {\n    if (!editingNote || !newNote.title.trim() || !newNote.content.trim()) return;\n\n    const updatedNotes = notes.map(note =>\n      note.id === editingNote.id\n        ? { ...note, title: newNote.title, content: newNote.content }\n        : note\n    );\n    setNotes(updatedNotes);\n    localStorage.setItem('venturo-notes', JSON.stringify(updatedNotes));\n    setEditingNote(null);\n    setNewNote({ title: '', content: '' });\n  };\n\n  const deleteNote = (id: string) => {\n    const updatedNotes = notes.filter(note => note.id !== id);\n    setNotes(updatedNotes);\n    localStorage.setItem('venturo-notes', JSON.stringify(updatedNotes));\n  };\n\n  // Checklist functions\n  const addChecklistItem = (checklistId: string) => {\n    if (editingChecklist && editingChecklist.id === checklistId) {\n      const newItem: ChecklistItem = {\n        id: Date.now().toString(),\n        text: '',\n        completed: false\n      };\n      setEditingChecklist({\n        ...editingChecklist,\n        items: [...editingChecklist.items, newItem]\n      });\n    }\n  };\n\n  const updateChecklistItem = (itemId: string, updates: Partial<ChecklistItem>) => {\n    if (!editingChecklist) return;\n\n    const updatedItems = editingChecklist.items.map(item =>\n      item.id === itemId ? { ...item, ...updates } : item\n    );\n    setEditingChecklist({ ...editingChecklist, items: updatedItems });\n  };\n\n  const removeChecklistItem = (itemId: string) => {\n    if (!editingChecklist) return;\n\n    const updatedItems = editingChecklist.items.filter(item => item.id !== itemId);\n    setEditingChecklist({ ...editingChecklist, items: updatedItems });\n  };\n\n  const saveChecklist = () => {\n    if (!editingChecklist || !editingChecklist.title.trim()) return;\n\n    const validItems = editingChecklist.items.filter(item => item.text.trim());\n    if (validItems.length === 0) return;\n\n    const checklist: Checklist = {\n      ...editingChecklist,\n      items: validItems,\n      created_at: editingChecklist.id ? editingChecklist.created_at : new Date().toISOString()\n    };\n\n    let updatedChecklists;\n    if (checklists.find(c => c.id === checklist.id)) {\n      updatedChecklists = checklists.map(c => c.id === checklist.id ? checklist : c);\n    } else {\n      updatedChecklists = [checklist, ...checklists];\n    }\n\n    setChecklists(updatedChecklists);\n    localStorage.setItem('venturo-checklists', JSON.stringify(updatedChecklists));\n    setEditingChecklist(null);\n  };\n\n  const deleteChecklist = (id: string) => {\n    const updatedChecklists = checklists.filter(checklist => checklist.id !== id);\n    setChecklists(updatedChecklists);\n    localStorage.setItem('venturo-checklists', JSON.stringify(updatedChecklists));\n  };\n\n  const toggleChecklistItem = (checklistId: string, itemId: string) => {\n    const updatedChecklists = checklists.map(checklist =>\n      checklist.id === checklistId\n        ? {\n            ...checklist,\n            items: checklist.items.map(item =>\n              item.id === itemId ? { ...item, completed: !item.completed } : item\n            )\n          }\n        : checklist\n    );\n    setChecklists(updatedChecklists);\n    localStorage.setItem('venturo-checklists', JSON.stringify(updatedChecklists));\n  };\n\n  const tabs = [\n    { id: 'calculator', label: '計算機', icon: Calculator },\n    { id: 'currency', label: '匯率', icon: DollarSign },\n    { id: 'notes', label: '筆記', icon: FileText },\n    { id: 'checklist', label: '清單', icon: CheckSquare }\n  ] as const;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* 工具選項卡 */}\n      <div className=\"border-b border-border bg-white p-4\">\n        <div className=\"flex gap-2\">\n          {tabs.map(tab => {\n            const IconComponent = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={cn(\n                  \"flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors\",\n                  activeTab === tab.id\n                    ? \"bg-morandi-gold text-white\"\n                    : \"text-morandi-secondary hover:bg-morandi-container/20 hover:text-morandi-primary\"\n                )}\n              >\n                <IconComponent size={16} />\n                {tab.label}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* 工具內容區域 */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* 計算機 */}\n        {activeTab === 'calculator' && (\n          <div className=\"max-w-sm mx-auto\">\n            <Card className=\"p-4\">\n              <div className=\"mb-4\">\n                <div className=\"bg-morandi-container/10 p-4 rounded-lg text-right text-2xl font-mono\">\n                  {display}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-4 gap-2\">\n                <Button variant=\"outline\" onClick={clearCalculator} className=\"col-span-2\">C</Button>\n                <Button variant=\"outline\" onClick={() => inputOperation('÷')}>÷</Button>\n                <Button variant=\"outline\" onClick={() => inputOperation('×')}>×</Button>\n\n                <Button variant=\"outline\" onClick={() => inputNumber('7')}>7</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('8')}>8</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('9')}>9</Button>\n                <Button variant=\"outline\" onClick={() => inputOperation('-')}>-</Button>\n\n                <Button variant=\"outline\" onClick={() => inputNumber('4')}>4</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('5')}>5</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('6')}>6</Button>\n                <Button variant=\"outline\" onClick={() => inputOperation('+')} className=\"row-span-2\">+</Button>\n\n                <Button variant=\"outline\" onClick={() => inputNumber('1')}>1</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('2')}>2</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('3')}>3</Button>\n\n                <Button variant=\"outline\" onClick={() => inputNumber('0')} className=\"col-span-2\">0</Button>\n                <Button variant=\"outline\" onClick={() => inputNumber('.')}>.</Button>\n                <Button onClick={performCalculation} className=\"bg-morandi-gold hover:bg-morandi-gold-hover\">=</Button>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {/* 匯率轉換器 */}\n        {activeTab === 'currency' && (\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">匯率轉換</h3>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">金額</label>\n                  <Input\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"輸入金額\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">從</label>\n                    <select\n                      value={fromCurrency}\n                      onChange={(e) => setFromCurrency(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-border rounded-md\"\n                    >\n                      <option value=\"USD\">美元 (USD)</option>\n                      <option value=\"TWD\">台幣 (TWD)</option>\n                      <option value=\"EUR\">歐元 (EUR)</option>\n                      <option value=\"JPY\">日圓 (JPY)</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">到</label>\n                    <select\n                      value={toCurrency}\n                      onChange={(e) => setToCurrency(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-border rounded-md\"\n                    >\n                      <option value=\"USD\">美元 (USD)</option>\n                      <option value=\"TWD\">台幣 (TWD)</option>\n                      <option value=\"EUR\">歐元 (EUR)</option>\n                      <option value=\"JPY\">日圓 (JPY)</option>\n                    </select>\n                  </div>\n                </div>\n\n                <Button onClick={convertCurrency} className=\"w-full\">\n                  轉換\n                </Button>\n\n                {convertedAmount !== null && (\n                  <div className=\"bg-morandi-container/10 p-4 rounded-lg text-center\">\n                    <div className=\"text-2xl font-semibold text-morandi-primary\">\n                      {convertedAmount.toFixed(2)} {toCurrency}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {/* 筆記 */}\n        {activeTab === 'notes' && (\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex gap-6\">\n              {/* 新增/編輯筆記表單 */}\n              <div className=\"w-1/2\">\n                <Card className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">\n                    {editingNote ? '編輯筆記' : '新增筆記'}\n                  </h3>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">標題</label>\n                      <Input\n                        value={newNote.title}\n                        onChange={(e) => setNewNote({ ...newNote, title: e.target.value })}\n                        placeholder=\"筆記標題\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">內容</label>\n                      <Textarea\n                        value={newNote.content}\n                        onChange={(e) => setNewNote({ ...newNote, content: e.target.value })}\n                        placeholder=\"筆記內容\"\n                        className=\"min-h-[200px]\"\n                      />\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={editingNote ? updateNote : saveNote}\n                        className=\"flex-1\"\n                        disabled={!newNote.title.trim() || !newNote.content.trim()}\n                      >\n                        <Save size={16} className=\"mr-2\" />\n                        {editingNote ? '更新' : '儲存'}\n                      </Button>\n                      {editingNote && (\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => {\n                            setEditingNote(null);\n                            setNewNote({ title: '', content: '' });\n                          }}\n                        >\n                          <X size={16} />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              {/* 筆記列表 */}\n              <div className=\"w-1/2\">\n                <div className=\"space-y-3\">\n                  {notes.length === 0 ? (\n                    <Card className=\"p-8 text-center\">\n                      <FileText className=\"w-12 h-12 mx-auto mb-4 text-morandi-secondary opacity-50\" />\n                      <p className=\"text-morandi-secondary\">還沒有任何筆記</p>\n                    </Card>\n                  ) : (\n                    notes.map(note => (\n                      <Card key={note.id} className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <h4 className=\"font-medium text-morandi-primary\">{note.title}</h4>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-8 h-8\"\n                              onClick={() => {\n                                setEditingNote(note);\n                                setNewNote({ title: note.title, content: note.content });\n                              }}\n                            >\n                              <FileText size={14} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-8 h-8 hover:bg-morandi-red/10 hover:text-morandi-red\"\n                              onClick={() => deleteNote(note.id)}\n                            >\n                              <Trash2 size={14} />\n                            </Button>\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-morandi-secondary line-clamp-3\">\n                          {note.content}\n                        </p>\n                        <p className=\"text-xs text-morandi-secondary mt-2\">\n                          {new Date(note.created_at).toLocaleString()}\n                        </p>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* 清單 */}\n        {activeTab === 'checklist' && (\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex gap-6\">\n              {/* 新增/編輯清單表單 */}\n              <div className=\"w-1/2\">\n                <Card className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">\n                    {editingChecklist?.id ? '編輯清單' : '新增清單'}\n                  </h3>\n\n                  {editingChecklist ? (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium mb-1\">清單標題</label>\n                        <Input\n                          value={editingChecklist.title}\n                          onChange={(e) => setEditingChecklist({ ...editingChecklist, title: e.target.value })}\n                          placeholder=\"清單標題\"\n                        />\n                      </div>\n\n                      <div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <label className=\"block text-sm font-medium\">項目</label>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => addChecklistItem(editingChecklist.id)}\n                          >\n                            <Plus size={14} className=\"mr-1\" />\n                            新增項目\n                          </Button>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          {editingChecklist.items.map(item => (\n                            <div key={item.id} className=\"flex gap-2\">\n                              <Input\n                                value={item.text}\n                                onChange={(e) => updateChecklistItem(item.id, { text: e.target.value })}\n                                placeholder=\"項目內容\"\n                                className=\"flex-1\"\n                              />\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"w-8 h-8\"\n                                onClick={() => removeChecklistItem(item.id)}\n                              >\n                                <X size={14} />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <Button onClick={saveChecklist} className=\"flex-1\">\n                          <Save size={16} className=\"mr-2\" />\n                          儲存清單\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setEditingChecklist(null)}\n                        >\n                          <X size={16} />\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <Button\n                      onClick={() => setEditingChecklist({\n                        id: Date.now().toString(),\n                        title: '',\n                        items: [{ id: Date.now().toString(), text: '', completed: false }],\n                        created_at: new Date().toISOString()\n                      })}\n                      className=\"w-full\"\n                    >\n                      <Plus size={16} className=\"mr-2\" />\n                      建立新清單\n                    </Button>\n                  )}\n                </Card>\n              </div>\n\n              {/* 清單列表 */}\n              <div className=\"w-1/2\">\n                <div className=\"space-y-3\">\n                  {checklists.length === 0 ? (\n                    <Card className=\"p-8 text-center\">\n                      <CheckSquare className=\"w-12 h-12 mx-auto mb-4 text-morandi-secondary opacity-50\" />\n                      <p className=\"text-morandi-secondary\">還沒有任何清單</p>\n                    </Card>\n                  ) : (\n                    checklists.map(checklist => (\n                      <Card key={checklist.id} className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <h4 className=\"font-medium text-morandi-primary\">{checklist.title}</h4>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-8 h-8\"\n                              onClick={() => setEditingChecklist(checklist)}\n                            >\n                              <FileText size={14} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"w-8 h-8 hover:bg-morandi-red/10 hover:text-morandi-red\"\n                              onClick={() => deleteChecklist(checklist.id)}\n                            >\n                              <Trash2 size={14} />\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          {checklist.items.map(item => (\n                            <div key={item.id} className=\"flex items-center gap-2\">\n                              <input\n                                type=\"checkbox\"\n                                checked={item.completed}\n                                onChange={() => toggleChecklistItem(checklist.id, item.id)}\n                                className=\"rounded\"\n                              />\n                              <span className={cn(\n                                \"text-sm\",\n                                item.completed\n                                  ? \"line-through text-morandi-secondary\"\n                                  : \"text-morandi-primary\"\n                              )}>\n                                {item.text}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n\n                        <div className=\"text-xs text-morandi-secondary mt-3\">\n                          {checklist.items.filter(item => item.completed).length} / {checklist.items.length} 完成\n                        </div>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/RichTextEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Bold,\n  Italic,\n  Underline,\n  AlignLeft,\n  AlignCenter,\n  AlignRight,\n  List,\n  ListOrdered,\n  Quote,\n  Link,\n  Type,\n  Palette,\n  Save,\n  X\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface RichTextEditorProps {\n  initialTitle?: string;\n  initialContent?: string;\n  onSave?: (title: string, content: string, formatData: Record<string, any>) => void;\n  onCancel?: () => void;\n  className?: string;\n}\n\nexport function RichTextEditor({\n  initialTitle = '',\n  initialContent = '',\n  onSave,\n  onCancel,\n  className\n}: RichTextEditorProps) {\n  const [title, setTitle] = useState(initialTitle);\n  const [isSaving, setIsSaving] = useState(false);\n  const editorRef = useRef<HTMLDivElement>(null);\n  const [selectedColor, setSelectedColor] = useState('#000000');\n  const [fontSize, setFontSize] = useState('14');\n\n  useEffect(() => {\n    if (editorRef.current && initialContent) {\n      editorRef.current.innerHTML = initialContent;\n    }\n  }, [initialContent]);\n\n  const execCommand = (command: string, value: string | boolean = false) => {\n    document.execCommand(command, false, value as string);\n    editorRef.current?.focus();\n  };\n\n  const setTextAlign = (align: string) => {\n    execCommand('justify' + align.charAt(0).toUpperCase() + align.slice(1));\n  };\n\n  const setTextColor = (color: string) => {\n    setSelectedColor(color);\n    execCommand('foreColor', color);\n  };\n\n  const setTextSize = (size: string) => {\n    setFontSize(size);\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      if (!range.collapsed) {\n        const span = document.createElement('span');\n        span.style.fontSize = size + 'px';\n        try {\n          range.surroundContents(span);\n        } catch {\n          // If selection spans multiple elements, wrap content differently\n          const contents = range.extractContents();\n          span.appendChild(contents);\n          range.insertNode(span);\n        }\n        selection.removeAllRanges();\n      }\n    }\n  };\n\n  const insertLink = () => {\n    const url = prompt('請輸入網址：');\n    if (url) {\n      execCommand('createLink', url);\n    }\n  };\n\n  const insertList = (ordered: boolean = false) => {\n    execCommand(ordered ? 'insertOrderedList' : 'insertUnorderedList');\n  };\n\n  const formatBlock = (tag: string) => {\n    execCommand('formatBlock', tag);\n  };\n\n  const handleSave = async () => {\n    if (!title.trim()) {\n      alert('請輸入文件標題');\n      return;\n    }\n\n    const content = editorRef.current?.innerHTML || '';\n    if (!content.trim() || content === '<br>') {\n      alert('請輸入文件內容');\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      // Extract format data from the content\n      const formatData = {\n        wordCount: editorRef.current?.textContent?.length || 0,\n        hasFormatting: content.includes('<') && content.includes('>'),\n        lastModified: new Date().toISOString()\n      };\n\n      await onSave?.(title, content, formatData);\n    } catch (error) {\n      console.error('儲存文件失敗:', error);\n      alert('儲存失敗，請稍後再試');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const colors = [\n    '#000000', '#333333', '#666666', '#999999', '#CCCCCC',\n    '#FF0000', '#FF6600', '#FFCC00', '#CCFF00', '#66FF00',\n    '#00FF00', '#00FF66', '#00FFCC', '#00CCFF', '#0066FF',\n    '#0000FF', '#6600FF', '#CC00FF', '#FF00CC', '#FF0066'\n  ];\n\n  const fontSizes = ['10', '12', '14', '16', '18', '20', '24', '28', '32', '36'];\n\n  return (\n    <div className={cn(\"bg-white border border-border rounded-lg shadow-sm\", className)}>\n      {/* 標題輸入 */}\n      <div className=\"p-4 border-b border-border\">\n        <Input\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"文件標題\"\n          className=\"text-lg font-medium\"\n        />\n      </div>\n\n      {/* 工具列 */}\n      <div className=\"p-3 border-b border-border bg-morandi-container/10\">\n        <div className=\"flex flex-wrap gap-1 items-center\">\n          {/* 基本格式化 */}\n          <div className=\"flex gap-1 mr-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => execCommand('bold')}\n              title=\"粗體\"\n            >\n              <Bold size={14} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => execCommand('italic')}\n              title=\"斜體\"\n            >\n              <Italic size={14} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => execCommand('underline')}\n              title=\"底線\"\n            >\n              <Underline size={14} />\n            </Button>\n          </div>\n\n          {/* 對齊方式 */}\n          <div className=\"flex gap-1 mr-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => setTextAlign('left')}\n              title=\"靠左對齊\"\n            >\n              <AlignLeft size={14} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => setTextAlign('center')}\n              title=\"置中對齊\"\n            >\n              <AlignCenter size={14} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => setTextAlign('right')}\n              title=\"靠右對齊\"\n            >\n              <AlignRight size={14} />\n            </Button>\n          </div>\n\n          {/* 列表 */}\n          <div className=\"flex gap-1 mr-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => insertList(false)}\n              title=\"項目符號列表\"\n            >\n              <List size={14} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => insertList(true)}\n              title=\"編號列表\"\n            >\n              <ListOrdered size={14} />\n            </Button>\n          </div>\n\n          {/* 引用 */}\n          <div className=\"flex gap-1 mr-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={() => formatBlock('blockquote')}\n              title=\"引用\"\n            >\n              <Quote size={14} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-8 h-8\"\n              onClick={insertLink}\n              title=\"插入連結\"\n            >\n              <Link size={14} />\n            </Button>\n          </div>\n\n          {/* 字體大小 */}\n          <div className=\"flex items-center gap-2 mr-4\">\n            <Type size={14} />\n            <select\n              value={fontSize}\n              onChange={(e) => setTextSize(e.target.value)}\n              className=\"px-2 py-1 border border-border rounded text-xs\"\n            >\n              {fontSizes.map(size => (\n                <option key={size} value={size}>{size}px</option>\n              ))}\n            </select>\n          </div>\n\n          {/* 文字顏色 */}\n          <div className=\"flex items-center gap-2\">\n            <Palette size={14} />\n            <div className=\"flex gap-1\">\n              {colors.slice(0, 10).map(color => (\n                <button\n                  key={color}\n                  onClick={() => setTextColor(color)}\n                  className={cn(\n                    \"w-5 h-5 rounded border border-gray-300\",\n                    selectedColor === color && \"ring-2 ring-morandi-gold\"\n                  )}\n                  style={{ backgroundColor: color }}\n                  title={color}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* 第二行顏色 */}\n        <div className=\"flex gap-1 mt-2 ml-8\">\n          {colors.slice(10).map(color => (\n            <button\n              key={color}\n              onClick={() => setTextColor(color)}\n              className={cn(\n                \"w-5 h-5 rounded border border-gray-300\",\n                selectedColor === color && \"ring-2 ring-morandi-gold\"\n              )}\n              style={{ backgroundColor: color }}\n              title={color}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* 編輯區域 */}\n      <div\n        ref={editorRef}\n        contentEditable\n        suppressContentEditableWarning\n        className=\"min-h-[400px] p-6 outline-none prose max-w-none\"\n        style={{\n          lineHeight: '1.6',\n          fontSize: `${fontSize}px`,\n          color: selectedColor\n        }}\n        onPaste={(e) => {\n          // Handle paste events to clean up formatting if needed\n          e.preventDefault();\n          const text = e.clipboardData.getData('text/plain');\n          document.execCommand('insertText', false, text);\n        }}\n      />\n\n      {/* 操作按鈕 */}\n      <div className=\"flex justify-end gap-2 p-4 border-t border-border bg-morandi-container/5\">\n        {onCancel && (\n          <Button variant=\"outline\" onClick={onCancel} disabled={isSaving}>\n            <X size={16} className=\"mr-2\" />\n            取消\n          </Button>\n        )}\n        <Button\n          onClick={handleSave}\n          disabled={isSaving || !title.trim()}\n          className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n        >\n          <Save size={16} className=\"mr-2\" />\n          {isSaving ? '儲存中...' : '儲存'}\n        </Button>\n      </div>\n\n      {/* 字數統計 */}\n      <div className=\"px-4 pb-2 text-xs text-morandi-secondary text-right\">\n        字數：{editorRef.current?.textContent?.length || 0}\n      </div>\n    </div>\n  );\n}\n\n// 簡化版的富文本顯示器\nexport function RichTextViewer({\n  title,\n  content,\n  className\n}: {\n  title: string;\n  content: string;\n  className?: string;\n}) {\n  return (\n    <div className={cn(\"bg-white border border-border rounded-lg\", className)}>\n      <div className=\"p-4 border-b border-border\">\n        <h3 className=\"text-lg font-semibold text-morandi-primary\">{title}</h3>\n      </div>\n      <div\n        className=\"p-6 prose max-w-none\"\n        dangerouslySetInnerHTML={{ __html: content }}\n        style={{ lineHeight: '1.6' }}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/ShareAdvanceDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1343,1346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1343,1346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { Plus, Trash2, X } from 'lucide-react';\nimport { useWorkspaceStore } from '@/stores/workspace-store';\nimport { useUserStore } from '@/stores/user-store';\nimport { Combobox } from '@/components/ui/combobox';\n\ninterface AdvanceRow {\n  name: string;\n  description: string;\n  amount: string;\n  advance_person: string;\n}\n\ninterface ShareAdvanceDialogProps {\n  channelId: string;\n  currentUserId: string;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport function ShareAdvanceDialog({\n  channelId,\n  currentUserId,\n  onClose,\n  onSuccess\n}: ShareAdvanceDialogProps) {\n  const { shareAdvanceList } = useWorkspaceStore();\n  const { items: employees, fetchAll: fetchEmployees } = useUserStore();\n\n  const [rows, setRows] = useState<AdvanceRow[]>([\n    { name: '', description: '', amount: '', advance_person: '' },\n    { name: '', description: '', amount: '', advance_person: '' },\n    { name: '', description: '', amount: '', advance_person: '' }\n  ]);\n\n  // 載入員工資料\n  React.useEffect(() => {\n    if (employees.length === 0) {\n      fetchEmployees();\n    }\n  }, [employees.length, fetchEmployees]);\n\n  // 篩選活躍員工\n  const activeEmployees = useMemo(() => {\n    return employees.filter(emp => {\n      const notDeleted = !(emp as any)._deleted;\n      const isActive = (emp as any).status === 'active';\n      return notDeleted && isActive;\n    });\n  }, [employees]);\n\n  const addRow = () => {\n    setRows([...rows, { name: '', description: '', amount: '', advance_person: '' }]);\n  };\n\n  const removeRow = (index: number) => {\n    if (rows.length > 1) {\n      setRows(rows.filter((_, i) => i !== index));\n    }\n  };\n\n  const updateRow = (index: number, field: keyof AdvanceRow, value: string) => {\n    const newRows = [...rows];\n    newRows[index][field] = value;\n    setRows(newRows);\n  };\n\n  const totalAmount = rows.reduce((sum, row) => {\n    const amount = parseFloat(row.amount) || 0;\n    return sum + amount;\n  }, 0);\n\n  const handleShare = async () => {\n    // 驗證：至少有一筆有效資料\n    const validRows = rows.filter(\n      row => row.name.trim() && row.amount && parseFloat(row.amount) > 0 && row.advance_person.trim()\n    );\n\n    if (validRows.length === 0) {\n      alert('請至少填寫一筆完整的代墊項目');\n      return;\n    }\n\n    try {\n      const items = validRows.map(row => ({\n        name: row.name.trim(),\n        description: row.description.trim(),\n        amount: parseFloat(row.amount),\n        advance_person: row.advance_person.trim()\n      }));\n\n      await shareAdvanceList(channelId, items, currentUserId);\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('分享代墊清單失敗:', error);\n      alert('分享失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/20 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"card-morandi-elevated w-[800px] max-h-[80vh] overflow-hidden flex flex-col\" onClick={(e) => e.stopPropagation()}>\n        {/* 標題列 */}\n        <div className=\"flex items-center justify-between pb-3 border-b border-morandi-gold/20\">\n          <h3 className=\"text-lg font-semibold text-morandi-primary\">記錄代墊項目</h3>\n          <button onClick={onClose} className=\"btn-icon-morandi !w-8 !h-8\">\n            <X size={16} />\n          </button>\n        </div>\n\n        {/* 表格區域 */}\n        <div className=\"flex-1 overflow-y-auto my-4\">\n          <table className=\"w-full\">\n            <thead className=\"sticky top-0 bg-morandi-container/5 border-b border-morandi-gold/20\">\n              <tr>\n                <th className=\"text-left py-2 px-2 text-sm font-semibold text-morandi-secondary w-[30%]\">品項</th>\n                <th className=\"text-left py-2 px-2 text-sm font-semibold text-morandi-secondary w-[25%]\">說明</th>\n                <th className=\"text-left py-2 px-2 text-sm font-semibold text-morandi-secondary w-[20%]\">金額</th>\n                <th className=\"text-left py-2 px-2 text-sm font-semibold text-morandi-secondary w-[20%]\">代墊人</th>\n                <th className=\"w-[5%]\"></th>\n              </tr>\n            </thead>\n            <tbody>\n              {rows.map((row, index) => (\n                <tr key={index} className=\"border-b border-morandi-container/20\">\n                  <td className=\"py-2 px-2\">\n                    <input\n                      type=\"text\"\n                      value={row.name}\n                      onChange={(e) => updateRow(index, 'name', e.target.value)}\n                      placeholder=\"品項名稱\"\n                      className=\"input-morandi !py-1.5 text-sm w-full\"\n                    />\n                  </td>\n                  <td className=\"py-2 px-2\">\n                    <input\n                      type=\"text\"\n                      value={row.description}\n                      onChange={(e) => updateRow(index, 'description', e.target.value)}\n                      placeholder=\"說明\"\n                      className=\"input-morandi !py-1.5 text-sm w-full\"\n                    />\n                  </td>\n                  <td className=\"py-2 px-2\">\n                    <input\n                      type=\"number\"\n                      value={row.amount}\n                      onChange={(e) => updateRow(index, 'amount', e.target.value)}\n                      placeholder=\"0\"\n                      className=\"input-morandi !py-1.5 text-sm w-full\"\n                    />\n                  </td>\n                  <td className=\"py-2 px-2\">\n                    <Combobox\n                      options={activeEmployees.map((emp) => ({\n                        value: emp.display_name || emp.english_name,\n                        label: `${emp.display_name || emp.english_name} (${emp.employee_number})`\n                      }))}\n                      value={row.advance_person}\n                      onChange={(value) => updateRow(index, 'advance_person', value)}\n                      placeholder=\"選擇代墊人...\"\n                      emptyMessage=\"找不到員工\"\n                      showSearchIcon={true}\n                      showClearButton={true}\n                      className=\"!py-1.5 text-sm\"\n                    />\n                  </td>\n                  <td className=\"py-2 px-2 text-center\">\n                    <button\n                      onClick={() => removeRow(index)}\n                      disabled={rows.length === 1}\n                      className=\"btn-icon-morandi !w-7 !h-7 disabled:opacity-30 disabled:cursor-not-allowed\"\n                    >\n                      <Trash2 size={14} />\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          {/* 新增列按鈕 */}\n          <button\n            onClick={addRow}\n            className=\"flex items-center gap-2 mt-3 text-sm text-morandi-gold hover:text-morandi-primary transition-colors\"\n          >\n            <Plus size={16} />\n            <span>新增列</span>\n          </button>\n        </div>\n\n        {/* 底部：總計與操作按鈕 */}\n        <div className=\"pt-3 border-t border-morandi-gold/20\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-sm text-morandi-secondary\">總計金額：</span>\n            <span className=\"text-lg font-semibold text-morandi-primary\">\n              ${totalAmount.toLocaleString()}\n            </span>\n          </div>\n          <div className=\"flex gap-2 justify-end\">\n            <button className=\"btn-morandi-secondary !py-2 !px-4\" onClick={onClose}>\n              取消\n            </button>\n            <button className=\"btn-morandi-primary !py-2 !px-4\" onClick={handleShare}>\n              分享到頻道\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/ShareOrdersDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Order' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { X, Search, Receipt } from 'lucide-react';\nimport { useOrderStore } from '@/stores';\nimport { useWorkspaceStore } from '@/stores/workspace-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { Order } from '@/stores/types';\n\ninterface ShareOrdersDialogProps {\n  channelId: string;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport function ShareOrdersDialog({\n  channelId,\n  onClose,\n  onSuccess\n}: ShareOrdersDialogProps) {\n  const { items: orders } = useOrderStore();\n  const { shareOrderList } = useWorkspaceStore();\n  const { user } = useAuthStore();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedOrders, setSelectedOrders] = useState<Set<string>>(new Set());\n\n  // 計算訂單的收款率和缺口\n  const ordersWithGap = useMemo(() => {\n    return orders\n      .map(order => {\n        const totalCost = order.total_amount || 0;\n        const collected = order.paid_amount || 0;\n        const gap = totalCost - collected;\n        const collectionRate = totalCost > 0 ? (collected / totalCost) * 100 : 0;\n\n        return {\n          ...order,\n          gap,\n          collectionRate\n        };\n      })\n      .filter(order => {\n        // 過濾：有缺口的訂單（待收款）\n        return order.gap > 0;\n      })\n      .sort((a, b) => {\n        // 排序優先級：\n        // 1. 成本 > 0 且收款 = 0（完全沒收）\n        // 2. 收款率 < 30%\n        // 3. 缺口金額大的優先\n        const aFullyUnpaid = a.total_amount > 0 && a.paid_amount === 0;\n        const bFullyUnpaid = b.total_amount > 0 && b.paid_amount === 0;\n\n        if (aFullyUnpaid && !bFullyUnpaid) return -1;\n        if (!aFullyUnpaid && bFullyUnpaid) return 1;\n\n        const aLowRate = a.collectionRate < 30;\n        const bLowRate = b.collectionRate < 30;\n\n        if (aLowRate && !bLowRate) return -1;\n        if (!aLowRate && bLowRate) return 1;\n\n        return b.gap - a.gap;\n      });\n  }, [orders]);\n\n  // 搜尋過濾\n  const filteredOrders = useMemo(() => {\n    if (!searchQuery.trim()) return ordersWithGap;\n\n    const query = searchQuery.toLowerCase();\n    return ordersWithGap.filter(order =>\n      order.order_number.toLowerCase().includes(query) ||\n      order.contact_person?.toLowerCase().includes(query) ||\n      order.tour_name?.toLowerCase().includes(query)\n    );\n  }, [ordersWithGap, searchQuery]);\n\n  // 切換訂單選擇\n  const toggleOrderSelection = (orderId: string) => {\n    const newSelected = new Set(selectedOrders);\n    if (newSelected.has(orderId)) {\n      newSelected.delete(orderId);\n    } else {\n      newSelected.add(orderId);\n    }\n    setSelectedOrders(newSelected);\n  };\n\n  // 計算已選訂單的總缺口\n  const selectedStats = useMemo(() => {\n    const selected = filteredOrders.filter(order => selectedOrders.has(order.id));\n    const totalGap = selected.reduce((sum, order) => sum + order.gap, 0);\n    return {\n      count: selected.length,\n      totalGap\n    };\n  }, [filteredOrders, selectedOrders]);\n\n  const handleShare = async () => {\n    if (selectedOrders.size === 0) {\n      alert('請至少選擇一筆訂單');\n      return;\n    }\n\n    if (!user) {\n      alert('請先登入');\n      return;\n    }\n\n    try {\n      await shareOrderList(channelId, Array.from(selectedOrders), user.id);\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('分享訂單失敗:', error);\n      alert('分享訂單失敗，請稍後再試');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/20 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"card-morandi-elevated w-[900px] max-h-[80vh] overflow-hidden flex flex-col\" onClick={(e) => e.stopPropagation()}>\n        {/* 標題列 */}\n        <div className=\"flex items-center justify-between pb-3 border-b border-morandi-gold/20\">\n          <div className=\"flex items-center gap-2\">\n            <Receipt className=\"text-morandi-gold\" size={20} />\n            <h3 className=\"text-lg font-semibold text-morandi-primary\">選擇待收款訂單</h3>\n          </div>\n          <button onClick={onClose} className=\"btn-icon-morandi !w-8 !h-8\">\n            <X size={16} />\n          </button>\n        </div>\n\n        {/* 搜尋列 */}\n        <div className=\"my-3\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-morandi-secondary\" size={16} />\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"搜尋訂單號、客戶名稱...\"\n              className=\"input-morandi pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* 訂單列表 */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {filteredOrders.length === 0 ? (\n            <div className=\"text-center py-8 text-morandi-secondary\">\n              {searchQuery ? '沒有符合搜尋條件的訂單' : '目前沒有待收款訂單'}\n            </div>\n          ) : (\n            <table className=\"w-full\">\n              <thead className=\"sticky top-0 bg-morandi-container/5 border-b border-morandi-gold/20\">\n                <tr>\n                  <th className=\"w-10 py-2 px-2\"></th>\n                  <th className=\"text-left py-2 px-2 text-sm font-semibold text-morandi-secondary\">訂單號</th>\n                  <th className=\"text-left py-2 px-2 text-sm font-semibold text-morandi-secondary\">客戶</th>\n                  <th className=\"text-right py-2 px-2 text-sm font-semibold text-morandi-secondary\">總額</th>\n                  <th className=\"text-right py-2 px-2 text-sm font-semibold text-morandi-secondary\">已收</th>\n                  <th className=\"text-right py-2 px-2 text-sm font-semibold text-morandi-secondary\">缺口</th>\n                  <th className=\"text-center py-2 px-2 text-sm font-semibold text-morandi-secondary\">狀態</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredOrders.map((order) => {\n                  const isSelected = selectedOrders.has(order.id);\n                  const isFullyUnpaid = order.total_amount > 0 && order.paid_amount === 0;\n                  const isLowRate = order.collectionRate < 30;\n\n                  return (\n                    <tr\n                      key={order.id}\n                      className={`border-b border-morandi-container/20 hover:bg-morandi-gold/5 cursor-pointer transition-colors ${\n                        isSelected ? 'bg-morandi-gold/10' : ''\n                      }`}\n                      onClick={() => toggleOrderSelection(order.id)}\n                    >\n                      <td className=\"py-2 px-2 text-center\">\n                        <input\n                          type=\"checkbox\"\n                          checked={isSelected}\n                          onChange={() => toggleOrderSelection(order.id)}\n                          className=\"w-4 h-4 rounded border-morandi-gold/30 text-morandi-gold focus:ring-morandi-gold/20\"\n                          onClick={(e) => e.stopPropagation()}\n                        />\n                      </td>\n                      <td className=\"py-2 px-2 text-sm text-morandi-primary font-medium\">\n                        {order.order_number}\n                      </td>\n                      <td className=\"py-2 px-2 text-sm text-morandi-primary\">\n                        {order.contact_person || '-'}\n                      </td>\n                      <td className=\"py-2 px-2 text-sm text-right text-morandi-primary\">\n                        ${order.total_amount.toLocaleString()}\n                      </td>\n                      <td className=\"py-2 px-2 text-sm text-right text-morandi-primary\">\n                        ${order.paid_amount.toLocaleString()}\n                      </td>\n                      <td className=\"py-2 px-2 text-sm text-right font-semibold text-red-600\">\n                        ${order.gap.toLocaleString()}\n                      </td>\n                      <td className=\"py-2 px-2 text-center\">\n                        {isFullyUnpaid ? (\n                          <span className=\"text-xs bg-red-100 text-red-700 px-2 py-0.5 rounded\">\n                            ❌❌ 未收款\n                          </span>\n                        ) : isLowRate ? (\n                          <span className=\"text-xs bg-orange-100 text-orange-700 px-2 py-0.5 rounded\">\n                            ⚠️ 收款率低\n                          </span>\n                        ) : (\n                          <span className=\"text-xs bg-yellow-100 text-yellow-700 px-2 py-0.5 rounded\">\n                            部分收款\n                          </span>\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n        </div>\n\n        {/* 底部：統計與操作按鈕 */}\n        <div className=\"pt-3 border-t border-morandi-gold/20\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"text-sm text-morandi-secondary\">\n              已選擇 <span className=\"font-semibold text-morandi-primary\">{selectedStats.count}</span> 筆訂單\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-xs text-morandi-secondary\">總缺口金額</div>\n              <div className=\"text-lg font-semibold text-red-600\">\n                ${selectedStats.totalGap.toLocaleString()}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex gap-2 justify-end\">\n            <button className=\"btn-morandi-secondary !py-2 !px-4\" onClick={onClose}>\n              取消\n            </button>\n            <button\n              className=\"btn-morandi-primary !py-2 !px-4\"\n              onClick={handleShare}\n              disabled={selectedOrders.size === 0}\n            >\n              分享到頻道\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/canvas-view.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[717,720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[717,720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[769,772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[769,772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[777,780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[777,780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1621,1624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1621,1624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2344,2347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2344,2347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4197,4200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4197,4200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nimport { FileText, CheckSquare, Folder, Plus } from 'lucide-react';\n\nimport { WorkspaceTaskList } from './workspace-task-list';\nimport { Button } from '@/components/ui/button';\nimport type { Channel } from '@/stores/workspace-store';\nimport { useWorkspaceStore } from '@/stores/workspace-store';\n\nimport { cn } from '@/lib/utils';\n\ninterface CanvasViewProps {\n  channel: Channel;\n}\n\nexport function CanvasView({ channel }: CanvasViewProps) {\n  const { personalCanvases, createPersonalCanvas } = useWorkspaceStore();\n  const [activeDocId, setActiveDocId] = useState<string | null>(null);\n\n  // 獲取該頻道的 Canvas 文件\n  const channelDocs = personalCanvases\n    .filter((doc: any) => doc.channelId === channel.id)\n    .sort((a: any, b: any) => a.order - b.order);\n  \n  // 如果沒有選擇文件，自動選擇第一個\n  const activeDoc = activeDocId\n    ? channelDocs.find((doc: any) => doc.id === activeDocId)\n    : channelDocs[0];\n  \n  const getDocIcon = (type: string) => {\n    switch (type) {\n      case 'document':\n        return FileText;\n      case 'tasks':\n        return CheckSquare;\n      case 'files':\n        return Folder;\n      default:\n        return FileText;\n    }\n  };\n  \n  const handleCreateDoc = (type: 'document' | 'tools' | 'custom') => {\n    const typeNames = {\n      document: '新文件',\n      tools: '待辦清單',\n      custom: '檔案庫',\n    };\n\n    createPersonalCanvas({\n      employee_id: '1', // TODO: 從 auth store 獲取\n      workspace_id: channel.workspace_id,\n      canvas_number: channelDocs.length + 1,\n      title: typeNames[type],\n      type,\n      content: {},\n      layout: {},\n    } as any);\n  };\n  \n  return (\n    <div className=\"flex-1 flex overflow-hidden\">\n      {/* 左側：Canvas 文件列表 */}\n      <div className=\"w-48 border-r border-border bg-morandi-container/5 flex flex-col\">\n        <div className=\"p-3 border-b border-border\">\n          <div className=\"text-xs font-semibold text-morandi-secondary mb-2\">Canvas</div>\n          <Button\n            onClick={() => handleCreateDoc('document')}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-full justify-start text-xs\"\n          >\n            <Plus size={12} className=\"mr-1\" />\n            新增文件\n          </Button>\n        </div>\n        \n        <div className=\"flex-1 overflow-y-auto py-2\">\n          {channelDocs.map((doc: any) => {\n            const Icon = getDocIcon(doc.type);\n            const is_active = activeDoc?.id === doc.id;\n\n            return (\n              <button\n                key={doc.id}\n                onClick={() => setActiveDocId(doc.id)}\n                className={cn(\n                  'w-full text-left px-3 py-2 text-sm transition-colors flex items-center gap-2',\n                  is_active\n                    ? 'bg-morandi-gold/10 text-morandi-primary font-medium'\n                    : 'text-morandi-secondary hover:bg-morandi-container/20 hover:text-morandi-primary'\n                )}\n              >\n                <Icon size={14} className=\"flex-shrink-0\" />\n                <span className=\"flex-1 truncate\">{doc.title}</span>\n              </button>\n            );\n          })}\n          \n          {channelDocs.length === 0 && (\n            <div className=\"px-3 py-8 text-center text-xs text-morandi-secondary\">\n              <p>尚無 Canvas 文件</p>\n              <p className=\"mt-1\">點擊上方按鈕建立</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* 右側：Canvas 內容 */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {activeDoc ? (\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h3 className=\"text-xl font-semibold text-morandi-primary mb-2\">\n                {activeDoc.title}\n              </h3>\n              <div className=\"text-sm text-morandi-secondary\">\n                {activeDoc.type === 'tools' && '管理團隊待辦事項'}\n                {activeDoc.type === 'document' && '共同編輯文件'}\n                {activeDoc.type === 'custom' && '共享檔案庫'}\n              </div>\n            </div>\n            \n            {/* 根據類型渲染不同內容 */}\n            {activeDoc.type === 'tools' && (\n              <WorkspaceTaskList\n                channelId={channel.id}\n                tour_id={(channel as any).tour_id}\n              />\n            )}\n            \n            {activeDoc.type === 'document' && (\n              <div className=\"border border-border rounded-lg p-4 bg-white\">\n                <p className=\"text-sm text-morandi-secondary\">\n                  富文本編輯器開發中...\n                </p>\n              </div>\n            )}\n            \n            {activeDoc.type === 'custom' && (\n              <div className=\"border border-border rounded-lg p-4 bg-white\">\n                <p className=\"text-sm text-morandi-secondary\">\n                  檔案庫功能開發中...\n                </p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-center h-full text-morandi-secondary\">\n            <div className=\"text-center\">\n              <FileText size={48} className=\"mx-auto mb-4 opacity-50\" />\n              <p className=\"text-sm\">尚無 Canvas 文件</p>\n              <p className=\"text-xs mt-1\">從左側建立新文件</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/channel-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[756,759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[756,759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Hash, Lock, Archive } from 'lucide-react';\n\nimport type { Channel } from '@/stores/workspace-store';\n\nimport { cn } from '@/lib/utils';\n\ninterface ChannelListProps {\n  channels: Channel[];\n  activeChannelId: string | null;\n  onSelectChannel: (id: string) => void;\n}\n\nexport function ChannelList({ channels, activeChannelId, onSelectChannel }: ChannelListProps) {\n  // 分類頻道 - 使用實際的 type 值\n  const publicChannels = channels.filter(c => c.type === 'public');\n  const privateChannels = channels.filter(c => c.type === 'private');\n  const directChannels = channels.filter(c => c.type === 'direct');\n\n  const renderChannel = (channel: Channel) => {\n    const is_active = channel.id === activeChannelId;\n    const isArchived = (channel as any).isArchived; // TODO: Add isArchived to Channel interface\n\n    return (\n      <button\n        onClick={() => onSelectChannel(channel.id)}\n        className={cn(\n          'w-full text-left px-3 py-2 text-sm transition-colors rounded-md flex items-center gap-2',\n          is_active\n            ? 'bg-morandi-gold/10 text-morandi-primary font-medium'\n            : 'text-morandi-secondary hover:bg-morandi-container/20 hover:text-morandi-primary',\n          isArchived && 'opacity-60'\n        )}\n      >\n        {channel.type === 'private' ? (\n          <Lock size={14} className=\"flex-shrink-0\" />\n        ) : (\n          <Hash size={14} className=\"flex-shrink-0\" />\n        )}\n        <span className=\"flex-1 truncate\">{channel.name}</span>\n        {isArchived && <Archive size={12} className=\"flex-shrink-0\" />}\n      </button>\n    );\n  };\n  \n  return (\n    <div className=\"py-2 space-y-4\">\n      {/* 公開頻道 */}\n      {publicChannels.length > 0 && (\n        <div className=\"px-3\">\n          <div className=\"text-xs font-semibold text-morandi-secondary mb-2\">公開頻道</div>\n          <div className=\"space-y-0.5\">\n            {publicChannels.map(channel => (\n              <div key={channel.id}>{renderChannel(channel)}</div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* 私人頻道 */}\n      {privateChannels.length > 0 && (\n        <div className=\"px-3\">\n          <div className=\"text-xs font-semibold text-morandi-secondary mb-2\">私人頻道</div>\n          <div className=\"space-y-0.5\">\n            {privateChannels.map(channel => (\n              <div key={channel.id}>{renderChannel(channel)}</div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* 直接訊息 */}\n      {directChannels.length > 0 && (\n        <div className=\"px-3\">\n          <div className=\"text-xs font-semibold text-morandi-secondary mb-2\">直接訊息</div>\n          <div className=\"space-y-0.5\">\n            {directChannels.map(channel => (\n              <div key={channel.id}>{renderChannel(channel)}</div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* 空狀態 */}\n      {channels.length === 0 && (\n        <div className=\"px-3 py-8 text-center text-sm text-morandi-secondary\">\n          <p>尚無頻道</p>\n          <p className=\"text-xs mt-1\">點擊上方 + 建立頻道</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/channel-view.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateMessage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteMessage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":24,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef, useEffect } from 'react';\n\nimport { Send, Paperclip, Smile, MoreVertical, Pin } from 'lucide-react';\n\nimport { CanvasView } from './canvas-view';\nimport { Button } from '@/components/ui/button';\nimport type { Channel } from '@/stores/workspace-store';\nimport { useWorkspaceStore } from '@/stores/workspace-store';\nimport { useAuthStore } from '@/stores/auth-store';\n\nimport { cn } from '@/lib/utils';\n\ninterface ChannelViewProps {\n  channel: Channel;\n}\n\nexport function ChannelView({ channel }: ChannelViewProps) {\n  const {\n    messages,\n    addMessage,\n    updateMessage,\n    deleteMessage,\n    togglePinMessage,\n    addReaction,\n    activeCanvasTab,\n    setActiveCanvasTab\n  } = useWorkspaceStore();\n\n  // ✅ 從 auth-store 讀取當前登入者資訊\n  const { user } = useAuthStore();\n  const currentUserId = user?.id || '';\n  const currentUserName = user?.display_name || '未知使用者';\n\n  const [messageInput, setMessageInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  // 獲取該頻道的訊息\n  const channelMessages = messages\n    .filter(m => m.channel_id === channel.id)\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\n  \n  // 釘選的訊息\n  const pinnedMessages = channelMessages.filter(m => m.is_pinned);\n  \n  // 自動滾動到底部\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [channelMessages.length]);\n  \n  const handleSendMessage = () => {\n    if (!messageInput.trim()) return;\n\n    // ✅ 使用正確的 author 資料結構\n    addMessage({\n      channel_id: channel.id,\n      author_id: currentUserId,\n      content: messageInput.trim(),\n      author: {\n        id: currentUserId,\n        display_name: currentUserName,\n      },\n    });\n\n    setMessageInput('');\n  };\n  \n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  \n  const formatTime = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n    \n    if (diffInHours < 24) {\n      return date.toLocaleTimeString('zh-TW', { hour: '2-digit', minute: '2-digit' });\n    } else {\n      return date.toLocaleDateString('zh-TW', { month: 'short', day: 'numeric' });\n    }\n  };\n  \n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* 頻道標題 */}\n      <div className=\"px-4 h-[57px] flex items-center justify-between\">\n        <h2 className=\"text-sm font-semibold text-morandi-primary\">{channel.name}</h2>\n        <div className=\"flex items-center gap-2\">\n          {/* 分頁按鈕 */}\n          <div className=\"flex items-center gap-1\">\n            <button\n              onClick={() => setActiveCanvasTab('messages')}\n              className={cn(\n                'px-2.5 py-1 text-xs font-medium transition-colors rounded',\n                activeCanvasTab === 'messages'\n                  ? 'bg-morandi-gold/10 text-morandi-primary'\n                  : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/20'\n              )}\n            >\n              💬 訊息\n            </button>\n            <button\n              onClick={() => setActiveCanvasTab('canvas')}\n              className={cn(\n                'px-2.5 py-1 text-xs font-medium transition-colors rounded',\n                activeCanvasTab === 'canvas'\n                  ? 'bg-morandi-gold/10 text-morandi-primary'\n                  : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/20'\n              )}\n            >\n              📋 Canvas\n            </button>\n            <button\n              onClick={() => setActiveCanvasTab('settings')}\n              className={cn(\n                'px-2.5 py-1 text-xs font-medium transition-colors rounded',\n                activeCanvasTab === 'settings'\n                  ? 'bg-morandi-gold/10 text-morandi-primary'\n                  : 'text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/20'\n              )}\n            >\n              ⚙️ 設定\n            </button>\n          </div>\n\n          <Button variant=\"outline\" size=\"sm\" className=\"h-6 w-6 p-0\">\n            <MoreVertical size={14} />\n          </Button>\n        </div>\n      </div>\n      <div className=\"mx-4 border-b border-border\"></div>\n      \n      {/* 內容區 */}\n      {activeCanvasTab === 'messages' ? (\n        <>\n          {/* 釘選訊息 */}\n          {pinnedMessages.length > 0 && (\n            <div className=\"bg-morandi-gold/5 px-6 py-2\">\n              <div className=\"flex items-center gap-2\">\n                <Pin size={14} className=\"text-morandi-gold\" />\n                <span className=\"text-sm text-morandi-secondary\">\n                  {pinnedMessages.length} 則釘選訊息\n                </span>\n              </div>\n            </div>\n          )}\n          \n          {/* 訊息列表 */}\n          <div className=\"flex-1 overflow-y-auto px-6 py-4 space-y-4\">\n            {channelMessages.map((message) => (\n              <div \n                key={message.id}\n                className={cn(\n                  'group relative',\n                  message.is_pinned && 'bg-morandi-gold/5 -mx-2 px-2 py-1 rounded'\n                )}\n              >\n                {message.is_pinned && (\n                  <div className=\"absolute -left-6 top-2\">\n                    <Pin size={12} className=\"text-morandi-gold\" />\n                  </div>\n                )}\n                \n                <div className=\"flex items-start gap-3\">\n                  {/* 頭像 */}\n                  <div className=\"w-8 h-8 rounded-full bg-morandi-gold/20 flex items-center justify-center text-sm font-medium text-morandi-primary flex-shrink-0\">\n                    {message.author?.display_name?.[0] || '?'}\n                  </div>\n\n                  {/* 訊息內容 */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-baseline gap-2 mb-1\">\n                      <span className=\"font-medium text-sm text-morandi-primary\">\n                        {message.author?.display_name || '未知使用者'}\n                      </span>\n                      <span className=\"text-xs text-morandi-secondary\">\n                        {formatTime(message.created_at)}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-morandi-primary whitespace-pre-wrap break-words\">\n                      {message.content}\n                    </div>\n                    \n                    {/* 反應 */}\n                    {Object.keys(message.reactions).length > 0 && (\n                      <div className=\"flex items-center gap-1 mt-2\">\n                        {Object.entries(message.reactions).map(([emoji, users], i) => (\n                          <button\n                            key={i}\n                            onClick={() => addReaction(message.id, emoji, currentUserId)}\n                            className={cn(\n                              'px-2 py-0.5 rounded-full text-xs flex items-center gap-1 transition-colors',\n                              users.includes(currentUserId)\n                                ? 'bg-morandi-gold/20 border border-morandi-gold/40'\n                                : 'bg-morandi-container/20 border border-border hover:border-morandi-gold/40'\n                            )}\n                          >\n                            <span>{emoji}</span>\n                            <span className=\"text-morandi-secondary\">{users.length}</span>\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* 操作按鈕（懸停顯示） */}\n                  <div className=\"opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1\">\n                    <button\n                      onClick={() => addReaction(message.id, '👍', currentUserId)}\n                      className=\"p-1 text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/20 rounded\"\n                      title=\"新增反應\"\n                    >\n                      <Smile size={14} />\n                    </button>\n                    <button\n                      onClick={() => togglePinMessage(message.id)}\n                      className=\"p-1 text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/20 rounded\"\n                      title={message.is_pinned ? '取消釘選' : '釘選'}\n                    >\n                      <Pin size={14} />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {channelMessages.length === 0 && (\n              <div className=\"flex items-center justify-center h-full text-morandi-secondary\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm\">開始對話</p>\n                  <p className=\"text-xs mt-1\">在下方輸入訊息</p>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n          \n          {/* 訊息輸入區 */}\n          <div className=\"px-6 py-4\">\n            <div className=\"border-t border-border mb-4 -mx-2\"></div>\n            <div className=\"flex items-end gap-3\">\n              <button className=\"p-2 text-morandi-secondary hover:text-morandi-primary hover:bg-morandi-container/20 rounded transition-colors\">\n                <Paperclip size={20} />\n              </button>\n              \n              <div className=\"flex-1\">\n                <textarea\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder={`在 ${channel.name} 傳送訊息...`}\n                  className=\"w-full px-4 py-2 border border-border rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-morandi-gold/50\"\n                  rows={1}\n                  style={{\n                    minHeight: '40px',\n                    maxHeight: '120px',\n                  }}\n                />\n                <div className=\"text-xs text-morandi-secondary mt-1\">\n                  Enter 傳送，Shift + Enter 換行\n                </div>\n              </div>\n              \n              <Button\n                onClick={handleSendMessage}\n                disabled={!messageInput.trim()}\n                className=\"bg-morandi-gold hover:bg-morandi-gold-hover text-white\"\n              >\n                <Send size={16} />\n              </Button>\n            </div>\n          </div>\n        </>\n      ) : activeCanvasTab === 'canvas' ? (\n        <CanvasView channel={channel} />\n      ) : (\n        <div className=\"flex-1 flex items-center justify-center text-morandi-secondary\">\n          <p>設定功能開發中...</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/create-channel-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/components/workspace/workspace-task-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'channelId' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1027,1030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1027,1030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1501,1504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1501,1504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1570,1573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1570,1573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2762,2765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2762,2765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":131,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasNotes' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":135,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9413,9416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9413,9416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9820,9823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9820,9823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nimport { Clock, User, Calendar, ChevronDown, ChevronUp } from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { StarRating } from '@/components/ui/star-rating';\nimport { useTodoStore } from '@/stores';\n\nimport { cn } from '@/lib/utils';\n\ninterface WorkspaceTaskListProps {\n  channelId: string;\n  tour_id: string;\n}\n\nconst employees = [\n  { id: '1', name: '威廉', role: '管理者' },\n  { id: '2', name: '李助理', role: 'OP' },\n  { id: '3', name: '王財務', role: '財務' },\n  { id: '4', name: '陳業務', role: '業務' },\n];\n\nexport function WorkspaceTaskList({ channelId, tour_id }: WorkspaceTaskListProps) {\n  const { items: todos, update: updateTodo } = useTodoStore();\n  const [expandedTaskId, setExpandedTaskId] = useState<string | null>(null);\n  const [replyInputs, setReplyInputs] = useState<Record<string, string>>({});\n  \n  // 獲取該旅遊團的任務\n  const tourTasks = (todos || []).filter(todo =>\n    todo.related_items?.some((item: any) => (item.type === 'quote' || item.type === 'order') && item.id === tour_id)\n  ).sort((a, b) => {\n    // 未完成的排在前面\n    if (a.completed !== b.completed) {\n      return a.completed ? 1 : -1;\n    }\n    // 按優先級排序\n    return (b.priority || 0) - (a.priority || 0);\n  });\n  \n  const getEmployeeName = (employee_id?: string) => {\n    if (!employee_id) return '未指派';\n    return employees.find(emp => emp.id === employee_id)?.name || '未知';\n  };\n  \n  const getProgressInfo = (todo: any) => {\n    const completed = (todo.sub_tasks || []).filter((task: any) => task.done).length;\n    const total = (todo.sub_tasks || []).length;\n    return { completed, total, percentage: total > 0 ? (completed / total) * 100 : 0 };\n  };\n  \n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '未設定';\n    return new Date(dateString).toLocaleDateString('zh-TW', { month: 'short', day: 'numeric' });\n  };\n  \n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n    \n    if (diffInHours < 1) {\n      const minutes = Math.floor(diffInHours * 60);\n      return `${minutes}分鐘前`;\n    } else if (diffInHours < 24) {\n      return `${Math.floor(diffInHours)}小時前`;\n    } else {\n      return date.toLocaleDateString('zh-TW', { month: 'short', day: 'numeric' });\n    }\n  };\n  \n  const handleToggleComplete = (taskId: string) => {\n    const task = todos.find(t => t.id === taskId);\n    if (!task) return;\n    \n    updateTodo(taskId, {\n      completed: !task.completed,\n      status: !task.completed ? 'completed' : 'pending',\n      completed_at: !task.completed ? new Date().toISOString() : undefined,\n    } as any);\n  };\n  \n  const handleToggleSubTask = (taskId: string, subTaskId: string) => {\n    const task = todos.find(t => t.id === taskId);\n    if (!task) return;\n    \n    const updatedSubTasks = (task.sub_tasks || []).map(st =>\n      st.id === subTaskId\n        ? { ...st, done: !st.done, completed_at: !st.done ? new Date().toISOString() : undefined }\n        : st\n    );\n    \n    updateTodo(taskId, { sub_tasks: updatedSubTasks });\n  };\n  \n  const handleAddReply = (taskId: string) => {\n    const content = replyInputs[taskId];\n    if (!content?.trim()) return;\n    \n    const task = todos.find(t => t.id === taskId);\n    if (!task) return;\n    \n    const newNote = {\n      timestamp: new Date().toISOString(),\n      content: content.trim(),\n      user_id: '1', // TODO: 從 auth store 獲取\n    };\n    \n    updateTodo(taskId, {\n      notes: [...(task.notes || []), newNote],\n    });\n    \n    setReplyInputs(prev => ({ ...prev, [taskId]: '' }));\n  };\n  \n  const toggleExpand = (taskId: string) => {\n    setExpandedTaskId(expandedTaskId === taskId ? null : taskId);\n  };\n  \n  return (\n    <div className=\"space-y-0 border border-border rounded-lg overflow-hidden bg-white\">\n      {tourTasks.length === 0 ? (\n        <div className=\"text-center py-12 text-morandi-secondary\">\n          <Clock size={48} className=\"mx-auto mb-4 opacity-50\" />\n          <p className=\"text-sm\">此頻道尚無任務</p>\n          <p className=\"text-xs mt-1\">前往旅遊團管理 &gt; 指派任務建立任務</p>\n        </div>\n      ) : (\n        tourTasks.map((task, index) => {\n          const progress = getProgressInfo(task);\n          const isExpanded = expandedTaskId === task.id;\n          const hasSubTasks = (task.sub_tasks || []).length > 0;\n          const hasNotes = (task.notes || []).length > 0;\n          \n          return (\n            <div key={task.id}>\n              {/* 任務列表項 */}\n              <div\n                className={cn(\n                  'flex items-center gap-3 p-3 hover:bg-morandi-container/10 transition-colors',\n                  'border-b border-border last:border-b-0',\n                  task.completed && 'opacity-60'\n                )}\n              >\n                {/* 勾選框 */}\n                <input\n                  type=\"checkbox\"\n                  checked={task.completed || false}\n                  onChange={() => handleToggleComplete(task.id)}\n                  className=\"w-4 h-4 cursor-pointer\"\n                />\n                \n                {/* 星級 */}\n                <div className=\"flex-shrink-0\">\n                  <StarRating value={task.priority || 3} readonly size=\"sm\" />\n                </div>\n                \n                {/* 標題 */}\n                <div className=\"flex-1 min-w-0\">\n                  <span\n                    className={cn(\n                      'font-medium text-sm',\n                      task.completed && 'line-through text-morandi-secondary'\n                    )}\n                  >\n                    {task.title}\n                  </span>\n                </div>\n                \n                {/* 負責人 */}\n                <div className=\"flex items-center gap-1 text-sm text-morandi-secondary flex-shrink-0\">\n                  <User size={14} />\n                  <span>@{getEmployeeName(task.assignee)}</span>\n                </div>\n                \n                {/* 期限 */}\n                <div className=\"flex items-center gap-1 text-sm text-morandi-secondary flex-shrink-0\">\n                  <Calendar size={14} />\n                  <span>{formatDate(task.deadline)}</span>\n                </div>\n                \n                {/* 進度 */}\n                {hasSubTasks && (\n                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n                    <div className=\"w-16 bg-morandi-container/30 rounded-full h-2\">\n                      <div\n                        className=\"bg-morandi-gold h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${progress.percentage}%` }}\n                      />\n                    </div>\n                    <span className=\"text-sm text-morandi-secondary\">\n                      {progress.completed}/{progress.total}\n                    </span>\n                  </div>\n                )}\n                \n                {/* 展開按鈕 */}\n                <button\n                  onClick={() => toggleExpand(task.id)}\n                  className=\"text-morandi-secondary hover:text-morandi-primary transition-colors flex-shrink-0\"\n                >\n                  {isExpanded ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n                </button>\n              </div>\n              \n              {/* 展開內容（子任務 + 討論） */}\n              {isExpanded && (\n                <div className=\"bg-morandi-container/5 p-4 border-b border-border\">\n                  {/* 子任務 */}\n                  {hasSubTasks && (\n                    <div className=\"mb-4\">\n                      <div className=\"text-sm font-medium text-morandi-primary mb-2\">子任務：</div>\n                      <div className=\"space-y-1\">\n                        {(task.sub_tasks || []).map(subTask => (\n                          <div key={subTask.id} className=\"flex items-center gap-2 py-1\">\n                            <input\n                              type=\"checkbox\"\n                              checked={subTask.done}\n                              onChange={() => handleToggleSubTask(task.id, subTask.id)}\n                              className=\"w-3 h-3 cursor-pointer\"\n                            />\n                            <span\n                              className={cn(\n                                'text-sm',\n                                subTask.done && 'line-through opacity-60'\n                              )}\n                            >\n                              {subTask.title}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* 討論區 */}\n                  <div>\n                    <div className=\"text-sm font-medium text-morandi-primary mb-2\">\n                      討論 ({(task.notes || []).length})：\n                    </div>\n                    <div className=\"space-y-3\">\n                      {(task.notes || []).map((note, i) => (\n                        <div key={i} className=\"flex gap-2\">\n                          {/* 頭像 */}\n                          <div className=\"w-6 h-6 rounded-full bg-morandi-gold/20 flex items-center justify-center text-xs font-medium text-morandi-primary flex-shrink-0\">\n                            {getEmployeeName((note as any).user_id)[0]}\n                          </div>\n\n                          {/* 訊息內容 */}\n                          <div className=\"flex-1 bg-white rounded p-2 text-sm border border-border\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <span className=\"font-medium text-morandi-primary\">\n                                {getEmployeeName((note as any).user_id)}\n                              </span>\n                              <span className=\"text-xs text-morandi-secondary\">\n                                {formatTimestamp(note.timestamp)}\n                              </span>\n                            </div>\n                            <div className=\"text-morandi-primary whitespace-pre-wrap\">\n                              {note.content}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {/* 回覆輸入框 */}\n                      <div className=\"flex gap-2\">\n                        <Input\n                          value={replyInputs[task.id] || ''}\n                          onChange={(e) =>\n                            setReplyInputs(prev => ({ ...prev, [task.id]: e.target.value }))\n                          }\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter' && !e.shiftKey) {\n                              e.preventDefault();\n                              handleAddReply(task.id);\n                            }\n                          }}\n                          placeholder=\"💬 回覆... (Enter 送出)\"\n                          className=\"text-sm\"\n                        />\n                        <Button\n                          onClick={() => handleAddReply(task.id)}\n                          disabled={!replyInputs[task.id]?.trim()}\n                          size=\"sm\"\n                          className=\"bg-morandi-gold hover:bg-morandi-gold-hover\"\n                        >\n                          送出\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/destinations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/locations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/order-status.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/payment-status.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/quote-status.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/status-maps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/constants/tour-status.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/core/errors/app-errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/core/services/base.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ValidationError' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":36,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1276,1279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1276,1279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":74,"column":55,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":74,"endColumn":69,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2158,2159],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2297,2300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2297,2300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":81,"column":35,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":81,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2348,2351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2348,2351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":82,"column":35,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":82,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2416,2419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2416,2419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2498,2501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2498,2501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":1,"message":"Unnecessary try/catch wrapper.","line":109,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":120,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseEntity, PageRequest, PageResponse } from '@/core/types/common';\nimport { NotFoundError, ValidationError } from '@/core/errors/app-errors';\n\n/**\n * Store 操作介面（FastIn 架構 - 非同步版本）\n * 所有 CRUD 操作都回傳 Promise，配合 createStore 的非同步實作\n */\nexport interface StoreOperations<T> {\n  getAll: () => T[];\n  getById: (id: string) => T | undefined;\n  add: (entity: T) => Promise<T | undefined>;\n  update: (id: string, data: Partial<T>) => Promise<void>;\n  delete: (id: string) => Promise<void>;\n}\n\nexport abstract class BaseService<T extends BaseEntity> {\n  protected abstract resourceName: string;\n  protected abstract getStore: () => StoreOperations<T>;\n\n  // 統一的 ID 生成\n  protected generateId(): string {\n    // 開發階段使用 crypto.randomUUID，生產環境由後端生成\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n      return crypto.randomUUID();\n    }\n    // Fallback for environments without crypto.randomUUID\n    return 'id_' + Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  // 統一的時間戳\n  protected now(): string {\n    return new Date().toISOString();\n  }\n\n  // 驗證資料（子類可以覆寫）\n  protected validate(data: Partial<T>): void {\n    // 基本驗證邏輯，子類可以擴展\n  }\n\n  // CREATE\n  async create(data: Omit<T, keyof BaseEntity>): Promise<T> {\n    try {\n      this.validate(data as any);\n\n      const entity: T = {\n        ...data,\n        id: this.generateId(),\n        created_at: this.now(),\n        updated_at: this.now(),\n      } as T;\n\n      // FastIn 架構：await store 操作確保寫入完成\n      const store = this.getStore();\n      const result = await store.add(entity);\n\n      // 未來：調用 API\n      // const response = await api.post(`/${this.resourceName}`, data);\n\n      return result || entity;\n    } catch (error) {\n      throw error instanceof Error ? error : new Error(`Failed to create ${this.resourceName}`);\n    }\n  }\n\n  // READ (List with pagination and filtering)\n  async list(params?: PageRequest): Promise<PageResponse<T>> {\n    try {\n      const store = this.getStore();\n      let allData = store.getAll();\n\n      // 搜尋過濾\n      if (params?.search) {\n        allData = allData.filter(item =>\n          JSON.stringify(item).toLowerCase().includes(params.search!.toLowerCase())\n        );\n      }\n\n      // 排序\n      if (params?.sortBy) {\n        allData.sort((a, b) => {\n          const aVal = (a as any)[params.sortBy!];\n          const bVal = (b as any)[params.sortBy!];\n\n          if (aVal < bVal) return (params as any).sort_order === 'desc' ? 1 : -1;\n          if (aVal > bVal) return (params as any).sort_order === 'desc' ? -1 : 1;\n          return 0;\n        });\n      }\n\n      // 分頁\n      const page = params?.page || 1;\n      const pageSize = params?.pageSize || 10;\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n\n      return {\n        data: allData.slice(start, end),\n        total: allData.length,\n        page,\n        pageSize,\n      };\n    } catch (error) {\n      throw error instanceof Error ? error : new Error(`Failed to list ${this.resourceName}`);\n    }\n  }\n\n  // READ (Single)\n  async getById(id: string): Promise<T | null> {\n    try {\n      const store = this.getStore();\n      const entity = store.getById(id);\n\n      if (!entity) {\n        throw new NotFoundError(this.resourceName, id);\n      }\n\n      return entity;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // UPDATE\n  async update(id: string, data: Partial<T>): Promise<T> {\n    try {\n      this.validate(data);\n\n      const store = this.getStore();\n      const existing = store.getById(id);\n\n      if (!existing) {\n        throw new NotFoundError(this.resourceName, id);\n      }\n\n      const updated = {\n        ...existing,\n        ...data,\n        id, // 確保 ID 不會被覆蓋\n        updated_at: this.now(),\n      } as T;\n\n      // FastIn 架構：await store 操作確保寫入完成\n      await store.update(id, updated);\n      return updated;\n    } catch (error) {\n      throw error instanceof Error ? error : new Error(`Failed to update ${this.resourceName}`);\n    }\n  }\n\n  // DELETE\n  async delete(id: string): Promise<boolean> {\n    try {\n      const store = this.getStore();\n      const existing = store.getById(id);\n\n      if (!existing) {\n        throw new NotFoundError(this.resourceName, id);\n      }\n\n      // FastIn 架構：await store 操作確保寫入完成\n      await store.delete(id);\n      return true;\n    } catch (error) {\n      throw error instanceof Error ? error : new Error(`Failed to delete ${this.resourceName}`);\n    }\n  }\n\n  // Batch operations\n  async batchCreate(items: Omit<T, keyof BaseEntity>[]): Promise<T[]> {\n    const results: T[] = [];\n\n    for (const item of items) {\n      try {\n        const created = await this.create(item);\n        results.push(created);\n      } catch (error) {\n        // 繼續處理其他項目，但記錄錯誤\n        console.error(`Failed to create item:`, error);\n      }\n    }\n\n    return results;\n  }\n\n  async batchUpdate(updates: { id: string; data: Partial<T> }[]): Promise<T[]> {\n    const results: T[] = [];\n\n    for (const { id, data } of updates) {\n      try {\n        const updated = await this.update(id, data);\n        results.push(updated);\n      } catch (error) {\n        console.error(`Failed to update item ${id}:`, error);\n      }\n    }\n\n    return results;\n  }\n\n  async batchDelete(ids: string[]): Promise<{ success: string[]; failed: string[] }> {\n    const success: string[] = [];\n    const failed: string[] = [];\n\n    for (const id of ids) {\n      try {\n        await this.delete(id);\n        success.push(id);\n      } catch (error) {\n        console.error(`Failed to delete item ${id}:`, error);\n        failed.push(id);\n      }\n    }\n\n    return { success, failed };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/core/types/common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/data/region-options.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/accounting/hooks/useAccounting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/accounting/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/accounting/services/accounting.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[573,576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[573,576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[650,653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[650,653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3846,3849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3846,3849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Account, Transaction } from '@/types/accounting.types';\nimport { Category } from '@/stores/accounting-types';\nimport { useAccountingStore } from '@/stores/accounting-store';\nimport { ValidationError } from '@/core/errors/app-errors';\n\nclass AccountingService extends BaseService<Account> {\n  protected resourceName = 'accounts';\n\n  protected getStore = (): StoreOperations<Account> => {\n    const store = useAccountingStore.getState();\n    return {\n      getAll: () => store.accounts as any,\n      getById: (id: string) => store.accounts.find(a => a.id === id) as any,\n      add: async (account: Account) => {\n        await store.addAccount(account as any);\n        return account;\n      },\n      update: async (id: string, data: Partial<Account>) => {\n        await store.updateAccount(id, data);\n      },\n      delete: async (id: string) => {\n        await store.deleteAccount(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Account>): void {\n    if (data.name && data.name.trim().length === 0) {\n      throw new ValidationError('name', '帳戶名稱不能為空');\n    }\n\n    if (data.balance !== undefined && isNaN(data.balance)) {\n      throw new ValidationError('balance', '餘額格式錯誤');\n    }\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  getAccountBalance(account_id: string): number {\n    const store = useAccountingStore.getState();\n    return store.getAccountBalance(account_id);\n  }\n\n  getCategoryTotal(category_id: string, start_date?: string, end_date?: string): number {\n    const store = useAccountingStore.getState();\n    return store.getCategoryTotal(category_id, start_date, end_date);\n  }\n\n  calculateStats(): void {\n    const store = useAccountingStore.getState();\n    store.calculateStats();\n  }\n\n  getAccountsByType(type: Account['type']): Account[] {\n    const store = useAccountingStore.getState();\n    return store.accounts.filter(a => a.type === type);\n  }\n\n  getTotalAssets(): number {\n    const store = useAccountingStore.getState();\n    return store.stats.total_assets;\n  }\n\n  getMonthlyIncome(): number {\n    const store = useAccountingStore.getState();\n    return store.stats.monthly_income;\n  }\n\n  getMonthlyExpense(): number {\n    const store = useAccountingStore.getState();\n    return store.stats.monthly_expense;\n  }\n\n  getNetWorth(): number {\n    const store = useAccountingStore.getState();\n    return store.stats.net_worth;\n  }\n\n  // Transaction 相關\n  addTransaction(transaction: Omit<Transaction, 'id' | 'created_at' | 'updated_at'>): string {\n    const store = useAccountingStore.getState();\n    return store.addTransaction(transaction);\n  }\n\n  updateTransaction(id: string, transaction: Partial<Transaction>): void {\n    const store = useAccountingStore.getState();\n    store.updateTransaction(id, transaction);\n  }\n\n  deleteTransaction(id: string): void {\n    const store = useAccountingStore.getState();\n    store.deleteTransaction(id);\n  }\n\n  getTransactionsByAccount(account_id: string): Transaction[] {\n    const store = useAccountingStore.getState();\n    return store.transactions.filter(t =>\n      t.account_id === account_id || t.to_account_id === account_id\n    );\n  }\n\n  getTransactionsByDateRange(start_date: string, end_date: string): Transaction[] {\n    const store = useAccountingStore.getState();\n    return store.transactions.filter(t =>\n      t.date >= start_date && t.date <= end_date\n    );\n  }\n}\n\nclass CategoryService extends BaseService<Category> {\n  protected resourceName = 'categories';\n\n  protected getStore = (): StoreOperations<Category> => {\n    const store = useAccountingStore.getState();\n    return {\n      getAll: () => store.categories,\n      getById: (id: string) => store.categories.find(c => c.id === id),\n      add: async (category: Category) => {\n        await store.addCategory(category as any);\n        return category;\n      },\n      update: async (id: string, data: Partial<Category>) => {\n        await store.updateCategory(id, data);\n      },\n      delete: async (id: string) => {\n        await store.deleteCategory(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Category>): void {\n    if (data.name && data.name.trim().length === 0) {\n      throw new ValidationError('name', '分類名稱不能為空');\n    }\n  }\n\n  getCategoriesByType(type: Category['type']): Category[] {\n    const store = useAccountingStore.getState();\n    return store.categories.filter(c => c.type === type);\n  }\n}\n\nexport const accountingService = new AccountingService();\nexport const categoryService = new CategoryService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/customers/hooks/useCustomers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCustomerStore } from '@/stores';\nimport { customerService } from '../services/customer.service';\nimport { Customer } from '@/stores/types';\n\n/**\n * 客戶管理 Hook\n * 提供客戶相關的所有操作\n */\nexport const useCustomers = () => {\n  const store = useCustomerStore();\n\n  return {\n    // ========== 資料 ==========\n    customers: store.items,\n\n    // ========== CRUD 操作 ==========\n    /**\n     * 創建新客戶\n     */\n    createCustomer: async (data: Omit<Customer, 'id' | 'created_at' | 'updated_at'>) => {\n      return await store.create(data as any);\n    },\n\n    /**\n     * 更新客戶資訊\n     */\n    updateCustomer: async (id: string, data: Partial<Customer>) => {\n      return await store.update(id, data);\n    },\n\n    /**\n     * 刪除客戶\n     */\n    deleteCustomer: async (id: string) => {\n      return await store.delete(id);\n    },\n\n    /**\n     * 載入客戶列表\n     */\n    loadCustomers: async () => {\n      return await store.fetchAll();\n    },\n\n    // ========== 業務方法 ==========\n    /**\n     * 搜尋客戶\n     */\n    searchCustomers: (searchTerm: string) => {\n      return customerService.searchCustomers(searchTerm);\n    },\n\n    /**\n     * 獲取特定旅遊團的客戶\n     */\n    getCustomersByTour: (tour_id: string) => {\n      return customerService.getCustomersByTour(tour_id);\n    },\n\n    /**\n     * 獲取 VIP 客戶\n     */\n    getVIPCustomers: () => {\n      return customerService.getVIPCustomers();\n    },\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/customers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/customers/services/customer.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[629,632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[629,632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tour_id' is defined but never used. Allowed unused args must match /^_/u.","line":71,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'store' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Customer } from '@/types/customer.types';\nimport { useCustomerStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\n\nclass CustomerService extends BaseService<Customer> {\n  protected resourceName = 'customers';\n\n  protected getStore = (): StoreOperations<Customer> => {\n    const store = useCustomerStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(c => c.id === id),\n      add: async (customer: Customer) => {\n        await store.create(customer as any);\n        return customer;\n      },\n      update: async (id: string, data: Partial<Customer>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Customer>): void {\n    if (data.name && data.name.trim().length < 2) {\n      throw new ValidationError('name', '客戶姓名至少需要 2 個字符');\n    }\n\n    if (data.email && !this.isValidEmail(data.email)) {\n      throw new ValidationError('email', '郵件格式錯誤');\n    }\n\n    if (data.phone && !this.isValidPhone(data.phone)) {\n      throw new ValidationError('phone', '電話格式錯誤');\n    }\n\n    if (data.id_number && !this.isValidIdNumber(data.id_number)) {\n      throw new ValidationError('id_number', '身份證字號格式錯誤');\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  }\n\n  private isValidPhone(phone: string): boolean {\n    return /^[\\d\\s\\-+()]{8,}$/.test(phone);\n  }\n\n  private isValidIdNumber(id_number: string): boolean {\n    // 台灣身份證或護照基本驗證\n    return /^[A-Z][12]\\d{8}$/.test(id_number) || /^[A-Z]{1,2}\\d{6,9}$/.test(id_number);\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  searchCustomers(searchTerm: string): Customer[] {\n    const store = useCustomerStore.getState();\n    const term = searchTerm.toLowerCase();\n    return store.items.filter(c =>\n      c.name.toLowerCase().includes(term) ||\n      c.email?.toLowerCase().includes(term) ||\n      c.phone?.includes(term) ||\n      c.id_number?.toLowerCase().includes(term)\n    );\n  }\n\n  getCustomersByTour(tour_id: string): Customer[] {\n    const store = useCustomerStore.getState();\n    // TODO: Order 類型需要加入 customer_id 欄位\n    // const tourOrders = useOrderStore.getState().items.filter(o => o.tour_id === tour_id);\n    // const customerIds = tourOrders.map(o => o.customer_id);\n    // return store.items.filter(c => customerIds.includes(c.id));\n    return []; // 暫時返回空陣列，等 Order 類型更新\n  }\n\n  getVIPCustomers(): Customer[] {\n    const store = useCustomerStore.getState();\n    return store.items.filter(c => c.is_vip);\n  }\n}\n\nexport const customerService = new CustomerService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/orders/hooks/useOrders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useOrderStore } from '@/stores';\nimport { orderService } from '../services/order.service';\nimport { Order } from '@/stores/types';\n\nexport const useOrders = () => {\n  const store = useOrderStore();\n\n  return {\n    // ========== 資料 ==========\n    orders: store.items,\n\n    // ========== CRUD 操作 ==========\n    createOrder: async (data: Omit<Order, 'id' | 'created_at' | 'updated_at'>) => {\n      return await store.create(data as any);\n    },\n\n    updateOrder: async (id: string, data: Partial<Order>) => {\n      return await store.update(id, data);\n    },\n\n    deleteOrder: async (id: string) => {\n      return await store.delete(id);\n    },\n\n    loadOrders: async () => {\n      return await store.fetchAll();\n    },\n\n    // ========== 業務方法 ==========\n    getOrdersByTour: (tour_id: string) => {\n      return orderService.getOrdersByTour(tour_id);\n    },\n\n    getOrdersByStatus: (status: string) => {\n      // Order 介面沒有 status 欄位\n      return orderService.getOrdersByStatus(status as any);\n    },\n\n    getOrdersByCustomer: (customer_id: string) => {\n      return orderService.getOrdersByCustomer(customer_id);\n    },\n\n    calculateTotalRevenue: () => {\n      return orderService.calculateTotalRevenue();\n    },\n\n    getPendingOrders: () => {\n      return orderService.getPendingOrders();\n    },\n\n    getConfirmedOrders: () => {\n      return orderService.getConfirmedOrders();\n    },\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/orders/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/orders/services/order.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[606,609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[606,609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1657,1660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1657,1660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Order } from '@/stores/types';\nimport { useOrderStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\n\nclass OrderService extends BaseService<Order> {\n  protected resourceName = 'orders';\n\n  protected getStore = (): StoreOperations<Order> => {\n    const store = useOrderStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(o => o.id === id),\n      add: async (order: Order) => {\n        const result = await store.create(order as any);\n        return result || order;\n      },\n      update: async (id: string, data: Partial<Order>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Order>): void {\n    if (data.tour_id && !data.tour_id.trim()) {\n      throw new ValidationError('tour_id', '必須關聯旅遊團');\n    }\n\n    if (data.total_amount !== undefined && data.total_amount < 0) {\n      throw new ValidationError('total_amount', '訂單金額不能為負數');\n    }\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  getOrdersByTour(tour_id: string): Order[] {\n    const store = useOrderStore.getState();\n    return store.items.filter(o => o.tour_id === tour_id);\n  }\n\n  getOrdersByStatus(status: 'unpaid' | 'partial' | 'paid'): Order[] {\n    const store = useOrderStore.getState();\n    return store.items.filter(o => o.payment_status === status);\n  }\n\n  getOrdersByCustomer(customer_id: string): Order[] {\n    const store = useOrderStore.getState();\n    return store.items.filter((o: any) => o.customer_id === customer_id);\n  }\n\n  calculateTotalRevenue(): number {\n    const store = useOrderStore.getState();\n    return store.items\n      .filter(o => o.payment_status === 'paid')\n      .reduce((sum, o) => sum + (o.total_amount || 0), 0);\n  }\n\n  getPendingOrders(): Order[] {\n    return this.getOrdersByStatus('unpaid');\n  }\n\n  getConfirmedOrders(): Order[] {\n    return this.getOrdersByStatus('paid');\n  }\n}\n\nexport const orderService = new OrderService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/payments/hooks/usePayments.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[949,952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[949,952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { usePaymentRequestStore, useDisbursementOrderStore } from '@/stores';\nimport { paymentRequestService } from '../services/payment-request.service';\nimport { disbursementOrderService } from '../services/disbursement-order.service';\nimport { PaymentRequest, PaymentRequestItem, DisbursementOrder } from '@/stores/types';\nimport { BaseEntity } from '@/types';\n\n/**\n * Payments Hook - 統一財務操作接口\n *\n * 使用新的 Service 層架構\n */\nexport const usePayments = () => {\n  const paymentRequestStore = usePaymentRequestStore();\n  const disbursementOrderStore = useDisbursementOrderStore();\n\n  return {\n    // ========== 資料 ==========\n    payment_requests: paymentRequestStore.items,\n    disbursement_orders: disbursementOrderStore.items,\n\n    // ========== PaymentRequest CRUD 操作 ==========\n    createPaymentRequest: async (\n      data: Omit<PaymentRequest, keyof BaseEntity | 'request_number'>\n    ) => {\n      return await paymentRequestService.create(data as any);\n    },\n\n    updatePaymentRequest: async (id: string, data: Partial<PaymentRequest>) => {\n      return await paymentRequestService.update(id, data);\n    },\n\n    deletePaymentRequest: async (id: string) => {\n      return await paymentRequestService.delete(id);\n    },\n\n    loadPaymentRequests: async () => {\n      return await paymentRequestStore.fetchAll();\n    },\n\n    // ========== PaymentRequestItem 操作 ==========\n    addPaymentItem: async (\n      requestId: string,\n      item: Omit<PaymentRequestItem, 'id' | 'request_id' | 'item_number' | 'subtotal' | 'created_at' | 'updated_at'>\n    ) => {\n      return await paymentRequestService.addItem(requestId, item);\n    },\n\n    updatePaymentItem: async (\n      requestId: string,\n      itemId: string,\n      data: Partial<PaymentRequestItem>\n    ) => {\n      return await paymentRequestService.updateItem(requestId, itemId, data);\n    },\n\n    deletePaymentItem: async (requestId: string, itemId: string) => {\n      return await paymentRequestService.deleteItem(requestId, itemId);\n    },\n\n    // ========== PaymentRequest 業務邏輯 ==========\n    createFromQuote: async (\n      tourId: string,\n      quoteId: string,\n      requestDate: string,\n      tourName: string,\n      code: string\n    ) => {\n      return await paymentRequestService.createFromQuote(\n        tourId,\n        quoteId,\n        requestDate,\n        tourName,\n        code\n      );\n    },\n\n    calculateTotalAmount: async (requestId: string) => {\n      return await paymentRequestService.calculateTotalAmount(requestId);\n    },\n\n    getItemsByCategory: (requestId: string, category: PaymentRequestItem['category']) => {\n      return paymentRequestService.getItemsByCategory(requestId, category);\n    },\n\n    getPendingRequests: () => {\n      return paymentRequestService.getPendingRequests();\n    },\n\n    getProcessingRequests: () => {\n      return paymentRequestService.getProcessingRequests();\n    },\n\n    // ========== DisbursementOrder CRUD 操作 ==========\n    createDisbursementOrder: async (paymentRequestIds: string[], note?: string) => {\n      return await disbursementOrderService.createWithRequests(paymentRequestIds, note);\n    },\n\n    updateDisbursementOrder: async (id: string, data: Partial<DisbursementOrder>) => {\n      return await disbursementOrderService.update(id, data);\n    },\n\n    deleteDisbursementOrder: async (id: string) => {\n      return await disbursementOrderService.delete(id);\n    },\n\n    loadDisbursementOrders: async () => {\n      return await disbursementOrderStore.fetchAll();\n    },\n\n    // ========== DisbursementOrder 業務邏輯 ==========\n    confirmDisbursementOrder: async (id: string, confirmedBy: string) => {\n      return await disbursementOrderService.confirmOrder(id, confirmedBy);\n    },\n\n    addToCurrentDisbursementOrder: async (paymentRequestIds: string[]) => {\n      return await disbursementOrderService.addToCurrentWeekOrder(paymentRequestIds);\n    },\n\n    removeFromDisbursementOrder: async (orderId: string, requestId: string) => {\n      return await disbursementOrderService.removePaymentRequest(orderId, requestId);\n    },\n\n    addPaymentRequestsToOrder: async (orderId: string, requestIds: string[]) => {\n      return await disbursementOrderService.addPaymentRequests(orderId, requestIds);\n    },\n\n    getCurrentWeekDisbursementOrder: () => {\n      return disbursementOrderService.getCurrentWeekOrder();\n    },\n\n    getNextThursday: () => {\n      return disbursementOrderService.getNextThursday();\n    },\n\n    getPendingOrders: () => {\n      return disbursementOrderService.getPendingOrders();\n    },\n\n    getConfirmedOrders: () => {\n      return disbursementOrderService.getConfirmedOrders();\n    },\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/payments/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/payments/services/disbursement-order.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2896,2899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2896,2899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3287,3290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3287,3290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { DisbursementOrder, PaymentRequest } from '@/stores/types';\nimport { useDisbursementOrderStore, usePaymentRequestStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\n\nclass DisbursementOrderService extends BaseService<DisbursementOrder> {\n  protected resourceName = 'disbursement_orders';\n\n  protected getStore = (): StoreOperations<DisbursementOrder> => {\n    const store = useDisbursementOrderStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(o => o.id === id),\n      add: async (order: DisbursementOrder) => {\n        const result = await store.create(order as any);\n        return result || order;\n      },\n      update: async (id: string, data: Partial<DisbursementOrder>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<DisbursementOrder>): void {\n    if (data.payment_request_ids && data.payment_request_ids.length === 0) {\n      throw new ValidationError('payment_request_ids', '出納單必須包含至少一個請款單');\n    }\n\n    if (data.total_amount !== undefined && data.total_amount < 0) {\n      throw new ValidationError('total_amount', '總金額不能為負數');\n    }\n\n    if (data.disbursement_date) {\n      const date = new Date(data.disbursement_date);\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek !== 4) {\n        throw new ValidationError('disbursement_date', '出納日期必須為週四');\n      }\n    }\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  /**\n   * 取得下週四日期\n   */\n  getNextThursday(): string {\n    const today = new Date();\n    const dayOfWeek = today.getDay();\n    const daysUntilThursday = (4 - dayOfWeek + 7) % 7;\n    const nextThursday = new Date(today);\n\n    // 如果今天是週四且超過 17:00，則為下週四\n    if (daysUntilThursday === 0 && today.getHours() >= 17) {\n      nextThursday.setDate(today.getDate() + 7);\n    } else if (daysUntilThursday === 0) {\n      nextThursday.setDate(today.getDate());\n    } else {\n      nextThursday.setDate(today.getDate() + daysUntilThursday);\n    }\n\n    return nextThursday.toISOString().split('T')[0];\n  }\n\n  /**\n   * 取得當週出納單（待處理）\n   */\n  getCurrentWeekOrder(): DisbursementOrder | null {\n    const nextThursday = this.getNextThursday();\n    const store = useDisbursementOrderStore.getState();\n\n    return store.items.find(order =>\n      order.disbursement_date === nextThursday && order.status === 'pending'\n    ) || null;\n  }\n\n  /**\n   * 使用請款單創建出納單\n   */\n  async createWithRequests(\n    paymentRequestIds: string[],\n    note?: string\n  ): Promise<DisbursementOrder> {\n    // 計算總金額\n    const paymentRequestStore = usePaymentRequestStore.getState();\n    const totalAmount = paymentRequestIds.reduce((sum, requestId) => {\n      const request = paymentRequestStore.items.find((r: any) => r.id === requestId);\n      return sum + (request?.total_amount || 0);\n    }, 0);\n\n    const orderData = {\n      disbursement_date: this.getNextThursday(),\n      payment_request_ids: [...paymentRequestIds],\n      total_amount: totalAmount,\n      status: 'pending' as const,\n      note,\n      created_by: '1', // TODO: 使用實際用戶ID\n    };\n\n    const order = await this.create(orderData as any);\n\n    // 更新請款單狀態為 processing\n    for (const requestId of paymentRequestIds) {\n      await this.updatePaymentRequestStatus(requestId, 'processing');\n    }\n\n    return order;\n  }\n\n  /**\n   * 確認出納單\n   */\n  async confirmOrder(orderId: string, confirmedBy: string): Promise<void> {\n    const order = await this.getById(orderId);\n    if (!order) {\n      throw new Error(`找不到出納單: ${orderId}`);\n    }\n\n    if (order.status !== 'pending') {\n      throw new Error('只能確認待處理的出納單');\n    }\n\n    const now = this.now();\n\n    // 更新出納單狀態\n    await this.update(orderId, {\n      status: 'confirmed',\n      confirmed_by: confirmedBy,\n      confirmed_at: now,\n      updated_at: now\n    });\n\n    // 更新所有關聯請款單狀態為 confirmed\n    for (const requestId of order.payment_request_ids) {\n      await this.updatePaymentRequestStatus(requestId, 'confirmed');\n    }\n  }\n\n  /**\n   * 添加請款單到出納單\n   */\n  async addPaymentRequests(orderId: string, requestIds: string[]): Promise<void> {\n    const order = await this.getById(orderId);\n    if (!order) {\n      throw new Error(`找不到出納單: ${orderId}`);\n    }\n\n    if (order.status !== 'pending') {\n      throw new Error('只能修改待處理的出納單');\n    }\n\n    // 計算新的總金額\n    const paymentRequestStore = usePaymentRequestStore.getState();\n    const newRequestIds = [...order.payment_request_ids, ...requestIds];\n    const newTotalAmount = newRequestIds.reduce((sum, requestId) => {\n      const request = paymentRequestStore.items.find(r => r.id === requestId);\n      return sum + (request?.total_amount || 0);\n    }, 0);\n\n    // 更新出納單\n    await this.update(orderId, {\n      payment_request_ids: newRequestIds,\n      total_amount: newTotalAmount,\n      updated_at: this.now()\n    });\n\n    // 更新請款單狀態\n    for (const requestId of requestIds) {\n      await this.updatePaymentRequestStatus(requestId, 'processing');\n    }\n  }\n\n  /**\n   * 從出納單移除請款單\n   */\n  async removePaymentRequest(orderId: string, requestId: string): Promise<void> {\n    const order = await this.getById(orderId);\n    if (!order) {\n      throw new Error(`找不到出納單: ${orderId}`);\n    }\n\n    if (order.status !== 'pending') {\n      throw new Error('只能修改待處理的出納單');\n    }\n\n    // 計算新的總金額\n    const paymentRequestStore = usePaymentRequestStore.getState();\n    const newRequestIds = order.payment_request_ids.filter(id => id !== requestId);\n    const newTotalAmount = newRequestIds.reduce((sum, reqId) => {\n      const request = paymentRequestStore.items.find(r => r.id === reqId);\n      return sum + (request?.total_amount || 0);\n    }, 0);\n\n    // 更新出納單\n    await this.update(orderId, {\n      payment_request_ids: newRequestIds,\n      total_amount: newTotalAmount,\n      updated_at: this.now()\n    });\n\n    // 將請款單狀態改回 pending\n    await this.updatePaymentRequestStatus(requestId, 'pending');\n  }\n\n  /**\n   * 添加到當週出納單（找不到則創建新的）\n   */\n  async addToCurrentWeekOrder(requestIds: string[]): Promise<DisbursementOrder> {\n    const currentOrder = this.getCurrentWeekOrder();\n\n    if (currentOrder) {\n      // 已有當週出納單，直接添加\n      await this.addPaymentRequests(currentOrder.id, requestIds);\n      return await this.getById(currentOrder.id) as DisbursementOrder;\n    } else {\n      // 沒有當週出納單，創建新的\n      return await this.createWithRequests(requestIds);\n    }\n  }\n\n  // ========== Helper 方法 ==========\n\n  /**\n   * 更新請款單狀態（私有方法）\n   */\n  private async updatePaymentRequestStatus(\n    requestId: string,\n    status: PaymentRequest['status']\n  ): Promise<void> {\n    const store = usePaymentRequestStore.getState();\n    await store.update(requestId, {\n      status,\n      updated_at: this.now()\n    });\n  }\n\n  // ========== Query 方法 ==========\n\n  /**\n   * 取得待處理出納單\n   */\n  getPendingOrders(): DisbursementOrder[] {\n    const store = useDisbursementOrderStore.getState();\n    return store.items.filter(o => o.status === 'pending');\n  }\n\n  /**\n   * 取得已確認出納單\n   */\n  getConfirmedOrders(): DisbursementOrder[] {\n    const store = useDisbursementOrderStore.getState();\n    return store.items.filter(o => o.status === 'confirmed');\n  }\n\n  /**\n   * 按日期取得出納單\n   */\n  getOrdersByDate(date: string): DisbursementOrder[] {\n    const store = useDisbursementOrderStore.getState();\n    return store.items.filter(o => o.disbursement_date === date);\n  }\n}\n\nexport const disbursementOrderService = new DisbursementOrderService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/payments/services/payment-request.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[762,765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[762,765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5417,5420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5417,5420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { PaymentRequest, PaymentRequestItem } from '@/stores/types';\nimport { usePaymentRequestStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\nimport { generateId } from '@/lib/data/create-data-store';\n\nclass PaymentRequestService extends BaseService<PaymentRequest> {\n  protected resourceName = 'payment_requests';\n\n  protected getStore = (): StoreOperations<PaymentRequest> => {\n    const store = usePaymentRequestStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(r => r.id === id),\n      add: async (request: PaymentRequest) => {\n        const result = await store.create(request as any);\n        return result || request;\n      },\n      update: async (id: string, data: Partial<PaymentRequest>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<PaymentRequest>): void {\n    if (data.tour_id && !data.tour_id.trim()) {\n      throw new ValidationError('tour_id', '必須關聯旅遊團');\n    }\n\n    if (data.total_amount !== undefined && data.total_amount < 0) {\n      throw new ValidationError('total_amount', '總金額不能為負數');\n    }\n\n    if (data.request_date) {\n      const requestDate = new Date(data.request_date);\n      const dayOfWeek = requestDate.getDay();\n      if (dayOfWeek !== 4) {\n        throw new ValidationError('request_date', '請款日期必須為週四');\n      }\n    }\n  }\n\n  // ========== PaymentRequestItem 管理 ==========\n\n  /**\n   * 新增請款項目\n   */\n  async addItem(\n    requestId: string,\n    itemData: Omit<PaymentRequestItem, 'id' | 'request_id' | 'item_number' | 'subtotal' | 'created_at' | 'updated_at'>\n  ): Promise<PaymentRequestItem> {\n    const request = await this.getById(requestId);\n    if (!request) {\n      throw new Error(`找不到請款單: ${requestId}`);\n    }\n\n    const id = generateId();\n    const now = this.now();\n    const itemNumber = `${request.request_number}-${String(request.items.length + 1).padStart(3, '0')}`;\n\n    const item: PaymentRequestItem = {\n      ...itemData,\n      id,\n      request_id: requestId,\n      item_number: itemNumber,\n      subtotal: itemData.unit_price * itemData.quantity,\n      created_at: now,\n      updated_at: now,\n    };\n\n    // 更新 request 的 items 和 total_amount\n    const updatedItems = [...request.items, item];\n    const totalAmount = updatedItems.reduce((sum, i) => sum + i.subtotal, 0);\n\n    await this.update(requestId, {\n      items: updatedItems,\n      total_amount: totalAmount,\n      updated_at: now\n    });\n\n    return item;\n  }\n\n  /**\n   * 更新請款項目\n   */\n  async updateItem(\n    requestId: string,\n    itemId: string,\n    itemData: Partial<PaymentRequestItem>\n  ): Promise<void> {\n    const request = await this.getById(requestId);\n    if (!request) {\n      throw new Error(`找不到請款單: ${requestId}`);\n    }\n\n    const now = this.now();\n    const updatedItems = request.items.map(item => {\n      if (item.id === itemId) {\n        const updated = { ...item, ...itemData, updated_at: now };\n        updated.subtotal = updated.unit_price * updated.quantity;\n        return updated;\n      }\n      return item;\n    });\n\n    const totalAmount = updatedItems.reduce((sum, i) => sum + i.subtotal, 0);\n\n    await this.update(requestId, {\n      items: updatedItems,\n      total_amount: totalAmount,\n      updated_at: now\n    });\n  }\n\n  /**\n   * 刪除請款項目\n   */\n  async deleteItem(requestId: string, itemId: string): Promise<void> {\n    const request = await this.getById(requestId);\n    if (!request) {\n      throw new Error(`找不到請款單: ${requestId}`);\n    }\n\n    const now = this.now();\n    const updatedItems = request.items.filter(item => item.id !== itemId);\n    const totalAmount = updatedItems.reduce((sum, i) => sum + i.subtotal, 0);\n\n    await this.update(requestId, {\n      items: updatedItems,\n      total_amount: totalAmount,\n      updated_at: now\n    });\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  /**\n   * 計算請款單總金額（手動觸發）\n   */\n  async calculateTotalAmount(requestId: string): Promise<number> {\n    const request = await this.getById(requestId);\n    if (!request) {\n      throw new Error(`找不到請款單: ${requestId}`);\n    }\n\n    const totalAmount = request.items.reduce((sum, item) => sum + item.subtotal, 0);\n\n    await this.update(requestId, {\n      total_amount: totalAmount,\n      updated_at: this.now()\n    });\n\n    return totalAmount;\n  }\n\n  /**\n   * 按類別取得請款項目\n   */\n  getItemsByCategory(\n    requestId: string,\n    category: PaymentRequestItem['category']\n  ): PaymentRequestItem[] {\n    const store = usePaymentRequestStore.getState();\n    const request = store.items.find((r: PaymentRequest) => r.id === requestId);\n    return request?.items.filter((item: PaymentRequestItem) => item.category === category) || [];\n  }\n\n  /**\n   * 從報價單創建請款單\n   */\n  async createFromQuote(\n    tourId: string,\n    quoteId: string,\n    requestDate: string,\n    tourName: string,\n    code: string\n  ): Promise<PaymentRequest> {\n    const requestData = {\n      tour_id: tourId,\n      code,\n      tour_name: tourName,\n      quote_id: quoteId,\n      request_date: requestDate,\n      items: [],\n      total_amount: 0,\n      status: 'pending' as const,\n      note: '從報價單自動生成',\n      budget_warning: false,\n      created_by: '1', // TODO: 使用實際用戶ID\n    };\n\n    return await this.create(requestData as any);\n  }\n\n  // ========== Query 方法 ==========\n\n  /**\n   * 取得待處理請款單\n   */\n  getPendingRequests(): PaymentRequest[] {\n    const store = usePaymentRequestStore.getState();\n    return store.items.filter(r => r.status === 'pending');\n  }\n\n  /**\n   * 取得處理中請款單\n   */\n  getProcessingRequests(): PaymentRequest[] {\n    const store = usePaymentRequestStore.getState();\n    return store.items.filter(r => r.status === 'processing');\n  }\n\n  /**\n   * 按旅遊團取得請款單\n   */\n  getRequestsByTour(tourId: string): PaymentRequest[] {\n    const store = usePaymentRequestStore.getState();\n    return store.items.filter(r => r.tour_id === tourId);\n  }\n\n  /**\n   * 按訂單取得請款單\n   */\n  getRequestsByOrder(orderId: string): PaymentRequest[] {\n    const store = usePaymentRequestStore.getState();\n    return store.items.filter(r => r.order_id === orderId);\n  }\n}\n\nexport const paymentRequestService = new PaymentRequestService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/quotes/hooks/useQuotes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[460,463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[460,463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuoteStore } from '@/stores';\nimport { quoteService } from '../services/quote.service';\nimport { Quote } from '@/stores/types';\n\nexport const useQuotes = () => {\n  const store = useQuoteStore();\n\n  return {\n    // ========== 資料 ==========\n    quotes: store.items,\n\n    // ========== CRUD 操作 ==========\n    addQuote: async (data: Omit<Quote, 'id' | 'created_at' | 'updated_at' | 'version' | 'versions'>) => {\n      return await store.create(data as any);\n    },\n\n    updateQuote: async (id: string, data: Partial<Quote>) => {\n      return await store.update(id, data);\n    },\n\n    deleteQuote: async (id: string) => {\n      return await store.delete(id);\n    },\n\n    loadQuotes: async () => {\n      return await store.fetchAll();\n    },\n\n    // ========== 業務方法 ==========\n    duplicateQuote: async (id: string) => {\n      return await quoteService.duplicateQuote(id);\n    },\n\n    createNewVersion: async (id: string, updates: Partial<Quote>) => {\n      return await quoteService.createNewVersion(id, updates);\n    },\n\n    getQuotesByTour: (tour_id: string) => {\n      return quoteService.getQuotesByTour(tour_id);\n    },\n\n    getQuotesByStatus: (status: Quote['status']) => {\n      return quoteService.getQuotesByStatus(status);\n    },\n\n    calculateTotalCost: (quote: Quote) => {\n      return quoteService.calculateTotalCost(quote);\n    },\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/quotes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/quotes/services/quote.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[665,668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[665,668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1769,1772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1769,1772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Quote } from '@/stores/types';\nimport { useQuoteStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\nimport { generateId } from '@/lib/data/create-data-store';\n\nclass QuoteService extends BaseService<Quote> {\n  protected resourceName = 'quotes';\n\n  protected getStore = (): StoreOperations<Quote> => {\n    const store = useQuoteStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(q => q.id === id),\n      add: async (quote: Quote) => {\n        const result = await store.create(quote as any);\n        return result || quote;\n      },\n      update: async (id: string, data: Partial<Quote>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Quote>): void {\n    if (data.name && data.name.trim().length < 2) {\n      throw new ValidationError('name', '報價單標題至少需要 2 個字符');\n    }\n\n    if (data.categories) {\n      const total_cost = data.categories.reduce((sum, cat) => sum + cat.total, 0);\n      if (total_cost < 0) {\n        throw new ValidationError('categories', '總金額不能為負數');\n      }\n    }\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  async duplicateQuote(id: string): Promise<Quote | undefined> {\n    const store = useQuoteStore.getState();\n    const original = store.items.find(q => q.id === id);\n    if (!original) return undefined;\n\n    // 排除不應該傳入的欄位\n    const { id: _, created_at, updated_at, version, versions, ...rest } = original;\n\n    const duplicated = await store.create({\n      ...rest,\n      name: `${original.name} (副本)`,\n      status: 'proposed'\n    } as any);\n\n    return duplicated;\n  }\n\n  async createNewVersion(id: string, updates: Partial<Quote>): Promise<Quote | undefined> {\n    const store = useQuoteStore.getState();\n    const current = store.items.find(q => q.id === id);\n    if (!current) return undefined;\n\n    const newVersion = {\n      id: generateId(),\n      version: (current.version || 1) + 1,\n      categories: current.categories,\n      total_cost: current.total_cost,\n      group_size: current.group_size,\n      accommodation_days: current.accommodation_days,\n      participant_counts: current.participant_counts || {\n        adult: 0,\n        child_with_bed: 0,\n        child_no_bed: 0,\n        single_room: 0,\n        infant: 0\n      },\n      selling_prices: current.selling_prices || {\n        adult: 0,\n        child_with_bed: 0,\n        child_no_bed: 0,\n        single_room: 0,\n        infant: 0\n      },\n      created_at: new Date().toISOString()\n    };\n\n    return await store.update(id, {\n      version: (current.version || 1) + 1,\n      versions: [...(current.versions || []), newVersion],\n      ...updates\n    });\n  }\n\n  getQuotesByTour(tour_id: string): Quote[] {\n    const store = useQuoteStore.getState();\n    return store.items.filter(q => q.tour_id === tour_id);\n  }\n\n  getQuotesByStatus(status: Quote['status']): Quote[] {\n    const store = useQuoteStore.getState();\n    return store.items.filter(q => q.status === status);\n  }\n\n  calculateTotalCost(quote: Quote): number {\n    return quote.categories.reduce((sum, cat) => sum + cat.total, 0);\n  }\n}\n\nexport const quoteService = new QuoteService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/suppliers/hooks/useSuppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/suppliers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/suppliers/services/supplier.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[649,652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[649,652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Supplier } from '@/stores/types';\nimport { useSupplierStore, useRegionStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\n\nclass SupplierService extends BaseService<Supplier> {\n  protected resourceName = 'suppliers';\n\n  protected getStore = (): StoreOperations<Supplier> => {\n    const store = useSupplierStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find((s: Supplier) => s.id === id),\n      add: async (supplier: Supplier) => {\n        await store.create(supplier as any);\n        return supplier;\n      },\n      update: async (id: string, data: Partial<Supplier>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  };\n\n  protected validate(data: Partial<Supplier>): void {\n    if (data.name && data.name.trim().length < 2) {\n      throw new ValidationError('name', '供應商名稱至少需要 2 個字符');\n    }\n\n    // Supplier 使用 contact 物件\n    if (data.contact?.email && !this.isValidEmail(data.contact.email)) {\n      throw new ValidationError('email', '郵件格式錯誤');\n    }\n\n    if (data.contact?.phone && !this.isValidPhone(data.contact.phone)) {\n      throw new ValidationError('phone', '電話格式錯誤');\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  }\n\n  private isValidPhone(phone: string): boolean {\n    return /^[\\d\\s\\-+()]{8,}$/.test(phone);\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  getSuppliersByCategory(category: Supplier['type']): Supplier[] {\n    const store = useSupplierStore.getState();\n    return store.items.filter((s: Supplier) => s.type === category);\n  }\n\n  getActiveSuppliers(): Supplier[] {\n    const store = useSupplierStore.getState();\n    return store.items.filter((s: Supplier) => s.status === 'active');\n  }\n\n  searchSuppliers(searchTerm: string): Supplier[] {\n    const store = useSupplierStore.getState();\n    const term = searchTerm.toLowerCase();\n    return store.items.filter((s: Supplier) =>\n      s.name.toLowerCase().includes(term) ||\n      s.contact.contact_person?.toLowerCase().includes(term) ||\n      s.contact.email?.toLowerCase().includes(term)\n    );\n  }\n\n  /**\n   * 生成供應商編號\n   * 格式：S + 國家代碼（3碼）+ 流水號（3碼）\n   * 例如：SJPN001（日本的第一個供應商）\n   */\n  async generateSupplierCode(countryName: string): Promise<string> {\n    const supplierStore = useSupplierStore.getState();\n    const regionStore = useRegionStore.getState();\n\n    // 從 regions 根據國家名稱找到國家代碼\n    let countryCode = 'OTH'; // 預設其他\n    const country = regionStore.items.find(\n      r => r.type === 'country' && r.name === countryName && !r._deleted\n    );\n    if (country) {\n      countryCode = country.code;\n    }\n\n    // 找出該國家現有的供應商數量，作為流水號\n    const sameCountrySuppliers = supplierStore.items.filter(\n      (s: Supplier) => s.country === countryName\n    );\n\n    // 生成流水號（從現有數量 +1 開始）\n    const sequence = (sameCountrySuppliers.length + 1).toString().padStart(3, '0');\n\n    return `S${countryCode}${sequence}`;\n  }\n}\n\nexport const supplierService = new SupplierService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/todos/hooks/useTodos.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user_id' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTodoStore } from '@/stores';\nimport { todoService } from '../services/todo.service';\nimport { Todo } from '@/stores/types';\n\nexport const useTodos = () => {\n  const store = useTodoStore();\n\n  return {\n    // ========== 資料 ==========\n    todos: store.items,\n\n    // ========== CRUD 操作 ==========\n    createTodo: async (data: Omit<Todo, 'id' | 'created_at' | 'updated_at' | 'creator' | 'visibility'>) => {\n      return await store.create(data as Omit<Todo, 'id' | 'created_at' | 'updated_at'>);\n    },\n\n    updateTodo: async (id: string, data: Partial<Todo>) => {\n      return await store.update(id, data);\n    },\n\n    deleteTodo: async (id: string) => {\n      return await store.delete(id);\n    },\n\n    toggleTodo: async (id: string) => {\n      return await todoService.toggleTodo(id);\n    },\n\n    loadTodos: async (user_id?: string) => {\n      return await store.fetchAll();\n    },\n\n    clearAllTodos: () => {\n      store.clear();\n    },\n\n    // ========== 業務方法 ==========\n    getTodosByUser: (user_id: string) => {\n      return todoService.getTodosByUser(user_id);\n    },\n\n    getTodosByStatus: (completed: boolean) => {\n      return todoService.getTodosByStatus(completed);\n    },\n\n    getTodosByPriority: (priority: Todo['priority']) => {\n      return todoService.getTodosByPriority(priority);\n    },\n\n    getOverdueTodos: () => {\n      return todoService.getOverdueTodos();\n    },\n\n    getTodayTodos: () => {\n      return todoService.getTodayTodos();\n    },\n\n    getUpcomingTodos: (days?: number) => {\n      return todoService.getUpcomingTodos(days);\n    },\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/todos/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/todos/services/todo.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[581,584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[581,584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1465,1468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1465,1468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Todo } from '@/stores/types';\nimport { useTodoStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\n\nclass TodoService extends BaseService<Todo> {\n  protected resourceName = 'todos';\n\n  protected getStore = (): StoreOperations<Todo> => {\n    const store = useTodoStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(t => t.id === id),\n      add: async (todo: Todo) => {\n        await store.create(todo as any);\n        return todo;\n      },\n      update: async (id: string, data: Partial<Todo>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Todo>): void {\n    if (data.title && data.title.trim().length === 0) {\n      throw new ValidationError('title', '待辦事項標題不能為空');\n    }\n\n    if (data.deadline) {\n      const deadline = new Date(data.deadline);\n      if (isNaN(deadline.getTime())) {\n        throw new ValidationError('deadline', '截止日期格式錯誤');\n      }\n    }\n  }\n\n  // ========== 業務邏輯方法 ==========\n\n  async toggleTodo(id: string): Promise<void> {\n    const store = useTodoStore.getState();\n    const todo = store.items.find(t => t.id === id);\n    if (todo) {\n      await store.update(id, { status: todo.status === 'completed' ? 'pending' : 'completed' } as any);\n    }\n  }\n\n  getTodosByUser(user_id: string): Todo[] {\n    const store = useTodoStore.getState();\n    return store.items.filter(t =>\n      t.creator === user_id || t.assignee === user_id || t.visibility?.includes(user_id)\n    );\n  }\n\n  getTodosByStatus(completed: boolean): Todo[] {\n    const store = useTodoStore.getState();\n    return store.items.filter(t => t.completed === completed);\n  }\n\n  getTodosByPriority(priority: Todo['priority']): Todo[] {\n    const store = useTodoStore.getState();\n    return store.items.filter(t => t.priority === priority);\n  }\n\n  getOverdueTodos(): Todo[] {\n    const store = useTodoStore.getState();\n    const now = new Date();\n    return store.items.filter(t =>\n      !t.completed &&\n      t.deadline &&\n      new Date(t.deadline) < now\n    );\n  }\n\n  getTodayTodos(): Todo[] {\n    const store = useTodoStore.getState();\n    const today = new Date().toISOString().split('T')[0];\n    return store.items.filter(t =>\n      !t.completed &&\n      t.deadline?.startsWith(today)\n    );\n  }\n\n  getUpcomingTodos(days: number = 7): Todo[] {\n    const store = useTodoStore.getState();\n    const now = new Date();\n    const future = new Date();\n    future.setDate(future.getDate() + days);\n\n    return store.items.filter(t => {\n      if (!t.deadline || t.completed) return false;\n      const deadline = new Date(t.deadline);\n      return deadline >= now && deadline <= future;\n    });\n  }\n}\n\nexport const todoService = new TodoService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/tours/hooks/useTours-advanced.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PageResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'params'. Either include it or remove the dependency array.","line":16,"column":46,"nodeType":"ArrayExpression","endLine":22,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [params]","fix":{"range":[729,846],"text":"[params]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":21,"column":5,"nodeType":"ChainExpression","endLine":21,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[826,829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[826,829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'tourStore'. Either exclude it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [loadTours]","fix":{"range":[2025,2047],"text":"[loadTours]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":101,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3806,3809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3806,3809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { tourService } from '../services/tour.service';\nimport { Tour } from '@/stores/types';\nimport { PageRequest, PageResponse, UseEntityResult } from '@/core/types/common';\nimport { BaseEntity } from '@/core/types/common';\nimport { useTourStore } from '@/stores';\n\nexport function useTours(params?: PageRequest): UseEntityResult<Tour> {\n  const [data, setData] = useState<Tour[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const tourStore = useTourStore();\n\n  // 使用 useMemo 來穩定 params 物件的參考\n  const stableParams = useMemo(() => params, [\n    params?.page,\n    params?.pageSize,\n    params?.search,\n    params?.sortBy,\n    (params as any)?.sort_order\n  ]);\n\n  const loadTours = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await tourService.list(stableParams);\n      setData(result.data);\n      setTotalCount(result.total);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '載入旅遊團資料失敗';\n      setError(errorMessage);\n      console.error('Failed to load tours:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [stableParams]);\n\n  useEffect(() => {\n    loadTours();\n  }, [loadTours]);\n\n  const createTour = useCallback(async (tourData: Omit<Tour, keyof BaseEntity>) => {\n    try {\n      setError(null);\n      const newTour = await tourService.create(tourData);\n\n      // ✅ 樂觀更新 - 立即加入 UI，不等待重新載入\n      setData(prevData => [newTour, ...prevData]);\n      setTotalCount(prev => prev + 1);\n\n      // 🔧 Store 已經在 tourService.create() 中更新了，這裡不需要重複更新\n      console.log('✅ 已建立新旅遊團:', newTour.code);\n\n      return newTour;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '建立旅遊團失敗';\n      setError(errorMessage);\n      // 失敗時重新載入以確保數據一致性\n      await loadTours();\n      throw err; // 讓調用者可以處理錯誤\n    }\n  }, [loadTours, tourStore]);\n\n  const updateTour = useCallback(async (id: string, tourData: Partial<Tour>) => {\n    try {\n      setError(null);\n\n      // 樂觀更新 - 立即更新 UI\n      setData(prevData =>\n        prevData.map(tour =>\n          tour.id === id ? { ...tour, ...tourData } : tour\n        )\n      );\n\n      const updated = await tourService.update(id, tourData);\n\n      // 成功後用真實資料更新\n      setData(prevData =>\n        prevData.map(tour =>\n          tour.id === id ? updated : tour\n        )\n      );\n\n      return updated;\n    } catch (err) {\n      // 失敗時回滾\n      await loadTours();\n      const errorMessage = err instanceof Error ? err.message : '更新旅遊團失敗';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [loadTours]);\n\n  const deleteTour = useCallback(async (id: string) => {\n    try {\n      setError(null);\n\n      // 樂觀更新 - 立即從 UI 移除\n      const originalData = data;\n      setData(prevData => prevData.filter(tour => tour.id !== id));\n      setTotalCount(prev => Math.max(0, prev - 1));\n\n      await tourService.delete(id);\n    } catch (err) {\n      // 失敗時回滾\n      await loadTours();\n      const errorMessage = err instanceof Error ? err.message : '刪除旅遊團失敗';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [data, loadTours]);\n\n  const refresh = useCallback(async () => {\n    await loadTours();\n  }, [loadTours]);\n\n  return {\n    data,\n    totalCount,\n    loading,\n    error,\n    actions: {\n      create: createTour,\n      update: updateTour,\n      delete: (async (id: string) => { await deleteTour(id); return true; }) as (id: string) => Promise<boolean>,\n      refresh,\n    },\n  };\n}\n\n// 專門用於單個旅遊團詳情的 hook\nexport function useTourDetails(tour_id: string) {\n  const [tour, setTour] = useState<Tour | null>(null);\n  const [financials, setFinancials] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadTourDetails = useCallback(async () => {\n    if (!tour_id) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const [tourData, financialData] = await Promise.all([\n        tourService.getById(tour_id),\n        tourService.calculateFinancialSummary(tour_id),\n      ]);\n\n      setTour(tourData);\n      setFinancials(financialData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '載入旅遊團詳情失敗';\n      setError(errorMessage);\n      console.error('Failed to load tour details:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [tour_id]);\n\n  useEffect(() => {\n    loadTourDetails();\n  }, [loadTourDetails]);\n\n  const updateTourStatus = useCallback(async (newStatus: Tour['status'], reason?: string) => {\n    if (!tour_id) return null;\n\n    try {\n      setError(null);\n      const updated = await tourService.updateTourStatus(tour_id, newStatus, reason);\n      setTour(updated);\n      return updated;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '更新旅遊團狀態失敗';\n      setError(errorMessage);\n      throw err;\n    }\n  }, [tour_id]);\n\n  const generateTourCode = useCallback(async (location: string, date: Date, isSpecial?: boolean) => {\n    try {\n      setError(null);\n      return await tourService.generateTourCode(location, date, isSpecial);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '生成團號失敗';\n      setError(errorMessage);\n      throw err;\n    }\n  }, []);\n\n  return {\n    tour,\n    financials,\n    loading,\n    error,\n    actions: {\n      updateStatus: updateTourStatus,\n      generateCode: generateTourCode,\n      refresh: loadTourDetails,\n    }\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/tours/hooks/useTours.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Order' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Customer' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Member' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[585,588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[585,588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTourStore } from '@/stores';\nimport { tourService } from '../services/tour.service';\nimport { Tour, Order, Customer, Member } from '@/stores/types';\n\n/**\n * 簡化版 Tours Hook（與其他模組接口統一）\n *\n * 使用範例：\n * const { tours, orders, createTour, updateTour } = useTours();\n */\nexport const useTours = () => {\n  const tourStore = useTourStore();\n\n  return {\n    // ========== 資料 ==========\n    tours: tourStore.items,\n\n    // ========== Tour CRUD 操作 ==========\n    createTour: async (data: Omit<Tour, 'id' | 'created_at' | 'updated_at'>) => {\n      return await tourStore.create(data as any);\n    },\n\n    updateTour: async (id: string, data: Partial<Tour>) => {\n      return await tourStore.update(id, data);\n    },\n\n    deleteTour: async (id: string) => {\n      return await tourStore.delete(id);\n    },\n\n    loadTours: async () => {\n      return await tourStore.fetchAll();\n    },\n\n    // ========== 業務方法（來自 Service） ==========\n    generateTourCode: async (location: string, date: Date, isSpecial?: boolean) => {\n      return await tourService.generateTourCode(location, date, isSpecial);\n    },\n\n    isTourCodeExists: async (code: string) => {\n      return await tourService.isTourCodeExists(code);\n    },\n\n    calculateFinancialSummary: async (tour_id: string) => {\n      return await tourService.calculateFinancialSummary(tour_id);\n    },\n\n    updateTourStatus: async (tour_id: string, status: Tour['status'], reason?: string) => {\n      return await tourService.updateTourStatus(tour_id, status, reason);\n    },\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/features/tours/services/tour.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[721,724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[721,724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":1,"message":"Unnecessary try/catch wrapper.","line":124,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":145,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3933,3936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3933,3936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":1,"message":"Unnecessary try/catch wrapper.","line":150,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":172,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reason' is defined but never used. Allowed unused args must match /^_/u.","line":176,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":76},{"ruleId":"no-useless-catch","severity":1,"message":"Unnecessary try/catch wrapper.","line":177,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":193,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6220,6223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6220,6223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6375,6378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6375,6378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6589,6592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6589,6592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'store' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":233,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":233,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8108,8111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8108,8111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8155,8158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8155,8158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseService, StoreOperations } from '@/core/services/base.service';\nimport { Tour } from '@/stores/types';\nimport { useTourStore } from '@/stores';\nimport { ValidationError } from '@/core/errors/app-errors';\n\ninterface TourFinancialSummary {\n  total_revenue: number;\n  total_cost: number;\n  profit: number;\n  profitMargin: number;\n}\n\nclass TourService extends BaseService<Tour> {\n  protected resourceName = 'tours';\n\n  protected getStore = (): StoreOperations<Tour> => {\n    const store = useTourStore.getState();\n    return {\n      getAll: () => store.items,\n      getById: (id: string) => store.items.find(t => t.id === id),\n      add: async (tour: Tour) => {\n        const result = await store.create(tour as any);\n        return result || tour;\n      },\n      update: async (id: string, data: Partial<Tour>) => {\n        await store.update(id, data);\n      },\n      delete: async (id: string) => {\n        await store.delete(id);\n      }\n    };\n  }\n\n  protected validate(data: Partial<Tour>): void {\n    super.validate(data);\n\n    if (data.name && data.name.trim().length < 2) {\n      throw new ValidationError('name', '旅遊團名稱至少需要 2 個字符');\n    }\n\n    if (data.max_participants && data.max_participants < 1) {\n      throw new ValidationError('max_participants', '最大參與人數必須大於 0');\n    }\n\n    if (data.price && data.price < 0) {\n      throw new ValidationError('price', '價格不能為負數');\n    }\n\n    // 移除過去日期驗證 - 允許建立歷史旅遊團資料\n    // if (data.departure_date) {\n    //   const depDate = new Date(data.departure_date);\n    //   const today = new Date();\n    //   today.setHours(0, 0, 0, 0);\n    //   if (depDate < today) {\n    //     throw new ValidationError('departure_date', '出發日期不能是過去的時間');\n    //   }\n    // }\n\n    if (data.return_date && data.departure_date) {\n      const depDate = new Date(data.departure_date);\n      const retDate = new Date(data.return_date);\n\n      if (retDate < depDate) {\n        throw new ValidationError('return_date', '返回日期不能早於出發日期');\n      }\n    }\n  }\n\n  // 檢查團號是否已存在\n  async isTourCodeExists(code: string): Promise<boolean> {\n    const allTours = await this.list();\n    return allTours.data.some(t => t.code === code);\n  }\n\n  /**\n   * 生成團號\n   * @param cityCode - 3碼城市代號 (如: TYO, BKK, OSA)\n   * @param date - 出發日期\n   * @param isSpecial - 是否為特殊團\n   * @returns 團號 (格式: TYO250101001 或 SPC250101001)\n   */\n  async generateTourCode(cityCode: string, date: Date, isSpecial: boolean = false): Promise<string> {\n    const year = date.getFullYear().toString().slice(-2);\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const dateStr = `${year}${month}${day}`;\n\n    // 獲取當日已有的團號來生成流水號\n    const allTours = await this.list();\n    const todayTours = allTours.data.filter(t =>\n      t.code && t.code.includes(dateStr)\n    );\n\n    // 找出最大的流水號並 +1，避免重複\n    let maxSequence = 0;\n    todayTours.forEach(tour => {\n      const match = tour.code.match(/(\\d{3})$/);\n      if (match) {\n        const seq = parseInt(match[1], 10);\n        if (seq > maxSequence) maxSequence = seq;\n      }\n    });\n\n    const sequence = (maxSequence + 1).toString().padStart(3, '0');\n    const code = isSpecial\n      ? `SPC${dateStr}${sequence}`\n      : `${cityCode.toUpperCase()}${dateStr}${sequence}`;\n\n    // 雙重檢查：確保生成的團號不存在\n    const exists = await this.isTourCodeExists(code);\n    if (exists) {\n      // 如果仍然重複，使用時間戳確保唯一性\n      const timestamp = Date.now().toString().slice(-3);\n      return isSpecial\n        ? `SPC${dateStr}${timestamp}`\n        : `${cityCode.toUpperCase()}${dateStr}${timestamp}`;\n    }\n\n    return code;\n  }\n\n  // 計算團體財務摘要\n  async calculateFinancialSummary(tour_id: string): Promise<TourFinancialSummary> {\n    try {\n      const tour = await this.getById(tour_id);\n      if (!tour) {\n        throw new Error('Tour not found');\n      }\n\n      // 這裡需要獲取相關訂單資料來計算\n      // 目前先使用模擬邏輯\n      const total_revenue = tour.price * ((tour as any).current_participants || 0);\n      const estimatedCost = total_revenue * 0.7; // 假設成本為收入的70%\n      const profit = total_revenue - estimatedCost;\n      const profitMargin = total_revenue > 0 ? (profit / total_revenue) * 100 : 0;\n\n      return {\n        total_revenue,\n        total_cost: estimatedCost,\n        profit,\n        profitMargin,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // 檢查團體是否可以取消\n  async canCancelTour(tour_id: string): Promise<{ canCancel: boolean; reason?: string }> {\n    try {\n      const tour = await this.getById(tour_id);\n      if (!tour) {\n        return { canCancel: false, reason: '找不到該旅遊團' };\n      }\n\n      // Tour 狀態檢查\n      if (tour.status === 'closed') {\n        return { canCancel: false, reason: '該旅遊團已經結案，無法取消' };\n      }\n\n      const departure_date = new Date(tour.departure_date);\n      const now = new Date();\n      const daysDiff = Math.ceil((departure_date.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n      if (daysDiff < 3) {\n        return { canCancel: false, reason: '出發前3天內無法取消' };\n      }\n\n      return { canCancel: true };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // 更新團體狀態\n  async updateTourStatus(tour_id: string, newStatus: Tour['status'], reason?: string): Promise<Tour> {\n    try {\n      const tour = await this.getById(tour_id);\n      if (!tour) {\n        throw new Error('Tour not found');\n      }\n\n      // 狀態轉換驗證（暫時註解，因為狀態值是中文）\n      // TODO: 實作中文狀態的轉換驗證邏輯\n\n      return await this.update(tour_id, {\n        status: newStatus,\n        // 可以在這裡記錄狀態變更的原因和時間\n        updated_at: this.now()\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * 取得或建立年度簽證專用團\n   * @param year - 年份 (如: 2025)\n   * @returns 簽證專用團\n   */\n  async getOrCreateVisaTour(year?: number): Promise<Tour> {\n    const targetYear = year || new Date().getFullYear();\n    const visaCode = `VISA${targetYear}001`;\n\n    // 🔧 直接查詢 Supabase（包含已刪除的資料）\n    try {\n      if (typeof window !== 'undefined') {\n        const { supabase } = await import('@/lib/supabase/client');\n        const { data, error } = await supabase\n          .from('tours')\n          .select('*')\n          .eq('code', visaCode)\n          .maybeSingle();\n\n        if (!error && data) {\n          // 如果找到已刪除的簽證團，復原它\n          if ((data as any)._deleted) {\n            console.log(`🔄 [Visa Tour] 找到已刪除的簽證團，正在復原...`);\n            const { data: updated, error: updateError } = await (supabase as any)\n              .from('tours')\n              .update({\n                _deleted: false,\n                _synced_at: null,\n                updated_at: this.now()\n              })\n              .eq('id', (data as any).id)\n              .select()\n              .single();\n\n            if (!updateError && updated) {\n              console.log(`✅ [Visa Tour] 簽證團已復原`);\n              // 重新載入 tours\n              const store = this.getStore();\n              const tourStore = useTourStore.getState();\n              await tourStore.fetchAll();\n              return updated as Tour;\n            }\n          } else {\n            // 找到且未被刪除，直接返回\n            console.log(`✅ [Visa Tour] 找到現有簽證團`);\n            return data as Tour;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(`⚠️ [Visa Tour] Supabase 查詢失敗，繼續建立新的:`, error);\n    }\n\n    // 檢查本地 Store 是否有（未刪除的）\n    const allTours = await this.list();\n    const existingVisaTour = allTours.data.find(t => t.code === visaCode);\n    if (existingVisaTour) {\n      return existingVisaTour;\n    }\n\n    // 不存在則建立新的簽證專用團\n    console.log(`📝 [Visa Tour] 建立新的簽證專用團...`);\n    const today = new Date();\n    const yearStart = new Date(targetYear, 0, 1);\n    const departureDate = today > yearStart ? today : yearStart;\n\n    const visaTour: Partial<Tour> = {\n      code: visaCode,\n      name: `${targetYear}年度簽證專用團`,\n      departure_date: departureDate.toISOString().split('T')[0],\n      return_date: `${targetYear}-12-31`,\n      status: 'special',\n      location: '簽證專用',\n      price: 0,\n      max_participants: 9999,\n      contract_status: 'pending',\n      total_revenue: 0,\n      total_cost: 0,\n      profit: 0,\n      created_at: this.now(),\n      updated_at: this.now()\n    } as any;\n\n    return await this.create(visaTour as any);\n  }\n\n  /**\n   * 取得所有非特殊團的旅遊團（用於行事曆顯示）\n   * @returns 一般旅遊團列表\n   */\n  async listRegularTours() {\n    const allTours = await this.list();\n    return {\n      ...allTours,\n      data: allTours.data.filter(tour => tour.status !== 'special')\n    };\n  }\n}\n\nexport const tourService = new TourService();","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/use-auto-create-tour-channels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/use-cleanup-orphan-channels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useCrudOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useCustomers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useDialog.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useEnterSubmit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useOrders.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OrderStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateOrderData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'order' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'order' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2194,2197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2194,2197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3128,3131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3128,3131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useOrders - 訂單業務邏輯 Hook\n */\n\nimport { useMemo } from 'react';\n\nimport { useOrderStore, useMemberStore } from '@/stores';\nimport { Order, Member, CreateOrderData, UpdateOrderData, OrderStatus, PaymentStatus } from '@/types';\n\nexport function useOrders() {\n  const orderStore = useOrderStore();\n  const memberStore = useMemberStore();\n\n  // ============================================\n  // 資料驗證\n  // ============================================\n\n  const validateOrderData = (data: Partial<Order>): void => {\n    if (data.total_amount !== undefined && data.total_amount < 0) {\n      throw new Error('總金額不能為負數');\n    }\n\n    if (data.member_count !== undefined && data.member_count < 1) {\n      throw new Error('人數必須大於 0');\n    }\n\n    if (data.paid_amount !== undefined && data.total_amount !== undefined) {\n      if (data.paid_amount > data.total_amount) {\n        throw new Error('已付金額不能大於總金額');\n      }\n    }\n  };\n\n  // ============================================\n  // 業務邏輯\n  // ============================================\n\n  const calculateRemainingAmount = (order: Order): number => {\n    return Math.max(0, order.total_amount - order.paid_amount);\n  };\n\n  const canEditOrder = (order: Order): boolean => {\n    // Order 介面沒有 status 欄位，預設都可以編輯\n    return true;\n  };\n\n  const canCancelOrder = (order: Order): boolean => {\n    // Order 介面沒有 status 欄位，預設都可以取消\n    return true;\n  };\n\n  const getPaymentProgress = (order: Order): number => {\n    if (order.total_amount === 0) return 0;\n    return Math.round((order.paid_amount / order.total_amount) * 100);\n  };\n\n  const updatePaymentStatus = (order: Order): '未收款' | '部分收款' | '已收款' => {\n    if (order.paid_amount === 0) return '未收款';\n    if (order.paid_amount < order.total_amount) return '部分收款';\n    if (order.paid_amount >= order.total_amount) return '已收款';\n    return '未收款';\n  };\n\n  // ============================================\n  // CRUD 操作\n  // ============================================\n\n  const createOrder = async (data: Omit<CreateOrderData, 'id'>): Promise<Order> => {\n    // CreateOrderData 使用 number_of_people，但 Order 使用 member_count\n    // CreateOrderData 有 status 和 is_active，但 Order 沒有\n    // 需要轉換欄位\n    const orderData: any = {\n      order_number: data.code || '',\n      code: data.code || '',\n      tour_id: data.tour_id,\n      tour_name: '', // 需要從 tour_id 查詢\n      contact_person: data.contact_person,\n      sales_person: '', // CreateOrderData 沒有這個欄位\n      assistant: '', // CreateOrderData 沒有這個欄位\n      member_count: data.number_of_people,\n      payment_status: data.payment_status || 'unpaid',\n      total_amount: data.total_amount,\n      paid_amount: data.paid_amount,\n      remaining_amount: data.total_amount - (data.paid_amount || 0),\n    };\n\n    return await orderStore.create(orderData);\n  };\n\n  const updateOrder = async (id: string, data: UpdateOrderData): Promise<Order> => {\n    const existing = await orderStore.fetchById(id);\n    if (!existing) throw new Error('訂單不存在');\n    if (!canEditOrder(existing)) throw new Error('此訂單無法編輯');\n\n    // UpdateOrderData 使用 number_of_people，但 Order 使用 member_count\n    // 需要轉換欄位\n    const updateData: any = {};\n\n    if (data.contact_person) updateData.contact_person = data.contact_person;\n    if (data.number_of_people) updateData.member_count = data.number_of_people;\n    if (data.total_amount !== undefined) updateData.total_amount = data.total_amount;\n    if (data.paid_amount !== undefined) updateData.paid_amount = data.paid_amount;\n\n    // 轉換 payment_status\n    if (data.payment_status) {\n      updateData.payment_status = data.payment_status || 'unpaid';\n    }\n\n    // 重新計算付款狀態\n    if (data.total_amount !== undefined || data.paid_amount !== undefined) {\n      const updated = { ...existing, ...updateData };\n      updateData.remaining_amount = calculateRemainingAmount(updated);\n      updateData.payment_status = updatePaymentStatus(updated);\n    }\n\n    return await orderStore.update(id, updateData);\n  };\n\n  const cancelOrder = async (id: string): Promise<Order> => {\n    const order = await orderStore.fetchById(id);\n    if (!order) throw new Error('訂單不存在');\n    if (!canCancelOrder(order)) throw new Error('此訂單無法取消');\n\n    // Order 介面沒有 status 欄位，無法設定為 cancelled\n    // 改為設定 payment_status 或其他欄位來表示取消\n    return await orderStore.update(id, {});\n  };\n\n  // ============================================\n  // 團員管理\n  // ============================================\n\n  const getOrderMembers = async (order_id: string): Promise<Member[]> => {\n    await memberStore.fetchAll();\n    return memberStore.findByField('order_id', order_id);\n  };\n\n  const addMember = async (orderData: Member): Promise<Member> => {\n    const member = await memberStore.create(orderData);\n\n    // 更新訂單人數\n    const order = await orderStore.fetchById(orderData.order_id);\n    if (order) {\n      const members = await getOrderMembers(orderData.order_id);\n      await orderStore.update(orderData.order_id, {\n        member_count: members.length,\n      });\n    }\n\n    return member;\n  };\n\n  // ============================================\n  // 查詢方法\n  // ============================================\n\n  const getPendingOrders = useMemo(() => {\n    // Order 介面沒有 status 和 is_active 欄位\n    return orderStore.items;\n  }, [orderStore.items]);\n\n  const getUnpaidOrders = useMemo(() => {\n    return orderStore.items.filter(o =>\n      o.payment_status === 'unpaid' || o.payment_status === 'partial'\n    );\n  }, [orderStore.items]);\n\n  const getOrdersByTour = (tour_id: string): Order[] => {\n    return orderStore.items.filter(o => o.tour_id === tour_id);\n  };\n\n  return {\n    orders: orderStore.items,\n    loading: orderStore.loading,\n    error: orderStore.error,\n\n    fetchAll: orderStore.fetchAll,\n    fetchById: orderStore.fetchById,\n    createOrder,\n    updateOrder,\n    deleteOrder: orderStore.delete,\n    cancelOrder,\n\n    canEditOrder,\n    canCancelOrder,\n    calculateRemainingAmount,\n    getPaymentProgress,\n\n    getOrderMembers,\n    addMember,\n\n    pendingOrders: getPendingOrders,\n    unpaidOrders: getUnpaidOrders,\n    getOrdersByTour,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/usePermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useStatusBadge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/hooks/useTours.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tour' is defined but never used. Allowed unused args must match /^_/u.","line":170,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'action' is defined but never used. Allowed unused args must match /^_/u.","line":188,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useTours - 旅遊團業務邏輯 Hook\n * 提供完整的 CRUD、驗證、業務邏輯\n */\n\nimport { useMemo } from 'react';\n\nimport { useTourStore } from '@/stores';\nimport { Tour, CreateTourData, UpdateTourData, TourStatus } from '@/types';\n\n/**\n * 旅遊團日期驗證錯誤\n */\nclass TourDateValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TourDateValidationError';\n  }\n}\n\n/**\n * 旅遊團權限錯誤\n */\nclass TourPermissionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TourPermissionError';\n  }\n}\n\n/**\n * useTours Hook\n */\nexport function useTours() {\n  const store = useTourStore();\n\n  // ============================================\n  // 資料驗證\n  // ============================================\n\n  /**\n   * 驗證旅遊團日期\n   */\n  const validateTourDates = (start_date: string, end_date: string): void => {\n    const start = new Date(start_date);\n    const end = new Date(end_date);\n    const now = new Date();\n\n    // 檢查日期格式\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      throw new TourDateValidationError('日期格式錯誤');\n    }\n\n    // 結束日期必須大於開始日期\n    if (end <= start) {\n      throw new TourDateValidationError('結束日期必須晚於開始日期');\n    }\n\n    // 開始日期不能是過去（草稿狀態除外）\n    if (start < now) {\n      console.warn('開始日期早於今天，請確認');\n    }\n\n    // 旅遊天數不能超過 365 天\n    const diffDays = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));\n    if (diffDays > 365) {\n      throw new TourDateValidationError('旅遊天數不能超過 365 天');\n    }\n  };\n\n  /**\n   * 驗證旅遊團資料\n   */\n  const validateTourData = (data: Partial<Tour>): void => {\n    // 檢查必填欄位\n    if (data.name && data.name.trim().length === 0) {\n      throw new Error('團名不能為空');\n    }\n\n    if (data.location && data.location.trim().length === 0) {\n      throw new Error('目的地不能為空');\n    }\n\n    // 檢查人數\n    if (data.max_participants !== undefined && data.max_participants < 1) {\n      throw new Error('最高人數必須大於 0');\n    }\n\n    // 檢查價格\n    if (data.price !== undefined && data.price < 0) {\n      throw new Error('價格不能為負數');\n    }\n\n    // 檢查日期\n    if (data.departure_date && data.return_date) {\n      validateTourDates(data.departure_date, data.return_date);\n    }\n  };\n\n  // ============================================\n  // 業務邏輯\n  // ============================================\n\n  /**\n   * 計算旅遊天數\n   */\n  const calculateDays = (start_date: string, end_date: string): number => {\n    const start = new Date(start_date);\n    const end = new Date(end_date);\n    return Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n  };\n\n  /**\n   * 計算夜數\n   */\n  const calculateNights = (days: number): number => {\n    return Math.max(0, days - 1);\n  };\n\n  /**\n   * 檢查是否可以編輯\n   */\n  const canEditTour = (tour: Tour): boolean => {\n    // 只有提案和進行中的團可以編輯\n    return tour.status === 'draft' || tour.status === 'active';\n  };\n\n  /**\n   * 檢查是否可以刪除\n   */\n  const canDeleteTour = (tour: Tour): boolean => {\n    // 只有提案狀態可以刪除\n    return tour.status === 'draft';\n  };\n\n  /**\n   * 檢查是否可以取消\n   */\n  const canCancelTour = (tour: Tour): boolean => {\n    // 提案和進行中的團可以取消\n    return tour.status === 'draft' || tour.status === 'active';\n  };\n\n  /**\n   * 取得下一個狀態\n   */\n  const getNextStatus = (currentStatus: TourStatus): TourStatus | null => {\n    const statusFlow: Record<TourStatus, TourStatus | null> = {\n      draft: 'active',\n      active: 'pending_close',\n      pending_close: 'closed',\n      closed: null,\n      cancelled: null,\n      special: null,\n    };\n    return statusFlow[currentStatus];\n  };\n\n  /**\n   * 檢查是否已滿團\n   */\n  const isFullyBooked = (tour: Tour): boolean => {\n    if (!tour.max_participants || !tour.current_participants) return false;\n    return tour.current_participants >= tour.max_participants;\n  };\n\n  /**\n   * 檢查是否成團（注意：Tour 類型沒有 min_people 欄位）\n   */\n  const hasMetMinimum = (tour: Tour): boolean => {\n    // TODO: 如果需要最低成團人數，請在 Tour 類型中添加 min_participants 欄位\n    return false;\n  };\n\n  /**\n   * 計算剩餘名額\n   */\n  const getRemainingSeats = (tour: Tour): number | null => {\n    if (!tour.max_participants) return null;\n    const current = tour.current_participants || 0;\n    return Math.max(0, tour.max_participants - current);\n  };\n\n  // ============================================\n  // 權限檢查（簡化版，實際應從 auth 取得）\n  // ============================================\n\n  const hasPermission = (action: 'create' | 'update' | 'delete'): boolean => {\n    // TODO: 從 auth store 取得實際權限\n    // 目前簡化為都允許\n    return true;\n  };\n\n  // ============================================\n  // 增強的 CRUD 操作\n  // ============================================\n\n  /**\n   * 建立旅遊團\n   */\n  const createTour = async (data: Omit<CreateTourData, 'id' | 'code'>): Promise<Tour> => {\n    // 1. 權限檢查\n    if (!hasPermission('create')) {\n      throw new TourPermissionError('沒有建立旅遊團的權限');\n    }\n\n    // 2. 資料驗證\n    validateTourData(data);\n\n    // 3. 計算天數和夜數（如果需要）\n    // const days = calculateDays(data.departure_date, data.return_date);\n    // const nights = calculateNights(days);\n\n    // 4. 組合完整資料\n    const tourData: Omit<CreateTourData, 'code'> = {\n      ...data,\n      status: data.status || 'draft',\n    };\n\n    // 5. 呼叫 Store\n    return await store.create(tourData as Tour);\n  };\n\n  /**\n   * 更新旅遊團\n   */\n  const updateTour = async (id: string, data: UpdateTourData): Promise<Tour> => {\n    // 1. 權限檢查\n    if (!hasPermission('update')) {\n      throw new TourPermissionError('沒有更新旅遊團的權限');\n    }\n\n    // 2. 檢查旅遊團是否存在\n    const existingTour = await store.fetchById(id);\n    if (!existingTour) {\n      throw new Error('旅遊團不存在');\n    }\n\n    // 3. 檢查是否可以編輯\n    if (!canEditTour(existingTour)) {\n      throw new Error(`${existingTour.status} 狀態的旅遊團無法編輯`);\n    }\n\n    // 4. 資料驗證\n    validateTourData(data);\n\n    // 5. 直接使用資料（不需要計算天數）\n    const updatedData = { ...data };\n\n    // 6. 呼叫 Store\n    return await store.update(id, updatedData);\n  };\n\n  /**\n   * 刪除旅遊團\n   */\n  const deleteTour = async (id: string): Promise<void> => {\n    // 1. 權限檢查\n    if (!hasPermission('delete')) {\n      throw new TourPermissionError('沒有刪除旅遊團的權限');\n    }\n\n    // 2. 檢查旅遊團是否存在\n    const tour = await store.fetchById(id);\n    if (!tour) {\n      throw new Error('旅遊團不存在');\n    }\n\n    // 3. 檢查是否可以刪除\n    if (!canDeleteTour(tour)) {\n      throw new Error(`${tour.status} 狀態的旅遊團無法刪除`);\n    }\n\n    // 4. 呼叫 Store\n    await store.delete(id);\n  };\n\n  /**\n   * 取消旅遊團\n   */\n  const cancelTour = async (id: string): Promise<Tour> => {\n    const tour = await store.fetchById(id);\n    if (!tour) {\n      throw new Error('旅遊團不存在');\n    }\n\n    if (!canCancelTour(tour)) {\n      throw new Error(`${tour.status} 狀態的旅遊團無法取消`);\n    }\n\n    return await store.update(id, { status: 'cancelled' });\n  };\n\n  /**\n   * 完成旅遊團\n   */\n  const completeTour = async (id: string): Promise<Tour> => {\n    const tour = await store.fetchById(id);\n    if (!tour) {\n      throw new Error('旅遊團不存在');\n    }\n\n    if (tour.status !== 'active') {\n      throw new Error('只有進行中的旅遊團可以完成');\n    }\n\n    return await store.update(id, { status: 'pending_close' });\n  };\n\n  // ============================================\n  // 查詢方法\n  // ============================================\n\n  /**\n   * 取得進行中的旅遊團\n   */\n  const getActiveTours = useMemo(() => {\n    return store.items.filter((tour) => tour.status === 'active');\n  }, [store.items]);\n\n  /**\n   * 取得草稿旅遊團\n   */\n  const getDraftTours = useMemo(() => {\n    return store.items.filter((tour) => tour.status === 'draft');\n  }, [store.items]);\n\n  /**\n   * 根據日期範圍查詢\n   */\n  const getToursByDateRange = (start_date: string, end_date: string): Tour[] => {\n    const start = new Date(start_date);\n    const end = new Date(end_date);\n\n    return store.items.filter((tour) => {\n      const tourStart = new Date(tour.departure_date);\n      const tourEnd = new Date(tour.return_date);\n      return tourStart <= end && tourEnd >= start;\n    });\n  };\n\n  /**\n   * 搜尋旅遊團\n   */\n  const searchTours = (keyword: string): Tour[] => {\n    const lowerKeyword = keyword.toLowerCase();\n    return store.items.filter(\n      (tour) =>\n        tour.code.toLowerCase().includes(lowerKeyword) ||\n        tour.name.toLowerCase().includes(lowerKeyword) ||\n        tour.location.toLowerCase().includes(lowerKeyword)\n    );\n  };\n\n  // ============================================\n  // 返回值\n  // ============================================\n\n  return {\n    // 資料\n    tours: store.items,\n    loading: store.loading,\n    error: store.error,\n\n    // CRUD 操作\n    fetchAll: store.fetchAll,\n    fetchById: store.fetchById,\n    createTour,\n    updateTour,\n    deleteTour,\n    cancelTour,\n    completeTour,\n\n    // 業務邏輯\n    canEditTour,\n    canDeleteTour,\n    canCancelTour,\n    getNextStatus,\n    isFullyBooked,\n    hasMetMinimum,\n    getRemainingSeats,\n    calculateDays,\n    calculateNights,\n\n    // 查詢方法\n    activeTours: getActiveTours,\n    draftTours: getDraftTours,\n    getToursByDateRange,\n    searchTours,\n\n    // 驗證方法\n    validateTourData,\n    validateTourDates,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/auth-guard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3157,3160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3157,3160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useLocalAuthStore } from '@/lib/auth/local-auth-manager';\nimport { useAuthStore } from '@/stores/auth-store';\n// ⚠️ Supabase 已停用 - 純本地模式\n// import { supabase } from '@/lib/supabase/client';\nimport { hasPermissionForRoute } from '@/lib/permissions';\nimport { logger } from '@/lib/utils/logger';\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n  requiredPermission?: string;\n}\n\nexport function AuthGuard({ children, requiredPermission }: AuthGuardProps) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const { currentProfile, setCurrentProfile, profiles } = useLocalAuthStore();\n  const { user } = useAuthStore();\n  const [isOnline, setIsOnline] = useState(typeof navigator !== 'undefined' ? navigator.onLine : true);\n\n  // 監聽網路狀態變化\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      // 如果在登入頁面，跳過檢查\n      if (pathname === '/login') {\n        return;\n      }\n\n      logger.debug('AuthGuard 檢查', {\n        hasCurrentProfile: !!currentProfile,\n        hasUser: !!user,\n        pathname\n      });\n\n      // 1. 優先檢查 auth-store 的 user（持久化的）\n      if (user && user.id) {\n        logger.info(`從 auth-store 找到用戶: ${user.display_name}`);\n        // 如果 currentProfile 沒有，同步一下\n        if (!currentProfile) {\n          const profile = profiles.find(p => p.id === user.id);\n          if (profile) {\n            setCurrentProfile(profile);\n          }\n        }\n        return;\n      }\n\n      // 2. 檢查本地是否有登入的角色\n      if (!currentProfile) {\n        // 📦 純本地模式 - 沒有登入就導向登入頁\n        logger.warn('沒有 currentProfile，應該跳轉登入');\n        // 暫時停用自動跳轉，避免無限循環\n        // router.push('/login');\n        return;\n      }\n\n      // 2. 檢查權限\n      if (requiredPermission) {\n        const hasPermission = currentProfile.permissions.includes(requiredPermission);\n\n        if (!hasPermission) {\n          logger.warn(`用戶 ${currentProfile.display_name} 無權限訪問 ${pathname}`);\n          router.push('/unauthorized');\n          return;\n        }\n      }\n\n      // 2.1 檢查路由權限\n      const hasRoutePermission = hasPermissionForRoute(currentProfile.permissions, pathname);\n      if (!hasRoutePermission && pathname !== '/') {\n        logger.warn(`用戶 ${currentProfile.display_name} 無權限訪問路由 ${pathname}`);\n        // 暫時停用路由權限檢查\n        // router.push('/');\n        return;\n      }\n\n      // 3. 如果在線，嘗試刷新 Supabase session（背景執行）\n      if (isOnline && currentProfile.cachedPassword) {\n        refreshSupabaseSession(currentProfile);\n      }\n    };\n\n    checkAuth();\n  }, [currentProfile, user, isOnline, requiredPermission, pathname, router, setCurrentProfile, profiles]);\n\n  // 📦 純本地模式 - 無需刷新 session\n  const refreshSupabaseSession = async (profile: any) => {\n    logger.debug('本地模式：無需刷新 session');\n  };\n\n  // 登入頁面不顯示載入畫面，直接渲染\n  if (pathname === '/login') {\n    return <>{children}</>;\n  }\n\n  // 如果有 user（持久化的狀態），直接渲染\n  if (user && user.id) {\n    return <>{children}</>;\n  }\n\n  // 如果有 currentProfile，直接渲染\n  if (currentProfile) {\n    return <>{children}</>;\n  }\n\n  // 如果都沒有，顯示載入畫面（很快就會跳轉到登入頁）\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-morandi-gold mx-auto mb-4\"></div>\n        <p className=\"text-morandi-secondary\">載入中...</p>\n      </div>\n    </div>\n  );\n}\n\n/**\n * 權限檢查 Hook\n */\nexport function usePermissionCheck(requiredRoute?: string) {\n  const pathname = usePathname();\n  const { currentProfile } = useLocalAuthStore();\n\n  const checkRoute = requiredRoute || pathname;\n  const hasPermission = currentProfile ? hasPermissionForRoute(currentProfile.permissions, checkRoute) : false;\n\n  return {\n    hasPermission,\n    userPermissions: currentProfile?.permissions || [],\n    isAdmin: currentProfile?.permissions.includes('admin') || currentProfile?.permissions.includes('super_admin'),\n    isSuperAdmin: currentProfile?.permissions.includes('super_admin'),\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jwtError' is defined but never used.","line":37,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'venturo_app_jwt_secret_key_change_in_production_2024';\n\nexport interface AuthPayload {\n  id: string;\n  employee_number: string;\n  permissions: string[];\n  role: string;\n}\n\n// 生成 JWT token\nexport function generateToken(payload: AuthPayload): string {\n  try {\n    return jwt.sign(payload, JWT_SECRET, {\n      expiresIn: '8h',\n      issuer: 'venturo-app'\n    });\n  } catch (error) {\n    console.warn('JWT generation failed, using simple token', error);\n    // 如果 JWT 失敗，使用簡單的編碼方案\n    return btoa(JSON.stringify({\n      ...payload,\n      exp: Date.now() + 8 * 60 * 60 * 1000, // 8小時\n      iss: 'venturo-app'\n    }));\n  }\n}\n\n// 驗證 JWT token\nexport function verifyToken(token: string): AuthPayload | null {\n  try {\n    // 嘗試 JWT 驗證\n    const decoded = jwt.verify(token, JWT_SECRET) as AuthPayload;\n    return decoded;\n  } catch (jwtError) {\n    try {\n      // 如果 JWT 失敗，嘗試簡單解碼\n      const decoded = JSON.parse(atob(token));\n\n      // 檢查是否過期\n      if (decoded.exp && Date.now() > decoded.exp) {\n        console.log('Token expired');\n        return null;\n      }\n\n      return decoded as AuthPayload;\n    } catch (fallbackError) {\n      console.error('Token verification failed:', fallbackError);\n      return null;\n    }\n  }\n}\n\n// 加密密碼\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// 驗證密碼\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// 從 token 取得用戶資訊\nexport function getUserFromToken(token: string): AuthPayload | null {\n  return verifyToken(token);\n}\n\n// 檢查權限\nexport function hasPermission(userPermissions: string[], requiredPermission: string): boolean {\n  return userPermissions.includes(requiredPermission) ||\n         userPermissions.includes('admin'); // 移除 super_admin，統一使用 admin\n}\n\n// 檢查角色\nexport function hasRole(userPermissions: string[], requiredRoles: string[]): boolean {\n  return requiredRoles.some(role => userPermissions.includes(role));\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/auth/auth-provider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'token' is defined but never used. Allowed unused args must match /^_/u.","line":72,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { logger } from '@/lib/utils/logger';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  permissions: string[];\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isLoading: true,\n  login: async () => {},\n  logout: () => {},\n});\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n  \n  useEffect(() => {\n    // 檢查是否有已登入的 session\n    const savedAuth = localStorage.getItem('auth-token');\n    if (savedAuth) {\n      // 驗證 token\n      validateToken(savedAuth);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n  \n  const login = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        localStorage.setItem('auth-token', data.token);\n      } else {\n        throw new Error('登入失敗');\n      }\n    } catch (error) {\n      logger.error('Login error', error);\n      throw error;\n    }\n  };\n  \n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('auth-token');\n    router.push('/login');\n  };\n  \n  const validateToken = async (token: string) => {\n    // 驗證 token 的邏輯\n    try {\n      // 這裡可以加入 JWT 驗證或 API 呼叫\n      // 暫時簡單處理\n      setIsLoading(false);\n    } catch (error) {\n      logger.error('Token validation error', error);\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\n// 保護路由的 HOC\nexport function withAuth<P extends object>(\n  Component: React.ComponentType<P>,\n  requiredRole?: string\n) {\n  return function AuthenticatedComponent(props: P) {\n    const { user, isLoading } = useAuth();\n    const router = useRouter();\n    \n    useEffect(() => {\n      // 真實驗證 - 沒有登入就導向登入頁\n      if (!isLoading && !user) {\n        router.push('/login');\n      }\n      \n      if (user && requiredRole && user.role !== requiredRole) {\n        router.push('/unauthorized');\n      }\n    }, [user, isLoading, router]);\n    \n    if (isLoading) {\n      return (\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        </div>\n      );\n    }\n    \n    // 只有已登入才顯示組件\n    if (user) {\n      return <Component {...props} />;\n    }\n    \n    return null;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/auth/local-auth-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[613,616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[613,616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[631,634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[631,634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[652,655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[652,655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[671,674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[671,674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[693,696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[693,696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { logger } from '@/lib/utils/logger';\n\n// ============= 1. 類型定義 =============\nexport interface LocalProfile {\n  id: string;\n  email: string;\n  employee_number: string;\n  display_name: string;\n  english_name: string;\n  role: 'SUPER_ADMIN' | 'ADMIN' | 'EMPLOYEE';\n  permissions: string[];\n  roles?: ('admin' | 'employee' | 'user' | 'tour_leader' | 'sales' | 'accountant' | 'assistant')[]; // 附加身份標籤（支援多重角色）\n\n  // 離線認證相關\n  cachedPassword?: string; // 加密的密碼快取（用於背景同步）\n  pinHash?: string; // PIN 碼的雜湊值\n\n  // 個人資訊\n  personal_info?: any;\n  job_info?: any;\n  salary_info?: any;\n  contracts?: any[];\n  attendance?: any;\n\n  // 元資料\n  lastLoginAt: string;\n  lastSyncAt?: string;\n  created_at: string;\n  status: 'active' | 'inactive' | 'suspended';\n}\n\nexport interface ProfileCard {\n  id: string;\n  display_name: string;\n  english_name: string;\n  role: string;\n  avatarUrl?: string;\n  lastLoginAt: string;\n}\n\n// ============= 2. 本地認證狀態管理 =============\ninterface LocalAuthState {\n  profiles: LocalProfile[];\n  currentProfile: LocalProfile | null;\n  lastSelectedProfileId: string | null;\n\n  // Profile 管理\n  addProfile: (profile: LocalProfile) => void;\n  removeProfile: (profileId: string) => void;\n  updateProfile: (profileId: string, updates: Partial<LocalProfile>) => void;\n  getProfileById: (profileId: string) => LocalProfile | null;\n  getProfileCards: () => ProfileCard[];\n\n  // 當前登入\n  setCurrentProfile: (profile: LocalProfile | null) => void;\n  getCurrentProfile: () => LocalProfile | null;\n\n  // PIN 碼管理\n  setPinForProfile: (profileId: string, pinHash: string) => void;\n  verifyPin: (profileId: string, pin: string) => Promise<boolean>;\n\n  // 清理\n  clearAll: () => void;\n}\n\nexport const useLocalAuthStore = create<LocalAuthState>()(\n  persist(\n    (set, get) => ({\n      profiles: [],\n      currentProfile: null,\n      lastSelectedProfileId: null,\n\n      addProfile: (profile) => {\n        set((state) => {\n          // 檢查是否已存在\n          const exists = state.profiles.some(p => p.id === profile.id);\n          if (exists) {\n            // 更新現有的\n            return {\n              profiles: state.profiles.map(p =>\n                p.id === profile.id\n                  ? { ...p, ...profile, lastLoginAt: new Date().toISOString() }\n                  : p\n              )\n            };\n          }\n          // 添加新的\n          return {\n            profiles: [...state.profiles, { ...profile, lastLoginAt: new Date().toISOString() }]\n          };\n        });\n      },\n\n      removeProfile: (profileId) => {\n        set((state) => ({\n          profiles: state.profiles.filter(p => p.id !== profileId),\n          currentProfile: state.currentProfile?.id === profileId ? null : state.currentProfile\n        }));\n      },\n\n      updateProfile: (profileId, updates) => {\n        set((state) => ({\n          profiles: state.profiles.map(p =>\n            p.id === profileId ? { ...p, ...updates } : p\n          ),\n          currentProfile: state.currentProfile?.id === profileId\n            ? { ...state.currentProfile, ...updates }\n            : state.currentProfile\n        }));\n      },\n\n      getProfileById: (profileId) => {\n        return get().profiles.find(p => p.id === profileId) || null;\n      },\n\n      getProfileCards: () => {\n        return get().profiles.map(profile => ({\n          id: profile.id,\n          display_name: profile.display_name,\n          english_name: profile.english_name,\n          role: profile.role,\n          lastLoginAt: profile.lastLoginAt\n        }));\n      },\n\n      setCurrentProfile: (profile) => {\n        // 同時儲存到 localStorage\n        if (profile) {\n          localStorage.setItem('current-profile-id', profile.id);\n        } else {\n          localStorage.removeItem('current-profile-id');\n        }\n\n        set({\n          currentProfile: profile,\n          lastSelectedProfileId: profile?.id || null\n        });\n\n        // 更新最後登入時間\n        if (profile) {\n          get().updateProfile(profile.id, {\n            lastLoginAt: new Date().toISOString()\n          });\n        }\n      },\n\n      getCurrentProfile: () => get().currentProfile,\n\n      setPinForProfile: (profileId, pinHash) => {\n        get().updateProfile(profileId, { pinHash });\n      },\n\n      verifyPin: async (profileId, pin) => {\n        const profile = get().getProfileById(profileId);\n        if (!profile || !profile.pinHash) {\n          return false;\n        }\n\n        // 使用 bcrypt 驗證 PIN\n        try {\n          const bcrypt = (await import('bcryptjs')).default;\n          return await bcrypt.compare(pin, profile.pinHash);\n        } catch (error) {\n          logger.error('PIN 驗證失敗', error);\n          return false;\n        }\n      },\n\n      clearAll: () => {\n        localStorage.removeItem('current-profile-id');\n        set({ profiles: [], currentProfile: null, lastSelectedProfileId: null });\n      }\n    }),\n    {\n      name: 'local-auth-storage',\n      version: 1,\n      partialize: (state) => ({\n        profiles: state.profiles,\n        currentProfile: state.currentProfile,  // 重要！確保持久化\n        lastSelectedProfileId: state.lastSelectedProfileId\n      })\n    }\n  )\n);\n\n// ============= 3. 密碼加密工具 =============\nexport class PasswordEncryption {\n  private static readonly ENCRYPTION_KEY = 'venturo-offline-auth-2024';\n\n  /**\n   * 簡單的密碼加密（用於本地快取）\n   * 注意：這不是高強度加密，僅用於防止明文儲存\n   */\n  static async encrypt(password: string): Promise<string> {\n    try {\n      // 使用 Web Crypto API\n      const encoder = new TextEncoder();\n      const data = encoder.encode(password);\n      const key = encoder.encode(this.ENCRYPTION_KEY);\n\n      // 簡單的 XOR 加密\n      const encrypted = new Uint8Array(data.length);\n      for (let i = 0; i < data.length; i++) {\n        encrypted[i] = data[i] ^ key[i % key.length];\n      }\n\n      return btoa(String.fromCharCode(...encrypted));\n    } catch (error) {\n      logger.error('加密失敗', error);\n      return btoa(password); // 降級方案\n    }\n  }\n\n  /**\n   * 解密密碼\n   */\n  static async decrypt(encryptedPassword: string): Promise<string> {\n    try {\n      const encoder = new TextEncoder();\n      const key = encoder.encode(this.ENCRYPTION_KEY);\n      const encrypted = Uint8Array.from(atob(encryptedPassword), c => c.charCodeAt(0));\n\n      // XOR 解密\n      const decrypted = new Uint8Array(encrypted.length);\n      for (let i = 0; i < encrypted.length; i++) {\n        decrypted[i] = encrypted[i] ^ key[i % key.length];\n      }\n\n      const decoder = new TextDecoder();\n      return decoder.decode(decrypted);\n    } catch (error) {\n      logger.error('解密失敗', error);\n      return atob(encryptedPassword); // 降級方案\n    }\n  }\n\n  /**\n   * 生成 PIN 碼雜湊\n   */\n  static async hashPin(pin: string): Promise<string> {\n    const bcrypt = (await import('bcryptjs')).default;\n    return bcrypt.hash(pin, 10);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/cache/cache-strategy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[285,288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[285,288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'compress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":88,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5563,5566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5563,5566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5824,5827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5824,5827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6097,6100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6097,6100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VENTURO 5.0 - 統一快取策略\n *\n * 三層快取架構：\n * - L1 (熱快取): Memory - 當前頁面正在使用的資料\n * - L2 (溫快取): SessionStorage - 跨頁面可能使用的資料\n * - L3 (冷快取): IndexedDB - 持久化備份資料\n */\n\nimport { localDB } from '@/lib/db';\nimport { logger } from '@/lib/utils/logger';\n\ntype CacheKey = string;\ntype CacheValue = any;\n\ninterface CacheOptions {\n  /** 快取層級 */\n  level?: 'hot' | 'warm' | 'cold';\n  /** 過期時間（毫秒），0 表示永不過期 */\n  ttl?: number;\n  /** 是否壓縮儲存（針對大型資料） */\n  compress?: boolean;\n}\n\ninterface CacheEntry {\n  value: CacheValue;\n  timestamp: number;\n  ttl: number;\n}\n\nclass CacheStrategy {\n  // L1: 熱快取 - 記憶體（不過期，頁面關閉即清除）\n  private hotCache = new Map<CacheKey, CacheEntry>();\n\n  // L2: 溫快取 - SessionStorage（瀏覽器關閉才清除）\n  private warmCacheKey = 'venturo-warm-cache';\n\n  // L3: 冷快取使用 IndexedDB（已在 localDB 中實作）\n\n  /**\n   * 獲取快取資料\n   * 自動依序查找：熱 → 溫 → 冷\n   */\n  async get<T = CacheValue>(key: CacheKey): Promise<T | null> {\n    // 1. 查找熱快取\n    const hotEntry = this.hotCache.get(key);\n    if (hotEntry && !this.isExpired(hotEntry)) {\n      return hotEntry.value as T;\n    }\n\n    // 2. 查找溫快取\n    const warmEntry = this.getFromSessionStorage(key);\n    if (warmEntry && !this.isExpired(warmEntry)) {\n      // 提升到熱快取\n      this.hotCache.set(key, warmEntry);\n      return warmEntry.value as T;\n    }\n\n    // 3. 查找冷快取（IndexedDB）\n    try {\n      const coldValue = await this.getFromIndexedDB(key);\n      if (coldValue !== null) {\n        // 提升到熱快取和溫快取\n        const entry: CacheEntry = {\n          value: coldValue,\n          timestamp: Date.now(),\n          ttl: 0 // IndexedDB 的資料不設過期\n        };\n        this.hotCache.set(key, entry);\n        this.setToSessionStorage(key, entry);\n        return coldValue as T;\n      }\n    } catch (error) {\n      logger.warn(`從 IndexedDB 讀取快取失敗: ${key}`, error);\n    }\n\n    return null;\n  }\n\n  /**\n   * 設定快取資料\n   */\n  async set(\n    key: CacheKey,\n    value: CacheValue,\n    options: CacheOptions = {}\n  ): Promise<void> {\n    const { level = 'hot', ttl = 0, compress = false } = options;\n\n    const entry: CacheEntry = {\n      value,\n      timestamp: Date.now(),\n      ttl\n    };\n\n    // 根據層級儲存\n    switch (level) {\n      case 'hot':\n        // 只存記憶體\n        this.hotCache.set(key, entry);\n        break;\n\n      case 'warm':\n        // 存記憶體 + SessionStorage\n        this.hotCache.set(key, entry);\n        this.setToSessionStorage(key, entry);\n        break;\n\n      case 'cold':\n        // 存所有三層\n        this.hotCache.set(key, entry);\n        this.setToSessionStorage(key, entry);\n        await this.setToIndexedDB(key, value);\n        break;\n    }\n  }\n\n  /**\n   * 刪除快取\n   */\n  async delete(key: CacheKey): Promise<void> {\n    // 從所有層級刪除\n    this.hotCache.delete(key);\n    this.deleteFromSessionStorage(key);\n    await this.deleteFromIndexedDB(key);\n  }\n\n  /**\n   * 清除特定層級的所有快取\n   */\n  async clear(level?: 'hot' | 'warm' | 'cold'): Promise<void> {\n    if (!level || level === 'hot') {\n      this.hotCache.clear();\n    }\n\n    if (!level || level === 'warm') {\n      this.clearSessionStorage();\n    }\n\n    if (!level || level === 'cold') {\n      // IndexedDB 的清除由 localDB 管理\n      // 這裡不主動清除，因為那是持久化資料\n    }\n  }\n\n  /**\n   * 獲取快取統計資訊\n   */\n  getStats() {\n    const warmCache = this.getAllFromSessionStorage();\n\n    return {\n      hot: {\n        size: this.hotCache.size,\n        keys: Array.from(this.hotCache.keys())\n      },\n      warm: {\n        size: Object.keys(warmCache).length,\n        keys: Object.keys(warmCache)\n      }\n    };\n  }\n\n  // ==================== 私有方法 ====================\n\n  /**\n   * 檢查快取是否過期\n   */\n  private isExpired(entry: CacheEntry): boolean {\n    if (entry.ttl === 0) return false;\n    return Date.now() - entry.timestamp > entry.ttl;\n  }\n\n  /**\n   * SessionStorage 操作\n   */\n  private getFromSessionStorage(key: CacheKey): CacheEntry | null {\n    if (typeof window === 'undefined') return null;\n\n    try {\n      const warmCache = sessionStorage.getItem(this.warmCacheKey);\n      if (!warmCache) return null;\n\n      const cache = JSON.parse(warmCache);\n      return cache[key] || null;\n    } catch {\n      return null;\n    }\n  }\n\n  private setToSessionStorage(key: CacheKey, entry: CacheEntry): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      const warmCache = sessionStorage.getItem(this.warmCacheKey);\n      const cache = warmCache ? JSON.parse(warmCache) : {};\n      cache[key] = entry;\n      sessionStorage.setItem(this.warmCacheKey, JSON.stringify(cache));\n    } catch (error) {\n      logger.warn('SessionStorage 寫入失敗，可能空間不足', error);\n    }\n  }\n\n  private deleteFromSessionStorage(key: CacheKey): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      const warmCache = sessionStorage.getItem(this.warmCacheKey);\n      if (!warmCache) return;\n\n      const cache = JSON.parse(warmCache);\n      delete cache[key];\n      sessionStorage.setItem(this.warmCacheKey, JSON.stringify(cache));\n    } catch {\n      // 忽略錯誤\n    }\n  }\n\n  private clearSessionStorage(): void {\n    if (typeof window === 'undefined') return;\n    sessionStorage.removeItem(this.warmCacheKey);\n  }\n\n  private getAllFromSessionStorage(): Record<string, CacheEntry> {\n    if (typeof window === 'undefined') return {};\n\n    try {\n      const warmCache = sessionStorage.getItem(this.warmCacheKey);\n      return warmCache ? JSON.parse(warmCache) : {};\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * IndexedDB 操作\n   */\n  private async getFromIndexedDB(key: CacheKey): Promise<CacheValue | null> {\n    if (typeof window === 'undefined') return null;\n\n    try {\n      // 使用特殊的 cache 表\n      const value = await localDB.read('cache' as any, key);\n      return value || null;\n    } catch {\n      return null;\n    }\n  }\n\n  private async setToIndexedDB(key: CacheKey, value: CacheValue): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    try {\n      await localDB.create('cache' as any, { id: key, data: value });\n    } catch (error) {\n      logger.warn('IndexedDB 寫入失敗', error);\n    }\n  }\n\n  private async deleteFromIndexedDB(key: CacheKey): Promise<void> {\n    if (typeof window === 'undefined') return;\n\n    try {\n      await localDB.delete('cache' as any, key);\n    } catch {\n      // 忽略錯誤\n    }\n  }\n}\n\n// 匯出單例\nexport const cacheStrategy = new CacheStrategy();\n\n// 匯出類型\nexport type { CacheKey, CacheValue, CacheOptions };\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/cache/memory-cache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[172,175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[172,175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * L1 Memory Cache - LRU 快取實作\n * 根據 VENTURO 5.2.0 手冊的三層快取策略\n */\n\ninterface CacheItem<T> {\n  value: T;\n  timestamp: number;\n  hits: number;\n}\n\nexport class LRUCache<T = any> {\n  private cache: Map<string, CacheItem<T>> = new Map();\n  private maxSize: number;\n  private ttl: number;\n\n  constructor(\n    maxSize: number = 100, // 最多 100 個項目\n    ttl: number = 10000 // 10 秒 TTL\n  ) {\n    this.maxSize = maxSize;\n    this.ttl = ttl;\n  }\n\n  /**\n   * 取得快取資料\n   */\n  get(key: string): T | null {\n    const item = this.cache.get(key);\n\n    if (!item) {\n      return null;\n    }\n\n    // 檢查是否過期\n    const now = Date.now();\n    if (now - item.timestamp > this.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    // LRU: 更新位置（移到最後 = 最近使用）\n    item.hits++;\n    this.cache.delete(key);\n    this.cache.set(key, item);\n\n    return item.value;\n  }\n\n  /**\n   * 設定快取資料\n   */\n  set(key: string, value: T): void {\n    // 如果已達上限，刪除最久未使用的項目（第一個）\n    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {\n      const firstKey = this.cache.keys().next().value as string;\n      this.cache.delete(firstKey);\n    }\n\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now(),\n      hits: 0,\n    });\n  }\n\n  /**\n   * 刪除特定快取\n   */\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  /**\n   * 清空所有快取\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * 取得快取統計\n   */\n  getStats() {\n    const items = Array.from(this.cache.values());\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      ttl: this.ttl,\n      totalHits: items.reduce((sum, item) => sum + item.hits, 0),\n      avgHits: items.length > 0\n        ? items.reduce((sum, item) => sum + item.hits, 0) / items.length\n        : 0,\n    };\n  }\n\n  /**\n   * 批次刪除（根據 pattern）\n   */\n  invalidatePattern(pattern: string): number {\n    let count = 0;\n    for (const key of this.cache.keys()) {\n      if (key.startsWith(pattern)) {\n        this.cache.delete(key);\n        count++;\n      }\n    }\n    return count;\n  }\n}\n\n// 全域 Memory Cache 實例\nexport const memoryCache = new LRUCache();\n\n// 快取 key 產生器\nexport const cacheKeys = {\n  tour: (id: string) => `tour:${id}`,\n  tourList: (filter?: string) => `tours:list:${filter || 'all'}`,\n  order: (id: string) => `order:${id}`,\n  orderList: (tour_id?: string) => `orders:list:${tour_id || 'all'}`,\n  customer: (id: string) => `customer:${id}`,\n  customerList: () => `customers:list`,\n  payment: (id: string) => `payment:${id}`,\n  paymentList: (order_id?: string) => `payments:list:${order_id || 'all'}`,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/data/create-data-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/database-initializer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5799,5802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5799,5802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 資料庫初始化系統\n *\n * 確保 IndexedDB 在應用啟動時有必要的資料\n * 處理從舊版 LocalProfile 遷移到新版 IndexedDB\n */\n\nimport { localDB } from '@/lib/db';\nimport { Employee as User } from '@/stores/types';\n\nexport class DatabaseInitializer {\n  /**\n   * 主入口：確保資料庫已初始化\n   */\n  static async ensureInitialized(): Promise<void> {\n    try {\n      console.log('🔍 檢查資料庫初始化狀態...');\n\n      // 1. 檢查 users 表\n      const userCount = await this.checkUsersTable();\n\n      if (userCount === 0) {\n        console.log('📦 資料庫為空，開始初始化...');\n        await this.initializeDatabase();\n      } else {\n        console.log(`✅ 資料庫已有 ${userCount} 位使用者，無需初始化`);\n      }\n\n    } catch (error) {\n      console.error('❌ 資料庫初始化失敗:', error);\n      // 不拋出錯誤，讓應用繼續運行\n    }\n  }\n\n  /**\n   * 檢查 employees 表狀態\n   */\n  private static async checkUsersTable(): Promise<number> {\n    try {\n      const users = await localDB.getAll<User>('employees');\n      return Array.isArray(users) ? users.length : 0;\n    } catch (error) {\n      console.warn('⚠️ 無法檢查 employees 表:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 初始化資料庫\n   *\n   * 優先順序：\n   * 1. 嘗試從 LocalProfile 遷移\n   * 2. 如果沒有 LocalProfile，建立預設管理員\n   */\n  private static async initializeDatabase(): Promise<void> {\n    // Step 1: 嘗試從 LocalProfile 遷移\n    const migratedCount = await this.migrateFromLocalProfile();\n\n    if (migratedCount > 0) {\n      console.log(`✅ 從 LocalProfile 遷移了 ${migratedCount} 位使用者`);\n      return;\n    }\n\n    // Step 2: 沒有 LocalProfile，建立預設管理員\n    console.log('➕ 建立預設管理員帳號...');\n    await this.createDefaultAdmin();\n  }\n\n  /**\n   * 從 LocalProfile (localStorage) 遷移到 IndexedDB\n   */\n  private static async migrateFromLocalProfile(): Promise<number> {\n    try {\n      // 讀取 localStorage 中的 LocalProfile\n      const authStoreRaw = localStorage.getItem('venturo-local-auth-store');\n      if (!authStoreRaw) {\n        console.log('📝 沒有找到 LocalProfile 資料');\n        return 0;\n      }\n\n      const authStore = JSON.parse(authStoreRaw);\n      const profiles = authStore?.state?.profiles || [];\n\n      if (profiles.length === 0) {\n        console.log('📝 LocalProfile 為空');\n        return 0;\n      }\n\n      console.log(`🔄 發現 ${profiles.length} 個 LocalProfile，開始遷移...`);\n\n      let migratedCount = 0;\n\n      for (const profile of profiles) {\n        try {\n          // 將 LocalProfile 轉換為完整 User\n          const user: User = {\n            id: profile.id || crypto.randomUUID(),\n            employee_number: profile.employee_number,\n            display_name: profile.display_name || '',\n            english_name: profile.english_name || '',\n            chinese_name: profile.display_name || '',\n            permissions: profile.permissions || [],\n            personal_info: {\n              national_id: '',\n              birthday: '',\n              phone: '',\n              email: profile.email || '',\n              address: '',\n              emergency_contact: { name: '', relationship: '', phone: '' }\n            },\n            job_info: {\n              hire_date: new Date().toISOString()\n            },\n            salary_info: {\n              base_salary: 0,\n              allowances: [],\n              salary_history: []\n            },\n            attendance: {\n              leave_records: [],\n              overtime_records: []\n            },\n            contracts: [],\n            status: 'active',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          };\n\n          await localDB.create<User>('employees', user);\n          migratedCount++;\n          console.log(`  ✅ 遷移: ${user.employee_number} - ${user.display_name}`);\n\n        } catch (error) {\n          console.warn(`  ⚠️ 遷移失敗: ${profile.employee_number}`, error);\n        }\n      }\n\n      return migratedCount;\n\n    } catch (error) {\n      console.warn('⚠️ LocalProfile 遷移失敗:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 建立預設管理員帳號 (William)\n   */\n  private static async createDefaultAdmin(): Promise<void> {\n    try {\n      // 先檢查是否已經存在\n      const existing = await localDB.getAll<User>('employees');\n      const hasWilliam = existing?.some(u => u.employee_number === 'william01');\n\n      if (hasWilliam) {\n        console.log('✅ william01 已存在，跳過建立');\n        return;\n      }\n\n      const adminUser: User = {\n        id: crypto.randomUUID(),\n        employee_number: 'william01',\n        display_name: 'William Chien',\n        english_name: 'William Chien',\n        chinese_name: '簡威廉',\n        permissions: [\n          'super_admin',\n          'admin',\n          'tours',\n          'orders',\n          'quotes',\n          'finance',\n          'hr',\n          'database',\n          'reports',\n          'settings'\n        ],\n        personal_info: {\n          national_id: '',\n          birthday: '',\n          phone: '',\n          email: 'william@venturo.com',\n          address: '',\n          emergency_contact: { name: '', relationship: '', phone: '' }\n        },\n        job_info: {\n          hire_date: new Date().toISOString()\n        },\n        salary_info: {\n          base_salary: 0,\n          allowances: [],\n          salary_history: []\n        },\n        attendance: {\n          leave_records: [],\n          overtime_records: []\n        },\n        contracts: [],\n        status: 'active',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      await localDB.create<User>('employees', adminUser);\n      console.log(`✅ 建立預設管理員: william01`);\n      console.log(`   密碼: Venturo2025!`);\n    } catch (error) {\n      console.warn('⚠️ 建立預設管理員時發生錯誤:', error);\n      // 不拋出錯誤，可能已經存在\n    }\n  }\n\n  /**\n   * 手動觸發初始化（用於測試或修復）\n   */\n  static async forceInitialize(): Promise<void> {\n    console.log('🔧 強制初始化資料庫...');\n    await this.initializeDatabase();\n  }\n}\n\n// 瀏覽器環境中提供全域訪問\nif (typeof window !== 'undefined') {\n  (window as any).DatabaseInitializer = DatabaseInitializer;\n  console.log('💡 DatabaseInitializer 已載入');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1597,1600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1597,1600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6309,6312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6309,6312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-async-promise-executor","severity":1,"message":"Promise executor functions should not be async.","line":284,"column":24,"nodeType":"Identifier","messageId":"async","endLine":284,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":399,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10740,10743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10740,10743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":485,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":485,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":486,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":486,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":561,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":561,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15034,15037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15034,15037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":561,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":561,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15061,15064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15061,15064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":563,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":563,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15123,15126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15123,15126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":563,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":563,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15151,15154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15151,15154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":565,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15212,15215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15212,15215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":565,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15239,15242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15239,15242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":567,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":567,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15301,15304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15301,15304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":567,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":567,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15329,15332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15329,15332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * IndexedDB 本地資料庫管理器\n * 提供完整的 CRUD 操作和查詢功能\n */\n\nimport { handleUpgrade, clearAllTables, exportData, importData } from './migrations';\nimport { DB_NAME, DB_VERSION, TableName } from './schemas';\nimport { checkAndHandleVersion } from './version-manager';\n\n// Re-export TableName for external use\nexport type { TableName };\n\n/**\n * 查詢選項\n */\nexport interface QueryOptions {\n  limit?: number;\n  offset?: number;\n  orderBy?: string;\n  direction?: 'asc' | 'desc';\n}\n\n/**\n * 過濾條件\n */\nexport interface FilterCondition {\n  field: string;\n  operator: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte' | 'contains';\n  value: unknown;\n}\n\n/**\n * LocalDatabase 類別\n * 管理所有 IndexedDB 操作\n */\nexport class LocalDatabase {\n  private db: IDBDatabase | null = null;\n  private initPromise: Promise<IDBDatabase> | null = null;\n\n  /**\n   * Put 資料（更新或新增）\n   * 如果 ID 存在則更新，不存在則新增\n   */\n  async put<T extends { id: string }>(\n    tableName: TableName,\n    data: T\n  ): Promise<T> {\n    try {\n      const db = await this.ensureInit();\n\n      // 檢查 tableName 是否有效\n      if (!db.objectStoreNames.contains(tableName)) {\n        console.error(`[LocalDB] 資料表不存在: ${tableName}`);\n        console.log('可用的資料表:', Array.from(db.objectStoreNames));\n        throw new Error(`資料表不存在: ${tableName}`);\n      }\n\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction(tableName, 'readwrite');\n        const objectStore = transaction.objectStore(tableName);\n\n        // 加入時間戳\n        const now = new Date().toISOString();\n        const recordWithTimestamp = {\n          ...data,\n          created_at: (data as any).created_at || now,\n          updated_at: now,\n        } as T;\n\n        const request = objectStore.put(recordWithTimestamp);\n\n        request.onsuccess = () => {\n          resolve(recordWithTimestamp);\n        };\n\n        request.onerror = () => {\n          const error = new Error(\n            `Put 資料失敗 (${tableName}): ${request.error?.message}`\n          );\n          console.error('[LocalDB]', error);\n          reject(error);\n        };\n      });\n    } catch (error) {\n      console.error('[LocalDB] put 方法錯誤:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 初始化資料庫\n   */\n  async init(): Promise<IDBDatabase> {\n    console.log('[LocalDB] init() 開始執行');\n\n    // 🔒 檢查是否在瀏覽器環境\n    if (typeof window === 'undefined' || typeof indexedDB === 'undefined') {\n      const error = new Error('IndexedDB 不可用（非瀏覽器環境）');\n      console.warn('[LocalDB]', error.message);\n      throw error;\n    }\n\n    // 如果已經初始化，直接返回\n    if (this.db) {\n      console.log('[LocalDB] 資料庫已初始化，直接返回');\n      return this.db;\n    }\n\n    // 如果正在初始化，等待完成\n    if (this.initPromise) {\n      console.log('[LocalDB] 正在初始化中，等待完成');\n      return this.initPromise;\n    }\n\n    // ✨ 檢查版本並處理升級（如有需要）\n    try {\n      const needsSync = await checkAndHandleVersion();\n      if (needsSync) {\n        console.log('[LocalDB] ⚠️ 版本已升級，稍後需要從 Supabase 重新同步資料');\n        // 注意：實際同步會由 stores 的 fetchAll() 觸發\n      }\n    } catch (error) {\n      console.error('[LocalDB] 版本檢查失敗:', error);\n      // 不阻擋初始化，繼續執行\n    }\n\n    // 開始初始化\n    console.log(`[LocalDB] 開始初始化資料庫: ${DB_NAME} v${DB_VERSION}`);\n    this.initPromise = new Promise((resolve, reject) => {\n      // 🔥 關鍵修正：延遲執行確保環境就緒\n      setTimeout(() => {\n        try {\n          console.log('[LocalDB] 呼叫 indexedDB.open()');\n          const request = indexedDB.open(DB_NAME, DB_VERSION);\n          console.log('[LocalDB] indexedDB.open() 返回:', request);\n\n        request.onerror = (event) => {\n          const error = new Error(\n            `無法開啟資料庫: ${request.error?.message || '未知錯誤'}`\n          );\n          console.error('[LocalDB] request.onerror 觸發:', error, event);\n          this.initPromise = null; // 清除失敗的 Promise\n          reject(error);\n        };\n\n        request.onsuccess = (event) => {\n          console.log('[LocalDB] request.onsuccess 觸發', event);\n          this.db = request.result;\n          console.log('[LocalDB] 資料庫初始化成功, version:', this.db.version);\n          console.log('[LocalDB] 資料表:', Array.from(this.db.objectStoreNames));\n          resolve(this.db);\n        };\n\n        request.onupgradeneeded = (event) => {\n          console.log('[LocalDB] request.onupgradeneeded 觸發', event);\n          const db = (event.target as IDBOpenDBRequest).result;\n          const oldVersion = event.oldVersion;\n          const newVersion = event.newVersion;\n          console.log(`[LocalDB] 升級資料庫: v${oldVersion} -> v${newVersion}`);\n\n          try {\n            handleUpgrade(db, oldVersion, newVersion);\n            console.log('[LocalDB] handleUpgrade 完成');\n          } catch (error) {\n            console.error('[LocalDB] 升級失敗:', error);\n            this.initPromise = null; // 清除失敗的 Promise\n            // 注意: 在 onupgradeneeded 中 reject 可能無效\n            // 因為還會觸發 onsuccess 或 onerror\n            throw error;\n          }\n        };\n\n        request.onblocked = (event) => {\n          console.warn('[LocalDB] request.onblocked 觸發 - 資料庫被其他連線阻擋', event);\n        };\n\n          console.log('[LocalDB] 已設定所有回調函數');\n        } catch (error) {\n          console.error('[LocalDB] Promise 內部錯誤:', error);\n          this.initPromise = null;\n          reject(error);\n        }\n      }, 100); // 延遲 100ms 確保環境就緒\n    });\n\n    return this.initPromise;\n  }\n\n  /**\n   * 確保資料庫已初始化\n   */\n  private async ensureInit(): Promise<IDBDatabase> {\n    console.log('[LocalDB] ensureInit called, db exists:', !!this.db);\n    if (!this.db) {\n      console.log('[LocalDB] DB not initialized, calling init()');\n      await this.init();\n      console.log('[LocalDB] init() completed');\n    }\n\n    if (!this.db) {\n      throw new Error('資料庫初始化失敗');\n    }\n\n    console.log('[LocalDB] ensureInit completed');\n    return this.db;\n  }\n\n  // ============================================\n  // 基本 CRUD 操作\n  // ============================================\n\n  /**\n   * 建立單筆資料\n   */\n  async create<T extends { id: string }>(\n    tableName: TableName,\n    data: T\n  ): Promise<T> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n\n      // 加入時間戳\n      const now = new Date().toISOString();\n      const recordWithTimestamp = {\n        ...data,\n        created_at: (data as any).created_at || now,\n        updated_at: now,\n      } as T;\n\n      const request = objectStore.add(recordWithTimestamp);\n\n      request.onsuccess = () => {\n        resolve(recordWithTimestamp);\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `新增資料失敗 (${tableName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * 讀取單筆資料\n   */\n  async read<T>(tableName: TableName, id: string): Promise<T | null> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readonly');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.get(id);\n\n      request.onsuccess = () => {\n        resolve(request.result || null);\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `讀取資料失敗 (${tableName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * 更新單筆資料\n   */\n  async update<T extends { id: string }>(\n    tableName: TableName,\n    id: string,\n    data: Partial<T>\n  ): Promise<T> {\n    const db = await this.ensureInit();\n\n    return new Promise(async (resolve, reject) => {\n      // 先讀取現有資料\n      const existing = await this.read<T>(tableName, id);\n      if (!existing) {\n        reject(new Error(`資料不存在 (${tableName}): ${id}`));\n        return;\n      }\n\n      const transaction = db.transaction(tableName, 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n\n      // 合併資料並更新時間戳\n      const updated = {\n        ...existing,\n        ...data,\n        id, // 確保 ID 不被覆蓋\n        updated_at: new Date().toISOString(),\n      };\n\n      const request = objectStore.put(updated);\n\n      request.onsuccess = () => {\n        resolve(updated);\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `更新資料失敗 (${tableName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n\n  /**\n   * 刪除單筆資料\n   */\n  async delete(tableName: TableName, id: string): Promise<void> {\n    console.log('[LocalDB] 開始刪除:', tableName, id);\n\n    try {\n      console.log('[LocalDB] 調用 ensureInit, this.db 存在:', !!this.db);\n      const db = await this.ensureInit();\n      console.log('[LocalDB] DB 初始化完成');\n\n      return new Promise((resolve, reject) => {\n        console.log('[LocalDB] 建立 transaction');\n        const transaction = db.transaction(tableName, 'readwrite');\n        const objectStore = transaction.objectStore(tableName);\n        console.log('[LocalDB] 調用 delete');\n        const request = objectStore.delete(id);\n\n        request.onsuccess = () => {\n          console.log('[LocalDB] delete request 成功');\n          resolve();\n        };\n\n        request.onerror = () => {\n          const error = new Error(\n            `刪除資料失敗 (${tableName}): ${request.error?.message}`\n          );\n          console.error('[LocalDB]', error);\n          reject(error);\n        };\n\n        transaction.oncomplete = () => {\n          console.log('[LocalDB] transaction 完成');\n        };\n\n        transaction.onerror = () => {\n          console.error('[LocalDB] transaction 錯誤:', transaction.error);\n        };\n      });\n    } catch (error) {\n      console.error('[LocalDB] delete 方法異常:', error);\n      throw error;\n    }\n  }\n\n  // ============================================\n  // 批次操作\n  // ============================================\n\n  /**\n   * 批次建立資料\n   */\n  async createMany<T extends { id: string }>(\n    tableName: TableName,\n    dataArray: T[]\n  ): Promise<T[]> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const now = new Date().toISOString();\n      const results: T[] = [];\n\n      transaction.oncomplete = () => {\n        resolve(results);\n      };\n\n      transaction.onerror = () => {\n        const error = new Error(\n          `批次新增失敗 (${tableName}): ${transaction.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n\n      dataArray.forEach((data) => {\n        const recordWithTimestamp = {\n          ...data,\n          created_at: (data as any).created_at || now,\n          updated_at: now,\n        } as T;\n        objectStore.add(recordWithTimestamp);\n        results.push(recordWithTimestamp);\n      });\n    });\n  }\n\n  /**\n   * 批次更新資料\n   */\n  async updateMany<T extends { id: string }>(\n    tableName: TableName,\n    updates: Array<{ id: string; data: Partial<T> }>\n  ): Promise<T[]> {\n    const results: T[] = [];\n\n    for (const { id, data } of updates) {\n      const updated = await this.update<T>(tableName, id, data);\n      results.push(updated);\n    }\n\n    return results;\n  }\n\n  /**\n   * 批次刪除資料\n   */\n  async deleteMany(tableName: TableName, ids: string[]): Promise<void> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n\n      transaction.oncomplete = () => {\n        resolve();\n      };\n\n      transaction.onerror = () => {\n        const error = new Error(\n          `批次刪除失敗 (${tableName}): ${transaction.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n\n      ids.forEach((id) => {\n        objectStore.delete(id);\n      });\n    });\n  }\n\n  // ============================================\n  // 查詢功能\n  // ============================================\n\n  /**\n   * 取得所有資料\n   */\n  async getAll<T>(\n    tableName: TableName,\n    options?: QueryOptions\n  ): Promise<T[]> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      // 檢查資料表是否存在\n      if (!db.objectStoreNames.contains(tableName)) {\n        console.error(`[LocalDB] getAll - 資料表不存在: ${tableName}`);\n        console.log('[LocalDB] 可用的資料表:', Array.from(db.objectStoreNames));\n        reject(new Error(`資料表不存在: ${tableName}`));\n        return;\n      }\n\n      const transaction = db.transaction(tableName, 'readonly');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.getAll();\n\n      request.onsuccess = () => {\n        let results = request.result;\n\n        // 排序\n        if (options?.orderBy) {\n          results.sort((a, b) => {\n            const aVal = a[options.orderBy!];\n            const bVal = b[options.orderBy!];\n            const order = options.direction === 'desc' ? -1 : 1;\n            return aVal > bVal ? order : aVal < bVal ? -order : 0;\n          });\n        }\n\n        // 分頁\n        if (options?.offset !== undefined || options?.limit !== undefined) {\n          const offset = options.offset || 0;\n          const limit = options.limit || results.length;\n          results = results.slice(offset, offset + limit);\n        }\n\n        resolve(results);\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `查詢失敗 (${tableName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * 根據索引查詢\n   */\n  async findByIndex<T>(\n    tableName: TableName,\n    indexName: string,\n    value: unknown\n  ): Promise<T[]> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readonly');\n      const objectStore = transaction.objectStore(tableName);\n      const index = objectStore.index(indexName);\n      const request = index.getAll(value as IDBValidKey);\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `索引查詢失敗 (${tableName}.${indexName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * 過濾查詢\n   */\n  async filter<T>(\n    tableName: TableName,\n    conditions: FilterCondition[]\n  ): Promise<T[]> {\n    const allRecords = await this.getAll<T>(tableName);\n\n    return allRecords.filter((record) => {\n      return conditions.every((condition) => {\n        const fieldValue = (record as Record<string, unknown>)[condition.field];\n\n        switch (condition.operator) {\n          case 'eq':\n            return fieldValue === condition.value;\n          case 'ne':\n            return fieldValue !== condition.value;\n          case 'gt':\n            return (fieldValue as any) > (condition.value as any);\n          case 'gte':\n            return (fieldValue as any) >= (condition.value as any);\n          case 'lt':\n            return (fieldValue as any) < (condition.value as any);\n          case 'lte':\n            return (fieldValue as any) <= (condition.value as any);\n          case 'contains':\n            return String(fieldValue)\n              .toLowerCase()\n              .includes(String(condition.value).toLowerCase());\n          default:\n            return true;\n        }\n      });\n    });\n  }\n\n  /**\n   * 計算資料筆數\n   */\n  async count(tableName: TableName): Promise<number> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readonly');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.count();\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `計數失敗 (${tableName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n  /**\n   * 檢查資料是否存在\n   */\n  async exists(tableName: TableName, id: string): Promise<boolean> {\n    const result = await this.read(tableName, id);\n    return result !== null;\n  }\n\n  /**\n   * 清空資料表\n   */\n  async clear(tableName: TableName): Promise<void> {\n    const db = await this.ensureInit();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(tableName, 'readwrite');\n      const objectStore = transaction.objectStore(tableName);\n      const request = objectStore.clear();\n\n      request.onsuccess = () => {\n        console.log(`[LocalDB] 已清空資料表: ${tableName}`);\n        resolve();\n      };\n\n      request.onerror = () => {\n        const error = new Error(\n          `清空失敗 (${tableName}): ${request.error?.message}`\n        );\n        console.error('[LocalDB]', error);\n        reject(error);\n      };\n    });\n  }\n\n  // ============================================\n  // 工具方法\n  // ============================================\n\n  /**\n   * 清空所有資料表\n   */\n  async clearAll(): Promise<void> {\n    const db = await this.ensureInit();\n    await clearAllTables(db);\n  }\n\n  /**\n   * 匯出資料\n   */\n  async export(): Promise<Record<string, unknown[]>> {\n    const db = await this.ensureInit();\n    return exportData(db);\n  }\n\n  /**\n   * 匯入資料\n   */\n  async import(data: Record<string, unknown[]>): Promise<void> {\n    const db = await this.ensureInit();\n    await importData(db, data);\n  }\n\n  /**\n   * 關閉資料庫連線\n   */\n  close(): void {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n      this.initPromise = null;\n      console.log('[LocalDB] 資料庫連線已關閉');\n    }\n  }\n\n  /**\n   * 重置資料庫實例（強制清除所有狀態）\n   */\n  reset(): void {\n    console.log('[LocalDB] 重置資料庫實例');\n    if (this.db) {\n      this.db.close();\n    }\n    this.db = null;\n    this.initPromise = null;\n  }\n}\n\n// 匯出單例實例和類別\nexport const localDB = new LocalDatabase();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/init-default-user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/init-local-data.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bcrypt' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateUUID' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateCode' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1812,1815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1812,1815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3236,3239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3236,3239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 初始化本地資料庫\n * 建立所有必要的預設資料\n */\n\nimport bcrypt from 'bcryptjs';\nimport { localDB } from '@/lib/db';\nimport { DB_NAME } from '@/lib/db/schemas';\nimport { generateUUID } from '@/lib/utils/uuid';\n\n/**\n * 產生 UUID（已移除，改用系統統一的 UUID 生成器）\n * 注意：此處改用 @/lib/utils/uuid 的 generateUUID\n */\n\n/**\n * 產生編號\n */\nfunction generateCode(prefix: string, index: number): string {\n  const year = new Date().getFullYear();\n  const number = (index + 1).toString().padStart(4, '0');\n  return `${prefix}${year}${number}`;\n}\n\n/**\n * 初始化本地資料庫\n */\nexport async function initLocalDatabase(): Promise<void> {\n  console.log('🔧 初始化本地資料庫...');\n\n  try {\n    // 初始化 IndexedDB\n    await localDB.init();\n    console.log('✅ IndexedDB 已初始化');\n\n    // 檢查是否已有資料\n    const employeeCount = await localDB.count('employees');\n\n    if (employeeCount === 0) {\n      console.log('📝 IndexedDB 無資料，嘗試從 Supabase 同步...');\n\n      // 🔄 優先從 Supabase 同步資料（如果有網路）\n      const syncedFromSupabase = await syncFromSupabase();\n\n      if (!syncedFromSupabase) {\n        // Supabase 也沒資料或無網路 → 不自動建立管理員\n        console.log('⚠️ Supabase 無資料');\n        console.log('💡 請透過系統介面建立管理員帳號');\n      } else {\n        console.log('✅ 已從 Supabase 同步資料到本地');\n      }\n    } else {\n      console.log('✅ 資料庫已有資料，跳過初始化');\n    }\n  } catch (error) {\n    console.error('❌ 初始化資料庫失敗:', error);\n    throw error;\n  }\n}\n\n/**\n * 從 Supabase 同步資料到本地\n * @returns true 表示成功同步，false 表示無資料或失敗\n */\nasync function syncFromSupabase(): Promise<boolean> {\n  try {\n    // 檢查是否有網路\n    if (typeof navigator !== 'undefined' && !navigator.onLine) {\n      console.log('⚠️ 無網路連線，無法從 Supabase 同步');\n      return false;\n    }\n\n    console.log('🌐 嘗試從 Supabase 下載資料...');\n    const { supabase } = await import('@/lib/supabase/client');\n\n    // 下載 employees 資料\n    const { data: employees, error } = await (supabase as any)\n      .from('employees')\n      .select('*')\n      .eq('status', 'active');\n\n    if (error) {\n      console.error('❌ Supabase 查詢失敗:', error);\n      return false;\n    }\n\n    if (!employees || employees.length === 0) {\n      console.log('⚠️ Supabase 沒有員工資料');\n      return false;\n    }\n\n    console.log(`📥 從 Supabase 下載了 ${employees.length} 位員工`);\n\n    // 寫入到 IndexedDB\n    for (const employee of employees) {\n      await localDB.create('employees', employee);\n    }\n\n    console.log('✅ 員工資料已同步到本地');\n    return true;\n\n  } catch (error) {\n    console.error('❌ 從 Supabase 同步失敗:', error);\n    return false;\n  }\n}\n\n/**\n * 建立預設管理員（已停用）\n * 此函數已不再使用，請透過系統介面建立管理員\n */\n// async function createDefaultAdmin(): Promise<void> {\n//   ... 已移除\n// }\n\n/**\n * 檢查預設管理員密碼（已停用）\n * 此函數已不再使用\n */\n// async function checkDefaultAdminPassword(): Promise<void> {\n//   ... 已移除\n// }\n\n\n// ========================================\n// 測試資料函數已移除\n// 根據 STORE_UNIFICATION_FINAL.md 定案：\n// - 只保留 william01 管理員帳號\n// - 其他資料透過系統介面新增\n// ========================================\n\n/**\n * 清空所有資料（危險操作）\n */\nexport async function clearAllData(): Promise<void> {\n  const tables = [\n    'employees', 'tours', 'orders', 'customers',\n    'members', 'payments', 'todos', 'visas',\n    'suppliers', 'quotes', 'quote_items',\n    'payment_requests', 'disbursement_orders', 'receipt_orders'\n  ];\n  \n  for (const table of tables) {\n    try {\n      await localDB.clear(table as any);\n      console.log(`✅ 已清空 ${table} 表`);\n    } catch (error) {\n      console.error(`❌ 清空 ${table} 表失敗:`, error);\n    }\n  }\n}\n\n/**\n * 匯出所有資料\n */\nexport async function exportAllData(): Promise<Record<string, unknown[]>> {\n  return await localDB.export();\n}\n\n/**\n * 匯入資料\n */\nexport async function importData(data: Record<string, unknown[]>): Promise<void> {\n  await localDB.import(data);\n}\n\n// 自動初始化（在瀏覽器環境）\nif (typeof window !== 'undefined') {\n  // 檢查是否需要初始化\n  const initKey = `${DB_NAME}-initialized`;\n  const needsInit = localStorage.getItem(initKey) !== 'true';\n\n  if (needsInit) {\n    initLocalDatabase().then(() => {\n      localStorage.setItem(initKey, 'true');\n    }).catch(error => {\n      console.error('自動初始化失敗:', error);\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/migrations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addSyncIndexes' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSyncableTable' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * IndexedDB 資料庫升級與遷移邏輯\n */\n\nimport { TABLE_SCHEMAS } from './schemas';\nimport { addSyncIndexes, isSyncableTable } from './sync-schema-helper';\n\n/**\n * 資料庫升級處理器\n * @param db - IDBDatabase 實例\n * @param oldVersion - 舊版本號\n * @param newVersion - 新版本號\n */\nexport function handleUpgrade(\n  db: IDBDatabase,\n  oldVersion: number,\n  newVersion: number | null\n): void {\n  console.log(`[DB Migration] 升級資料庫: v${oldVersion} -> v${newVersion}`);\n\n  try {\n    // v0 -> v1: 建立所有資料表（包含 regions 和 workspace）\n    if (oldVersion === 0) {\n      console.log('[DB Migration] 初始化 v1 資料庫（包含所有資料表）');\n      createAllTables(db);\n    }\n\n    console.log('[DB Migration] 升級完成！');\n  } catch (error) {\n    console.error('[DB Migration] 升級失敗:', error);\n    throw error;\n  }\n}\n\n/**\n * 建立所有資料表（v1）\n * 包含：tours, orders, workspace 等所有表格\n */\nfunction createAllTables(db: IDBDatabase): void {\n  console.log('[DB Migration] 建立所有資料表（v1 完整版）...');\n\n  TABLE_SCHEMAS.forEach((schema) => {\n    // 如果資料表已存在，跳過（理論上不應該發生）\n    if (db.objectStoreNames.contains(schema.name)) {\n      console.warn(`[DB Migration] 資料表 ${schema.name} 已存在，跳過`);\n      return;\n    }\n\n    // 建立資料表\n    const objectStore = db.createObjectStore(schema.name, {\n      keyPath: schema.keyPath,\n      autoIncrement: schema.autoIncrement,\n    });\n\n    // 建立索引\n    schema.indexes.forEach((index) => {\n      objectStore.createIndex(index.name, index.keyPath, {\n        unique: index.unique,\n      });\n    });\n\n    console.log(`[DB Migration] ✓ 建立資料表: ${schema.name} (${schema.indexes.length} 個索引)`);\n  });\n\n  console.log(`[DB Migration] ✓ 完成！共建立 ${TABLE_SCHEMAS.length} 個資料表`);\n}\n\n/**\n * 清除所有資料表（危險操作，僅供開發測試）\n */\nexport function clearAllTables(db: IDBDatabase): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\n      Array.from(db.objectStoreNames),\n      'readwrite'\n    );\n\n    transaction.onerror = () => reject(transaction.error);\n    transaction.oncomplete = () => {\n      console.log('[DB Migration] 所有資料表已清空');\n      resolve();\n    };\n\n    Array.from(db.objectStoreNames).forEach((tableName) => {\n      const objectStore = transaction.objectStore(tableName);\n      objectStore.clear();\n    });\n  });\n}\n\n/**\n * 匯出資料（備份用）\n */\nexport async function exportData(db: IDBDatabase): Promise<Record<string, unknown[]>> {\n  const data: Record<string, unknown[]> = {};\n\n  for (const tableName of Array.from(db.objectStoreNames)) {\n    const transaction = db.transaction(tableName, 'readonly');\n    const objectStore = transaction.objectStore(tableName);\n    const request = objectStore.getAll();\n\n    await new Promise<void>((resolve, reject) => {\n      request.onsuccess = () => {\n        data[tableName] = request.result;\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  return data;\n}\n\n/**\n * 匯入資料（還原用）\n */\nexport async function importData(\n  db: IDBDatabase,\n  data: Record<string, unknown[]>\n): Promise<void> {\n  for (const [tableName, records] of Object.entries(data)) {\n    if (!db.objectStoreNames.contains(tableName)) {\n      console.warn(`[DB Migration] 資料表 ${tableName} 不存在，跳過匯入`);\n      continue;\n    }\n\n    const transaction = db.transaction(tableName, 'readwrite');\n    const objectStore = transaction.objectStore(tableName);\n\n    for (const record of records) {\n      objectStore.put(record);\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      transaction.oncomplete = () => resolve();\n      transaction.onerror = () => reject(transaction.error);\n    });\n\n    console.log(`[DB Migration] 匯入 ${records.length} 筆資料到 ${tableName}`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/sync-schema-helper.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[996,999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[996,999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 同步 Schema 輔助工具\n * 為所有業務表自動加入同步相關索引\n */\n\nimport type { IndexSchema } from './schemas';\n\n/**\n * 同步相關的索引定義\n * 所有業務表都需要這些索引\n */\nexport const SYNC_INDEXES: IndexSchema[] = [\n  { name: 'sync_status', keyPath: 'sync_status', unique: false },\n  { name: 'temp_code', keyPath: 'temp_code', unique: false },\n  { name: 'synced_at', keyPath: 'synced_at', unique: false },\n];\n\n/**\n * 需要加入同步索引的業務表清單\n * 不包括系統表（如 syncQueue）和 UI 狀態表\n */\nexport const SYNCABLE_TABLES = [\n  // 核心業務\n  'employees',\n  'tours',\n  'itineraries',\n  'orders',\n  'members',\n  'tour_addons',\n  'customers',\n\n  // 財務\n  'payments',\n  'payment_requests',\n  'disbursement_orders',\n  'receipt_orders',\n\n  // 報價與供應商\n  'quotes',\n  'quote_items',\n  'suppliers',\n\n  // 附加功能\n  'visas',\n  'todos',\n  'calendar_events',\n\n  // 系統\n  'regions',\n  'templates',\n  'workspace_items',\n  'timebox_sessions',\n] as const;\n\n/**\n * 檢查表是否需要同步索引\n */\nexport function isSyncableTable(tableName: string): boolean {\n  return SYNCABLE_TABLES.includes(tableName as any);\n}\n\n/**\n * 為表結構加入同步索引\n * 如果索引已存在則跳過\n */\nexport function addSyncIndexes(existingIndexes: IndexSchema[]): IndexSchema[] {\n  const indexNames = new Set(existingIndexes.map(idx => idx.name));\n  const newIndexes = [...existingIndexes];\n\n  for (const syncIndex of SYNC_INDEXES) {\n    if (!indexNames.has(syncIndex.name)) {\n      newIndexes.push(syncIndex);\n    }\n  }\n\n  return newIndexes;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/sync-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[347,350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[347,350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[683,686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[683,686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[948,951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[948,951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 同步狀態工具函數\n * 提供同步狀態管理的輔助功能\n *\n * FastIn 架構：\n * - _needs_sync: 是否待同步\n * - _synced_at: 最後同步時間\n * - _deleted: 軟刪除標記\n */\n\nimport type { SyncableEntity } from '@/types';\n\n/**\n * 為新建立的實體加入同步欄位\n * @param data - 原始資料\n * @param isSynced - 是否已同步（true: 已同步, false: 待同步）\n * @returns 加入同步欄位的資料\n */\nexport function withSyncFields<T extends Record<string, any>>(\n  data: T,\n  isSynced: boolean = false\n): T & Partial<SyncableEntity> {\n  return {\n    ...data,\n    _needs_sync: !isSynced,\n    _synced_at: isSynced ? new Date().toISOString() : null,\n    _deleted: false,\n  };\n}\n\n/**\n * 標記為已同步\n * @param data - 原始資料\n * @returns 更新同步狀態的資料\n */\nexport function markAsSynced<T extends Record<string, any>>(\n  data: T\n): T & Partial<SyncableEntity> {\n  return {\n    ...data,\n    _needs_sync: false,\n    _synced_at: new Date().toISOString(),\n  };\n}\n\n/**\n * 標記為待同步\n * @param data - 原始資料\n * @returns 更新同步狀態的資料\n */\nexport function markAsPending<T extends Record<string, any>>(\n  data: T\n): T & Partial<SyncableEntity> {\n  return {\n    ...data,\n    _needs_sync: true,\n    _synced_at: null,\n  };\n}\n\n/**\n * 標記為軟刪除（待同步刪除）\n * @param data - 原始資料\n * @returns 更新刪除狀態的資料\n */\nexport function markAsDeleted<T extends Record<string, any>>(\n  data: T\n): T & Partial<SyncableEntity> {\n  return {\n    ...data,\n    _deleted: true,\n    _needs_sync: true,\n    _synced_at: null,\n  };\n}\n\n/**\n * 檢查實體是否已同步\n */\nexport function isSynced(entity: Partial<SyncableEntity>): boolean {\n  return entity._needs_sync === false && entity._synced_at !== null;\n}\n\n/**\n * 檢查實體是否待同步\n */\nexport function isPending(entity: Partial<SyncableEntity>): boolean {\n  return entity._needs_sync === true;\n}\n\n/**\n * 檢查實體是否已軟刪除\n */\nexport function isDeleted(entity: Partial<SyncableEntity>): boolean {\n  return entity._deleted === true;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/verify-and-fix.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4872,4875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4872,4875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4919,4922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4919,4922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4962,4965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4962,4965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 驗證和修復工具\n *\n * 使用方式：\n * 1. 在瀏覽器 Console 執行：\n *    const { verifyAndFix } = await import('/src/lib/db/verify-and-fix')\n *    await verifyAndFix()\n *\n * 2. 或直接在任何頁面執行（已自動掛載到 window）\n */\n\nimport { localDB } from '@/lib/db';\nimport { Employee as User } from '@/stores/types';\n\nexport async function verifyAndFix() {\n  console.log('🔍 開始驗證系統狀態...\\n');\n\n  try {\n    // 1. 檢查 IndexedDB\n    console.log('📊 檢查 IndexedDB...');\n    const users = await localDB.getAll<User>('employees');\n    console.log(`   找到 ${users.length} 位員工`);\n\n    if (users.length > 0) {\n      console.log('   員工列表：');\n      users.forEach(u => {\n        console.log(`   - ${u.display_name} (${u.employee_number}) [${u.status}]`);\n      });\n    }\n\n    // 2. 檢查 William\n    const william = users.find(u => u.employee_number === 'william01');\n\n    if (william) {\n      console.log('\\n✅ William 帳號存在');\n      console.log(`   姓名: ${william.display_name}`);\n      console.log(`   員工編號: ${william.employee_number}`);\n      console.log(`   狀態: ${william.status}`);\n      console.log(`   ID: ${william.id}`);\n      console.log(`   權限: ${william.permissions.join(', ')}`);\n\n      console.log('\\n✅ 系統狀態正常，無需修復');\n      return { status: 'ok', user: william };\n    }\n\n    // 3. William 不存在，需要建立\n    console.log('\\n⚠️ 找不到 William 帳號');\n    console.log('🔧 開始建立 William 管理員帳號...\\n');\n\n    const newWilliam: User = {\n      id: crypto.randomUUID(),\n      employee_number: 'william01',\n      display_name: 'William Chien',\n      english_name: 'William Chien',\n      chinese_name: '簡威廉',\n      permissions: [\n        'super_admin',\n        'admin',\n        'tours',\n        'orders',\n        'quotes',\n        'finance',\n        'hr',\n        'database',\n        'reports',\n        'settings'\n      ],\n      personal_info: {\n        national_id: '',\n        birthday: '',\n        phone: '',\n        email: 'william@venturo.com',\n        address: '',\n        emergency_contact: { name: '', relationship: '', phone: '' }\n      },\n      job_info: {\n        hire_date: new Date().toISOString()\n      },\n      salary_info: {\n        base_salary: 0,\n        allowances: [],\n        salary_history: []\n      },\n      attendance: {\n        leave_records: [],\n        overtime_records: []\n      },\n      contracts: [],\n      status: 'active',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n\n    await localDB.create<User>('employees', newWilliam);\n\n    console.log('✅ William 帳號建立成功！');\n    console.log(`   員工編號: william01`);\n    console.log(`   密碼: 83212711`);\n    console.log(`   姓名: ${newWilliam.display_name}`);\n    console.log(`   ID: ${newWilliam.id}`);\n    console.log(`   權限: 超級管理員（所有權限）`);\n\n    // 4. 驗證建立結果\n    const verify = await localDB.getAll<User>('employees');\n    console.log(`\\n✅ 驗證完成，現有員工數量: ${verify.length}`);\n\n    console.log('\\n🎉 修復完成！請重新整理 HR 頁面查看');\n\n    return { status: 'fixed', user: newWilliam };\n\n  } catch (error) {\n    console.error('\\n❌ 驗證/修復失敗:', error);\n    return { status: 'error', error };\n  }\n}\n\n/**\n * 快速檢查（不修復）\n */\nexport async function quickCheck() {\n  console.log('🔍 快速檢查...\\n');\n\n  try {\n    const users = await localDB.getAll<User>('employees');\n    const william = users.find(u => u.employee_number === 'william01');\n\n    console.log(`📊 IndexedDB 狀態:`);\n    console.log(`   總員工數: ${users.length}`);\n    console.log(`   William 帳號: ${william ? '✅ 存在' : '❌ 不存在'}`);\n\n    if (william) {\n      console.log(`   狀態: ${william.status}`);\n      console.log(`   權限: ${william.permissions.length} 項`);\n    }\n\n    // 檢查 LocalStorage\n    const authStore = localStorage.getItem('auth-storage');\n    const localAuthStore = localStorage.getItem('venturo-local-auth-store');\n\n    console.log(`\\n💾 LocalStorage 狀態:`);\n    console.log(`   auth-storage: ${authStore ? '✅ 存在' : '❌ 不存在'}`);\n    console.log(`   venturo-local-auth-store: ${localAuthStore ? '⚠️ 存在（v4.0 遺留）' : '無'}`);\n\n    if (authStore) {\n      const parsed = JSON.parse(authStore);\n      console.log(`   已登入: ${parsed.state?.isAuthenticated || false}`);\n      console.log(`   使用者: ${parsed.state?.user?.display_name || '無'}`);\n    }\n\n    return { users, william, hasAuth: !!authStore };\n\n  } catch (error) {\n    console.error('❌ 檢查失敗:', error);\n    return { error };\n  }\n}\n\n/**\n * 清除並重建（謹慎使用）\n */\nexport async function clearAndRebuild() {\n  const confirm = window.confirm(\n    '⚠️ 這會刪除所有員工資料並重新建立 William 帳號。\\n\\n確定要繼續嗎？'\n  );\n\n  if (!confirm) {\n    console.log('❌ 使用者取消操作');\n    return;\n  }\n\n  console.log('🔧 清除並重建中...\\n');\n\n  try {\n    // 清除所有員工\n    await localDB.clear('employees');\n    console.log('✅ 已清除所有員工資料');\n\n    // 重新建立 William\n    const result = await verifyAndFix();\n    return result;\n\n  } catch (error) {\n    console.error('❌ 清除並重建失敗:', error);\n    return { status: 'error', error };\n  }\n}\n\n// 自動掛載到 window（方便 Console 使用）\nif (typeof window !== 'undefined') {\n  (window as any).verifyAndFix = verifyAndFix;\n  (window as any).quickCheck = quickCheck;\n  (window as any).clearAndRebuild = clearAndRebuild;\n\n  console.log('💡 驗證工具已載入');\n  console.log('📝 可用指令：');\n  console.log('   verifyAndFix()      - 驗證並自動修復');\n  console.log('   quickCheck()        - 快速檢查（不修復）');\n  console.log('   clearAndRebuild()   - 清除並重建（謹慎使用）');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/db/version-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/error-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[524,527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[524,527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[712,715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[712,715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":67,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1851,1854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1851,1854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1883,1886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1883,1886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":95,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3414,3417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3414,3417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3618,3621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3618,3621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 統一的錯誤處理機制\n *\n * 使用範例：\n * import { handleError, AsyncErrorBoundary } from '@/lib/error-handler';\n *\n * try {\n *   await service.create(data);\n * } catch (error) {\n *   handleError(error, 'PaymentService.create');\n * }\n */\n\nimport { ValidationError, NotFoundError } from '@/core/errors/app-errors';\nimport { logger } from '@/lib/utils/logger';\n\nexport interface ErrorLogEntry {\n  timestamp: string;\n  level: 'error' | 'warn' | 'info';\n  context: string;\n  message: string;\n  stack?: string;\n  metadata?: Record<string, any>;\n}\n\nclass ErrorHandler {\n  private logs: ErrorLogEntry[] = [];\n  private maxLogs = 1000;\n\n  /**\n   * 處理錯誤並記錄\n   */\n  handle(error: unknown, context: string, metadata?: Record<string, any>): void {\n    const entry: ErrorLogEntry = {\n      timestamp: new Date().toISOString(),\n      level: 'error',\n      context,\n      message: this.extractMessage(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      metadata,\n    };\n\n    this.log(entry);\n    this.notifyUser(error, context);\n\n    // 如果是開發環境，直接拋出以便調試\n    if (process.env.NODE_ENV === 'development') {\n      logger.error(`[${context}]`, error);\n    }\n  }\n\n  /**\n   * 記錄錯誤\n   */\n  private log(entry: ErrorLogEntry): void {\n    this.logs.push(entry);\n\n    // 限制日誌數量\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n\n    // 持久化到 localStorage（可選）\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('venturo-error-logs', JSON.stringify(this.logs.slice(-100)));\n      } catch (e) {\n        // localStorage 可能已滿，忽略\n      }\n    }\n  }\n\n  /**\n   * 提取錯誤訊息\n   */\n  private extractMessage(error: unknown): string {\n    if (error instanceof ValidationError) {\n      return `驗證錯誤: ${(error as any).field} - ${error.message}`;\n    }\n\n    if (error instanceof NotFoundError) {\n      return `找不到資源: ${(error as any).resource} (ID: ${(error as any).id})`;\n    }\n\n    if (error instanceof Error) {\n      return error.message;\n    }\n\n    return String(error);\n  }\n\n  /**\n   * 通知用戶（可擴展為 Toast 通知）\n   */\n  private notifyUser(error: unknown, context: string): void {\n    // TODO: 整合 Toast 通知系統\n    const message = this.getUserFriendlyMessage(error);\n\n    // 未來可以這樣：\n    // toast.error(message);\n    logger.warn(`[用戶通知] ${message}`);\n  }\n\n  /**\n   * 轉換為用戶友善的錯誤訊息\n   */\n  private getUserFriendlyMessage(error: unknown): string {\n    if (error instanceof ValidationError) {\n      return `輸入錯誤：${error.message}`;\n    }\n\n    if (error instanceof NotFoundError) {\n      return `找不到資料，請重新整理後再試`;\n    }\n\n    if (error instanceof Error) {\n      // 隱藏技術細節\n      if (error.message.includes('network') || error.message.includes('fetch')) {\n        return '網路連線異常，請檢查網路後再試';\n      }\n\n      if (error.message.includes('timeout')) {\n        return '操作逾時，請稍後再試';\n      }\n\n      return '操作失敗，請稍後再試';\n    }\n\n    return '發生未知錯誤';\n  }\n\n  /**\n   * 獲取錯誤日誌\n   */\n  getLogs(limit = 100): ErrorLogEntry[] {\n    return this.logs.slice(-limit);\n  }\n\n  /**\n   * 清除錯誤日誌\n   */\n  clearLogs(): void {\n    this.logs = [];\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('venturo-error-logs');\n    }\n  }\n\n  /**\n   * 導出日誌為 JSON（供調試使用）\n   */\n  exportLogs(): string {\n    return JSON.stringify(this.logs, null, 2);\n  }\n}\n\n// 單例模式\nexport const errorHandler = new ErrorHandler();\n\n/**\n * 便捷函數：處理錯誤\n */\nexport function handleError(\n  error: unknown,\n  context: string,\n  metadata?: Record<string, any>\n): void {\n  errorHandler.handle(error, context, metadata);\n}\n\n/**\n * 異步操作的錯誤包裝器\n */\nexport async function withErrorHandling<T>(\n  fn: () => Promise<T>,\n  context: string,\n  metadata?: Record<string, any>\n): Promise<T | null> {\n  try {\n    return await fn();\n  } catch (error) {\n    handleError(error, context, metadata);\n    return null;\n  }\n}\n\n/**\n * React Error Boundary 用的錯誤處理\n */\nexport function handleReactError(\n  error: Error,\n  errorInfo: { componentStack: string }\n): void {\n  handleError(error, 'React Error Boundary', {\n    componentStack: errorInfo.componentStack,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/formula-calculator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":124,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3549,3552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3549,3552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3568,3571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3568,3571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4680,4683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4680,4683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Excel-like formula calculator for custom fields\n\nexport interface FormulaContext {\n  [fieldName: string]: number | string;\n}\n\n// 欄位名稱映射表 - 將中文欄位名映射到實際數據\nexport const FIELD_MAP: Record<string, string> = {\n  '姓名': 'name',\n  '英文姓名': 'nameEn',\n  '年齡': 'age',\n  '基本費用': 'basePrice',\n  '加購費用': 'addOnTotal',\n  '總費用': 'totalPrice',\n  '訂位代號': 'reservationCode',\n  // 可以繼續擴展\n};\n\n// 欄位座標映射 - Excel 式座標系統\nexport const FIELD_COORDINATES: Record<string, string> = {\n  'C1': 'name',           // 姓名\n  'D1': 'nameEn',         // 英文姓名\n  'E1': 'birthday',       // 生日\n  'F1': 'age',            // 年齡\n  'G1': 'gender',         // 性別\n  'H1': 'idNumber',       // 身分證字號\n  'I1': 'passportNumber', // 護照號碼\n  'J1': 'passportExpiry', // 護照效期\n  'K1': 'reservationCode',// 訂位代號\n  'L1': 'assignedRoom',   // 分房\n  // 動態欄位會從 M1 開始\n};\n\n// 獲取欄位的 Excel 座標（包含自定義欄位）\nexport function getFieldCoordinate(fieldName: string, customFields: Array<{id: string, name: string}> = []): string | null {\n  // 檢查預定義欄位\n  for (const [coord, field] of Object.entries(FIELD_COORDINATES)) {\n    if (field === fieldName) {\n      return coord;\n    }\n  }\n\n  // 檢查自定義欄位（從 M1 開始）\n  const customFieldIndex = customFields.findIndex(field => field.id === fieldName);\n  if (customFieldIndex !== -1) {\n    const column = String.fromCharCode(77 + customFieldIndex); // M, N, O, P...\n    return `${column}1`;\n  }\n\n  return null;\n}\n\n// 將 Excel 座標轉換為欄位名稱\nexport function getFieldFromCoordinate(coordinate: string): string | null {\n  return FIELD_COORDINATES[coordinate.toUpperCase()] || null;\n}\n\n// 解析公式並計算結果\nexport function calculateFormula(formula: string, context: FormulaContext): number | string | null {\n  try {\n    // 如果不是以 = 開頭，直接返回原值\n    if (!formula.startsWith('=')) {\n      return formula;\n    }\n\n    // 移除 = 符號\n    let expression = formula.substring(1).trim();\n\n    // 替換 Excel 座標為實際值\n    for (const [coordinate, fieldKey] of Object.entries(FIELD_COORDINATES)) {\n      const regex = new RegExp(coordinate, 'gi');\n      const value = context[fieldKey];\n\n      if (value !== undefined) {\n        // 如果是數字，直接替換；如果是字串，加上引號\n        const replacementValue = typeof value === 'number' ? value.toString() : `\"${value}\"`;\n        expression = expression.replace(regex, replacementValue);\n      }\n    }\n\n    // 替換中文欄位名稱為實際值\n    for (const [display_name, fieldKey] of Object.entries(FIELD_MAP)) {\n      const regex = new RegExp(display_name, 'g');\n      const value = context[fieldKey];\n\n      if (value !== undefined) {\n        // 如果是數字，直接替換；如果是字串，加上引號\n        const replacementValue = typeof value === 'number' ? value.toString() : `\"${value}\"`;\n        expression = expression.replace(regex, replacementValue);\n      }\n    }\n\n    // 處理基本數學運算\n    // 支援 +、-、*、/ 運算符\n    const result = evaluateExpression(expression);\n\n    return result;\n  } catch (error) {\n    console.error('Formula calculation error:', error);\n    return '#ERROR';\n  }\n}\n\n// 安全的表達式計算器\nfunction evaluateExpression(expression: string): number | string {\n  // 移除所有空格\n  expression = expression.replace(/\\s/g, '');\n\n  // 檢查是否包含不安全的字符（只允許數字、運算符、小數點、括號）\n  if (!/^[0-9+\\-*/().]+$/.test(expression)) {\n    throw new Error('Invalid expression');\n  }\n\n  try {\n    // 使用 Function 構造器進行安全計算\n    const result = new Function('return (' + expression + ')')();\n\n    // 檢查結果是否為有效數字\n    if (typeof result === 'number' && !isNaN(result)) {\n      return Math.round(result * 100) / 100; // 四捨五入到小數點後兩位\n    }\n\n    return result;\n  } catch (error) {\n    throw new Error('Expression evaluation failed');\n  }\n}\n\n// 獲取團員的計算上下文\nexport function getMemberContext(member: any, tour_add_ons: any[] = [], tourPrice: number = 0): FormulaContext {\n  // 計算加購總金額\n  const addOnTotal = (member.addOns || []).reduce((sum: number, addOnId: string) => {\n    const addOn = tour_add_ons.find(a => a.id === addOnId);\n    return sum + (addOn?.price || 0);\n  }, 0);\n\n  // 基本費用（使用旅遊團價格或自定義基本費用）\n  const basePrice = member.basePrice || tourPrice;\n\n  return {\n    name: member.name || '',\n    nameEn: member.nameEn || '',\n    birthday: member.birthday || '',\n    age: member.age || 0,\n    gender: member.gender || '',\n    idNumber: member.idNumber || '',\n    passport_number: member.passport_number || '',\n    passportExpiry: member.passportExpiry || '',\n    reservationCode: member.reservationCode || '',\n    assignedRoom: member.assignedRoom || '',\n    basePrice: basePrice,\n    addOnTotal: addOnTotal,\n    totalPrice: basePrice + addOnTotal,\n    // 加入自定義欄位數據，讓其他欄位可以引用\n    ...Object.entries(member.customFields || {}).reduce((acc, [fieldId, value]) => {\n      // 如果值是數字，轉換為數字類型\n      const numValue = Number(value);\n      acc[fieldId] = isNaN(numValue) ? value : numValue;\n      return acc;\n    }, {} as Record<string, any>),\n  };\n}\n\n// 預設的公式範例\nexport const FORMULA_EXAMPLES = [\n  { name: '總費用', formula: '=基本費用+加購費用', description: '計算基本費用加上加購費用' },\n  { name: '折扣後費用', formula: '=總費用*0.9', description: '總費用打9折' },\n  { name: '成人費用', formula: '=年齡>=18?基本費用:基本費用*0.8', description: '成人全價，兒童8折' },\n];","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/init-passwords.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userStoreHelpers' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1589,1592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1589,1592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1934,1937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1934,1937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2936,2939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2936,2939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5920,5923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5920,5923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 初始化員工密碼\n * 用於為現有員工資料加入預設密碼\n */\n\nimport { useUserStore, userStoreHelpers } from '@/stores/user-store';\nimport { PasswordUtils } from '@/lib/password-utils';\nimport { localDB } from '@/lib/db';\nimport { generateUUID } from '@/lib/utils/uuid';\n\n// 引入正確的表名常數\nimport { TABLES } from '@/lib/db/schemas';\n\nexport async function initializeEmployeePasswords() {\n  console.log('🔐 開始初始化員工密碼...');\n\n  const userStore = useUserStore.getState();\n  const users = userStore.items;\n\n  if (users.length === 0) {\n    console.log('⚠️ 沒有找到員工資料');\n    \n    // 建立預設管理員帳號\n    const defaultAdminPassword = await PasswordUtils.hashPassword('admin123');\n    const adminUser = {\n      employee_number: 'admin',\n      english_name: 'Administrator',\n      display_name: '系統管理員',\n      chinese_name: '系統管理員',\n      password_hash: defaultAdminPassword,\n      must_change_password: true,\n      personal_info: {\n        national_id: 'A123456789',\n        birthday: '1990-01-01',\n        phone: '0912-345-678',\n        email: 'admin@venturo.com',\n        address: '台北市信義區',\n        emergency_contact: {\n          name: '緊急聯絡人',\n          relationship: '配偶',\n          phone: '0923-456-789'\n        }\n      },\n      job_info: {\n        hire_date: new Date().toISOString().split('T')[0],\n      },\n      salary_info: {\n        base_salary: 0,\n        allowances: [],\n        salary_history: []\n      },\n      permissions: ['admin'],\n      attendance: {\n        leave_records: [],\n        overtime_records: []\n      },\n      contracts: [],\n      status: 'active' as const\n    };\n\n    await userStore.create(adminUser as any);\n    console.log('✅ 已建立預設管理員帳號');\n    console.log('   帳號：admin');\n    console.log('   密碼：admin123');\n    console.log('   ⚠️ 請於首次登入後立即修改密碼！');\n\n    // 同步到 IndexedDB（僅在瀏覽器環境）\n    if (typeof window !== 'undefined' && 'indexedDB' in window) {\n      try {\n        await localDB.init(); // 確保資料庫已初始化\n        await localDB.put(TABLES.EMPLOYEES as any, {\n          ...adminUser,\n          id: generateUUID(),\n          created_at: new Date().toISOString()\n        });\n        console.log('✅ 已同步到 IndexedDB');\n      } catch (dbError) {\n        console.warn('⚠️ IndexedDB 儲存失敗，但本地 store 已更新:', dbError);\n      }\n    } else {\n      console.log('ℹ️ IndexedDB 不可用，僅更新本地 store');\n    }\n\n    return;\n  }\n\n  // 為現有員工設定預設密碼\n  let updatedCount = 0;\n  \n  for (const user of users) {\n    if (!user.password_hash) {\n      // 生成預設密碼\n      const defaultPassword = PasswordUtils.generateDefaultPassword(user.employee_number);\n      const hashedPassword = await PasswordUtils.hashPassword(defaultPassword);\n\n      // 更新員工資料\n      await userStore.update(user.id, {\n        password_hash: hashedPassword,\n        must_change_password: true,\n        last_password_change: new Date().toISOString()\n      });\n\n      // 同步到 IndexedDB（僅在瀏覽器環境）\n      if (typeof window !== 'undefined' && 'indexedDB' in window) {\n        try {\n          await localDB.put(TABLES.EMPLOYEES as any, {\n            ...user,\n            password_hash: hashedPassword,\n            must_change_password: true,\n            last_password_change: new Date().toISOString()\n          });\n        } catch (dbError) {\n          console.warn(`⚠️ IndexedDB 儲存失敗 (${user.employee_number}):`, dbError);\n        }\n      }\n\n      console.log(`✅ 已為 ${user.display_name} (${user.employee_number}) 設定預設密碼`);\n      console.log(`   預設密碼：${defaultPassword}`);\n      \n      updatedCount++;\n    }\n  }\n\n  if (updatedCount > 0) {\n    console.log(`\\n✅ 成功初始化 ${updatedCount} 位員工的密碼`);\n    console.log('⚠️ 請通知員工於首次登入後修改密碼');\n  } else {\n    console.log('ℹ️ 所有員工都已有密碼設定');\n  }\n}\n\n// 建立測試員工資料\nexport async function createTestEmployees() {\n  console.log('🧪 建立測試員工資料...');\n\n  const testEmployees = [\n    {\n      employee_number: 'john01',\n      english_name: 'John',\n      display_name: '約翰',\n      password: 'john123',\n      permissions: ['orders', 'quotes', 'customers']\n    },\n    {\n      employee_number: 'mary01',\n      english_name: 'Mary',\n      display_name: '瑪麗',\n      password: 'mary123',\n      permissions: ['finance', 'payments']\n    },\n    {\n      employee_number: 'peter01',\n      english_name: 'Peter',\n      display_name: '彼得',\n      password: 'peter123',\n      permissions: ['hr']\n    }\n  ];\n\n  const userStore = useUserStore.getState();\n\n  for (const emp of testEmployees) {\n    // 檢查是否已存在\n    const existing = userStore.items.find(u => u.employee_number === emp.employee_number);\n    if (existing) {\n      console.log(`⚠️ 員工 ${emp.employee_number} 已存在，跳過`);\n      continue;\n    }\n\n    // 加密密碼\n    const password_hash = await PasswordUtils.hashPassword(emp.password);\n\n    // 建立員工資料\n    const newEmployee = {\n      employee_number: emp.employee_number,\n      english_name: emp.english_name,\n      display_name: emp.display_name,\n      chinese_name: emp.display_name,\n      password_hash,\n      must_change_password: false, // 測試帳號不強制改密碼\n      personal_info: {\n        national_id: `TEST${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n        birthday: '1990-01-01',\n        phone: `09${Math.floor(Math.random() * 100000000).toString().padStart(8, '0')}`,\n        email: `${emp.employee_number}@venturo.com`,\n        address: '台北市',\n        emergency_contact: {\n          name: '緊急聯絡人',\n          relationship: '家人',\n          phone: '0900-000-000'\n        }\n      },\n      job_info: {\n        hire_date: new Date().toISOString().split('T')[0],\n      },\n      salary_info: {\n        base_salary: 50000,\n        allowances: [],\n        salary_history: []\n      },\n      permissions: emp.permissions,\n      attendance: {\n        leave_records: [],\n        overtime_records: []\n      },\n      contracts: [],\n      status: 'active' as const\n    };\n\n    await userStore.create(newEmployee);\n\n    // 同步到 IndexedDB（僅在瀏覽器環境）\n    if (typeof window !== 'undefined' && 'indexedDB' in window) {\n      try {\n        await localDB.init(); // 確保資料庫已初始化\n        await localDB.put(TABLES.EMPLOYEES as any, {\n          ...newEmployee,\n          id: generateUUID(),\n          created_at: new Date().toISOString()\n        });\n      } catch (dbError) {\n        console.warn(`⚠️ IndexedDB 儲存失敗 (${emp.employee_number}):`, dbError);\n      }\n    }\n\n    console.log(`✅ 已建立測試員工：${emp.display_name} (${emp.employee_number})`);\n    console.log(`   密碼：${emp.password}`);\n  }\n\n  console.log('\\n✅ 測試員工建立完成！');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LogLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Venturo 統一日誌系統\n *\n * 功能：\n * - 開發環境：顯示所有日誌\n * - 生產環境：只顯示 warn 和 error\n * - 為未來 Sentry 整合預留接口\n */\n\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogMeta {\n  [key: string]: unknown;\n}\n\nclass AppLogger {\n  private isDev = process.env.NODE_ENV === 'development';\n\n  /**\n   * 除錯訊息（僅開發環境）\n   */\n  debug(message: string, meta?: LogMeta) {\n    if (this.isDev) {\n      console.log(`🐛 [DEBUG] ${message}`, meta || '');\n    }\n  }\n\n  /**\n   * 一般訊息\n   */\n  info(message: string, meta?: LogMeta) {\n    if (this.isDev) {\n      console.log(`ℹ️ [INFO] ${message}`, meta || '');\n    }\n  }\n\n  /**\n   * 警告訊息\n   */\n  warn(message: string, meta?: LogMeta) {\n    console.warn(`⚠️ [WARN] ${message}`, meta || '');\n  }\n\n  /**\n   * 錯誤訊息\n   */\n  error(message: string, meta?: LogMeta) {\n    console.error(`❌ [ERROR] ${message}`, meta || '');\n\n    // 生產環境可整合 Sentry\n    if (!this.isDev && typeof window !== 'undefined') {\n      // TODO: 整合 Sentry\n      // Sentry.captureException(new Error(message), { extra: meta });\n    }\n  }\n}\n\nexport const logger = new AppLogger();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/newebpay/crypto.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1760,1763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1760,1763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2438,2441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2438,2441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2851,2854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2851,2854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3583,3586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3583,3586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 藍新金流旅行業代轉發票加密解密工具\n * 使用 AES-256-CBC 加密\n */\n\nimport crypto from 'crypto'\n\n// 藍新 API 設定\nexport const NEWEBPAY_CONFIG = {\n  // 測試環境\n  test: {\n    apiUrl: 'https://cwww.travelinvoice.com.tw',\n    merchantId: process.env.NEWEBPAY_TEST_MERCHANT_ID || '',\n    hashKey: process.env.NEWEBPAY_TEST_HASH_KEY || '',\n    hashIv: process.env.NEWEBPAY_TEST_HASH_IV || '',\n  },\n  // 正式環境\n  production: {\n    apiUrl: 'https://www.travelinvoice.com.tw',\n    merchantId: process.env.NEWEBPAY_MERCHANT_ID || '',\n    hashKey: process.env.NEWEBPAY_HASH_KEY || '',\n    hashIv: process.env.NEWEBPAY_HASH_IV || '',\n  },\n}\n\n/**\n * 取得目前環境設定\n */\nexport function getNewebpayConfig() {\n  const isProduction = process.env.NEWEBPAY_ENV === 'production'\n  return isProduction ? NEWEBPAY_CONFIG.production : NEWEBPAY_CONFIG.test\n}\n\n/**\n * AES-256-CBC 加密\n * @param data 要加密的資料\n * @param key HashKey\n * @param iv HashIV\n * @returns 加密後的 hex 字串\n */\nexport function aesEncrypt(data: string, key: string, iv: string): string {\n  const cipher = crypto.createCipheriv('aes-256-cbc', key, iv)\n  let encrypted = cipher.update(data, 'utf8', 'hex')\n  encrypted += cipher.final('hex')\n  return encrypted\n}\n\n/**\n * AES-256-CBC 解密\n * @param encryptedData 加密的資料 (hex)\n * @param key HashKey\n * @param iv HashIV\n * @returns 解密後的字串\n */\nexport function aesDecrypt(encryptedData: string, key: string, iv: string): string {\n  const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv)\n  let decrypted = decipher.update(encryptedData, 'hex', 'utf8')\n  decrypted += decipher.final('utf8')\n  return decrypted\n}\n\n/**\n * 產生 CheckCode (SHA256)\n * @param params 參數物件\n * @param hashKey HashKey\n * @param hashIv HashIV\n * @returns SHA256 雜湊值 (大寫)\n */\nexport function generateCheckCode(\n  params: Record<string, any>,\n  hashKey: string,\n  hashIv: string\n): string {\n  // 將參數轉為查詢字串格式\n  const queryString = Object.keys(params)\n    .sort()\n    .map((key) => {\n      const value = params[key]\n      return `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`\n    })\n    .join('&')\n\n  // 組合: HashIV + 查詢字串 + HashKey\n  const rawString = `${hashIv}${queryString}${hashKey}`\n\n  // SHA256 雜湊並轉大寫\n  const hash = crypto.createHash('sha256').update(rawString, 'utf8').digest('hex')\n  return hash.toUpperCase()\n}\n\n/**\n * 組合完整的加密 POST 資料\n * @param postData 要傳送的原始資料\n * @returns 加密後的 POST 資料物件 { MerchantID, PostData }\n */\nexport function createEncryptedPostData(postData: Record<string, any>) {\n  const config = getNewebpayConfig()\n\n  // 將資料轉為 JSON 字串\n  const jsonData = JSON.stringify(postData)\n\n  // AES 加密\n  const encryptedData = aesEncrypt(jsonData, config.hashKey, config.hashIv)\n\n  return {\n    MerchantID: config.merchantId,\n    PostData: encryptedData,\n  }\n}\n\n/**\n * 解密藍新回傳的資料\n * @param encryptedData 加密的回傳資料\n * @returns 解密後的物件\n */\nexport function decryptResponseData(encryptedData: string): any {\n  const config = getNewebpayConfig()\n  const decryptedString = aesDecrypt(encryptedData, config.hashKey, config.hashIv)\n  return JSON.parse(decryptedString)\n}\n\n/**\n * 產生代轉交易編號\n * @returns 格式: TRI-YYYYMMDD-XXXXX\n */\nexport function generateTransactionNo(): string {\n  const now = new Date()\n  const dateStr = now.toISOString().slice(0, 10).replace(/-/g, '')\n  const randomStr = Math.random().toString(36).substring(2, 7).toUpperCase()\n  const timestamp = now.getTime().toString().slice(-5)\n  return `TRI-${dateStr}-${timestamp}${randomStr}`\n}\n\n/**\n * 驗證藍新回傳的 CheckCode\n * @param responseData 回傳的資料\n * @param receivedCheckCode 收到的 CheckCode\n * @returns 是否驗證通過\n */\nexport function verifyCheckCode(\n  responseData: Record<string, any>,\n  receivedCheckCode: string\n): boolean {\n  const config = getNewebpayConfig()\n  const calculatedCheckCode = generateCheckCode(responseData, config.hashKey, config.hashIv)\n  return calculatedCheckCode === receivedCheckCode.toUpperCase()\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/password-utils.ts","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\[.","line":73,"column":26,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":73,"endColumn":27,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1609,1610],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1609,1609],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\/.","line":73,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":73,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1626,1627],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1626,1626],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import bcrypt from 'bcryptjs';\n\n/**\n * 密碼管理工具\n */\nexport class PasswordUtils {\n  /**\n   * 加密密碼\n   */\n  static async hashPassword(password: string): Promise<string> {\n    const salt = await bcrypt.genSalt(10);\n    return bcrypt.hash(password, salt);\n  }\n\n  /**\n   * 驗證密碼\n   */\n  static async verifyPassword(password: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(password, hash);\n  }\n\n  /**\n   * 生成預設密碼\n   * 格式：員工編號@當前年份\n   */\n  static generateDefaultPassword(employee_number: string): string {\n    const year = new Date().getFullYear();\n    return `${employee_number}@${year}`;\n  }\n\n  /**\n   * 生成隨機密碼\n   */\n  static generateRandomPassword(length: number = 8): string {\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%';\n    let password = '';\n    for (let i = 0; i < length; i++) {\n      password += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    return password;\n  }\n\n  /**\n   * 檢查密碼強度\n   */\n  static checkPasswordStrength(password: string): {\n    score: number;\n    message: string;\n    isValid: boolean;\n  } {\n    let score = 0;\n    const messages: string[] = [];\n\n    // 長度檢查\n    if (password.length >= 8) score += 1;\n    else messages.push('密碼至少需要 8 個字元');\n\n    if (password.length >= 12) score += 1;\n\n    // 包含小寫字母\n    if (/[a-z]/.test(password)) score += 1;\n    else messages.push('需要包含小寫字母');\n\n    // 包含大寫字母\n    if (/[A-Z]/.test(password)) score += 1;\n    else messages.push('需要包含大寫字母');\n\n    // 包含數字\n    if (/\\d/.test(password)) score += 1;\n    else messages.push('需要包含數字');\n\n    // 包含特殊字符\n    if (/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) score += 1;\n\n    // 評分\n    let strength = '弱';\n    let isValid = false;\n\n    if (score <= 2) {\n      strength = '弱';\n    } else if (score <= 4) {\n      strength = '中等';\n      isValid = true;\n    } else {\n      strength = '強';\n      isValid = true;\n    }\n\n    const finalMessage = messages.length > 0 \n      ? messages.join('、') \n      : `密碼強度：${strength}`;\n\n    return {\n      score,\n      message: finalMessage,\n      isValid\n    };\n  }\n\n  /**\n   * 檢查密碼是否過期（90天）\n   */\n  static isPasswordExpired(last_password_change?: string): boolean {\n    if (!last_password_change) return true;\n\n    const lastChange = new Date(last_password_change);\n    const now = new Date();\n    const daysDiff = Math.floor((now.getTime() - lastChange.getTime()) / (1000 * 60 * 60 * 24));\n\n    return daysDiff >= 90;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/performance/memory-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1347,1350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1347,1350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1423,1426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1423,1426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2567,2570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2567,2570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2609,2612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2609,2612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VENTURO 5.0 - 記憶體管理工具\n *\n * 核心概念：\n * - 自動清理未使用的快取\n * - 監控記憶體使用量\n * - 提供記憶體壓力警告\n * - 支援手動回收\n */\n\nimport { cacheStrategy } from '@/lib/cache/cache-strategy';\n\ninterface MemoryStats {\n  /** 使用的記憶體（MB） */\n  usedMemory: number;\n  /** 總記憶體限制（MB） */\n  totalMemory: number;\n  /** 使用率（%） */\n  usagePercent: number;\n  /** 是否處於記憶體壓力狀態 */\n  isUnderPressure: boolean;\n}\n\ninterface CleanupOptions {\n  /** 清理熱快取 */\n  clearHot?: boolean;\n  /** 清理溫快取 */\n  clearWarm?: boolean;\n  /** 強制清理（即使沒有壓力） */\n  force?: boolean;\n}\n\nclass MemoryManager {\n  private static instance: MemoryManager;\n  private cleanupTimer: NodeJS.Timeout | null = null;\n  private pressureThreshold = 0.8; // 80% 記憶體使用率視為壓力\n  private autoCleanupInterval = 5 * 60 * 1000; // 5 分鐘自動清理一次\n\n  private constructor() {\n    // 啟動自動清理\n    this.startAutoCleanup();\n\n    // 監聽頁面隱藏事件（用戶切換分頁時清理）\n    if (typeof window !== 'undefined') {\n      document.addEventListener('visibilitychange', () => {\n        if (document.hidden) {\n          this.cleanup({ clearHot: true });\n        }\n      });\n    }\n  }\n\n  static getInstance(): MemoryManager {\n    if (!MemoryManager.instance) {\n      MemoryManager.instance = new MemoryManager();\n    }\n    return MemoryManager.instance;\n  }\n\n  /**\n   * 獲取記憶體統計資訊\n   */\n  getMemoryStats(): MemoryStats | null {\n    if (typeof window === 'undefined' || !(performance as any).memory) {\n      return null;\n    }\n\n    const memory = (performance as any).memory;\n    const usedMemory = memory.usedJSHeapSize / 1024 / 1024; // 轉換為 MB\n    const totalMemory = memory.jsHeapSizeLimit / 1024 / 1024;\n    const usagePercent = (usedMemory / totalMemory) * 100;\n\n    return {\n      usedMemory: Math.round(usedMemory * 100) / 100,\n      totalMemory: Math.round(totalMemory * 100) / 100,\n      usagePercent: Math.round(usagePercent * 100) / 100,\n      isUnderPressure: usagePercent / 100 > this.pressureThreshold\n    };\n  }\n\n  /**\n   * 清理記憶體\n   */\n  async cleanup(options: CleanupOptions = {}): Promise<void> {\n    const { clearHot = false, clearWarm = false, force = false } = options;\n\n    // 檢查是否需要清理\n    if (!force) {\n      const stats = this.getMemoryStats();\n      if (!stats?.isUnderPressure) {\n        return; // 記憶體充足，不需清理\n      }\n    }\n\n    console.log('🧹 開始清理記憶體...');\n\n    // 清理熱快取（記憶體）\n    if (clearHot) {\n      await cacheStrategy.clear('hot');\n      console.log('  ✅ 清理熱快取');\n    }\n\n    // 清理溫快取（SessionStorage）\n    if (clearWarm) {\n      await cacheStrategy.clear('warm');\n      console.log('  ✅ 清理溫快取');\n    }\n\n    // 觸發垃圾回收（如果瀏覽器支援）\n    if (typeof window !== 'undefined' && (window as any).gc) {\n      try {\n        (window as any).gc();\n        console.log('  ✅ 觸發垃圾回收');\n      } catch {\n        // 忽略錯誤\n      }\n    }\n\n    const afterStats = this.getMemoryStats();\n    if (afterStats) {\n      console.log(`  📊 清理後記憶體使用: ${afterStats.usedMemory} MB (${afterStats.usagePercent}%)`);\n    }\n  }\n\n  /**\n   * 啟動自動清理\n   */\n  private startAutoCleanup(): void {\n    if (this.cleanupTimer) return;\n\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup({ clearHot: true });\n    }, this.autoCleanupInterval);\n  }\n\n  /**\n   * 停止自動清理\n   */\n  stopAutoCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n  }\n\n  /**\n   * 監控記憶體（開發模式）\n   */\n  startMonitoring(interval: number = 10000): void {\n    if (typeof window === 'undefined') return;\n\n    setInterval(() => {\n      const stats = this.getMemoryStats();\n      if (stats) {\n        const emoji = stats.isUnderPressure ? '⚠️' : '✅';\n        console.log(\n          `${emoji} 記憶體使用: ${stats.usedMemory} MB / ${stats.totalMemory} MB (${stats.usagePercent}%)`\n        );\n\n        if (stats.isUnderPressure) {\n          console.warn('⚠️ 記憶體壓力過高，建議清理');\n        }\n      }\n    }, interval);\n  }\n\n  /**\n   * 獲取快取統計\n   */\n  getCacheStats() {\n    return cacheStrategy.getStats();\n  }\n}\n\n// 匯出單例\nexport const memoryManager = MemoryManager.getInstance();\n\n// 匯出類型\nexport type { MemoryStats, CleanupOptions };\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/performance/performance-monitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VENTURO 5.0 - 效能監控組件\n *\n * 開發模式下顯示效能指標\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { memoryManager, type MemoryStats } from './memory-manager';\nimport { cacheStrategy } from '@/lib/cache/cache-strategy';\n\nexport function PerformanceMonitor() {\n  const [stats, setStats] = useState<MemoryStats | null>(null);\n  const [cacheStats, setCacheStats] = useState<any>(null);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    // 只在開發模式顯示\n    if (process.env.NODE_ENV !== 'development') return;\n\n    const interval = setInterval(() => {\n      setStats(memoryManager.getMemoryStats());\n      setCacheStats(cacheStrategy.getStats());\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'development') return null;\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-[9999]\">\n      {/* 切換按鈕 */}\n      <button\n        onClick={() => setIsVisible(!isVisible)}\n        className=\"mb-2 px-3 py-2 bg-black/80 text-white rounded-lg text-xs font-mono hover:bg-black/90 transition-colors\"\n      >\n        {isVisible ? '隱藏' : '顯示'} 效能\n      </button>\n\n      {/* 效能面板 */}\n      {isVisible && (\n        <div className=\"bg-black/90 text-white rounded-lg p-4 font-mono text-xs space-y-3 backdrop-blur-sm\">\n          {/* 記憶體使用 */}\n          <div>\n            <div className=\"font-bold mb-1\">記憶體使用</div>\n            {stats ? (\n              <>\n                <div className=\"flex items-center gap-2\">\n                  <span>{stats.isUnderPressure ? '⚠️' : '✅'}</span>\n                  <span>\n                    {stats.usedMemory} MB / {stats.totalMemory} MB\n                  </span>\n                </div>\n                <div className=\"mt-1\">\n                  <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full transition-all ${\n                        stats.isUnderPressure ? 'bg-red-500' : 'bg-green-500'\n                      }`}\n                      style={{ width: `${stats.usagePercent}%` }}\n                    />\n                  </div>\n                  <div className=\"text-right mt-1 text-gray-400\">\n                    {stats.usagePercent}%\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-gray-400\">無法取得記憶體資訊</div>\n            )}\n          </div>\n\n          {/* 快取統計 */}\n          <div>\n            <div className=\"font-bold mb-1\">快取統計</div>\n            {cacheStats ? (\n              <>\n                <div className=\"space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">熱快取 (記憶體):</span>\n                    <span>{cacheStats.hot.size} 項</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">溫快取 (Session):</span>\n                    <span>{cacheStats.warm.size} 項</span>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-gray-400\">載入中...</div>\n            )}\n          </div>\n\n          {/* 操作按鈕 */}\n          <div className=\"pt-2 border-t border-gray-700 space-y-2\">\n            <button\n              onClick={() => {\n                memoryManager.cleanup({ clearHot: true, force: true });\n                alert('已清理熱快取');\n              }}\n              className=\"w-full px-3 py-1.5 bg-yellow-600 hover:bg-yellow-700 rounded text-white transition-colors\"\n            >\n              清理熱快取\n            </button>\n            <button\n              onClick={() => {\n                memoryManager.cleanup({ clearHot: true, clearWarm: true, force: true });\n                alert('已清理所有快取');\n              }}\n              className=\"w-full px-3 py-1.5 bg-red-600 hover:bg-red-700 rounded text-white transition-colors\"\n            >\n              清理所有快取\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/store/lazy-store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3220,3223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3220,3223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5118,5121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5118,5121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6570,6573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6570,6573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VENTURO 5.0 - 按需載入 Store 基礎架構\n *\n * 核心概念：\n * - 不預先載入所有資料\n * - 支援分頁載入\n * - 自動整合三層快取\n * - 提供載入狀態追蹤\n */\n\nimport { cacheStrategy, type CacheKey } from '@/lib/cache/cache-strategy';\nimport { localDB } from '@/lib/db';\nimport { supabase } from '@/lib/supabase/client';\n\ninterface LazyLoadOptions {\n  /** 資料表名稱 */\n  table: string;\n  /** 快取 key 前綴 */\n  cachePrefix: string;\n  /** 預設每頁筆數 */\n  pageSize?: number;\n  /** 是否啟用快取 */\n  enableCache?: boolean;\n}\n\ninterface LoadState {\n  isLoading: boolean;\n  error: string | null;\n  lastUpdated: number | null;\n}\n\ninterface PaginatedData<T> {\n  data: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n  hasMore: boolean;\n}\n\n/**\n * 建立支援按需載入的 Store 基礎類別\n */\nexport class LazyStore<T extends { id: string }> {\n  private options: Required<LazyLoadOptions>;\n  private loadStates = new Map<string, LoadState>();\n\n  constructor(options: LazyLoadOptions) {\n    this.options = {\n      pageSize: 10,\n      enableCache: true,\n      ...options\n    };\n  }\n\n  /**\n   * 分頁載入資料\n   */\n  async fetchPage(\n    page: number = 1,\n    pageSize?: number\n  ): Promise<PaginatedData<T>> {\n    const actualPageSize = pageSize || this.options.pageSize;\n    const cacheKey = this.getCacheKey('page', `${page}-${actualPageSize}`);\n\n    // 1. 嘗試從快取讀取\n    if (this.options.enableCache) {\n      const cached = await cacheStrategy.get<PaginatedData<T>>(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    // 2. 從資料庫載入\n    this.setLoadState(cacheKey, { isLoading: true, error: null, lastUpdated: null });\n\n    try {\n      // 優先從 IndexedDB 讀取\n      const localData = await this.fetchFromIndexedDB(page, actualPageSize);\n\n      if (localData.data.length > 0) {\n        // 有本地資料，先返回\n        const result = localData;\n\n        // 快取到熱快取（記憶體）\n        if (this.options.enableCache) {\n          await cacheStrategy.set(cacheKey, result, { level: 'hot' });\n        }\n\n        this.setLoadState(cacheKey, {\n          isLoading: false,\n          error: null,\n          lastUpdated: Date.now()\n        });\n\n        // 背景同步 Supabase（不阻塞）\n        this.syncFromSupabase(page, actualPageSize, cacheKey);\n\n        return result;\n      }\n\n      // 沒有本地資料，從 Supabase 載入\n      const supabaseData = await this.fetchFromSupabase(page, actualPageSize);\n\n      // 快取到溫快取（跨頁面）\n      if (this.options.enableCache) {\n        await cacheStrategy.set(cacheKey, supabaseData, { level: 'warm' });\n      }\n\n      this.setLoadState(cacheKey, {\n        isLoading: false,\n        error: null,\n        lastUpdated: Date.now()\n      });\n\n      return supabaseData;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : '載入失敗';\n\n      this.setLoadState(cacheKey, {\n        isLoading: false,\n        error: errorMessage,\n        lastUpdated: null\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * 載入單筆資料\n   */\n  async fetchById(id: string): Promise<T | null> {\n    const cacheKey = this.getCacheKey('item', id);\n\n    // 1. 嘗試從快取讀取\n    if (this.options.enableCache) {\n      const cached = await cacheStrategy.get<T>(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    // 2. 從 IndexedDB 讀取\n    try {\n      const localItem = await localDB.read(this.options.table as any, id);\n      if (localItem) {\n        // 快取到熱快取\n        if (this.options.enableCache) {\n          await cacheStrategy.set(cacheKey, localItem, { level: 'hot' });\n        }\n        return localItem as T;\n      }\n    } catch (error) {\n      console.warn(`從 IndexedDB 讀取 ${id} 失敗`, error);\n    }\n\n    // 3. 從 Supabase 讀取\n    try {\n      const { data, error } = await supabase\n        .from(this.options.table)\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n\n      // 快取到溫快取\n      if (this.options.enableCache && data) {\n        await cacheStrategy.set(cacheKey, data, { level: 'warm' });\n      }\n\n      return data as T;\n    } catch (error) {\n      console.error(`從 Supabase 讀取 ${id} 失敗`, error);\n      return null;\n    }\n  }\n\n  /**\n   * 清除快取\n   */\n  async clearCache(key?: string): Promise<void> {\n    if (key) {\n      await cacheStrategy.delete(this.getCacheKey('custom', key));\n    } else {\n      // 清除所有相關快取\n      const stats = cacheStrategy.getStats();\n      const prefix = this.options.cachePrefix;\n\n      for (const key of [...stats.hot.keys, ...stats.warm.keys]) {\n        if (key.startsWith(prefix)) {\n          await cacheStrategy.delete(key);\n        }\n      }\n    }\n  }\n\n  /**\n   * 獲取載入狀態\n   */\n  getLoadState(key: string): LoadState {\n    return (\n      this.loadStates.get(key) || {\n        isLoading: false,\n        error: null,\n        lastUpdated: null\n      }\n    );\n  }\n\n  // ==================== 私有方法 ====================\n\n  private getCacheKey(type: string, id: string): CacheKey {\n    return `${this.options.cachePrefix}:${type}:${id}`;\n  }\n\n  private setLoadState(key: string, state: LoadState): void {\n    this.loadStates.set(key, state);\n  }\n\n  private async fetchFromIndexedDB(\n    page: number,\n    pageSize: number\n  ): Promise<PaginatedData<T>> {\n    try {\n      const allData = (await localDB.getAll(this.options.table as any)) as T[];\n      const start = (page - 1) * pageSize;\n      const end = start + pageSize;\n      const pageData = allData.slice(start, end);\n\n      return {\n        data: pageData,\n        total: allData.length,\n        page,\n        pageSize,\n        hasMore: end < allData.length\n      };\n    } catch {\n      return {\n        data: [],\n        total: 0,\n        page,\n        pageSize,\n        hasMore: false\n      };\n    }\n  }\n\n  private async fetchFromSupabase(\n    page: number,\n    pageSize: number\n  ): Promise<PaginatedData<T>> {\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize - 1;\n\n    const { data, error, count } = await supabase\n      .from(this.options.table)\n      .select('*', { count: 'exact' })\n      .range(start, end)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n\n    return {\n      data: (data as T[]) || [],\n      total: count || 0,\n      page,\n      pageSize,\n      hasMore: (count || 0) > end + 1\n    };\n  }\n\n  private async syncFromSupabase(\n    page: number,\n    pageSize: number,\n    cacheKey: string\n  ): Promise<void> {\n    try {\n      const supabaseData = await this.fetchFromSupabase(page, pageSize);\n\n      // 更新快取\n      if (this.options.enableCache) {\n        await cacheStrategy.set(cacheKey, supabaseData, { level: 'warm' });\n      }\n\n      // 同步到 IndexedDB\n      for (const item of supabaseData.data) {\n        await localDB.create(this.options.table as any, item);\n      }\n    } catch (error) {\n      console.warn('背景同步失敗', error);\n    }\n  }\n}\n\n// 匯出類型\nexport type { LazyLoadOptions, LoadState, PaginatedData };\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/supabase/api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[122,125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[122,125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[302,305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[302,305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[644,647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[644,647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[650,653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[650,653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1093,1096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1093,1096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1340,1343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1340,1343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2117,2120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2117,2120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2143,2146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2143,2146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2336,2339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2336,2339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2370,2373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2370,2373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2770,2773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2770,2773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4286,4289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4286,4289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4928,4931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4928,4931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4966,4969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4966,4969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5220,5223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5220,5223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5249,5252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5249,5252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5772,5775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5772,5775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5825,5828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5825,5828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5841,5844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5841,5844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6075,6078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6075,6078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6104,6107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6104,6107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7300,7303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7300,7303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7884,7887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7884,7887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8507,8510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8507,8510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8534,8537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8534,8537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8633,8636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8633,8636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8700,8703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8700,8703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9050,9053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9050,9053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9068,9071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9068,9071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from './client';\n\n/**\n * 將 camelCase 轉換為 snake_case\n * 並清理空字串（轉換為 null）\n */\nfunction toSnakeCase(obj: any): any {\n  if (obj === null || obj === undefined) return obj;\n  if (Array.isArray(obj)) return obj.map(toSnakeCase);\n  if (typeof obj !== 'object') return obj;\n\n  const result: any = {};\n  for (const key in obj) {\n    const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n    const value = obj[key];\n    // 將空字串轉換為 null（避免 PostgreSQL DATE/TIMESTAMPTZ 欄位錯誤）\n    result[snakeKey] = value === '' ? null : toSnakeCase(value);\n  }\n  return result;\n}\n\n/**\n * 將 snake_case 轉換為 camelCase\n */\nfunction toCamelCase(obj: any): any {\n  if (obj === null || obj === undefined) return obj;\n  if (Array.isArray(obj)) return obj.map(toCamelCase);\n  if (typeof obj !== 'object') return obj;\n\n  const result: any = {};\n  for (const key in obj) {\n    const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n    result[camelKey] = toCamelCase(obj[key]);\n  }\n  return result;\n}\n\nexport interface QueryOptions {\n  select?: string;\n  filters?: Record<string, any>;\n  orderBy?: { column: string; ascending?: boolean };\n  limit?: number;\n  offset?: number;\n}\n\n/**\n * Venturo API 統一服務層\n * 提供所有資料庫操作的抽象接口\n */\nexport class VenturoAPI {\n  /**\n   * 創建新記錄\n   */\n  static async create<T = any>(table: string, data: any): Promise<T> {\n    try {\n      // 將 camelCase 轉換為 snake_case\n      const snakeData = toSnakeCase(data);\n\n      const { data: result, error } = await supabase\n        .from(table)\n        .insert(snakeData)\n        .select()\n        .single();\n\n      if (error) {\n        console.error(`❌ Create error in ${table}:`, {\n          message: error.message,\n          details: error.details,\n          hint: error.hint,\n          code: error.code,\n          data: snakeData\n        });\n        throw new Error(`創建失敗: ${error.message}`);\n      }\n\n      // 將回傳的 snake_case 轉換為 camelCase\n      return toCamelCase(result) as T;\n    } catch (error) {\n      console.error(`API Create Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 批量創建記錄\n   */\n  static async createMany<T = any>(table: string, data: any[]): Promise<T[]> {\n    try {\n      // 將 camelCase 轉換為 snake_case\n      const snakeData = data.map(toSnakeCase);\n\n      const { data: result, error } = await supabase\n        .from(table as any)\n        .insert(snakeData as any)\n        .select();\n\n      if (error) {\n        console.error(`CreateMany error in ${table}:`, error);\n        throw new Error(`批量創建失敗: ${error.message}`);\n      }\n\n      // 將回傳的 snake_case 轉換為 camelCase\n      return toCamelCase(result) as T[];\n    } catch (error) {\n      console.error(`API CreateMany Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 查詢記錄\n   */\n  static async read<T = any>(table: string, options: QueryOptions = {}): Promise<T[]> {\n    try {\n      let query = supabase.from(table).select(options.select || '*');\n\n      // 添加過濾條件 (將 camelCase key 轉為 snake_case)\n      if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value]) => {\n          const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n          if (Array.isArray(value)) {\n            query = query.in(snakeKey, value);\n          } else if (value !== null && value !== undefined) {\n            query = query.eq(snakeKey, value);\n          }\n        });\n      }\n\n      // 排序 (將 camelCase column 轉為 snake_case)\n      if (options.orderBy) {\n        const snakeColumn = options.orderBy.column.replace(/([A-Z])/g, '_$1').toLowerCase();\n        query = query.order(snakeColumn, {\n          ascending: options.orderBy.ascending ?? true\n        });\n      }\n\n      // 分頁\n      if (options.limit) {\n        query = query.limit(options.limit);\n      }\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error(`Read error in ${table}:`, error);\n        throw new Error(`查詢失敗: ${error.message}`);\n      }\n\n      // 將回傳的 snake_case 轉換為 camelCase\n      return toCamelCase(data || []) as T[];\n    } catch (error) {\n      console.error(`API Read Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 根據 ID 查詢單筆記錄\n   */\n  static async readById<T = any>(table: string, id: string): Promise<T | null> {\n    try {\n      const { data, error } = await supabase\n        .from(table)\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null; // 記錄不存在\n        }\n        console.error(`ReadById error in ${table}:`, error);\n        throw new Error(`查詢失敗: ${error.message}`);\n      }\n\n      // 將回傳的 snake_case 轉換為 camelCase\n      return toCamelCase(data) as T;\n    } catch (error) {\n      console.error(`API ReadById Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 更新記錄\n   */\n  static async update<T = any>(table: string, id: string, data: any): Promise<T> {\n    try {\n      // 將 camelCase 轉換為 snake_case\n      const snakeData = toSnakeCase(data);\n      // 添加更新時間\n      const updateData = {\n        ...snakeData,\n        updated_at: new Date().toISOString()\n      };\n\n      const queryBuilder: any = supabase.from(table as any);\n      const { data: result, error } = await queryBuilder\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) {\n        console.error(`Update error in ${table}:`, error);\n        throw new Error(`更新失敗: ${error.message}`);\n      }\n\n      // 將回傳的 snake_case 轉換為 camelCase\n      return toCamelCase(result) as T;\n    } catch (error) {\n      console.error(`API Update Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 條件更新記錄\n   */\n  static async updateWhere<T = any>(\n    table: string,\n    filters: Record<string, any>,\n    data: any\n  ): Promise<T[]> {\n    try {\n      // 將 camelCase 轉換為 snake_case\n      const snakeData = toSnakeCase(data);\n      const updateData = {\n        ...snakeData,\n        updated_at: new Date().toISOString()\n      };\n\n      let query: any = supabase.from(table as any);\n      query = query.update(updateData);\n\n      // 過濾條件也轉換\n      Object.entries(filters).forEach(([key, value]) => {\n        const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n        query = query.eq(snakeKey, value);\n      });\n\n      const { data: result, error } = await query.select();\n\n      if (error) {\n        console.error(`UpdateWhere error in ${table}:`, error);\n        throw new Error(`條件更新失敗: ${error.message}`);\n      }\n\n      // 將回傳的 snake_case 轉換為 camelCase\n      return toCamelCase(result || []) as T[];\n    } catch (error) {\n      console.error(`API UpdateWhere Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 刪除記錄\n   */\n  static async delete(table: string, id: string): Promise<boolean> {\n    try {\n      const { error } = await supabase\n        .from(table)\n        .delete()\n        .eq('id', id);\n\n      if (error) {\n        console.error(`Delete error in ${table}:`, error);\n        throw new Error(`刪除失敗: ${error.message}`);\n      }\n\n      return true;\n    } catch (error) {\n      console.error(`API Delete Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 條件刪除記錄\n   */\n  static async deleteWhere(table: string, filters: Record<string, any>): Promise<boolean> {\n    try {\n      let query = supabase.from(table).delete();\n\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n\n      const { error } = await query;\n\n      if (error) {\n        console.error(`DeleteWhere error in ${table}:`, error);\n        throw new Error(`條件刪除失敗: ${error.message}`);\n      }\n\n      return true;\n    } catch (error) {\n      console.error(`API DeleteWhere Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 計數查詢\n   */\n  static async count(table: string, filters?: Record<string, any>): Promise<number> {\n    try {\n      let query = supabase.from(table).select('*', { count: 'exact', head: true });\n\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          query = query.eq(key, value);\n        });\n      }\n\n      const { count, error } = await query;\n\n      if (error) {\n        console.error(`Count error in ${table}:`, error);\n        throw new Error(`計數失敗: ${error.message}`);\n      }\n\n      return count || 0;\n    } catch (error) {\n      console.error(`API Count Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 執行原生 SQL 查詢\n   */\n  static async query<T = any>(sql: string, params?: any[]): Promise<T[]> {\n    try {\n      const { data, error } = await supabase.rpc('execute_sql' as any, {\n        query: sql,\n        params: params || []\n      } as any);\n\n      if (error) {\n        console.error(`SQL Query error:`, error);\n        throw new Error(`SQL 查詢失敗: ${error.message}`);\n      }\n\n      return (data || []) as T[];\n    } catch (error) {\n      console.error(`API Query Error:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 事務處理\n   */\n  static async transaction(operations: (() => Promise<any>)[]): Promise<any[]> {\n    const results = [];\n\n    for (const operation of operations) {\n      try {\n        const result = await operation();\n        results.push(result);\n      } catch (error) {\n        // 如果任何操作失敗，拋出錯誤（簡單的事務處理）\n        console.error('Transaction failed:', error);\n        throw new Error(`事務處理失敗: ${error instanceof Error ? error.message : '未知錯誤'}`);\n      }\n    }\n\n    return results;\n  }\n}\n\n// 導出 Supabase 客戶端供特殊需求使用\nexport { supabase };","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/supabase/client.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupabaseClient' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient, SupabaseClient } from '@supabase/supabase-js'\nimport { Database } from './types'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key'\n\n// 簡單的單例模式，避免複雜的 Proxy\n// 🔧 新增：fetch timeout 防止請求卡住\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false,\n    detectSessionInUrl: false\n  },\n  global: {\n    fetch: (url, options = {}) => {\n      // 60 秒超時，給本地網路更多時間\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 60000);\n\n      return fetch(url, {\n        ...options,\n        signal: controller.signal,\n      }).finally(() => clearTimeout(timeoutId));\n    },\n  },\n})\n\n// 測試連接\nexport async function testSupabaseConnection() {\n  try {\n    const { data, error } = await supabase.from('employees').select('count').limit(1);\n\n    if (error) {\n      console.error('❌ Supabase 連接失敗:', error.message);\n      return { success: false, error: error.message };\n    }\n\n    console.log('✅ Supabase 連接成功！');\n    return { success: true, data };\n  } catch (err) {\n    console.error('❌ Supabase 連接錯誤:', err);\n    return { success: false, error: String(err) };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/supabase/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[141,144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[141,144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[179,182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[179,182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[283,286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[283,286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[330,333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[330,333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[411,414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[411,414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supabase 型別輔助函數\n * 用於處理自動生成型別的問題\n */\n\n/**\n * 安全的 insert 輔助函數\n * 解決 Supabase insert 型別推斷為 never 的問題\n */\nexport function safeInsert<T = any>(data: T): any {\n  return data as any;\n}\n\n/**\n * 安全的 update 輔助函數\n * 解決 Supabase update 型別推斷為 never 的問題\n */\nexport function safeUpdate<T = any>(data: Partial<T>): any {\n  return data as any;\n}\n\n/**\n * 安全的資料讀取\n * 處理 Supabase 查詢結果的型別問題\n */\nexport function safeData<T = any>(data: unknown): T {\n  return data as T;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/supabase/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from './client';\n\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface UploadResult {\n  url: string;\n  path: string;\n  fileName: string;\n}\n\n/**\n * 上傳檔案到 Supabase Storage\n * @param file 要上傳的檔案\n * @param bucket Storage bucket 名稱（預設：'workspace-files'）\n * @param folder 資料夾路徑（選填）\n * @param onProgress 上傳進度回調\n * @returns 上傳結果包含檔案 URL 和路徑\n */\nexport async function uploadFile(\n  file: File,\n  bucket: string = 'workspace-files',\n  folder?: string,\n  onProgress?: (progress: UploadProgress) => void\n): Promise<UploadResult> {\n  try {\n    // 生成唯一檔名 (避免檔名衝突)\n    const timestamp = Date.now();\n    const randomStr = Math.random().toString(36).substring(2, 8);\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${timestamp}_${randomStr}.${fileExt}`;\n\n    // 組合完整路徑\n    const file_path = folder ? `${folder}/${fileName}` : fileName;\n\n    // 模擬進度更新 (Supabase JS 客戶端不直接支援進度追蹤)\n    if (onProgress) {\n      onProgress({ loaded: 0, total: file.size, percentage: 0 });\n    }\n\n    // 上傳檔案\n    // cacheControl: 快取時間（秒）\n    // 3600 = 1小時, 86400 = 1天, 2592000 = 30天, 7776000 = 90天\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(file_path, file, {\n        cacheControl: '7776000', // 90 天快取\n        upsert: false\n      });\n\n    if (error) {\n      throw new Error(`檔案上傳失敗: ${error.message}`);\n    }\n\n    // 更新進度為完成\n    if (onProgress) {\n      onProgress({ loaded: file.size, total: file.size, percentage: 100 });\n    }\n\n    // 獲取公開 URL\n    const { data: urlData } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(file_path);\n\n    return {\n      url: urlData.publicUrl,\n      path: file_path,\n      fileName: file.name\n    };\n  } catch (error) {\n    console.error('Upload file error:', error);\n    throw error;\n  }\n}\n\n/**\n * 批次上傳多個檔案\n * @param files 要上傳的檔案陣列\n * @param bucket Storage bucket 名稱\n * @param folder 資料夾路徑\n * @param onProgress 每個檔案的上傳進度回調\n * @returns 上傳結果陣列\n */\nexport async function uploadFiles(\n  files: File[],\n  bucket: string = 'workspace-files',\n  folder?: string,\n  onProgress?: (fileIndex: number, progress: UploadProgress) => void\n): Promise<UploadResult[]> {\n  const results: UploadResult[] = [];\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    const result = await uploadFile(\n      file,\n      bucket,\n      folder,\n      onProgress ? (progress) => onProgress(i, progress) : undefined\n    );\n    results.push(result);\n  }\n\n  return results;\n}\n\n/**\n * 刪除檔案\n * @param path 檔案路徑\n * @param bucket Storage bucket 名稱\n */\nexport async function deleteFile(\n  path: string,\n  bucket: string = 'workspace-files'\n): Promise<void> {\n  try {\n    const { error } = await supabase.storage\n      .from(bucket)\n      .remove([path]);\n\n    if (error) {\n      throw new Error(`檔案刪除失敗: ${error.message}`);\n    }\n  } catch (error) {\n    console.error('Delete file error:', error);\n    throw error;\n  }\n}\n\n/**\n * 下載檔案\n * @param path 檔案路徑\n * @param bucket Storage bucket 名稱\n * @param fileName 下載時的檔案名稱\n */\nexport async function downloadFile(\n  path: string,\n  bucket: string = 'workspace-files',\n  fileName?: string\n): Promise<void> {\n  try {\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .download(path);\n\n    if (error) {\n      throw new Error(`檔案下載失敗: ${error.message}`);\n    }\n\n    // 創建下載連結\n    const url = URL.createObjectURL(data);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName || path.split('/').pop() || 'download';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Download file error:', error);\n    throw error;\n  }\n}\n\n/**\n * 獲取檔案的公開 URL\n * @param path 檔案路徑\n * @param bucket Storage bucket 名稱\n * @returns 公開 URL\n */\nexport function getPublicUrl(\n  path: string,\n  bucket: string = 'workspace-files'\n): string {\n  const { data } = supabase.storage\n    .from(bucket)\n    .getPublicUrl(path);\n\n  return data.publicUrl;\n}\n\n/**\n * 列出資料夾中的檔案\n * @param folder 資料夾路徑\n * @param bucket Storage bucket 名稱\n */\nexport async function listFiles(\n  folder?: string,\n  bucket: string = 'workspace-files'\n) {\n  try {\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .list(folder, {\n        limit: 100,\n        offset: 0,\n        sortBy: { column: 'created_at', order: 'desc' }\n      });\n\n    if (error) {\n      throw new Error(`列出檔案失敗: ${error.message}`);\n    }\n\n    return data;\n  } catch (error) {\n    console.error('List files error:', error);\n    throw error;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/sync/background-sync-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1724,1727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1724,1727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2062,2065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2062,2065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2641,2644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2641,2644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2832,2835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2832,2835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2936,2939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2936,2939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3398,3401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3398,3401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3830,3833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3830,3833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4814,4817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4814,4817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4999,5002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4999,5002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5481,5484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5481,5484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5819,5822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5819,5822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6394,6397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6394,6397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6807,6810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6807,6810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7111,7114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7111,7114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7646,7649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7646,7649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7960,7963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7960,7963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 背景同步服務\n *\n * 負責處理離線時的資料同步，包括：\n * 1. TBC 編號轉換（離線建立的項目）\n * 2. 待同步的新增/修改項目\n * 3. 待刪除的項目\n *\n * 架構：同步邏輯與資料讀取分離\n */\n\nimport { supabase } from '@/lib/supabase/client';\nimport { localDB } from '@/lib/db';\nimport { TABLES, TableName } from '@/lib/db/schemas';\nimport { logger } from '@/lib/utils/logger';\n\nexport class BackgroundSyncService {\n  private syncInProgress: Set<string> = new Set();\n\n  /**\n   * 同步單一表格的所有待處理項目\n   */\n  async syncTable(tableName: TableName): Promise<void> {\n    // 防止重複同步\n    if (this.syncInProgress.has(tableName)) {\n      logger.log(`⏳ [${tableName}] 同步進行中，跳過`);\n      return;\n    }\n\n    try {\n      this.syncInProgress.add(tableName);\n      logger.log(`🔄 [${tableName}] 開始背景同步...`);\n\n      // 1. 同步 TBC 編號轉換\n      await this.syncTbcCodes(tableName);\n\n      // 2. 同步待上傳項目\n      await this.syncPendingUpserts(tableName);\n\n      // 3. 同步待刪除項目\n      await this.syncPendingDeletes(tableName);\n\n      logger.log(`✅ [${tableName}] 背景同步完成`);\n    } catch (error) {\n      logger.error(`❌ [${tableName}] 背景同步失敗:`, error);\n      // 不拋出錯誤，靜默失敗\n    } finally {\n      this.syncInProgress.delete(tableName);\n    }\n  }\n\n  /**\n   * 同步所有表格\n   */\n  async syncAllTables(): Promise<void> {\n    const tables = Object.values(TABLES);\n\n    logger.log('🌍 開始同步所有表格...');\n\n    // 並行同步所有表格\n    await Promise.allSettled(\n      tables.map(tableName => this.syncTable(tableName))\n    );\n\n    logger.log('✅ 所有表格同步完成');\n  }\n\n  /**\n   * 1. 同步 TBC 編號轉換\n   *\n   * 將離線建立的項目（TBC 編號）轉換為正式編號\n   */\n  private async syncTbcCodes(tableName: TableName): Promise<void> {\n    try {\n      const allLocalItems = await localDB.getAll(tableName);\n      const tbcItems = allLocalItems.filter((item: unknown) => {\n        const typedItem = item as any;\n        // TODO: 軟刪除機制需要重新設計（目前暫時移除 _deleted 過濾）\n        return typedItem.code && typedItem.code.endsWith('TBC');\n      });\n\n      if (tbcItems.length === 0) return;\n\n      logger.log(`🔧 [${tableName}] 發現 ${tbcItems.length} 筆 TBC 編號，準備轉換...`);\n\n      for (const item of tbcItems) {\n        try {\n          const typedItem = item as any;\n          const itemData = { ...typedItem };\n          delete itemData.code; // 移除 TBC code\n\n          // 上傳到 Supabase（會自動生成正式編號）\n          // @ts-ignore\n          const { data: supabaseData, error } = await supabase.from(tableName).insert([itemData]).select().single();\n\n          if (error) throw error;\n          if (!supabaseData) throw new Error('No data returned from insert');\n\n          // 更新 IndexedDB（用新的正式編號）\n          await localDB.delete(tableName, typedItem.id);\n          // @ts-ignore\n          await localDB.put(tableName, {\n            ...(supabaseData as any),\n            _needs_sync: false,\n            _synced_at: new Date().toISOString()\n          });\n\n          logger.log(`✅ [${tableName}] TBC 編號已轉換: ${typedItem.code} → ${(supabaseData as any).code}`);\n        } catch (error) {\n          logger.error(`❌ [${tableName}] TBC 編號轉換失敗:`, (item as any).code, error);\n        }\n      }\n    } catch (error) {\n      logger.error(`❌ [${tableName}] syncTbcCodes 失敗:`, error);\n    }\n  }\n\n  /**\n   * 2. 同步待上傳項目（新增/修改）\n   *\n   * 同步標記為 sync_status: 'pending' 的項目\n   */\n  private async syncPendingUpserts(tableName: TableName): Promise<void> {\n    try {\n      const allLocalItems = await localDB.getAll(tableName);\n      const pendingUpserts = allLocalItems.filter((item: unknown) => {\n        const typedItem = item as any;\n        // 過濾：待同步 且 不是 TBC 編號 且 未軟刪除\n        return typedItem._needs_sync === true &&\n               !(typedItem.code && typedItem.code.endsWith('TBC')) &&\n               !typedItem._deleted;\n      });\n\n      if (pendingUpserts.length === 0) return;\n\n      logger.log(`📤 [${tableName}] 發現 ${pendingUpserts.length} 筆待同步項目，開始上傳...`);\n\n      for (const item of pendingUpserts) {\n        try {\n          const typedItem = item as any;\n          // 移除同步標記欄位\n          const { _needs_sync, _synced_at, _deleted, temp_code, ...syncData } = typedItem;\n\n          // 檢查是否已存在（update）或新建（insert）\n          const { data: existing } = await supabase\n            .from(tableName)\n            .select('id')\n            .eq('id', typedItem.id)\n            .single();\n\n          if (existing) {\n            // 更新\n            // @ts-ignore\n            const { error } = await supabase.from(tableName).update(syncData).eq('id', typedItem.id);\n\n            if (error) throw error;\n            logger.log(`✅ [${tableName}] 更新成功: ${typedItem.id}`);\n          } else {\n            // 新增\n            // @ts-ignore\n            const { error } = await supabase.from(tableName).insert([syncData]);\n\n            if (error) throw error;\n            logger.log(`✅ [${tableName}] 新增成功: ${typedItem.id}`);\n          }\n\n          // 更新 IndexedDB（標記為已同步）\n          // @ts-ignore\n          await localDB.put(tableName, {\n            ...(item as any),\n            _needs_sync: false,\n            _synced_at: new Date().toISOString()\n          });\n        } catch (error) {\n          logger.error(`❌ [${tableName}] 同步失敗:`, (item as any).id, error);\n        }\n      }\n    } catch (error) {\n      logger.error(`❌ [${tableName}] syncPendingUpserts 失敗:`, error);\n    }\n  }\n\n  /**\n   * 3. 同步待刪除項目\n   *\n   * 處理 syncQueue 表中的刪除操作\n   */\n  private async syncPendingDeletes(tableName: TableName): Promise<void> {\n    try {\n      // 從 syncQueue 表中取得該表的刪除操作\n      const allQueueItems = await localDB.getAll('syncQueue');\n      const pendingDeletes = allQueueItems.filter((item: unknown) => {\n        const typedItem = item as any;\n        return typedItem.table_name === tableName && typedItem.operation === 'delete';\n      });\n\n      if (pendingDeletes.length === 0) return;\n\n      logger.log(`🗑️ [${tableName}] 發現 ${pendingDeletes.length} 筆待刪除項目，開始刪除...`);\n\n      for (const queueItem of pendingDeletes) {\n        try {\n          const typedItem = queueItem as any;\n          // 從 Supabase 刪除\n          const { error } = await supabase\n            .from(tableName)\n            .delete()\n            .eq('id', typedItem.record_id);\n\n          // 刪除成功或資料已不存在，清除隊列記錄\n          await localDB.delete('syncQueue', typedItem.id);\n\n          if (error) {\n            logger.warn(`⚠️ [${tableName}] Supabase 刪除失敗（已清除隊列）:`, typedItem.record_id, error);\n          } else {\n            logger.log(`✅ [${tableName}] 刪除成功: ${typedItem.record_id}`);\n          }\n        } catch (error) {\n          logger.error(`❌ [${tableName}] 刪除失敗:`, (queueItem as any).record_id, error);\n        }\n      }\n    } catch (error) {\n      logger.error(`❌ [${tableName}] syncPendingDeletes 失敗:`, error);\n    }\n  }\n\n  /**\n   * 檢查是否有待同步項目\n   */\n  async hasPendingSync(tableName: TableName): Promise<boolean> {\n    try {\n      const allLocalItems = await localDB.getAll(tableName);\n      const hasLocalPending = allLocalItems.some((item: unknown) => {\n        const typedItem = item as any;\n        return typedItem._needs_sync === true || (typedItem.code && typedItem.code.endsWith('TBC'));\n      });\n\n      // 檢查是否有刪除隊列\n      const allQueueItems = await localDB.getAll('syncQueue');\n      const hasDeletePending = allQueueItems.some((item: unknown) => {\n        const typedItem = item as any;\n        return typedItem.table_name === tableName && typedItem.operation === 'delete';\n      });\n\n      return hasLocalPending || hasDeletePending;\n    } catch (error) {\n      logger.error(`❌ [${tableName}] 檢查待同步項目失敗:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 取得待同步項目數量\n   */\n  async getPendingCount(tableName: TableName): Promise<number> {\n    try {\n      const allLocalItems = await localDB.getAll(tableName);\n      const localPendingCount = allLocalItems.filter((item: unknown) => {\n        const typedItem = item as any;\n        return typedItem._needs_sync === true || (typedItem.code && typedItem.code.endsWith('TBC'));\n      }).length;\n\n      // 計算刪除隊列數量\n      const allQueueItems = await localDB.getAll('syncQueue');\n      const deletePendingCount = allQueueItems.filter((item: unknown) => {\n        const typedItem = item as any;\n        return typedItem.table_name === tableName && typedItem.operation === 'delete';\n      }).length;\n\n      return localPendingCount + deletePendingCount;\n    } catch (error) {\n      logger.error(`❌ [${tableName}] 取得待同步數量失敗:`, error);\n      return 0;\n    }\n  }\n}\n\n// 單例模式\nexport const backgroundSyncService = new BackgroundSyncService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/sync/network-monitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/sync/sync-status-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[444,447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[444,447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":23,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 同步狀態服務（FastIn 架構版本）\n * 提供針對單一表的同步狀態檢查\n */\n\nimport { localDB, type TableName } from '@/lib/db';\nimport { TABLES } from '@/lib/db/schemas';\nimport { useState, useCallback } from 'react';\n\n/**\n * 檢查指定表的待同步項目數量\n * @param tableName - 表名稱\n * @returns 待同步項目數量\n */\nexport async function checkPendingCount(tableName: TableName): Promise<number> {\n  try {\n    const items = await localDB.getAll(tableName);\n    const pending = items.filter((item: any) =>\n      item._needs_sync === true ||\n      (item.code && item.code.endsWith('TBC'))\n    );\n    return pending.length;\n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * 檢查當前是否在線\n */\nexport function isOnline(): boolean {\n  return typeof navigator !== 'undefined' ? navigator.onLine : true;\n}\n\n/**\n * 同步狀態 Hook\n * 用於 React 組件中獲取同步狀態\n */\nexport function useSyncStatus() {\n  const [pendingCount, setPendingCount] = useState(0);\n  const [online, setOnline] = useState(true);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n\n  const updateStatus = useCallback(async () => {\n    setOnline(isOnline());\n\n    try {\n      // 檢查所有表的待同步數量（動態讀取 TABLES）\n      const tables = Object.values(TABLES);\n      let total = 0;\n      for (const table of tables) {\n        const count = await checkPendingCount(table);\n        total += count;\n      }\n      setPendingCount(total);\n      setLastSyncTime(new Date());\n    } catch (error) {\n      console.error('更新同步狀態失敗:', error);\n    }\n  }, []);\n\n  return {\n    pendingCount,\n    isOnline: online,\n    lastSyncTime,\n    updateStatus\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/task-templates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/template-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[673,676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[673,676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[807,810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[807,810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[942,945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[942,945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Safe Logger for SSR\n * 防止 Next.js SSR 時的 console 錯誤\n * 使用動態引用避免 Turbopack 靜態分析錯誤\n */\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isBrowser = typeof window !== 'undefined';\n\n// 動態獲取 console，避免 SSR 編譯時的靜態分析\nconst getConsole = () => {\n  if (!isBrowser) return null;\n  return typeof window !== 'undefined' ? window.console : null;\n};\n\nexport const logger = {\n  log: (...args: any[]) => {\n    if (isDevelopment && isBrowser) {\n      const c = getConsole();\n      c?.log(...args);\n    }\n  },\n\n  error: (...args: any[]) => {\n    if (isDevelopment && isBrowser) {\n      const c = getConsole();\n      c?.error(...args);\n    }\n  },\n\n  warn: (...args: any[]) => {\n    if (isDevelopment && isBrowser) {\n      const c = getConsole();\n      c?.warn(...args);\n    }\n  },\n\n  info: (...args: any[]) => {\n    if (isDevelopment && isBrowser) {\n      const c = getConsole();\n      c?.info(...args);\n    }\n  },\n\n  debug: (...args: any[]) => {\n    if (isDevelopment && isBrowser) {\n      const c = getConsole();\n      c?.debug(...args);\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/utils/text.ts","messages":[{"ruleId":"no-irregular-whitespace","severity":1,"message":"Irregular whitespace not allowed.","line":19,"column":15,"nodeType":"Program","messageId":"noIrregularWhitespace","endLine":19,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 全形轉半形工具函數\n * 自動將全形字符（數字、英文、符號）轉換為半形\n */\n\n/**\n * 將全形字符轉換為半形\n * @param str 輸入字串\n * @returns 轉換後的半形字串\n */\nexport function toHalfWidth(str: string): string {\n  if (!str) return str;\n\n  return str.replace(/[！-～]/g, (char) => {\n    // 全形字符範圍：！(0xFF01) 到 ～(0xFF5E)\n    // 轉換為半形：!(0x0021) 到 ~(0x007E)\n    const code = char.charCodeAt(0);\n    return String.fromCharCode(code - 0xFEE0);\n  }).replace(/　/g, ' '); // 全形空格轉半形空格\n}\n\n/**\n * React Input onChange 事件包裝器\n * 自動將全形轉換為半形\n */\nexport function withHalfWidthConversion<T extends HTMLInputElement | HTMLTextAreaElement>(\n  originalOnChange?: React.ChangeEventHandler<T>\n): React.ChangeEventHandler<T> {\n  return (e) => {\n    // 轉換為半形\n    const convertedValue = toHalfWidth(e.target.value);\n\n    // 如果值有改變，更新 input 的值\n    if (convertedValue !== e.target.value) {\n      e.target.value = convertedValue;\n    }\n\n    // 呼叫原本的 onChange\n    if (originalOnChange) {\n      originalOnChange(e);\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/lib/utils/uuid.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/services/auth-service-v5.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1165,1168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1165,1168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1769,1772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1769,1772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 認證服務 v5 - Supabase 整合版本\n */\n\nimport { supabase } from '@/lib/supabase/client';\nimport type { User } from '@/stores/types';\n\nexport interface LoginResult {\n  success: boolean;\n  message?: string;\n  user?: User;\n  usedFallback?: boolean;\n}\n\nexport class AuthServiceV5 {\n  /**\n   * 登入驗證（Supabase）\n   */\n  static async login(username: string, password: string): Promise<LoginResult> {\n    try {\n      console.log('🔐 登入驗證：', username);\n\n      // 固定預設密碼\n      const DEFAULT_PASSWORD = 'Venturo2025!';\n\n      if (password !== DEFAULT_PASSWORD) {\n        return {\n          success: false,\n          message: '密碼錯誤'\n        };\n      }\n\n      // 從 API 查詢使用者（會自動路由到 SQLite）\n      const { data: users, error } = await supabase\n        .from('employees')\n        .select('*')\n        .eq('employee_number', username);\n\n      if (error) {\n        console.error('❌ 查詢錯誤:', error);\n        return {\n          success: false,\n          message: '系統錯誤，請稍後再試'\n        };\n      }\n\n      const user = users?.[0] as User | undefined;\n\n      if (!user) {\n        return {\n          success: false,\n          message: '帳號不存在'\n        };\n      }\n\n      // 檢查狀態\n      if (!(user as any).is_active || user.status === 'terminated') {\n        return {\n          success: false,\n          message: '帳號已停用'\n        };\n      }\n\n      console.log('✅ 登入成功:', user.employee_number);\n\n      return {\n        success: true,\n        user,\n        usedFallback: false\n      };\n\n    } catch (error) {\n      console.error('❌ 登入錯誤:', error);\n      return {\n        success: false,\n        message: '系統錯誤，請稍後再試'\n      };\n    }\n  }\n\n  /**\n   * 更新最後登入時間\n   */\n  static async updateLastLogin(user_id: string): Promise<void> {\n    try {\n      const now = new Date().toISOString();\n\n      await (supabase as any)\n        .from('employees')\n        .update({\n          last_login: now,\n          updated_at: now\n        })\n        .eq('id', user_id);\n\n      console.log('✅ 更新登入時間:', user_id);\n    } catch (error) {\n      console.error('❌ 更新登入時間失敗:', error);\n      // 不拋出錯誤，允許登入繼續\n    }\n  }\n\n  /**\n   * 登出\n   */\n  static logout(): void {\n    // 清除 localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('auth-storage');\n    }\n    console.log('✅ 已登出');\n  }\n\n  /**\n   * 檢查權限\n   */\n  static hasPermission(user: User | null, permission: string): boolean {\n    if (!user) return false;\n    \n    const permissions = user.permissions || [];\n    return permissions.includes(permission) ||\n           permissions.includes('super_admin') ||\n           permissions.includes('admin');\n  }\n\n  /**\n   * 檢查多個權限（任一符合）\n   */\n  static hasAnyPermission(user: User | null, permissions: string[]): boolean {\n    if (!user) return false;\n    \n    return permissions.some(permission => \n      this.hasPermission(user, permission)\n    );\n  }\n\n  /**\n   * 檢查多個權限（全部符合）\n   */\n  static hasAllPermissions(user: User | null, permissions: string[]): boolean {\n    if (!user) return false;\n    \n    return permissions.every(permission => \n      this.hasPermission(user, permission)\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/services/local-auth-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[739,742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[739,742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2089,2092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2089,2092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2318,2321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2318,2321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2855,2858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2855,2858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2900,2903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2900,2903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3810,3813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3810,3813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4503,4506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4503,4506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5143,5146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5143,5146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6720,6723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6720,6723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 純本地認證服務\n * 完全不依賴 Supabase，使用 IndexedDB 儲存所有資料\n */\n\nimport bcrypt from 'bcryptjs';\nimport { localDB } from '@/lib/db';\nimport type { User } from '@/stores/types';\n\nexport interface LocalLoginResult {\n  success: boolean;\n  message?: string;\n  user?: User;\n}\n\nexport class LocalAuthService {\n  /**\n   * 本地登入驗證\n   */\n  static async login(username: string, password: string): Promise<LocalLoginResult> {\n    try {\n      // 1. 從 IndexedDB 查詢員工\n      const employees = await localDB.filter('employees', [\n        { field: 'employee_number', operator: 'eq', value: username }\n      ]);\n\n      if (employees.length === 0) {\n        return { \n          success: false, \n          message: '帳號或密碼錯誤' \n        };\n      }\n\n      const employee: any = employees[0];\n\n      // 2. 檢查帳號是否啟用\n      if (employee.is_active === false) {\n        return { \n          success: false, \n          message: '帳號已停用，請聯繫管理員' \n        };\n      }\n\n      // 3. 檢查帳號鎖定\n      if (employee.lockedUntil) {\n        const lockedTime = new Date(employee.lockedUntil);\n        if (lockedTime > new Date()) {\n          const remainingMinutes = Math.ceil((lockedTime.getTime() - Date.now()) / (60 * 1000));\n          return { \n            success: false, \n            message: `帳號已鎖定，請 ${remainingMinutes} 分鐘後再試` \n          };\n        }\n      }\n\n      // 4. 驗證密碼\n      let isValidPassword = false;\n      \n      if (employee.password_hash) {\n        try {\n          isValidPassword = await bcrypt.compare(password, employee.password_hash);\n        } catch (error) {\n          console.error('密碼驗證失敗:', error);\n          // 開發環境 fallback\n          if (password === 'Venturo2025!' && username === 'william01') {\n            isValidPassword = true;\n            console.warn('⚠️ 使用開發環境預設密碼');\n          }\n        }\n      } else {\n        // 沒有密碼雜湊，檢查是否為預設帳號\n        if (password === 'Venturo2025!' && username === 'william01') {\n          // 自動設定密碼\n          const hashedPassword = await bcrypt.hash(password, 10);\n          await localDB.update('employees', employee.id, {\n            password_hash: hashedPassword\n          } as any);\n          isValidPassword = true;\n          console.log('✅ 已為預設帳號設定密碼');\n        }\n      }\n\n      if (!isValidPassword) {\n        // 記錄失敗次數\n        const attempts = (employee.loginAttempts || 0) + 1;\n        const updates: any = { loginAttempts: attempts };\n\n        // 超過 5 次鎖定 30 分鐘\n        if (attempts >= 5) {\n          updates.lockedUntil = new Date(Date.now() + 30 * 60 * 1000).toISOString();\n        }\n\n        await localDB.update('employees', employee.id, updates);\n\n        return { \n          success: false, \n          message: '帳號或密碼錯誤' \n        };\n      }\n\n      // 5. 登入成功，重設失敗次數\n      await localDB.update('employees', employee.id, {\n        lastLoginAt: new Date().toISOString(),\n        loginAttempts: 0,\n        lockedUntil: null\n      } as any);\n\n      // 6. 建立使用者物件\n      const user: any = {\n        id: employee.id,\n        employee_number: employee.employee_number,\n        name: employee.name,\n        email: employee.email,\n        permissions: employee.permissions || [],\n        department: employee.department,\n        position: employee.position,\n        avatar: employee.avatar,\n        is_active: employee.is_active !== false,\n        created_at: employee.created_at,\n        updated_at: employee.updated_at || employee.updatedAt\n      };\n\n      return { \n        success: true, \n        user\n      };\n\n    } catch (error) {\n      console.error('登入錯誤:', error);\n      return { \n        success: false, \n        message: '系統錯誤，請稍後再試' \n      };\n    }\n  }\n\n  /**\n   * 變更密碼\n   */\n  static async changePassword(\n    user_id: string,\n    oldPassword: string,\n    newPassword: string\n  ): Promise<{ success: boolean; message?: string }> {\n    try {\n      // 1. 取得使用者資料\n      const employee: any = await localDB.read('employees', user_id);\n      \n      if (!employee) {\n        return { \n          success: false, \n          message: '使用者不存在' \n        };\n      }\n\n      // 2. 驗證舊密碼\n      if (employee.password_hash) {\n        const isValid = await bcrypt.compare(oldPassword, employee.password_hash);\n        if (!isValid) {\n          return { \n            success: false, \n            message: '舊密碼錯誤' \n          };\n        }\n      }\n\n      // 3. 加密新密碼\n      const newPasswordHash = await bcrypt.hash(newPassword, 10);\n\n      // 4. 更新密碼\n      await localDB.update('employees', user_id, {\n        password_hash: newPasswordHash,\n        updated_at: new Date().toISOString()\n      } as any);\n\n      return { success: true };\n\n    } catch (error) {\n      console.error('變更密碼錯誤:', error);\n      return { \n        success: false, \n        message: '變更密碼失敗' \n      };\n    }\n  }\n\n  /**\n   * 重設密碼（管理員功能）\n   */\n  static async resetPassword(\n    user_id: string,\n    newPassword: string\n  ): Promise<{ success: boolean; message?: string }> {\n    try {\n      // 加密新密碼\n      const password_hash = await bcrypt.hash(newPassword, 10);\n\n      // 更新密碼並清除鎖定\n      await localDB.update('employees', user_id, {\n        password_hash,\n        loginAttempts: 0,\n        lockedUntil: null,\n        updated_at: new Date().toISOString()\n      } as any);\n\n      return { success: true };\n\n    } catch (error) {\n      console.error('重設密碼錯誤:', error);\n      return { \n        success: false, \n        message: '重設密碼失敗' \n      };\n    }\n  }\n\n  /**\n   * 建立新使用者\n   */\n  static async createUser(userData: {\n    employee_number: string;\n    name: string;\n    email: string;\n    password: string;\n    department?: string;\n    position?: string;\n    permissions?: string[];\n  }): Promise<{ success: boolean; message?: string; user?: User }> {\n    try {\n      // 檢查員工編號是否已存在\n      const existing = await localDB.filter('employees', [\n        { field: 'employee_number', operator: 'eq', value: userData.employee_number }\n      ]);\n\n      if (existing.length > 0) {\n        return { \n          success: false, \n          message: '員工編號已存在' \n        };\n      }\n\n      // 加密密碼\n      const password_hash = await bcrypt.hash(userData.password, 10);\n\n      // 建立員工資料\n      const newEmployee = {\n        id: `emp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        employee_number: userData.employee_number,\n        name: userData.name,\n        email: userData.email,\n        password_hash,\n        permissions: userData.permissions || [],\n        department: userData.department || '',\n        position: userData.position || '',\n        salary: 0,\n        is_active: true,\n        loginAttempts: 0,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      // 儲存到 IndexedDB\n      const created = await localDB.create('employees', newEmployee);\n\n      // 建立使用者物件\n      const user: any = {\n        id: created.id,\n        employee_number: created.employee_number,\n        name: created.name,\n        email: created.email,\n        permissions: created.permissions,\n        department: created.department,\n        position: created.position,\n        is_active: true,\n        created_at: created.created_at,\n        updated_at: created.updated_at\n      };\n\n      return { \n        success: true, \n        user \n      };\n\n    } catch (error) {\n      console.error('建立使用者錯誤:', error);\n      return { \n        success: false, \n        message: '建立使用者失敗' \n      };\n    }\n  }\n\n  /**\n   * 檢查權限\n   */\n  static hasPermission(user: User | null, permission: string): boolean {\n    if (!user) return false;\n    \n    const permissions = user.permissions || [];\n    return permissions.includes(permission) ||\n           permissions.includes('super_admin') ||\n           permissions.includes('admin');\n  }\n\n  /**\n   * 檢查多個權限（任一符合）\n   */\n  static hasAnyPermission(user: User | null, permissions: string[]): boolean {\n    if (!user) return false;\n    \n    return permissions.some(permission => \n      this.hasPermission(user, permission)\n    );\n  }\n\n  /**\n   * 檢查多個權限（全部符合）\n   */\n  static hasAllPermissions(user: User | null, permissions: string[]): boolean {\n    if (!user) return false;\n    \n    return permissions.every(permission => \n      this.hasPermission(user, permission)\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/services/offline-auth.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'verifyPassword' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[949,952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[949,952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[974,977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[974,977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is defined but never used. Allowed unused args must match /^_/u.","line":258,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { verifyPassword } from '@/lib/auth';\nimport {\n  useLocalAuthStore,\n  LocalProfile,\n  PasswordEncryption\n} from '@/lib/auth/local-auth-manager';\nimport { localDB } from '@/lib/db';\nimport { TABLES } from '@/lib/db/schemas';\nimport bcrypt from 'bcryptjs';\n\n// ============= 離線認證服務 =============\nexport class OfflineAuthService {\n  /**\n   * 初次登入（需要網路）\n   * 從 Supabase 驗證並建立本地 Profile\n   */\n  static async initialLogin(\n    email: string,\n    password: string\n  ): Promise<{ success: boolean; profile?: LocalProfile; message?: string }> {\n    try {\n      // 🚀 TODO: [上線修改] 改成 Supabase 優先，IndexedDB 備援\n      // 參考：docs/PRODUCTION_TODO.md\n      console.log('🔐 純本地登入驗證...');\n      console.log('輸入的帳號:', email);\n\n      // 🚀 TODO: [上線修改] 這裡要改成：\n      // 1. 先嘗試從 Supabase 讀取\n      // 2. 成功則同步到 IndexedDB\n      // 3. 失敗則使用 IndexedDB 離線登入\n      // 從 IndexedDB 讀取真實使用者\n      await localDB.init(); // 確保資料庫已初始化\n      const users = await localDB.getAll<any>(TABLES.EMPLOYEES as any);\n      const employee = users.find(u => u.employee_number === email || u.employee_number === email);\n\n      if (!employee) {\n        return {\n          success: false,\n          message: '用戶名稱或密碼錯誤'\n        };\n      }\n\n      // 驗證密碼 - 支援多種欄位名稱\n      const password_hash = employee.password_hash || employee.password_hash;\n      if (!password_hash) {\n        console.error('員工沒有密碼設定:', employee);\n        return {\n          success: false,\n          message: '帳號尚未設定密碼'\n        };\n      }\n\n      const isValidPassword = await bcrypt.compare(password, password_hash);\n      if (!isValidPassword) {\n        return {\n          success: false,\n          message: '用戶名稱或密碼錯誤'\n        };\n      }\n\n      console.log('✓ 密碼驗證成功:', employee.name || employee.display_name);\n\n      // 3. 建立本地 Profile\n      console.log('開始加密密碼...');\n      let encryptedPassword;\n      try {\n        encryptedPassword = await PasswordEncryption.encrypt(password);\n        console.log('密碼加密成功');\n      } catch (encErr) {\n        console.error('密碼加密失敗:', encErr);\n        throw encErr;\n      }\n\n      // 支援多種屬性名稱格式\n      const profile: LocalProfile = {\n        id: employee.id,\n        email: employee.email || employee.employee_number + '@venturo.local',\n        employee_number: employee.employee_number || employee.employee_number,\n        display_name: employee.name || employee.display_name || employee.display_name,\n        english_name: employee.english_name || employee.english_name || employee.name,\n        role: this.determineRole(employee.permissions),\n        permissions: employee.permissions || [],\n        cachedPassword: encryptedPassword,\n        personal_info: employee.personal_info || employee.personal_info,\n        job_info: employee.job_info || employee.job_info || {\n          department: employee.department,\n          position: employee.position,\n          salary: employee.salary\n        },\n        salary_info: employee.salary_info || employee.salary_info,\n        contracts: employee.contracts,\n        attendance: employee.attendance,\n        lastLoginAt: new Date().toISOString(),\n        created_at: employee.created_at || employee.created_at || new Date().toISOString(),\n        status: (employee.is_active || employee.is_active) ? 'active' : 'inactive'\n      };\n\n      // 4. 儲存到本地\n      console.log('準備儲存 Profile:', profile);\n      try {\n        useLocalAuthStore.getState().addProfile(profile);\n        console.log('Profile 已加入');\n        useLocalAuthStore.getState().setCurrentProfile(profile);\n        console.log('Profile 已設為當前');\n      } catch (storeErr) {\n        console.error('儲存 Profile 失敗:', storeErr);\n        throw storeErr;\n      }\n\n      console.log('✅ Profile 已建立並儲存到本地');\n\n      return { success: true, profile };\n\n    } catch (error) {\n      console.error('初次登入失敗:', error);\n      return {\n        success: false,\n        message: '登入失敗，請稍後再試'\n      };\n    }\n  }\n\n  /**\n   * 離線登入（使用 PIN 碼或密碼）\n   */\n  static async offlineLogin(\n    profileId: string,\n    credential: string,\n    usePin: boolean = true\n  ): Promise<{ success: boolean; profile?: LocalProfile; message?: string }> {\n    try {\n      const profile = useLocalAuthStore.getState().getProfileById(profileId);\n\n      if (!profile) {\n        return {\n          success: false,\n          message: '找不到此用戶資料'\n        };\n      }\n\n      let isValid = false;\n\n      if (usePin) {\n        // 使用 PIN 碼驗證\n        if (!profile.pinHash) {\n          return {\n            success: false,\n            message: '此帳號尚未設定 PIN 碼'\n          };\n        }\n\n        isValid = await useLocalAuthStore.getState().verifyPin(profileId, credential);\n      } else {\n        // 使用密碼驗證（離線）\n        if (!profile.cachedPassword) {\n          return {\n            success: false,\n            message: '此帳號無法使用離線登入'\n          };\n        }\n\n        const decryptedPassword = await PasswordEncryption.decrypt(profile.cachedPassword);\n        isValid = credential === decryptedPassword;\n      }\n\n      if (!isValid) {\n        return {\n          success: false,\n          message: usePin ? 'PIN 碼錯誤' : '密碼錯誤'\n        };\n      }\n\n      // 設定為當前登入\n      useLocalAuthStore.getState().setCurrentProfile(profile);\n\n      console.log('✅ 離線登入成功');\n\n      // 背景嘗試刷新 Supabase session\n      if (typeof navigator !== 'undefined' && navigator.onLine && profile.cachedPassword) {\n        this.refreshSupabaseSession(profile).catch(console.error);\n      }\n\n      return { success: true, profile };\n\n    } catch (error) {\n      console.error('離線登入失敗:', error);\n      return {\n        success: false,\n        message: '登入失敗，請稍後再試'\n      };\n    }\n  }\n\n  /**\n   * 設定 PIN 碼\n   */\n  static async setupPin(profileId: string, pin: string): Promise<boolean> {\n    try {\n      if (pin.length < 4 || pin.length > 6) {\n        throw new Error('PIN 碼長度必須是 4-6 位數字');\n      }\n\n      if (!/^\\d+$/.test(pin)) {\n        throw new Error('PIN 碼只能包含數字');\n      }\n\n      const pinHash = await PasswordEncryption.hashPin(pin);\n      useLocalAuthStore.getState().setPinForProfile(profileId, pinHash);\n\n      console.log('✅ PIN 碼設定成功');\n      return true;\n\n    } catch (error) {\n      console.error('設定 PIN 碼失敗:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 切換角色\n   */\n  static switchProfile(profileId: string): boolean {\n    try {\n      const profile = useLocalAuthStore.getState().getProfileById(profileId);\n\n      if (!profile) {\n        console.error('找不到 Profile:', profileId);\n        return false;\n      }\n\n      useLocalAuthStore.getState().setCurrentProfile(profile);\n      console.log('✅ 已切換到:', profile.display_name);\n\n      // 背景刷新 session\n      if (typeof navigator !== 'undefined' && navigator.onLine && profile.cachedPassword) {\n        this.refreshSupabaseSession(profile).catch(console.error);\n      }\n\n      return true;\n\n    } catch (error) {\n      console.error('切換角色失敗:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 登出\n   */\n  static logout(): void {\n    useLocalAuthStore.getState().setCurrentProfile(null);\n    console.log('✅ 已登出');\n  }\n\n  /**\n   * 背景刷新（純本地模式 - 已停用）\n   */\n  private static async refreshSupabaseSession(profile: LocalProfile): Promise<void> {\n    console.log('📦 本地模式：無需刷新 session');\n  }\n\n  /**\n   * 判斷用戶角色\n   */\n  private static determineRole(permissions: string[]): 'ADMIN' | 'EMPLOYEE' {\n    if (permissions?.includes('admin')) return 'ADMIN';\n    return 'EMPLOYEE';\n  }\n\n  /**\n   * 同步本地 Profile 與遠端\n   */\n  static async syncProfile(profileId: string): Promise<boolean> {\n    try {\n      const isOnline = typeof navigator !== 'undefined' ? navigator.onLine : false;\n\n      if (!isOnline) {\n        console.log('離線狀態，無法同步');\n        return false;\n      }\n\n      const profile = useLocalAuthStore.getState().getProfileById(profileId);\n\n      if (!profile) {\n        return false;\n      }\n\n      // 🚀 TODO: [上線修改] 這裡需要實作 Supabase 同步\n      // 目前暫時返回 false\n      console.log('⚠️ Supabase 同步尚未實作');\n      return false;\n\n    } catch (error) {\n      console.error('同步失敗:', error);\n      return false;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/accounting-store.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":101,"column":61,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":101,"endColumn":69},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":65,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":73},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":243,"column":59,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":243,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { Account, TransactionCategory, Transaction, Budget, AccountingStats } from '@/types';\nimport { generateUUID } from '@/lib/utils/uuid';\n\n/**\n * 會計系統 Store (純 localStorage 版本)\n *\n * 說明：會計系統使用 localStorage 持久化，原因：\n * 1. 資料量小 (帳戶、交易記錄)\n * 2. 需要即時計算統計 (不適合 IndexedDB)\n * 3. 暫不同步到 Supabase（待未來擴充）\n */\n\ninterface AccountingStore {\n  // 資料狀態\n  accounts: Account[];\n  categories: TransactionCategory[];\n  transactions: Transaction[];\n  budgets: Budget[];\n\n  // 統計資料\n  stats: AccountingStats;\n\n  // 帳戶管理\n  addAccount: (account: Omit<Account, 'id' | 'created_at' | 'updated_at'>) => Account;\n  updateAccount: (id: string, account: Partial<Account>) => Account | undefined;\n  deleteAccount: (id: string) => boolean;\n  loadAccounts: () => Account[];\n\n  // 分類管理\n  addCategory: (category: Omit<TransactionCategory, 'id' | 'created_at' | 'updated_at'>) => TransactionCategory;\n  updateCategory: (id: string, category: Partial<TransactionCategory>) => TransactionCategory | undefined;\n  deleteCategory: (id: string) => boolean;\n  loadCategories: () => TransactionCategory[];\n\n  // 交易記錄\n  addTransaction: (transaction: Omit<Transaction, 'id' | 'created_at' | 'updated_at'>) => string;\n  updateTransaction: (id: string, transaction: Partial<Transaction>) => void;\n  deleteTransaction: (id: string) => void;\n\n  // 預算管理\n  addBudget: (budget: Omit<Budget, 'id' | 'created_at' | 'updated_at'>) => Budget;\n  updateBudget: (id: string, budget: Partial<Budget>) => Budget | undefined;\n  deleteBudget: (id: string) => boolean;\n\n  // 統計計算\n  calculateStats: () => void;\n  getAccountBalance: (account_id: string) => number;\n  getCategoryTotal: (category_id: string, start_date?: string, end_date?: string) => number;\n\n  // 輔助方法\n  updateAccountBalances: (transaction: Transaction) => void;\n  reverseAccountBalances: (transaction: Transaction) => void;\n}\n\nconst generateId = () => generateUUID();\n\nexport const useAccountingStore = create<AccountingStore>()(\n  persist(\n    (set, get) => ({\n      // 初始資料\n      accounts: [],\n      categories: [],\n      transactions: [],\n      budgets: [],\n\n      stats: {\n        total_assets: 0,\n        total_income: 0,\n        total_expense: 0,\n        monthly_income: 0,\n        monthly_expense: 0,\n        net_worth: 0,\n        category_breakdown: []\n      },\n\n      // ===== 帳戶管理 =====\n      addAccount: (accountData) => {\n        const id = generateId();\n        const now = new Date().toISOString();\n        const account: Account = {\n          ...accountData,\n          id,\n          created_at: now,\n          updated_at: now,\n        };\n        set((state) => ({ accounts: [...state.accounts, account] }));\n        get().calculateStats();\n        return account;\n      },\n\n      updateAccount: (id, accountData) => {\n        let updated: Account | undefined;\n        set((state) => {\n          const account = state.accounts.find(a => a.id === id);\n          if (!account) return state;\n\n          updated = { ...account, ...accountData, updated_at: new Date().toISOString() };\n          return {\n            accounts: state.accounts.map(a => a.id === id ? updated! : a)\n          };\n        });\n        get().calculateStats();\n        return updated;\n      },\n\n      deleteAccount: (id) => {\n        // 先刪除相關交易\n        set((state) => ({\n          transactions: state.transactions.filter(transaction =>\n            transaction.account_id !== id && transaction.to_account_id !== id\n          ),\n        }));\n\n        set((state) => ({\n          accounts: state.accounts.filter(a => a.id !== id)\n        }));\n        get().calculateStats();\n        return true;\n      },\n\n      loadAccounts: () => {\n        return get().accounts;\n      },\n\n      // ===== 分類管理 =====\n      addCategory: (categoryData) => {\n        const id = generateId();\n        const now = new Date().toISOString();\n        const category: TransactionCategory = {\n          ...categoryData,\n          id,\n          created_at: now,\n          updated_at: now,\n        };\n        set((state) => ({ categories: [...state.categories, category] }));\n        return category;\n      },\n\n      updateCategory: (id, categoryData) => {\n        let updated: TransactionCategory | undefined;\n        set((state) => {\n          const category = state.categories.find(c => c.id === id);\n          if (!category) return state;\n\n          updated = { ...category, ...categoryData, updated_at: new Date().toISOString() };\n          return {\n            categories: state.categories.map(c => c.id === id ? updated! : c)\n          };\n        });\n        return updated;\n      },\n\n      deleteCategory: (id) => {\n        // 先刪除該分類的交易\n        set((state) => ({\n          transactions: state.transactions.filter(transaction => transaction.category_id !== id),\n        }));\n\n        set((state) => ({\n          categories: state.categories.filter(c => c.id !== id)\n        }));\n        return true;\n      },\n\n      loadCategories: () => {\n        return get().categories;\n      },\n\n      // ===== 交易記錄 =====\n      addTransaction: (transactionData) => {\n        const id = generateId();\n        const now = new Date().toISOString();\n\n        const transaction: Transaction = {\n          ...transactionData,\n          id,\n          created_at: now,\n          updated_at: now,\n        };\n\n        set((state) => ({ transactions: [...state.transactions, transaction] }));\n        get().updateAccountBalances(transaction);\n        get().calculateStats();\n        return id;\n      },\n\n      updateTransaction: (id, transactionData) => {\n        const now = new Date().toISOString();\n        const oldTransaction = get().transactions.find(t => t.id === id);\n\n        set((state) => ({\n          transactions: state.transactions.map(transaction =>\n            transaction.id === id ? { ...transaction, ...transactionData, updated_at: now } : transaction\n          ),\n        }));\n\n        if (oldTransaction) {\n          get().reverseAccountBalances(oldTransaction);\n        }\n        const newTransaction = get().transactions.find(t => t.id === id);\n        if (newTransaction) {\n          get().updateAccountBalances(newTransaction);\n        }\n        get().calculateStats();\n      },\n\n      deleteTransaction: (id) => {\n        const transaction = get().transactions.find(t => t.id === id);\n        if (transaction) {\n          get().reverseAccountBalances(transaction);\n        }\n\n        set((state) => ({\n          transactions: state.transactions.filter(transaction => transaction.id !== id),\n        }));\n        get().calculateStats();\n      },\n\n      // ===== 預算管理 =====\n      addBudget: (budgetData) => {\n        const id = generateId();\n        const now = new Date().toISOString();\n        const budget: Budget = {\n          ...budgetData,\n          id,\n          created_at: now,\n          updated_at: now,\n        };\n        set((state) => ({ budgets: [...state.budgets, budget] }));\n        return budget;\n      },\n\n      updateBudget: (id, budgetData) => {\n        let updated: Budget | undefined;\n        set((state) => {\n          const budget = state.budgets.find(b => b.id === id);\n          if (!budget) return state;\n\n          updated = { ...budget, ...budgetData, updated_at: new Date().toISOString() };\n          return {\n            budgets: state.budgets.map(b => b.id === id ? updated! : b)\n          };\n        });\n        return updated;\n      },\n\n      deleteBudget: (id) => {\n        set((state) => ({\n          budgets: state.budgets.filter(b => b.id !== id)\n        }));\n        return true;\n      },\n\n      // ===== 輔助方法 =====\n      updateAccountBalances: (transaction: Transaction) => {\n        set((state) => ({\n          accounts: state.accounts.map(account => {\n            if (account.id === transaction.account_id) {\n              const balanceChange = transaction.type === 'income' ? transaction.amount : -transaction.amount;\n              const newBalance = account.balance + balanceChange;\n              const availableCredit = account.type === 'credit' && account.credit_limit\n                ? (account.credit_limit ?? 0) + newBalance\n                : account.available_credit;\n              return { ...account, balance: newBalance, available_credit: availableCredit };\n            }\n            if (transaction.to_account_id && account.id === transaction.to_account_id) {\n              const newBalance = account.balance + transaction.amount;\n              const availableCredit = account.type === 'credit' && account.credit_limit\n                ? (account.credit_limit ?? 0) + newBalance\n                : account.available_credit;\n              return { ...account, balance: newBalance, available_credit: availableCredit };\n            }\n            return account;\n          })\n        }));\n      },\n\n      reverseAccountBalances: (transaction: Transaction) => {\n        set((state) => ({\n          accounts: state.accounts.map(account => {\n            if (account.id === transaction.account_id) {\n              const balanceChange = transaction.type === 'income' ? -transaction.amount : transaction.amount;\n              return { ...account, balance: account.balance + balanceChange };\n            }\n            if (transaction.to_account_id && account.id === transaction.to_account_id) {\n              return { ...account, balance: account.balance - transaction.amount };\n            }\n            return account;\n          })\n        }));\n      },\n\n      // ===== 統計計算 =====\n      calculateStats: () => {\n        const { accounts, transactions, categories } = get();\n        const now = new Date();\n        const currentMonth = now.getMonth();\n        const currentYear = now.getFullYear();\n\n        const totalAssets = accounts\n          .filter(account => account.balance > 0)\n          .reduce((sum, account) => sum + account.balance, 0);\n\n        const totalDebt = accounts\n          .filter(account => account.balance < 0)\n          .reduce((sum, account) => sum + Math.abs(account.balance), 0);\n\n        const netWorth = totalAssets - totalDebt;\n\n        const totalIncome = transactions\n          .filter(t => t.type === 'income')\n          .reduce((sum, t) => sum + t.amount, 0);\n\n        const totalExpense = transactions\n          .filter(t => t.type === 'expense')\n          .reduce((sum, t) => sum + t.amount, 0);\n\n        const monthlyIncome = transactions\n          .filter(t => {\n            const transactionDate = new Date(t.date);\n            return t.type === 'income' &&\n                   transactionDate.getMonth() === currentMonth &&\n                   transactionDate.getFullYear() === currentYear;\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n\n        const monthlyExpense = transactions\n          .filter(t => {\n            const transactionDate = new Date(t.date);\n            return t.type === 'expense' &&\n                   transactionDate.getMonth() === currentMonth &&\n                   transactionDate.getFullYear() === currentYear;\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n\n        const categoryTotals = new Map<string, number>();\n\n        transactions\n          .filter(t => t.type === 'expense')\n          .forEach(t => {\n            const current = categoryTotals.get(t.category_id) || 0;\n            categoryTotals.set(t.category_id, current + t.amount);\n          });\n\n        const categoryBreakdown = Array.from(categoryTotals.entries())\n          .map(([categoryId, amount]) => {\n            const category = categories.find(c => c.id === categoryId);\n            return {\n              category_id: categoryId,\n              category_name: category?.name || '未知分類',\n              amount,\n              percentage: totalExpense > 0 ? (amount / totalExpense) * 100 : 0\n            };\n          })\n          .sort((a, b) => b.amount - a.amount);\n\n        set({\n          stats: {\n            total_assets: totalAssets,\n            total_income: totalIncome,\n            total_expense: totalExpense,\n            monthly_income: monthlyIncome,\n            monthly_expense: monthlyExpense,\n            net_worth: netWorth,\n            category_breakdown: categoryBreakdown\n          }\n        });\n      },\n\n      // 工具方法\n      getAccountBalance: (accountId: string) => {\n        const account = get().accounts.find(a => a.id === accountId);\n        return account?.balance || 0;\n      },\n\n      getCategoryTotal: (categoryId: string, start_date?: string, end_date?: string) => {\n        const { transactions } = get();\n        return transactions\n          .filter(t => {\n            if (t.category_id !== categoryId) return false;\n            if (start_date && t.date < start_date) return false;\n            if (end_date && t.date > end_date) return false;\n            return true;\n          })\n          .reduce((sum, t) => sum + t.amount, 0);\n      }\n    }),\n    {\n      name: 'venturo-accounting-store',\n      version: 2, // 版本升級\n    }\n  )\n);\n\n// 初始化統計資料\nif (typeof window !== 'undefined') {\n  setTimeout(() => {\n    useAccountingStore.getState().calculateStats();\n  }, 0);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/accounting-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/auth-store-local.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/auth-store.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useUserStore' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'verifyPassword' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4892,4895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4892,4895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8756,8759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8756,8759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { User } from './types';\nimport { useUserStore } from './user-store';\nimport { generateToken, verifyPassword, type AuthPayload } from '@/lib/auth';\nimport { useLocalAuthStore, LocalProfile } from '@/lib/auth/local-auth-manager';\nimport { OfflineAuthService } from '@/services/offline-auth.service';\nimport { logger } from '@/lib/utils/logger';\n\ninterface AuthState {\n  // 保持向下相容的屬性\n  user: User | null;\n  isAuthenticated: boolean;\n  sidebarCollapsed: boolean;\n  loginAttempts: Map<string, { count: number; lastAttempt: Date }>;\n\n  // 新增屬性\n  currentProfile: LocalProfile | null;\n  isOfflineMode: boolean;\n\n  // 方法\n  login: (user: User) => void;\n  logout: () => void;\n  validateLogin: (username: string, password: string) => Promise<{ success: boolean; message?: string }>;\n  toggleSidebar: () => void;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  checkPermission: (permission: string) => boolean;\n  switchProfile: (profileId: string) => boolean;\n}\n\n// 防暴力破解的失敗記錄\nconst loginAttemptsMap = new Map<string, { count: number; lastAttempt: Date }>();\n\nfunction checkLoginAttempts(username: string): { allowed: boolean; message?: string } {\n  const attempts = loginAttemptsMap.get(username);\n\n  if (!attempts) {\n    loginAttemptsMap.set(username, { count: 1, lastAttempt: new Date() });\n    return { allowed: true };\n  }\n\n  // 15 分鐘後重置\n  const timeDiff = Date.now() - attempts.lastAttempt.getTime();\n  if (timeDiff > 15 * 60 * 1000) {\n    loginAttemptsMap.set(username, { count: 1, lastAttempt: new Date() });\n    return { allowed: true };\n  }\n\n  // 超過 5 次嘗試\n  if (attempts.count >= 5) {\n    const remainingTime = Math.ceil((15 * 60 * 1000 - timeDiff) / (60 * 1000));\n    return {\n      allowed: false,\n      message: `登入失敗次數過多，請 ${remainingTime} 分鐘後再試`\n    };\n  }\n\n  attempts.count++;\n  attempts.lastAttempt = new Date();\n  return { allowed: true };\n}\n\nfunction recordLoginAttempt(username: string, success: boolean): void {\n  if (success) {\n    // 登入成功，清除失敗記錄\n    loginAttemptsMap.delete(username);\n  }\n  // 失敗記錄已在 checkLoginAttempts 中處理\n}\n\nfunction setSecureCookie(token: string, rememberMe: boolean = false): void {\n  const maxAge = rememberMe ? 30 * 24 * 60 * 60 : 8 * 60 * 60; // 30天 or 8小時\n  const secure = window.location.protocol === 'https:' ? 'Secure; ' : '';\n\n  // 在 localhost 開發環境中，不使用 Secure 和 SameSite=Strict\n  if (window.location.hostname === 'localhost') {\n    document.cookie = `auth-token=${token}; path=/; max-age=${maxAge}; SameSite=Lax`;\n  } else {\n    document.cookie = `auth-token=${token}; path=/; max-age=${maxAge}; SameSite=Strict; ${secure}`;\n  }\n}\n\nexport const useAuthStore = create<AuthState>(\n  // @ts-expect-error - zustand persist middleware type issue\n  persist(\n    (set, get) => ({\n      user: null,\n      isAuthenticated: false,\n      sidebarCollapsed: true,  // 預設收合，hover 時展開\n      loginAttempts: new Map(),\n      currentProfile: null,\n      isOfflineMode: false,\n\n      login: (user) => {\n        // 同時更新 user 和 currentProfile\n        const profile = useLocalAuthStore.getState().currentProfile;\n        set({\n          user,\n          isAuthenticated: true,\n          currentProfile: profile\n        });\n      },\n\n      logout: () => {\n        // 使用離線認證服務登出\n        OfflineAuthService.logout();\n\n        // 安全清除認證 cookie\n        if (typeof window !== 'undefined') {\n          if (window.location.hostname === 'localhost') {\n            document.cookie = 'auth-token=; path=/; max-age=0; SameSite=Lax';\n          } else {\n            document.cookie = 'auth-token=; path=/; max-age=0; SameSite=Strict; Secure';\n          }\n        }\n\n        set({\n          user: null,\n          isAuthenticated: false,\n          currentProfile: null\n        });\n      },\n\n  validateLogin: async (username: string, password: string) => {\n    try {\n      // 檢查登入次數限制\n      const attemptCheck = checkLoginAttempts(username);\n      if (!attemptCheck.allowed) {\n        return { success: false, message: attemptCheck.message };\n      }\n\n      const localAuthStore = useLocalAuthStore.getState();\n      const existingProfile = localAuthStore.profiles.find(p => p.employee_number === username);\n\n      // 🌐 優先檢查網路狀態\n      const isOnline = navigator.onLine;\n\n      // 🌐 有網路 → 優先從 Supabase 驗證（確保密碼、權限、狀態都是最新的）\n      if (isOnline) {\n        logger.log('🌐 有網路連線，從 Supabase 驗證...', username);\n\n        // 直接跳到 Supabase 驗證（跳過角色卡登入）\n        // （下面的 Supabase 驗證邏輯會在驗證成功後更新角色卡）\n      }\n      // 📴 無網路 + 有角色卡 → 離線快速登入（使用 IndexedDB）\n      else if (!isOnline && existingProfile) {\n        logger.log('📴 離線模式 + 找到角色卡，使用離線登入:', username);\n\n        try {\n          // 從 IndexedDB 讀取員工資料\n          const { localDB } = await import('@/lib/db');\n          const { TABLES } = await import('@/lib/db/schemas');\n\n          const employee = await localDB.read(TABLES.EMPLOYEES, existingProfile.id) as any;\n\n          if (!employee) {\n            logger.error('❌ IndexedDB 找不到員工資料');\n            localAuthStore.removeProfile(existingProfile.id);\n            return { success: false, message: '本地資料已損壞，請連線網路後重新登入' };\n          }\n\n          // 🔍 檢查資料格式（統一使用 snake_case）\n          if (!employee.password_hash || !employee.employee_number || !employee.display_name) {\n            logger.error('❌ IndexedDB 資料格式錯誤（應為 snake_case）');\n            logger.error('   請開啟 http://localhost:3000/check-db.html 清空資料庫');\n            localAuthStore.removeProfile(existingProfile.id);\n            return {\n              success: false,\n              message: '本地資料格式錯誤，請連線網路後重新登入\\n（或訪問 /check-db.html 清空資料庫）'\n            };\n          }\n\n          // 檢查員工狀態\n          if (employee.status === 'terminated') {\n            logger.error('❌ 帳號已停用');\n            return { success: false, message: '此帳號已停用' };\n          }\n\n          // 驗證密碼（使用 bcrypt）\n          const bcrypt = (await import('bcryptjs')).default;\n          const isValidPassword = await bcrypt.compare(password, employee.password_hash);\n\n          if (!isValidPassword) {\n            logger.error('❌ 密碼錯誤');\n            recordLoginAttempt(username, false);\n            return { success: false, message: '帳號或密碼錯誤' };\n          }\n\n          // ✅ 離線登入成功\n          logger.log('✅ 📴 離線登入成功');\n          recordLoginAttempt(username, true);\n\n          const user: User = {\n            id: employee.id,\n            employee_number: employee.employee_number,\n            english_name: employee.english_name,\n            display_name: employee.display_name,\n            chinese_name: employee.chinese_name || employee.display_name,\n            personal_info: employee.personal_info || {},\n            job_info: employee.job_info || {},\n            salary_info: employee.salary_info || {},\n            permissions: employee.permissions || [],\n            roles: employee.roles || [],\n            attendance: employee.attendance || { leave_records: [], overtime_records: [] },\n            contracts: employee.contracts || [],\n            status: employee.status,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          };\n\n          set({ user, isAuthenticated: true, currentProfile: existingProfile, isOfflineMode: true });\n          return { success: true };\n\n        } catch (error) {\n          logger.error('❌ 離線登入失敗:', error);\n          // 刪除損壞的角色卡\n          localAuthStore.removeProfile(existingProfile.id);\n          return { success: false, message: '離線登入失敗，請連線網路後重新登入' };\n        }\n      }\n      // 📴 無網路 + 無角色卡 → 無法登入\n      else if (!isOnline && !existingProfile) {\n        logger.error('❌ 離線狀態且無角色卡');\n        return { success: false, message: '離線狀態下無法登入，請連接網路' };\n      }\n\n      // 🌐 沒有角色卡 → 從 Supabase 驗證（第一次登入）\n      logger.log('🌐 第一次登入，查詢 Supabase...');\n\n      // 檢查環境變數\n      logger.log('🔧 環境變數檢查:', {\n        hasUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,\n        hasKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        url: process.env.NEXT_PUBLIC_SUPABASE_URL?.substring(0, 30) + '...'\n      });\n\n      // 從 Supabase 查詢員工資料\n      const { supabase } = await import('@/lib/supabase/client');\n      logger.log('📡 Supabase client 載入成功');\n\n      const { data: employees, error: queryError } = await supabase\n        .from('employees')\n        .select('*')\n        .eq('employee_number', username)\n        .single();\n\n      logger.log('📊 查詢結果:', {\n        hasData: !!employees,\n        hasError: !!queryError,\n        errorMessage: queryError?.message\n      });\n\n      if (queryError || !employees) {\n        logger.error('❌ Supabase 查詢失敗:', queryError?.message);\n        logger.error('   完整錯誤:', queryError);\n        recordLoginAttempt(username, false);\n        return { success: false, message: '帳號或密碼錯誤' };\n      }\n\n      const employeeData = employees as any;\n      logger.log('✅ 找到員工資料:', employeeData.display_name);\n\n      // 將 snake_case 轉換為 camelCase（前端統一格式）\n      const employee = {\n        id: employeeData.id,\n        employee_number: employeeData.employee_number,\n        display_name: employeeData.display_name,\n        english_name: employeeData.english_name,\n        chinese_name: employeeData.chinese_name,\n        password_hash: employeeData.password_hash,\n        must_change_password: employeeData.must_change_password,\n        last_password_change: employeeData.last_password_change,\n        personal_info: employeeData.personal_info || {},\n        job_info: employeeData.job_info || {},\n        salary_info: employeeData.salary_info || {},\n        permissions: employeeData.permissions || [],\n        roles: employeeData.roles || [], // 附加身份標籤\n        attendance: employeeData.attendance || { leave_records: [], overtime_records: [] },\n        contracts: employeeData.contracts || [],\n        status: employeeData.status,\n        created_at: employeeData.created_at,\n        updated_at: employeeData.updated_at\n      };\n\n      // 檢查員工狀態\n      logger.log('🔍 檢查員工狀態:', employee.status);\n      if (employee.status === 'terminated') {\n        logger.error('❌ 帳號已停用');\n        return { success: false, message: '此帳號已停用' };\n      }\n\n      // 驗證密碼\n      logger.log('🔐 檢查密碼 hash:', {\n        hasPasswordHash: !!employee.password_hash,\n        hashLength: employee.password_hash?.length\n      });\n\n      if (!employee.password_hash) {\n        logger.warn('⚠️ 員工尚未設定密碼:', username);\n        return { success: false, message: '請先設定密碼' };\n      }\n\n      // 使用 bcrypt 驗證密碼\n      logger.log('🔑 開始驗證密碼...');\n      const bcrypt = (await import('bcryptjs')).default;\n      const isValidPassword = await bcrypt.compare(password, employee.password_hash);\n\n      logger.log('🔑 密碼驗證結果:', isValidPassword);\n\n      if (!isValidPassword) {\n        logger.error('❌ 密碼錯誤');\n        recordLoginAttempt(username, false);\n        return { success: false, message: '帳號或密碼錯誤' };\n      }\n\n      // ✅ Supabase 驗證成功！\n      logger.log('✅ Supabase 驗證成功，建立角色卡...');\n      recordLoginAttempt(username, true);\n\n      // 建立用戶對象（向下相容）\n      const user: User = {\n        id: employee.id,\n        employee_number: employee.employee_number,\n        english_name: employee.english_name,\n        display_name: employee.display_name,\n        chinese_name: employee.chinese_name || employee.display_name,\n        personal_info: employee.personal_info,\n        job_info: employee.job_info,\n        salary_info: employee.salary_info,\n        permissions: employee.permissions,\n        roles: employee.roles || [], // 附加身份標籤\n        attendance: employee.attendance,\n        contracts: employee.contracts,\n        status: employee.status,\n        created_at: employee.created_at || new Date().toISOString(),\n        updated_at: employee.updated_at || new Date().toISOString()\n      };\n\n      // 🎴 建立角色卡（Profile Card）- 用於離線快速登入\n      const profile: LocalProfile = {\n        id: employee.id,\n        email: employee.personal_info?.email || `${username}@venturo.local`,\n        employee_number: employee.employee_number,\n        display_name: employee.display_name,\n        english_name: employee.english_name,\n        role: employee.permissions?.includes('admin') ? 'ADMIN' : 'EMPLOYEE',\n        permissions: employee.permissions || [],\n        roles: employee.roles || [], // 附加身份標籤（支援多重角色）\n        personal_info: employee.personal_info,\n        job_info: employee.job_info,\n        salary_info: employee.salary_info,\n        contracts: employee.contracts,\n        attendance: employee.attendance,\n        lastLoginAt: new Date().toISOString(),\n        created_at: employee.created_at || new Date().toISOString(),\n        status: employee.status === 'active' ? 'active' : 'inactive'\n      };\n\n      // 💾 儲存角色卡到 local-auth-manager（下次可離線登入）\n      localAuthStore.addProfile(profile);\n      localAuthStore.setCurrentProfile(profile);\n      logger.log('🎴 角色卡已建立，下次可離線登入');\n\n      // 生成 JWT token\n      const authPayload: AuthPayload = {\n        id: employee.id,\n        employee_number: employee.employee_number,\n        permissions: employee.permissions || [],\n        role: employee.permissions?.includes('admin') ? 'admin' : 'employee'\n      };\n\n      const token = generateToken(authPayload);\n\n      // 設定安全 cookie\n      setSecureCookie(token, false);\n\n      // 更新 store 狀態\n      set({\n        user,\n        isAuthenticated: true,\n        currentProfile: profile\n      });\n\n      // TODO: 初始化同步已改用 createStore 的 fetchAll 自動處理\n      // 每個頁面載入時會自動從 Supabase 下載資料\n      logger.log('✅ 登入成功，資料將在各頁面載入時自動同步');\n\n      /* 舊的初始化同步程式碼（已廢棄）\n      try {\n        const { needsInitialSync, initialSync } = await import('@/lib/offline/initial-sync');\n        const needsSync = await needsInitialSync();\n        if (needsSync) {\n          logger.log('📥 開始初始化同步...');\n          initialSync((progress) => {\n            logger.log(`📊 同步進度: ${progress.current}/${progress.total} - ${progress.table}`);\n          }).then((result) => {\n            if (result.success) {\n              logger.log('✅ 初始化同步完成！');\n            } else {\n              logger.error('❌ 初始化同步失敗:', result.error);\n            }\n          });\n        } else {\n          logger.log('ℹ️ 本地資料正常，跳過初始化同步');\n        }\n      } catch (syncError) {\n        logger.warn('⚠️ 同步檢查失敗，但不影響登入:', syncError);\n      }\n      */\n\n      logger.log('✅ 登入成功:', employee.display_name);\n      return { success: true };\n\n    } catch (error) {\n      logger.error('💥 登入驗證錯誤:', error);\n      return { success: false, message: '系統錯誤，請稍後再試' };\n    }\n  },\n\n      checkPermission: (permission: string) => {\n        const profile = get().currentProfile;\n        if (!profile) return false;\n        return profile.permissions.includes(permission) ||\n               profile.permissions.includes('admin');\n      },\n\n      switchProfile: (profileId: string) => {\n        const success = OfflineAuthService.switchProfile(profileId);\n        if (success) {\n          const profile = useLocalAuthStore.getState().getProfileById(profileId);\n          if (profile) {\n            const user: User = {\n              id: profile.id,\n              employee_number: profile.employee_number,\n              english_name: profile.english_name,\n              display_name: profile.display_name,\n              chinese_name: profile.display_name, // 從 profile 取得\n              personal_info: profile.personal_info || {},\n              job_info: profile.job_info || {},\n              salary_info: profile.salary_info || {},\n              permissions: profile.permissions || [],\n              roles: profile.roles || [], // 附加身份標籤\n              attendance: profile.attendance || { leave_records: [], overtime_records: [] },\n              contracts: profile.contracts || [],\n              status: profile.status as 'active' | 'probation' | 'leave' | 'terminated',\n              created_at: profile.created_at || new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            };\n\n            set({\n              currentProfile: profile,\n              user,\n              isAuthenticated: true\n            });\n          }\n        }\n        return success;\n      },\n\n      toggleSidebar: () => set((state) => ({ sidebarCollapsed: !state.sidebarCollapsed })),\n      setSidebarCollapsed: (collapsed) => set({ sidebarCollapsed: collapsed }),\n    }),\n    {\n      name: 'auth-storage',\n      skipHydration: true, // 🔥 避免 SSR 時讀取 localStorage\n      partialize: (state) => ({\n        user: state.user,\n        isAuthenticated: state.isAuthenticated,\n        currentProfile: state.currentProfile,\n        sidebarCollapsed: state.sidebarCollapsed,\n        isOfflineMode: state.isOfflineMode\n      })\n    }\n  )\n);\n\n// 🔄 客戶端自動 hydrate（恢復登入狀態）\nif (typeof window !== 'undefined') {\n  // @ts-expect-error - zustand persist API type issue\n  useAuthStore.persist.rehydrate();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/calendar-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/create-store.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'markAsSynced' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateCode' is defined but never used. Allowed unused vars must match /^_/u.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fastInsert' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":146,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4995,4998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4995,4998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5904,5907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5904,5907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8459,8462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8459,8462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8783,8786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8783,8786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10774,10777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10774,10777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12765,12768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12765,12768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":391,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13557,13560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13557,13560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":454,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15806,15809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15806,15809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15847,15850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15847,15850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":511,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":511,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17839,17842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17839,17842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Zustand Store 工廠函數\n * 支援 Supabase 雲端同步 + IndexedDB 本地快取\n *\n * 架構：\n * - Supabase: 雲端資料庫（Single Source of Truth）\n * - IndexedDB: 本地快取（離線支援）\n * - Zustand: UI 狀態管理\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nimport { BaseEntity } from '@/types';\n\nimport { memoryCache } from '@/lib/cache/memory-cache';\nimport { localDB } from '@/lib/db';\nimport { TableName } from '@/lib/db/schemas';\nimport { isSyncableTable } from '@/lib/db/sync-schema-helper';\nimport { withSyncFields, markAsSynced } from '@/lib/db/sync-utils';\nimport { generateUUID } from '@/lib/utils/uuid';\nimport { logger } from '@/lib/utils/logger';\nimport { backgroundSyncService } from '@/lib/sync/background-sync-service';\n\n/**\n * Store 狀態介面\n */\ninterface StoreState<T extends BaseEntity> {\n  // 資料狀態\n  items: T[];\n  loading: boolean;\n  error: string | null;\n\n  // 🔧 新增：請求取消控制器\n  _abortController?: AbortController;\n\n  // CRUD 操作\n  fetchAll: () => Promise<void>;\n  fetchById: (id: string) => Promise<T | null>;\n  create: (data: Omit<T, 'id' | 'created_at' | 'updated_at'>) => Promise<T>;\n  update: (id: string, data: Partial<T>) => Promise<T>;\n  delete: (id: string) => Promise<void>;\n\n  // 批次操作\n  createMany: (dataArray: Omit<T, 'id' | 'created_at' | 'updated_at'>[]) => Promise<T[]>;\n  deleteMany: (ids: string[]) => Promise<void>;\n\n  // 查詢操作\n  findByField: (field: keyof T, value: unknown) => T[];\n  filter: (predicate: (item: T) => boolean) => T[];\n  count: () => number;\n\n  // 工具方法\n  clear: () => Promise<void>;\n  setError: (error: string | null) => void;\n  setLoading: (loading: boolean) => void;\n  cancelRequests: () => void; // 🔧 新增：取消進行中的請求\n}\n\n/**\n * 編號生成配置\n */\ninterface CodeConfig {\n  prefix: string; // 前綴（如 'T', 'O', 'C'）\n  year?: number;  // 年份（預設當前年份）\n}\n\n/**\n * 生成編號\n */\nfunction generateCode(config: CodeConfig, existingItems: BaseEntity[]): string {\n  const year = config.year || new Date().getFullYear();\n  const yearStr = year.toString();\n\n  // 找出當年度最大的流水號\n  const prefix = `${config.prefix}${yearStr}`;\n  const maxNumber = existingItems\n    .map((item) => {\n      if ('code' in item) {\n        const code = (item as { code?: string }).code;\n        if (code?.startsWith(prefix)) {\n          const numPart = code.substring(prefix.length);\n          return parseInt(numPart, 10) || 0;\n        }\n      }\n      return 0;\n    })\n    .reduce((max, num) => Math.max(max, num), 0);\n\n  // 生成新編號\n  const nextNumber = (maxNumber + 1).toString().padStart(4, '0');\n  return `${prefix}${nextNumber}`;\n}\n\n/**\n * Store 配置選項\n */\ninterface StoreConfig {\n  /** 資料表名稱 */\n  tableName: TableName;\n  /** 編號前綴（可選，如 'T', 'O', 'C'） */\n  codePrefix?: string;\n  /** 是否啟用 Supabase 同步（預設讀取環境變數） */\n  enableSupabase?: boolean;\n  /** FastIn 模式：本地先寫入 IndexedDB → 背景同步 Supabase（預設 true） */\n  fastInsert?: boolean;\n}\n\n/**\n * 建立 Store 工廠函數\n *\n * @example\n * // 基本使用\n * const useTourStore = createStore({ tableName: 'tours', codePrefix: 'T' });\n *\n * // FastIn 模式（預設）\n * const useQuoteStore = createStore({ tableName: 'quotes', fastInsert: true });\n *\n * // Supabase 優先模式\n * const useOrderStore = createStore({ tableName: 'orders', fastInsert: false });\n */\nexport function createStore<T extends BaseEntity>(\n  tableNameOrConfig: TableName | StoreConfig,\n  codePrefixParam?: string,\n  enableSupabaseParam: boolean = process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true'\n) {\n  // 支援兩種調用方式：1. 舊版參數 2. 配置物件\n  let config: StoreConfig;\n  if (typeof tableNameOrConfig === 'string') {\n    // 舊版調用方式（向後相容）\n    config = {\n      tableName: tableNameOrConfig,\n      codePrefix: codePrefixParam,\n      enableSupabase: enableSupabaseParam,\n      fastInsert: true, // 預設啟用 FastIn\n    };\n  } else {\n    // 新版配置物件\n    config = {\n      ...tableNameOrConfig,\n      enableSupabase: tableNameOrConfig.enableSupabase ?? (process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true'),\n      fastInsert: tableNameOrConfig.fastInsert ?? true, // 預設啟用 FastIn\n    };\n  }\n\n  const { tableName, codePrefix, enableSupabase, fastInsert } = config;\n  const store = create<StoreState<T>>()(\n    persist(\n      (set, get) => ({\n        // 初始狀態\n        items: [],\n        loading: false,\n        error: null,\n\n        // 設定載入狀態\n        setLoading: (loading: boolean) => set({ loading }),\n\n        // 設定錯誤\n        setError: (error: string | null) => set({ error }),\n\n        // 取得所有資料（IndexedDB 優先顯示，背景同步 Supabase）\n        fetchAll: async () => {\n          try {\n            // 🔧 取消前一個請求\n            const state = get();\n            if (state._abortController) {\n              state._abortController.abort();\n            }\n\n            // 建立新的 AbortController\n            const controller = new AbortController();\n            set({ loading: true, error: null, _abortController: controller });\n\n            if (enableSupabase && typeof window !== 'undefined') {\n              // 1. 先從 IndexedDB 讀取\n              let cachedItems = await localDB.getAll(tableName) as T[];\n              // 過濾軟刪除的項目\n              cachedItems = cachedItems.filter((item: any) => !item._deleted);\n\n              // 2. 檢查是否需要首次初始化下載\n              const initFlag = `${tableName}_initialized`;\n              const isInitialized = localStorage.getItem(initFlag);\n\n              if (!isInitialized && cachedItems.length === 0) {\n                // 🔄 首次載入 + 本地為空 → 前景完整下載\n                logger.log(`🔄 [${tableName}] 首次初始化，從 Supabase 下載資料...`);\n\n                try {\n                  const { supabase } = await import('@/lib/supabase/client');\n                  const { data, error: supabaseError } = await supabase\n                    .from(tableName)\n                    .select('*')\n                    .order('created_at', { ascending: true })\n                    .abortSignal(controller.signal);\n\n                  if (!supabaseError && data) {\n                    let items = (data || []) as T[];\n                    // 過濾軟刪除的項目\n                    items = items.filter((item: any) => !item._deleted);\n\n                    // 批次存入 IndexedDB\n                    for (const item of items) {\n                      await localDB.put(tableName, item);\n                    }\n\n                    // 更新 UI\n                    set({ items, loading: false });\n\n                    // 設置初始化標記\n                    localStorage.setItem(initFlag, 'true');\n\n                    logger.log(`✅ [${tableName}] 初始化完成:`, items.length, '筆');\n                    return;\n                  } else {\n                    logger.warn(`⚠️ [${tableName}] Supabase 初始化失敗，繼續使用空資料`);\n                  }\n                } catch (initError) {\n                  logger.warn(`⚠️ [${tableName}] 初始化下載失敗:`, initError);\n                }\n              }\n\n              // 3. 已初始化或有快取資料 → 使用快取優先策略\n              logger.log(`💾 [${tableName}] 從 IndexedDB 快速載入...`);\n\n              // 立即更新 UI（不等 Supabase）\n              set({ items: cachedItems, loading: false });\n              logger.log(`✅ [${tableName}] IndexedDB 快速載入完成:`, cachedItems.length, '筆');\n\n              // 2. 背景從 Supabase 同步（不阻塞 UI）\n              setTimeout(async () => {\n                try {\n                  // 🔄 Step 1: 先上傳待同步資料\n                  if (isSyncableTable(tableName)) {\n                    logger.log(`📤 [${tableName}] 上傳待同步資料...`);\n                    await backgroundSyncService.syncTable(tableName);\n                    logger.log(`✅ [${tableName}] 待同步資料已上傳`);\n                  }\n\n                  // 🔄 Step 2: 下載最新資料\n                  logger.log(`☁️ [${tableName}] 背景同步 Supabase...`);\n                  const { supabase } = await import('@/lib/supabase/client');\n\n                  const { data, error: supabaseError } = await supabase\n                    .from(tableName)\n                    .select('*')\n                    .order('created_at', { ascending: true })\n                    .abortSignal(controller.signal);\n\n                  if (supabaseError) {\n                    logger.warn(`⚠️ [${tableName}] Supabase 同步失敗，繼續使用快取資料`);\n                    return;\n                  }\n\n                  const items = (data || []) as T[];\n                  // TODO: 軟刪除機制需要重新設計（目前暫時移除 _deleted 過濾）\n                  // items = items.filter((item: any) => !item._deleted);\n\n                  logger.log(`✅ [${tableName}] Supabase 同步成功:`, items.length, '筆');\n\n                  // 🔧 修正：合併本地待上傳資料，不直接覆蓋\n                  const currentItems = get().items;\n\n                  // 找出本地有但 Supabase 沒有的資料（待上傳或新增的）\n                  const localOnlyItems = currentItems.filter((localItem: any) => {\n                    // 過濾軟刪除項目\n                    if (localItem._deleted) return false;\n\n                    // 保留有 _needs_sync: true 標記的本地資料（新增或修改）\n                    if (localItem._needs_sync === true) return true;\n                    // 保留 Supabase 中不存在的資料\n                    return !items.find((serverItem: any) => serverItem.id === localItem.id);\n                  });\n\n                  // 合併：Supabase 資料 + 本地專屬資料\n                  const mergedItems = [...items, ...localOnlyItems];\n\n                  if (JSON.stringify(mergedItems) !== JSON.stringify(currentItems)) {\n                    set({ items: mergedItems });\n                    logger.log(`🔄 [${tableName}] UI 已更新 (Supabase: ${items.length} 筆 + 本地: ${localOnlyItems.length} 筆)`);\n                  }\n\n                  // 分批更新 IndexedDB 快取\n                  const batchSize = 10;\n                  const syncBatch = async (startIndex: number) => {\n                    if (startIndex >= items.length) {\n                      logger.log(`✅ [${tableName}] IndexedDB 快取完成 (共 ${items.length} 筆)`);\n                      return;\n                    }\n                    const batch = items.slice(startIndex, startIndex + batchSize);\n                    await Promise.all(batch.map(item => localDB.put(tableName, item)));\n                    setTimeout(() => syncBatch(startIndex + batchSize), 10);\n                  };\n                  syncBatch(0).catch(err => {\n                    logger.warn(`⚠️ [${tableName}] IndexedDB 快取失敗:`, err);\n                  });\n                } catch (syncError) {\n                  logger.warn(`⚠️ [${tableName}] 背景同步失敗:`, syncError);\n                }\n              }, 0);\n\n            } else {\n              // 從 IndexedDB 讀取（離線模式或未啟用 Supabase）\n              logger.log(`💾 [${tableName}] 從 IndexedDB 載入資料...`);\n              const items = await localDB.getAll(tableName) as T[];\n\n              // TODO: 軟刪除機制需要重新設計（目前暫時移除 _deleted 過濾）\n              // items = items.filter((item: any) => !item._deleted);\n\n              set({ items, loading: false });\n              logger.log(`✅ [${tableName}] IndexedDB 讀取成功:`, items.length, '筆');\n            }\n\n          } catch (error) {\n            // 🔧 忽略 AbortError（正常的請求取消）\n            if (error && typeof error === 'object' && 'code' in error && (error as any).code === '20') {\n              set({ loading: false });\n              return;\n            }\n\n            // 🔧 忽略 AbortError（DOMException 類型）\n            if (error && error instanceof Error && error.name === 'AbortError') {\n              set({ loading: false });\n              return;\n            }\n\n            // 🔧 任何其他錯誤：靜默切換到本地模式\n            try {\n              const items = await localDB.getAll(tableName) as T[];\n              // TODO: 軟刪除機制需要重新設計（目前暫時移除 _deleted 過濾）\n              // items = items.filter((item: any) => !item._deleted);\n              set({ items, loading: false, error: null });\n              logger.log(`💾 [${tableName}] IndexedDB 讀取成功:`, items.length, '筆');\n            } catch (localError) {\n              // 連 IndexedDB 都失敗，才顯示錯誤\n              logger.error(`❌ [${tableName}] 無法載入資料:`, localError);\n              set({ error: '無法載入資料', loading: false });\n            }\n          }\n        },\n\n        // 根據 ID 取得單筆\n        fetchById: async (id: string) => {\n          try {\n            set({ loading: true, error: null });\n\n            // 嘗試從 Supabase 讀取\n            if (enableSupabase && typeof window !== 'undefined') {\n              try {\n                const { supabase } = await import('@/lib/supabase/client');\n                const { data, error: supabaseError } = await supabase\n                  .from(tableName)\n                  .select('*')\n                  .eq('id', id)\n                  .single();\n\n                if (supabaseError) throw supabaseError;\n\n                // Supabase 成功，返回資料\n                set({ loading: false });\n                return data as T;\n              } catch (supabaseError) {\n                // Supabase 失敗（找不到資料或連線錯誤），靜默降級到 IndexedDB\n                logger.log(`⚠️ [${tableName}] Supabase 查詢失敗，切換到本地模式`, supabaseError);\n              }\n            }\n\n            // 從 IndexedDB 讀取（無論是 Supabase 關閉或失敗）\n            const items = await localDB.getAll(tableName) as T[];\n            const item = items.find((i: any) => i.id === id) || null;\n            set({ loading: false });\n            return item;\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : '讀取失敗';\n            set({ error: errorMessage, loading: false });\n            logger.error(`❌ [${tableName}] fetchById 失敗:`, error);\n            return null;\n          }\n        },\n\n        // 建立資料（FastIn 模式：IndexedDB 優先 → 背景同步 Supabase）\n        create: async (data) => {\n          try {\n            set({ loading: true, error: null });\n\n            // 生成 ID\n            const id = generateUUID();\n\n            // 如果有 codePrefix，暫時使用 TBC 編號（背景同步時會取得正式編號）\n            let recordData = { ...data, id } as T;\n            if (codePrefix && 'code' in data) {\n              const existingCode = (data as any).code;\n              if (!existingCode) {\n                // FastIn 模式：一律先用 TBC 編號\n                const code: string = `${codePrefix}TBC`;\n                recordData = { ...recordData, code } as T;\n                logger.log(`⚡ [${tableName}] FastIn: 使用 TBC 編號 ${code}`);\n              }\n            }\n\n            // 檢查是否為可同步表\n            const needsSyncFields = isSyncableTable(tableName);\n\n            // FastIn Step 1: 立即寫入 IndexedDB\n            recordData = needsSyncFields\n              ? withSyncFields(recordData, false) as T  // _needs_sync: true\n              : recordData;\n\n            await localDB.put(tableName, recordData);\n            logger.log(`💾 [${tableName}] FastIn: 已寫入本地 IndexedDB`);\n\n            // FastIn Step 2: 立即更新 UI\n            set((state) => ({\n              items: [...state.items, recordData],\n              loading: false,\n            }));\n\n            logger.log(`⚡ [${tableName}] FastIn: UI 已更新（本地資料）`);\n\n            // FastIn Step 3: 背景同步到 Supabase（不阻塞 UI）\n            if (enableSupabase && typeof window !== 'undefined' && needsSyncFields) {\n              setTimeout(async () => {\n                try {\n                  logger.log(`☁️ [${tableName}] FastIn: 開始背景同步...`);\n                  await backgroundSyncService.syncTable(tableName);\n                  logger.log(`✅ [${tableName}] FastIn: 背景同步完成`);\n                } catch (syncError) {\n                  logger.warn(`⚠️ [${tableName}] FastIn: 背景同步失敗（不影響本地資料）`, syncError);\n                }\n              }, 0);\n            }\n\n            return recordData;\n\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : '建立失敗';\n            set({ error: errorMessage, loading: false });\n            throw error;\n          }\n        },\n\n        // 更新資料（FastIn 模式：IndexedDB 優先 → 背景同步 Supabase）\n        update: async (id: string, data: Partial<T>) => {\n          try {\n            set({ loading: true, error: null });\n\n            // 檢查是否為可同步表\n            const needsSyncFields = isSyncableTable(tableName);\n\n            // FastIn Step 1: 準備更新資料（標記為待同步）\n            let syncData = data;\n            if (needsSyncFields) {\n              syncData = {\n                ...data,\n                _needs_sync: true as any,\n                _synced_at: null as any,\n              };\n            }\n\n            // FastIn Step 2: 立即更新 IndexedDB\n            await localDB.update(tableName, id, syncData);\n            logger.log(`💾 [${tableName}] FastIn: 已更新本地 IndexedDB`);\n\n            // FastIn Step 3: 立即更新 UI\n            let updatedItem: T | undefined;\n            set((state) => {\n              const newItems = (state.items || []).map(item => {\n                if (item.id === id) {\n                  updatedItem = { ...item, ...syncData, updated_at: new Date().toISOString() };\n                  return updatedItem;\n                }\n                return item;\n              });\n              return { items: newItems, loading: false };\n            });\n\n            if (!updatedItem) {\n              throw new Error('找不到要更新的項目');\n            }\n\n            logger.log(`⚡ [${tableName}] FastIn: UI 已更新（本地資料）`);\n\n            // FastIn Step 4: 背景同步到 Supabase（不阻塞 UI）\n            if (enableSupabase && typeof window !== 'undefined' && needsSyncFields) {\n              setTimeout(async () => {\n                try {\n                  logger.log(`☁️ [${tableName}] FastIn: 開始背景同步...`);\n                  await backgroundSyncService.syncTable(tableName);\n                  logger.log(`✅ [${tableName}] FastIn: 背景同步完成`);\n                } catch (syncError) {\n                  logger.warn(`⚠️ [${tableName}] FastIn: 背景同步失敗（不影響本地資料）`, syncError);\n                }\n              }, 0);\n            }\n\n            return updatedItem;\n\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : '更新失敗';\n            set({ error: errorMessage, loading: false });\n            throw error;\n          }\n        },\n\n        // 刪除資料（FastIn 模式：立即刪除 → 背景同步 Supabase）\n        delete: async (id: string) => {\n          try {\n            set({ loading: true, error: null });\n\n            // FastIn Step 1: 加入刪除隊列（用於背景同步）\n            const items = await localDB.getAll(tableName) as T[];\n            const item = items.find((i: any) => i.id === id);\n\n            if (item) {\n              // 加入刪除隊列\n              try {\n                await localDB.put('syncQueue', {\n                  id: generateUUID(),\n                  table_name: tableName,\n                  record_id: id,\n                  operation: 'delete',\n                  data: item,\n                  created_at: new Date().toISOString(),\n                });\n                logger.log(`📝 [${tableName}] FastIn: 已加入刪除隊列`);\n              } catch (queueError) {\n                logger.warn(`⚠️ [${tableName}] FastIn: 無法加入刪除隊列:`, queueError);\n              }\n            }\n\n            // FastIn Step 2: 立即從 IndexedDB 刪除\n            await localDB.delete(tableName, id);\n            logger.log(`💾 [${tableName}] FastIn: 已從本地刪除`);\n\n            // FastIn Step 3: 立即更新 UI\n            set((state) => ({\n              items: (state.items || []).filter(item => item.id !== id),\n              loading: false,\n            }));\n\n            logger.log(`⚡ [${tableName}] FastIn: UI 已更新（本地刪除）`);\n\n            // FastIn Step 4: 背景同步到 Supabase（不阻塞 UI）\n            if (enableSupabase && typeof window !== 'undefined') {\n              setTimeout(async () => {\n                try {\n                  logger.log(`☁️ [${tableName}] FastIn: 開始背景同步刪除...`);\n                  await backgroundSyncService.syncTable(tableName);\n                  logger.log(`✅ [${tableName}] FastIn: 背景同步刪除完成`);\n                } catch (syncError) {\n                  logger.warn(`⚠️ [${tableName}] FastIn: 背景同步刪除失敗（不影響本地）`, syncError);\n                }\n              }, 0);\n            }\n\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : '刪除失敗';\n            set({ error: errorMessage, loading: false });\n            throw error;\n          }\n        },\n\n        // 批次建立\n        createMany: async (dataArray) => {\n          const results: T[] = [];\n\n          for (const data of dataArray) {\n            const created = await get().create(data);\n            results.push(created);\n          }\n\n          return results;\n        },\n\n        // 批次刪除\n        deleteMany: async (ids: string[]) => {\n          for (const id of ids) {\n            await get().delete(id);\n          }\n        },\n\n        // 根據欄位查詢\n        findByField: (field: keyof T, value: unknown) => {\n          return get().items.filter((item) => item[field] === value);\n        },\n\n        // 自訂過濾\n        filter: (predicate: (item: T) => boolean) => {\n          return get().items.filter(predicate);\n        },\n\n        // 計數\n        count: () => {\n          return get().items.length;\n        },\n\n        // 清空資料\n        clear: async () => {\n          set({ items: [], error: null });\n          memoryCache.invalidatePattern(`${tableName}:`);\n        },\n\n        // 🔄 同步待處理資料到 Supabase（手動觸發）\n        syncPending: async () => {\n          if (!enableSupabase || typeof window === 'undefined') {\n            logger.log(`⏭️ [${tableName}] 跳過同步（Supabase 未啟用或非瀏覽器環境）`);\n            return;\n          }\n\n          try {\n            logger.log(`🔄 [${tableName}] 開始手動同步...`);\n\n            // 使用背景同步服務\n            await backgroundSyncService.syncTable(tableName);\n\n            // 同步完成後重新載入資料\n            await get().fetchAll();\n\n            logger.log(`✅ [${tableName}] 同步完成`);\n          } catch (error) {\n            logger.error(`❌ [${tableName}] 同步失敗:`, error);\n            throw error;\n          }\n        },\n\n        // 🔧 取消進行中的請求\n        cancelRequests: () => {\n          const state = get();\n          if (state._abortController) {\n            state._abortController.abort();\n            set({ _abortController: undefined, loading: false });\n            logger.log(`🛑 [${tableName}] 已取消進行中的請求`);\n          }\n        },\n      }),\n      {\n        name: `${tableName}-storage`,\n        // 只持久化 items，不持久化 loading 和 error\n        partialize: (state) => ({ items: state.items }),\n      }\n    )\n  );\n\n  // 監聽網路同步完成事件，自動重新載入資料\n  if (typeof window !== 'undefined') {\n    const handleSyncCompleted = () => {\n      logger.log(`📥 [${tableName}] 收到同步完成通知，重新載入資料...`);\n      store.getState().fetchAll();\n    };\n\n    window.addEventListener('venturo:sync-completed', handleSyncCompleted);\n\n    // 注意：在實際應用中，應該在適當的時機移除監聽器\n    // 但由於 Store 是全域單例，通常不需要清理\n  }\n\n  return store;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/home-settings-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2268,2271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2268,2271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Stores 統一匯出\n * 使用工廠函數建立所有 Store\n * 支援 Supabase 雲端同步 + IndexedDB 本地快取\n */\n\nimport { createStore } from './create-store';\n\n// 從 @/types 匯入（使用 types/ 目錄下的標準定義）\nimport type {\n  Tour,\n  Order,\n  Member,\n  Customer,\n  ReceiptOrder,\n  Employee,\n  Region,\n} from '@/types';\n\n// 從本地 types 匯入（包含 PaymentRequest, DisbursementOrder 等）\nimport type {\n  PaymentRequest,\n  DisbursementOrder,\n  Todo,\n  Visa,\n  Payment,\n  Quote,\n  QuoteItem,\n  Itinerary,\n} from './types';\n\n// Supplier 從標準 types 匯入（完整定義含 supplier_code, country, location）\nimport type { Supplier } from '@/types/supplier.types';\n\n// ============================================\n// 業務實體 Stores（有編號前綴）\n// ============================================\n\n/**\n * 旅遊團 Store\n * 編號格式：T{year}{4位數} (如: T20240001)\n */\nexport const useTourStore = createStore<Tour>('tours', 'T');\n\n/**\n * 行程表 Store\n * 編號格式：I{year}{4位數} (如: I20240001)\n */\nexport const useItineraryStore = createStore<Itinerary>('itineraries', 'I');\n\n/**\n * 訂單 Store\n * 編號格式：O{year}{4位數} (如: O20240001)\n */\nexport const useOrderStore = createStore<Order>('orders', 'O');\n\n/**\n * 客戶 Store\n * 編號格式：C{year}{4位數} (如: C20240001)\n */\nexport const useCustomerStore = createStore<Customer>('customers', 'C');\n\n/**\n * 報價單 Store\n * 編號格式：Q{year}{4位數} (如: Q20240001)\n */\nexport const useQuoteStore = createStore<Quote>('quotes', 'Q');\n\n/**\n * 請款單 Store\n * 編號格式：PR{year}{4位數} (如: PR20240001)\n */\nexport const usePaymentRequestStore = createStore<PaymentRequest>(\n  'payment_requests',\n  'PR'\n);\n\n/**\n * 出納單 Store\n * 編號格式：DO{year}{4位數} (如: DO20240001)\n */\nexport const useDisbursementOrderStore = createStore<DisbursementOrder>(\n  'disbursement_orders',\n  'DO'\n);\n\n/**\n * 收款單 Store\n * 編號格式：RO{year}{4位數} (如: RO20240001)\n */\nexport const useReceiptOrderStore = createStore<ReceiptOrder>(\n  'receipt_orders',\n  'RO'\n);\n\n// ============================================\n// 子實體 Stores（無編號）\n// ============================================\n\n/**\n * 團員 Store\n * 無獨立編號，依附於訂單\n */\nexport const useMemberStore = createStore<Member>('members');\n\n/**\n * 報價項目 Store\n * 無獨立編號，依附於報價單\n */\nexport const useQuoteItemStore = createStore<QuoteItem>('quote_items');\n\n/**\n * 團體加購項目 Store\n * 無獨立編號，依附於旅遊團\n */\nexport const useTourAddOnStore = createStore<import('./types').TourAddOn>('tour_addons' as any);\n\n// ============================================\n// 系統管理 Stores（無編號）\n// ============================================\n\n/**\n * 員工 Store\n * 使用員工編號（employee_number），不是 code\n */\nexport const useEmployeeStore = createStore<Employee>('employees');\n\n// ============================================\n// 待補充的 Stores（根據需要啟用）\n// ============================================\n\n// 待辦事項 Store\nexport const useTodoStore = createStore<Todo>('todos');\n\n// 簽證 Store\nexport const useVisaStore = createStore<Visa>('visas', 'V');\n\n// 供應商 Store\nexport const useSupplierStore = createStore<Supplier>('suppliers', 'S');\n\n// 地區 Store\nexport const useRegionStore = createStore<Region>('regions');\n\n// 行事曆事件 Store\nexport const useCalendarEventStore = createStore<import('@/types/calendar.types').CalendarEvent>('calendar_events');\n\n// TODO: WorkspaceItem, Template, TimeboxSession 型別需要定義後再啟用\n// export const useTemplateStore = createStore<Template>('templates');\n// export const useTimeboxSessionStore = createStore<TimeboxSession>('timebox_sessions');\n// export const useWorkspaceItemStore = createStore<WorkspaceItem>('workspace_items');\n\n// ============================================\n// 型別匯出（方便使用）\n// ============================================\n\n// ============================================\n// 保留的特殊 Stores（認證、UI 狀態）\n// ============================================\n\nexport { useAuthStore } from './auth-store';\nexport { useThemeStore } from './theme-store';\nexport { useHomeSettingsStore } from './home-settings-store';\n\n// ============================================\n// 暫時保留的複雜 Stores（待重構）\n// ============================================\n\n// TODO: 移到 hooks/use-employees.ts\nexport { useUserStore } from './user-store';\n\n// TODO: 拆分為 4 個 createStore + hooks/use-accounting.ts\nexport { useAccountingStore } from './accounting-store';\n\n// TODO: 移到 hooks/use-calendar.ts\n// calendar-store 需要額外的 settings 功能，暫時保留\nexport { useCalendarStore } from './calendar-store';\n\n// TODO: 移到 hooks/use-timebox.ts\nexport { useTimeboxStore } from './timebox-store';\n\n// TODO: 已有 useTemplateStore，檢查是否重複\n// export { useTemplateStore } from './template-store';\n\n// TODO: 已有 useWorkspaceItemStore，檢查是否重複\nexport { useWorkspaceStore } from './workspace-store';\n\n// ============================================\n// 暫時保留的舊 Stores（待重構）\n// ============================================\n\n/**\n * @deprecated payment-store 將逐步遷移到新架構\n *\n * 此 Store 包含：\n * - PaymentRequest (請款單) - 應改用 usePaymentRequestStore\n * - DisbursementOrder (出納單) - 應改用 useDisbursementOrderStore\n * - 複雜的業務邏輯 - 應移到 payment.service.ts\n *\n * TODO:\n * - [ ] 遷移 PaymentRequest 相關頁面\n * - [ ] 遷移 DisbursementOrder 相關頁面\n * - [ ] 業務邏輯移到 service\n * - [ ] 刪除 payment-store.deprecated.ts\n */\n// usePaymentStore 已遷移到新架構（payment-store.deprecated.ts）\n// 新的 Store：usePaymentRequestStore, useDisbursementOrderStore\n// export { usePaymentStore } from './payment-store'; // DEPRECATED\n\n// ============================================\n// 型別匯出（方便使用）\n// ============================================\n\nexport type {\n  Tour,\n  Itinerary,\n  Order,\n  Member,\n  Customer,\n  Payment,\n  PaymentRequest,\n  DisbursementOrder,\n  ReceiptOrder,\n  Quote,\n  QuoteItem,\n  Employee,\n  Todo,\n  Visa,\n  Supplier,\n  Region,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/template-store.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_PAPER_SETTINGS' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":31,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nimport { Template, GeneratedDocument, PaperSettings } from '@/types/template';\nimport { logger } from '@/lib/utils/logger';\n\ninterface TemplateStore {\n  // 狀態\n  templates: Template[];\n  documents: GeneratedDocument[];\n\n  // 模板操作（統一使用 Promise）\n  addTemplate: (template: Omit<Template, 'id' | 'version' | 'usage_count' | 'metadata' | 'is_deleted'>) => Promise<Template>;\n  updateTemplate: (id: string, updates: Partial<Template>) => Promise<void>;\n  deleteTemplate: (id: string, user_id: string) => Promise<void>;\n  getTemplate: (id: string) => Template | undefined;\n  duplicateTemplate: (id: string, newName: string) => Promise<Template>;\n\n  // 文件操作\n  addDocument: (document: Omit<GeneratedDocument, 'id' | 'created_at'>) => Promise<GeneratedDocument>;\n  getDocumentsByTemplate: (template_id: string) => GeneratedDocument[];\n\n  // 工具函數\n  incrementUsageCount: (templateId: string) => void;\n\n  // 初始化預設模板\n  initializeDefaultTemplates: () => void;\n}\n\n// 預設紙張設定\nconst DEFAULT_PAPER_SETTINGS: PaperSettings = {\n  size: 'A4',\n  orientation: 'portrait',\n  margins: {\n    top: 2.0,\n    bottom: 2.0,\n    left: 2.0,\n    right: 2.0,\n  },\n  show_grid: true,\n  show_ruler: true,\n};\n\nexport const useTemplateStore = create<TemplateStore>()(\n  persist(\n    (set, get) => ({\n      templates: [],\n      documents: [],\n\n      addTemplate: async (templateData) => {\n        const newTemplate: Template = {\n          ...templateData,\n          id: crypto.randomUUID(),\n          version: 1,\n          usage_count: 0,\n          is_deleted: false,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          metadata: {\n            created_by: templateData.paper_settings ? 'user' : 'system',\n          },\n        };\n\n        set((state) => ({\n          templates: [...state.templates, newTemplate],\n        }));\n\n        return newTemplate;\n      },\n\n      updateTemplate: async (id, updates) => {\n        set((state) => ({\n          templates: state.templates.map((template) =>\n            template.id === id\n              ? {\n                  ...template,\n                  ...updates,\n                  metadata: {\n                    ...template.metadata,\n                    updated_at: new Date().toISOString(),\n                  },\n                }\n              : template\n          ),\n        }));\n      },\n\n      deleteTemplate: async (id, user_id) => {\n        set((state) => ({\n          templates: state.templates.map((template) =>\n            template.id === id\n              ? {\n                  ...template,\n                  is_deleted: true,\n                  deleted_at: new Date().toISOString(),\n                  deleted_by: user_id,\n                }\n              : template\n          ),\n        }));\n      },\n\n      getTemplate: (id) => {\n        return get().templates.find((t) => t.id === id && !t.is_deleted);\n      },\n\n      duplicateTemplate: async (id, newName) => {\n        const original = get().getTemplate(id);\n        if (!original) {\n          throw new Error('Template not found');\n        }\n\n        const duplicated: Template = {\n          ...original,\n          id: crypto.randomUUID(),\n          name: newName,\n          version: 1,\n          usage_count: 0,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          metadata: {\n            created_by: original.metadata.created_by,\n          },\n        };\n\n        set((state) => ({\n          templates: [...state.templates, duplicated],\n        }));\n\n        return duplicated;\n      },\n\n      addDocument: async (documentData) => {\n        const newDocument: GeneratedDocument = {\n          ...documentData,\n          id: crypto.randomUUID(),\n          created_at: new Date().toISOString(),\n        };\n\n        set((state) => ({\n          documents: [...state.documents, newDocument],\n        }));\n\n        // 增加模板使用次數\n        get().incrementUsageCount(documentData.template_id);\n\n        return newDocument;\n      },\n\n      getDocumentsByTemplate: (templateId) => {\n        return get().documents.filter((doc) => doc.template_id === templateId);\n      },\n\n      incrementUsageCount: (templateId) => {\n        set((state) => ({\n          templates: state.templates.map((template) =>\n            template.id === templateId\n              ? { ...template, usage_count: template.usage_count + 1 }\n              : template\n          ),\n        }));\n      },\n\n      initializeDefaultTemplates: () => {\n        const { templates } = get();\n        if (templates.length === 0) {\n          // 目前不自動建立預設模板\n          // 等待使用者從設計器建立\n          logger.log('模板列表為空，等待使用者建立第一個模板');\n        }\n      },\n    }),\n    {\n      name: 'template-storage',\n    }\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/theme-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/timebox-store-supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":433,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11309,11312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11309,11312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ⚠️ EXPERIMENTAL - NOT IN USE ⚠️\n *\n * 這是實驗性的 Supabase 版時間箱 Store，目前未被使用。\n *\n * 現況：\n * - 所有頁面使用 timebox-store.ts（本地 persist 版本）\n * - 此檔案採用 VenturoAPI + currentUserId 非同步流程\n * - 欄位結構與 timebox-store.ts 不同（user_id vs 無用戶欄位）\n * - 沒有任何地方載入此模組\n *\n * 使用中的版本：src/stores/timebox-store.ts\n *\n * 決策待定：\n * 1. 如要啟用 Supabase 版，需同步更新所有 UI 為非同步流程\n * 2. 如不啟用，建議重新命名或搬移到 experimental/ 目錄\n *\n * 此檔案保留作為未來整合 Supabase 的參考實作。\n */\n\nimport { create } from 'zustand'\n\nimport { VenturoAPI } from '@/lib/supabase/api'\nimport { logger } from '@/lib/utils/logger'\n\n// 基礎類型定義\nexport interface BaseBox {\n  id: string\n  user_id: string\n  name: string\n  color: string\n  type: 'workout' | 'reminder' | 'basic'\n  created_at: Date\n  updated_at: Date\n  // 重訓專用欄位\n  equipment?: string\n  weight?: number\n  reps?: number\n  sets?: number\n}\n\n// 重訓資料\nexport interface WorkoutData {\n  setsCompleted: boolean[]\n  completedSetsTime: Date[]\n  totalVolume?: number\n}\n\n// 提醒資料\nexport interface ReminderData {\n  text: string\n  lastUpdated: Date\n}\n\n// 排程箱子實例\nexport interface ScheduledBox {\n  id: string\n  boxId: string\n  weekId: string\n  user_id: string\n  dayOfWeek: number\n  start_time: string\n  duration: number\n  completed: boolean\n  completedAt?: Date\n  workoutData?: WorkoutData\n  reminderData?: ReminderData\n}\n\n// 週記錄\nexport interface WeekRecord {\n  id: string\n  user_id: string\n  weekStart: Date\n  weekEnd: Date\n  name?: string\n  archived: boolean\n  completionRate: number\n  totalWorkoutVolume?: number\n  totalWorkoutSessions?: number\n  completedCount: number\n  totalCount: number\n  reviewNotes?: string\n  reviewCreatedAt?: Date\n}\n\n// 統計資料\nexport interface WeekStatistics {\n  completionRate: number\n  totalWorkoutTime: number\n  completedByType: {\n    workout: number\n    reminder: number\n    basic: number\n  }\n  totalWorkoutVolume?: number\n  totalWorkoutSessions?: number\n}\n\n// 莫蘭迪配色選項\nexport const morandiColors = [\n  { name: '柔霧粉', value: '#E2C4C4', hover: '#D9B3B3' },\n  { name: '晨露綠', value: '#C4D6C4', hover: '#B3CAB3' },\n  { name: '雲石灰', value: '#D4D4D4', hover: '#C4C4C4' },\n  { name: '奶茶棕', value: '#D6C4B8', hover: '#CAB3A5' },\n  { name: '薰衣草', value: '#D0C4D6', hover: '#C3B3CA' },\n  { name: '杏仁黃', value: '#E0D6B8', hover: '#D6CAA5' },\n  { name: '海霧藍', value: '#C4D0D6', hover: '#B3C3CA' },\n  { name: '珊瑚橘', value: '#E0C8B8', hover: '#D6B9A5' },\n  { name: '鼠尾草', value: '#B8C8B8', hover: '#A5B9A5' },\n  { name: '暮色紫', value: '#C4B8D0', hover: '#B3A5C3' },\n  { name: '燕麥米', value: '#D6D0C4', hover: '#CAC3B3' },\n  { name: '石墨藍', value: '#B8C4D0', hover: '#A5B3C3' },\n  { name: '楓葉紅', value: '#D0B8B8', hover: '#C3A5A5' },\n  { name: '苔蘚綠', value: '#B8C4B8', hover: '#A5B3A5' },\n  { name: '砂岩褐', value: '#C8B8B0', hover: '#B9A59C' },\n  { name: '月光白', value: '#E8E8E8', hover: '#DEDEDE' },\n]\n\ninterface TimeboxState {\n  // 當前使用者 ID\n  currentUserId: string | null\n  setCurrentUserId: (user_id: string) => void\n\n  // 狀態\n  boxes: BaseBox[]\n  currentWeek: WeekRecord | null\n  scheduledBoxes: ScheduledBox[]\n  weekRecords: WeekRecord[]\n  loading: boolean\n  error: string | null\n\n  // 箱子管理\n  loadBoxes: () => Promise<void>\n  createBox: (box: Omit<BaseBox, 'id' | 'user_id' | 'created_at' | 'updated_at'>) => Promise<void>\n  updateBox: (id: string, updates: Partial<BaseBox>) => Promise<void>\n  deleteBox: (id: string) => Promise<void>\n\n  // 週記錄\n  loadCurrentWeek: () => Promise<void>\n  loadWeekRecords: () => Promise<void>\n  initializeCurrentWeek: (weekStart: Date) => Promise<void>\n  archiveCurrentWeek: (name: string) => Promise<void>\n\n  // 排程管理\n  loadScheduledBoxes: (weekId: string) => Promise<void>\n  addScheduledBox: (box: Omit<ScheduledBox, 'id' | 'user_id'>) => Promise<void>\n  updateScheduledBox: (id: string, updates: Partial<ScheduledBox>) => Promise<void>\n  removeScheduledBox: (id: string) => Promise<void>\n  toggleBoxCompletion: (id: string) => Promise<void>\n  toggleSetCompletion: (boxId: string, setIndex: number) => Promise<void>\n\n  // 統計\n  getWeekStatistics: () => WeekStatistics\n}\n\n// 輔助函數\nconst getWeekStart = (date: Date) => {\n  const d = new Date(date)\n  const day = d.getDay()\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1)\n  return new Date(d.setDate(diff))\n}\n\nconst getWeekEnd = (date: Date) => {\n  const start = getWeekStart(date)\n  const end = new Date(start)\n  end.setDate(start.getDate() + 6)\n  return end\n}\n\nexport const useTimeboxStore = create<TimeboxState>((set, get) => ({\n  // 初始狀態\n  currentUserId: null,\n  boxes: [],\n  currentWeek: null,\n  scheduledBoxes: [],\n  weekRecords: [],\n  loading: false,\n  error: null,\n\n  setCurrentUserId: (user_id) => {\n    set({ currentUserId: user_id })\n  },\n\n  // 載入箱子\n  loadBoxes: async () => {\n    const { currentUserId } = get()\n    if (!currentUserId) return\n\n    set({ loading: true, error: null })\n    try {\n      const boxes = await VenturoAPI.read<BaseBox>('timebox_boxes', {\n        filters: { user_id: currentUserId },\n        orderBy: { column: 'created_at', ascending: false }\n      })\n      set({ boxes, loading: false })\n    } catch (error) {\n      logger.error('載入箱子失敗:', error)\n      set({ error: '載入箱子失敗', loading: false })\n    }\n  },\n\n  // 建立箱子\n  createBox: async (boxData) => {\n    const { currentUserId } = get()\n    if (!currentUserId) return\n\n    try {\n      const newBox = await VenturoAPI.create<BaseBox>('timebox_boxes', {\n        ...boxData,\n        user_id: currentUserId\n      })\n      set((state) => ({ boxes: [newBox, ...state.boxes] }))\n    } catch (error) {\n      logger.error('建立箱子失敗:', error)\n      set({ error: '建立箱子失敗' })\n    }\n  },\n\n  // 更新箱子\n  updateBox: async (id, updates) => {\n    try {\n      const updatedBox = await VenturoAPI.update<BaseBox>('timebox_boxes', id, updates)\n      set((state) => ({\n        boxes: state.boxes.map((box) => (box.id === id ? updatedBox : box))\n      }))\n    } catch (error) {\n      logger.error('更新箱子失敗:', error)\n      set({ error: '更新箱子失敗' })\n    }\n  },\n\n  // 刪除箱子\n  deleteBox: async (id) => {\n    try {\n      await VenturoAPI.delete('timebox_boxes', id)\n      set((state) => ({\n        boxes: state.boxes.filter((box) => box.id !== id),\n        scheduledBoxes: state.scheduledBoxes.filter((sb) => sb.boxId !== id)\n      }))\n    } catch (error) {\n      logger.error('刪除箱子失敗:', error)\n      set({ error: '刪除箱子失敗' })\n    }\n  },\n\n  // 載入當前週\n  loadCurrentWeek: async () => {\n    const { currentUserId } = get()\n    if (!currentUserId) return\n\n    set({ loading: true })\n    try {\n      const today = new Date()\n      const weekStart = getWeekStart(today)\n\n      // 查詢當前週\n      const weeks = await VenturoAPI.read<WeekRecord>('timebox_weeks', {\n        filters: {\n          user_id: currentUserId,\n          weekStart: weekStart.toISOString().split('T')[0],\n          archived: false\n        }\n      })\n\n      if (weeks.length > 0) {\n        const currentWeek = weeks[0]\n        set({ currentWeek, loading: false })\n        await get().loadScheduledBoxes(currentWeek.id)\n      } else {\n        // 自動初始化當前週\n        await get().initializeCurrentWeek(weekStart)\n      }\n    } catch (error) {\n      logger.error('載入當前週失敗:', error)\n      set({ error: '載入當前週失敗', loading: false })\n    }\n  },\n\n  // 載入週記錄\n  loadWeekRecords: async () => {\n    const { currentUserId } = get()\n    if (!currentUserId) return\n\n    try {\n      const records = await VenturoAPI.read<WeekRecord>('timebox_weeks', {\n        filters: { user_id: currentUserId, archived: true },\n        orderBy: { column: 'weekStart', ascending: false }\n      })\n      set({ weekRecords: records })\n    } catch (error) {\n      logger.error('載入週記錄失敗:', error)\n      set({ error: '載入週記錄失敗' })\n    }\n  },\n\n  // 初始化當前週\n  initializeCurrentWeek: async (weekStart) => {\n    const { currentUserId } = get()\n    if (!currentUserId) return\n\n    try {\n      const weekEnd = getWeekEnd(weekStart)\n      const newWeek = await VenturoAPI.create<WeekRecord>('timebox_weeks', {\n        user_id: currentUserId,\n        weekStart: weekStart.toISOString().split('T')[0],\n        weekEnd: weekEnd.toISOString().split('T')[0],\n        archived: false,\n        completionRate: 0,\n        completedCount: 0,\n        totalCount: 0\n      })\n\n      set({ currentWeek: newWeek, scheduledBoxes: [] })\n    } catch (error) {\n      logger.error('初始化當前週失敗:', error)\n      set({ error: '初始化當前週失敗' })\n    }\n  },\n\n  // 封存當前週\n  archiveCurrentWeek: async (name) => {\n    const { currentWeek, scheduledBoxes } = get()\n    if (!currentWeek) return\n\n    try {\n      // 計算統計資料\n      const completedCount = scheduledBoxes.filter((box) => box.completed).length\n      const totalCount = scheduledBoxes.length\n      const completionRate = totalCount > 0 ? completedCount / totalCount : 0\n\n      await VenturoAPI.update('timebox_weeks', currentWeek.id, {\n        name,\n        archived: true,\n        completionRate,\n        completedCount,\n        totalCount\n      })\n\n      // 重新載入\n      await get().loadWeekRecords()\n      await get().loadCurrentWeek()\n    } catch (error) {\n      logger.error('封存週記錄失敗:', error)\n      set({ error: '封存週記錄失敗' })\n    }\n  },\n\n  // 載入排程\n  loadScheduledBoxes: async (weekId) => {\n    try {\n      const schedules = await VenturoAPI.read<ScheduledBox>('timebox_schedules', {\n        filters: { weekId },\n        orderBy: { column: 'dayOfWeek', ascending: true }\n      })\n      set({ scheduledBoxes: schedules })\n    } catch (error) {\n      logger.error('載入排程失敗:', error)\n      set({ error: '載入排程失敗' })\n    }\n  },\n\n  // 新增排程\n  addScheduledBox: async (boxData) => {\n    const { currentUserId } = get()\n    if (!currentUserId) return\n\n    try {\n      const newSchedule = await VenturoAPI.create<ScheduledBox>('timebox_schedules', {\n        ...boxData,\n        user_id: currentUserId\n      })\n      set((state) => ({\n        scheduledBoxes: [...state.scheduledBoxes, newSchedule]\n      }))\n    } catch (error) {\n      logger.error('新增排程失敗:', error)\n      set({ error: '新增排程失敗' })\n    }\n  },\n\n  // 更新排程\n  updateScheduledBox: async (id, updates) => {\n    try {\n      const updated = await VenturoAPI.update<ScheduledBox>('timebox_schedules', id, updates)\n      set((state) => ({\n        scheduledBoxes: state.scheduledBoxes.map((box) => (box.id === id ? updated : box))\n      }))\n    } catch (error) {\n      logger.error('更新排程失敗:', error)\n      set({ error: '更新排程失敗' })\n    }\n  },\n\n  // 刪除排程\n  removeScheduledBox: async (id) => {\n    try {\n      await VenturoAPI.delete('timebox_schedules', id)\n      set((state) => ({\n        scheduledBoxes: state.scheduledBoxes.filter((box) => box.id !== id)\n      }))\n    } catch (error) {\n      logger.error('刪除排程失敗:', error)\n      set({ error: '刪除排程失敗' })\n    }\n  },\n\n  // 切換完成狀態\n  toggleBoxCompletion: async (id) => {\n    const box = get().scheduledBoxes.find((b) => b.id === id)\n    if (!box) return\n\n    await get().updateScheduledBox(id, {\n      completed: !box.completed,\n      completedAt: !box.completed ? new Date() : undefined\n    })\n  },\n\n  // 切換組別完成\n  toggleSetCompletion: async (boxId, setIndex) => {\n    const box = get().scheduledBoxes.find((b) => b.id === boxId)\n    if (!box) return\n\n    const currentData = box.workoutData || {\n      setsCompleted: [],\n      completedSetsTime: [],\n      totalVolume: 0\n    }\n\n    const updated = { ...currentData }\n    updated.setsCompleted[setIndex] = !updated.setsCompleted[setIndex]\n    updated.completedSetsTime[setIndex] = updated.setsCompleted[setIndex] ? new Date() : null as any\n\n    await get().updateScheduledBox(boxId, { workoutData: updated })\n  },\n\n  // 統計\n  getWeekStatistics: () => {\n    const { scheduledBoxes, boxes } = get()\n    const completedBoxes = scheduledBoxes.filter((box) => box.completed)\n    const totalBoxes = scheduledBoxes.length\n\n    const completedByType = {\n      workout: 0,\n      reminder: 0,\n      basic: 0,\n    }\n\n    let totalWorkoutTime = 0\n    let totalWorkoutVolume = 0\n    let totalWorkoutSessions = 0\n\n    completedBoxes.forEach((box) => {\n      const baseBox = boxes.find((b) => b.id === box.boxId)\n      if (baseBox) {\n        completedByType[baseBox.type]++\n\n        if (baseBox.type === 'workout') {\n          totalWorkoutTime += box.duration\n          totalWorkoutSessions++\n\n          if (box.workoutData?.totalVolume) {\n            totalWorkoutVolume += box.workoutData.totalVolume\n          }\n        }\n      }\n    })\n\n    return {\n      completionRate: totalBoxes > 0 ? completedBoxes.length / totalBoxes : 0,\n      totalWorkoutTime,\n      completedByType,\n      totalWorkoutVolume,\n      totalWorkoutSessions,\n    }\n  },\n}))\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/timebox-store.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":472,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":472,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[13706,13707],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand'\nimport { persist } from 'zustand/middleware'\n\nconst generateId = () => crypto.randomUUID()\n\n// 基礎類型定義\nexport interface BaseBox {\n  id: string\n  name: string\n  color: string\n  type: 'workout' | 'reminder' | 'basic'\n  user_id: string\n  created_at: Date\n  updated_at: Date\n  // 重訓專用欄位\n  equipment?: string // 器材\n  weight?: number    // 重量 (kg)\n  reps?: number      // 次數\n  sets?: number      // 組數\n}\n\n// 單個重訓動作\nexport interface WorkoutExercise {\n  id: string\n  equipment: string // 器材/動作名稱\n  weight: number    // 重量 (kg)\n  reps: number      // 次數\n  sets: number      // 組數\n  setsCompleted: boolean[] // 每組的完成狀態\n  completedSetsTime: (Date | null)[] // 每組完成的時間\n}\n\n// 重訓資料 - 支援多個動作\nexport interface WorkoutData {\n  exercises: WorkoutExercise[] // 多個動作\n  totalVolume?: number     // 總訓練量 (重量 × 次數 × 組數)\n}\n\n// 提醒資料\nexport interface ReminderData {\n  text: string\n  lastUpdated: Date\n}\n\n// 排程箱子實例\nexport interface ScheduledBox {\n  id: string\n  boxId: string\n  weekId: string\n  dayOfWeek: number // 0-6 (週日到週六)\n  start_time: string // \"HH:mm\" 格式\n  duration: number // 分鐘數\n  completed: boolean\n  completedAt?: Date\n  data?: WorkoutData | ReminderData\n  // 重訓組別進度追蹤\n  setsProgress?: {\n    completed: number // 已完成組數\n    total: number     // 總組數\n  }\n}\n\n// 週記錄\nexport interface WeekRecord {\n  id: string\n  user_id: string\n  weekStart: Date\n  weekEnd: Date\n  name?: string\n  archived: boolean\n  scheduledBoxes: ScheduledBox[]\n  statistics: {\n    completionRate: number\n    totalWorkoutVolume?: number\n    totalWorkoutSessions?: number\n    completedCount: number\n    totalCount: number\n  }\n  review?: {\n    notes: string\n    created_at: Date\n  }\n}\n\n// 統計資料\nexport interface WeekStatistics {\n  completionRate: number\n  totalWorkoutTime: number\n  completedByType: {\n    workout: number\n    reminder: number\n    basic: number\n  }\n  totalWorkoutVolume?: number\n  totalWorkoutSessions?: number\n}\n\n// 趨勢資料\nexport interface WorkoutTrend {\n  week: string\n  volume: number\n  sessions: number\n  completionRate: number\n}\n\n// 莫蘭迪配色選項\nexport const morandiColors = [\n  { name: '柔霧粉', value: '#E2C4C4', hover: '#D9B3B3' },\n  { name: '晨露綠', value: '#C4D6C4', hover: '#B3CAB3' },\n  { name: '雲石灰', value: '#D4D4D4', hover: '#C4C4C4' },\n  { name: '奶茶棕', value: '#D6C4B8', hover: '#CAB3A5' },\n  { name: '薰衣草', value: '#D0C4D6', hover: '#C3B3CA' },\n  { name: '杏仁黃', value: '#E0D6B8', hover: '#D6CAA5' },\n  { name: '海霧藍', value: '#C4D0D6', hover: '#B3C3CA' },\n  { name: '珊瑚橘', value: '#E0C8B8', hover: '#D6B9A5' },\n  { name: '鼠尾草', value: '#B8C8B8', hover: '#A5B9A5' },\n  { name: '暮色紫', value: '#C4B8D0', hover: '#B3A5C3' },\n  { name: '燕麥米', value: '#D6D0C4', hover: '#CAC3B3' },\n  { name: '石墨藍', value: '#B8C4D0', hover: '#A5B3C3' },\n  { name: '楓葉紅', value: '#D0B8B8', hover: '#C3A5A5' },\n  { name: '苔蘚綠', value: '#B8C4B8', hover: '#A5B3A5' },\n  { name: '砂岩褐', value: '#C8B8B0', hover: '#B9A59C' },\n  { name: '月光白', value: '#E8E8E8', hover: '#DEDEDE' },\n]\n\ninterface TimeboxState {\n  // 箱子管理\n  boxes: BaseBox[]\n  createBox: (box: Omit<BaseBox, 'id' | 'created_at' | 'updated_at'>) => void\n  updateBox: (id: string, updates: Partial<BaseBox>) => void\n  deleteBox: (id: string) => void\n\n  // 週排程\n  currentWeek: WeekRecord | null\n  scheduledBoxes: ScheduledBox[]\n  addScheduledBox: (box: Omit<ScheduledBox, 'id'>) => void\n  updateScheduledBox: (id: string, updates: Partial<ScheduledBox>) => void\n  removeScheduledBox: (id: string) => void\n  toggleBoxCompletion: (id: string) => void\n\n  // 重訓資料\n  updateWorkoutData: (boxId: string, data: WorkoutData) => void\n  addWorkoutExercise: (boxId: string, exercise: Omit<WorkoutExercise, 'id'>) => void\n  removeWorkoutExercise: (boxId: string, exerciseId: string) => void\n  updateWorkoutExercise: (boxId: string, exerciseId: string, updates: Partial<WorkoutExercise>) => void\n  toggleSetCompletion: (boxId: string, exerciseId: string, setIndex: number) => void\n\n  // 文字提示資料\n  updateReminderData: (boxId: string, data: ReminderData) => void\n\n  // 週記錄\n  weekRecords: WeekRecord[]\n  archiveCurrentWeek: (name: string) => void\n  loadWeekRecord: (id: string) => void\n  copyToNextWeek: (recordId: string) => void\n\n  // 統計\n  getWeekStatistics: () => WeekStatistics\n  getWorkoutTrends: (weeks: number) => WorkoutTrend[]\n\n  // 初始化\n  initializeCurrentWeek: (weekStart: Date) => void\n}\n\n// 輔助函數\nconst getWeekStart = (date: Date) => {\n  const d = new Date(date)\n  const day = d.getDay()\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1) // 調整為週一開始\n  return new Date(d.setDate(diff))\n}\n\nconst getWeekEnd = (date: Date) => {\n  const start = getWeekStart(date)\n  const end = new Date(start)\n  end.setDate(start.getDate() + 6)\n  return end\n}\n\nexport const useTimeboxStore = create<TimeboxState>()(\n  persist(\n    (set, get) => ({\n      // 初始狀態\n      boxes: [],\n      currentWeek: null,\n      scheduledBoxes: [],\n      weekRecords: [],\n\n      // 箱子管理\n      createBox: (boxData) => {\n        const newBox: BaseBox = {\n          ...boxData,\n          id: generateId(),\n          created_at: new Date(),\n          updated_at: new Date(),\n        }\n        set((state) => ({\n          boxes: [...state.boxes, newBox]\n        }))\n      },\n\n      updateBox: (id, updates) => {\n        set((state) => ({\n          boxes: state.boxes.map((box) =>\n            box.id === id ? { ...box, ...updates, updated_at: new Date() } : box\n          )\n        }))\n      },\n\n      deleteBox: (id) => {\n        set((state) => ({\n          boxes: state.boxes.filter((box) => box.id !== id),\n          scheduledBoxes: state.scheduledBoxes.filter((sb) => sb.boxId !== id)\n        }))\n      },\n\n      // 週排程\n      addScheduledBox: (boxData) => {\n        const newScheduledBox: ScheduledBox = {\n          ...boxData,\n          id: generateId(),\n        }\n        set((state) => ({\n          scheduledBoxes: [...state.scheduledBoxes, newScheduledBox]\n        }))\n      },\n\n      updateScheduledBox: (id, updates) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) =>\n            box.id === id ? { ...box, ...updates } : box\n          )\n        }))\n      },\n\n      removeScheduledBox: (id) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.filter((box) => box.id !== id)\n        }))\n      },\n\n      toggleBoxCompletion: (id) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) =>\n            box.id === id\n              ? {\n                  ...box,\n                  completed: !box.completed,\n                  completedAt: !box.completed ? new Date() : undefined\n                }\n              : box\n          )\n        }))\n      },\n\n      // 重訓資料\n      updateWorkoutData: (boxId, data) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) =>\n            box.id === boxId ? { ...box, data } : box\n          )\n        }))\n      },\n\n      addWorkoutExercise: (boxId, exercise) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) => {\n            if (box.id !== boxId) return box\n\n            const currentData = (box.data as WorkoutData) || { exercises: [] }\n            const newExercise: WorkoutExercise = {\n              ...exercise,\n              id: generateId(),\n              setsCompleted: Array(exercise.sets).fill(false),\n              completedSetsTime: Array(exercise.sets).fill(null),\n            }\n\n            return {\n              ...box,\n              data: {\n                ...currentData,\n                exercises: [...currentData.exercises, newExercise]\n              }\n            }\n          })\n        }))\n      },\n\n      removeWorkoutExercise: (boxId, exerciseId) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) => {\n            if (box.id !== boxId) return box\n\n            const currentData = box.data as WorkoutData\n            if (!currentData) return box\n\n            return {\n              ...box,\n              data: {\n                ...currentData,\n                exercises: currentData.exercises.filter(ex => ex.id !== exerciseId)\n              }\n            }\n          })\n        }))\n      },\n\n      updateWorkoutExercise: (boxId, exerciseId, updates) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) => {\n            if (box.id !== boxId) return box\n\n            const currentData = box.data as WorkoutData\n            if (!currentData) return box\n\n            return {\n              ...box,\n              data: {\n                ...currentData,\n                exercises: currentData.exercises.map(ex => {\n                  if (ex.id !== exerciseId) return ex\n\n                  // 如果修改了組數，需要調整陣列長度\n                  const newSets = updates.sets ?? ex.sets\n                  let newSetsCompleted = ex.setsCompleted\n                  let newCompletedTime = ex.completedSetsTime\n\n                  if (newSets !== ex.sets) {\n                    if (newSets > ex.sets) {\n                      // 增加組數，補充 false 和 null\n                      newSetsCompleted = [...ex.setsCompleted, ...Array(newSets - ex.sets).fill(false)]\n                      newCompletedTime = [...ex.completedSetsTime, ...Array(newSets - ex.sets).fill(null)]\n                    } else {\n                      // 減少組數，截斷陣列\n                      newSetsCompleted = ex.setsCompleted.slice(0, newSets)\n                      newCompletedTime = ex.completedSetsTime.slice(0, newSets)\n                    }\n                  }\n\n                  return {\n                    ...ex,\n                    ...updates,\n                    setsCompleted: newSetsCompleted,\n                    completedSetsTime: newCompletedTime\n                  }\n                })\n              }\n            }\n          })\n        }))\n      },\n\n      toggleSetCompletion: (boxId, exerciseId, setIndex) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) => {\n            if (box.id !== boxId) return box\n\n            const currentData = box.data as WorkoutData\n            if (!currentData) return box\n\n            return {\n              ...box,\n              data: {\n                ...currentData,\n                exercises: currentData.exercises.map(ex => {\n                  if (ex.id !== exerciseId) return ex\n\n                  const updatedSetsCompleted = [...ex.setsCompleted]\n                  const updatedCompletedTime = [...ex.completedSetsTime]\n\n                  // 切換該組的完成狀態\n                  updatedSetsCompleted[setIndex] = !updatedSetsCompleted[setIndex]\n                  updatedCompletedTime[setIndex] = updatedSetsCompleted[setIndex] ? new Date() : null\n\n                  return {\n                    ...ex,\n                    setsCompleted: updatedSetsCompleted,\n                    completedSetsTime: updatedCompletedTime\n                  }\n                })\n              }\n            }\n          })\n        }))\n      },\n\n      // 文字提示資料\n      updateReminderData: (boxId, data) => {\n        set((state) => ({\n          scheduledBoxes: state.scheduledBoxes.map((box) =>\n            box.id === boxId ? { ...box, data } : box\n          )\n        }))\n      },\n\n      // 週記錄\n      archiveCurrentWeek: (name) => {\n        const { currentWeek, scheduledBoxes } = get()\n        if (!currentWeek) return\n\n        const completedCount = scheduledBoxes.filter((box) => box.completed).length\n        const totalCount = scheduledBoxes.length\n        const completionRate = totalCount > 0 ? completedCount / totalCount : 0\n\n        const workoutBoxes = scheduledBoxes.filter((box) => {\n          const baseBox = get().boxes.find((b) => b.id === box.boxId)\n          return baseBox?.type === 'workout' && box.completed\n        })\n\n        const totalWorkoutVolume = workoutBoxes.reduce((total, box) => {\n          if (box.data) {\n            const workoutData = box.data as WorkoutData\n            // 新格式：計算所有動作的訓練量\n            if (workoutData.exercises && workoutData.exercises.length > 0) {\n              return total + workoutData.exercises.reduce((exerciseTotal, exercise) => {\n                const completedSets = exercise.setsCompleted.filter(Boolean).length\n                return exerciseTotal + (completedSets * exercise.weight * exercise.reps)\n              }, 0)\n            }\n            // 舊格式相容（已廢棄）\n            if (workoutData.totalVolume) {\n              return total + workoutData.totalVolume\n            }\n          }\n          return total\n        }, 0)\n\n        const archivedWeek: WeekRecord = {\n          ...currentWeek,\n          name,\n          archived: true,\n          scheduledBoxes,\n          statistics: {\n            completionRate,\n            totalWorkoutVolume,\n            totalWorkoutSessions: workoutBoxes.length,\n            completedCount,\n            totalCount,\n          }\n        }\n\n        set((state) => ({\n          weekRecords: [...state.weekRecords, archivedWeek]\n        }))\n      },\n\n      loadWeekRecord: (id) => {\n        const { weekRecords } = get()\n        const record = weekRecords.find((r) => r.id === id)\n        if (record) {\n          set({\n            currentWeek: record,\n            scheduledBoxes: record.scheduledBoxes\n          })\n        }\n      },\n\n      copyToNextWeek: (recordId) => {\n        const { weekRecords } = get()\n        const record = weekRecords.find((r) => r.id === recordId)\n        if (!record) return\n\n        const nextWeekStart = new Date(record.weekEnd)\n        nextWeekStart.setDate(nextWeekStart.getDate() + 1)\n\n        get().initializeCurrentWeek(nextWeekStart)\n\n        // 複製排程但清除完成狀態\n        const copiedBoxes = record.scheduledBoxes.map((box) => ({\n          ...box,\n          id: generateId(),\n          weekId: get().currentWeek!.id,\n          completed: false,\n          completedAt: undefined,\n        }))\n\n        set({\n          scheduledBoxes: copiedBoxes\n        })\n      },\n\n      // 統計\n      getWeekStatistics: () => {\n        const { scheduledBoxes, boxes } = get()\n        const completedBoxes = scheduledBoxes.filter((box) => box.completed)\n        const totalBoxes = scheduledBoxes.length\n\n        const completedByType = {\n          workout: 0,\n          reminder: 0,\n          basic: 0,\n        }\n\n        let totalWorkoutTime = 0\n        let totalWorkoutVolume = 0\n        let totalWorkoutSessions = 0\n\n        completedBoxes.forEach((box) => {\n          const baseBox = boxes.find((b) => b.id === box.boxId)\n          if (baseBox) {\n            completedByType[baseBox.type]++\n\n            if (baseBox.type === 'workout') {\n              totalWorkoutTime += box.duration\n              totalWorkoutSessions++\n\n              // 計算重訓量：從 box.data 獲取所有動作的資料\n              if (box.data) {\n                const workoutData = box.data as WorkoutData\n                // 新格式：計算所有動作的訓練量\n                if (workoutData.exercises && workoutData.exercises.length > 0) {\n                  totalWorkoutVolume += workoutData.exercises.reduce((exerciseTotal, exercise) => {\n                    const completedSets = exercise.setsCompleted.filter(Boolean).length\n                    return exerciseTotal + (completedSets * exercise.weight * exercise.reps)\n                  }, 0)\n                }\n                // 舊格式相容（已廢棄）\n                else if (workoutData.totalVolume) {\n                  totalWorkoutVolume += workoutData.totalVolume\n                }\n              }\n            }\n          }\n        })\n\n        return {\n          completionRate: totalBoxes > 0 ? completedBoxes.length / totalBoxes : 0,\n          totalWorkoutTime,\n          completedByType,\n          totalWorkoutVolume,\n          totalWorkoutSessions,\n        }\n      },\n\n      getWorkoutTrends: (weeks) => {\n        const { weekRecords } = get()\n        return weekRecords\n          .slice(-weeks)\n          .map((record) => ({\n            week: `${record.weekStart.getMonth() + 1}/${record.weekStart.getDate()}`,\n            volume: record.statistics.totalWorkoutVolume || 0,\n            sessions: record.statistics.totalWorkoutSessions || 0,\n            completionRate: record.statistics.completionRate,\n          }))\n      },\n\n      // 初始化\n      initializeCurrentWeek: (weekStart) => {\n        const weekEnd = getWeekEnd(weekStart)\n        const newWeek: WeekRecord = {\n          id: generateId(),\n          user_id: 'current-user', // TODO: 實際用戶ID\n          weekStart: getWeekStart(weekStart),\n          weekEnd,\n          archived: false,\n          scheduledBoxes: [],\n          statistics: {\n            completionRate: 0,\n            completedCount: 0,\n            totalCount: 0,\n          },\n        }\n\n        set({\n          currentWeek: newWeek,\n          scheduledBoxes: [],\n        })\n      },\n    }),\n    {\n      name: 'timebox-storage',\n      version: 1,\n    }\n  )\n)","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4140,4143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4140,4143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ============================\n// 核心型別定義\n// ============================\n\n// 收款狀態\nexport type ReceiptStatus = 'received' | 'confirmed' | 'rejected';\n\n// 付款方式\nexport type PaymentMethod = 'cash' | 'transfer' | 'card' | 'check';\n\n// 簽證狀態\nexport type VisaStatus = 'pending' | 'submitted' | 'issued' | 'collected' | 'rejected';\n\n// 正確的 User 型別（與 Employee 一致）\nexport interface User {\n  id: string;\n  employee_number: string;\n  english_name: string;\n  display_name: string;\n  chinese_name: string; // 中文姓名（本名）\n  personal_info: {\n    national_id: string;\n    birthday: string;\n    phone: string | string[]; // 支援單一電話或多個電話\n    email: string;\n    address: string;\n    emergency_contact: {\n      name: string;\n      relationship: string;\n      phone: string;\n    };\n  };\n  job_info: {\n    supervisor?: string;\n    hire_date: string;\n    probation_end_date?: string;\n  };\n  salary_info: {\n    base_salary: number;\n    allowances: {\n      type: string;\n      amount: number;\n    }[];\n    salary_history: {\n      effective_date: string;\n      base_salary: number;\n      reason: string;\n    }[];\n  };\n  permissions: string[];\n  roles?: ('admin' | 'employee' | 'user' | 'tour_leader' | 'sales' | 'accountant' | 'assistant')[]; // 附加身份標籤（不影響權限），支援多重身份\n  attendance: {\n    leave_records: {\n      id: string;\n      type: 'annual' | 'sick' | 'personal' | 'maternity' | 'other';\n      start_date: string;\n      end_date: string;\n      days: number;\n      reason?: string;\n      status: 'pending' | 'approved' | 'rejected';\n      approved_by?: string;\n    }[];\n    overtime_records: {\n      id: string;\n      date: string;\n      hours: number;\n      reason: string;\n      approved_by?: string;\n    }[];\n  };\n  contracts: {\n    id: string;\n    type: 'employment' | 'probation' | 'renewal';\n    start_date: string;\n    end_date?: string;\n    file_path?: string;\n    notes?: string;\n  }[];\n  status: 'active' | 'probation' | 'leave' | 'terminated';\n  avatar?: string;\n\n  // 認證相關\n  password_hash?: string; // 加密後的密碼\n  last_password_change?: string; // 最後修改密碼時間\n  must_change_password?: boolean; // 是否需要修改密碼（首次登入）\n  failed_login_attempts?: number; // 登入失敗次數\n  last_failed_login?: string; // 最後失敗登入時間\n\n  created_at: string;\n  updated_at: string;\n}\n\n// Employee 型別現在是 User 的別名\nexport type Employee = User;\n\nexport interface Todo {\n  id: string;\n  title: string;\n  priority: 1 | 2 | 3 | 4 | 5; // 星級緊急度\n  deadline?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  completed?: boolean; // 對齊資料庫欄位\n\n  // 人員關係（共享機制）\n  creator: string; // 建立者\n  assignee?: string; // 被指派者（可選）\n  visibility: string[]; // 可見人員ID列表 = [creator, assignee]\n\n  // 關聯資料\n  related_items: {\n    type: 'group' | 'quote' | 'order' | 'invoice' | 'receipt';\n    id: string;\n    title: string;\n  }[];\n\n  // 子任務\n  sub_tasks: {\n    id: string;\n    title: string;\n    done: boolean;\n    completed_at?: string;\n  }[];\n\n  // 簡單備註（非留言板）\n  notes: {\n    timestamp: string;\n    content: string;\n  }[];\n\n  // 快速功能設定\n  enabled_quick_actions: ('receipt' | 'invoice' | 'group' | 'quote' | 'assign')[];\n\n  // 通知標記\n  needs_creator_notification?: boolean; // 被指派人有更新，需要通知建立者\n\n  created_at: string;\n  updated_at: string;\n}\n\n// 航班資訊\nexport interface FlightInfo {\n  airline: string;  // 航空公司\n  flightNumber: string;  // 班次\n  departureAirport: string;  // 出發機場代碼（如：TPE）\n  departureTime: string;  // 出發時間（如：06:50）\n  departureDate?: string;  // 出發日期（如：10/21）\n  arrivalAirport: string;  // 抵達機場代碼（如：FUK）\n  arrivalTime: string;  // 抵達時間（如：09:55）\n  duration?: string;  // 飛行時間（如：2小時5分）\n}\n\n// Tour 類型已移至 @/types/tour.types.ts\n// 使用完整的 Tour 定義\nexport type { Tour } from '@/types/tour.types';\n\nexport interface Member {\n  id: string;\n  order_id: string;\n  name: string;\n  name_en: string; // 拼音\n  birthday: string; // YYYY-MM-DD\n  passport_number: string;\n  passport_expiry: string; // YYYY-MM-DD\n  id_number: string; // 身分證字號\n  gender: 'M' | 'F' | ''; // 根據身分證自動判斷\n  age: number; // 根據生日和出發日自動計算\n  assigned_room?: string; // 分配的房間\n  is_child_no_bed?: boolean; // 小孩不佔床\n  reservation_code?: string; // 訂位代號\n  add_ons?: string[]; // 加購項目IDs\n  refunds?: string[]; // 退費項目IDs\n  custom_fields?: Record<string, any>; // 自定義欄位數據 {fieldId: value}\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface TourAddOn {\n  id: string;\n  tour_id: string;\n  name: string;\n  price: number;\n  description?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface TourRefund {\n  id: string;\n  tour_id: string;\n  order_id: string;\n  order_number: string;\n  member_name: string;\n  reason: string;\n  amount: number;\n  status: 'pending' | 'approved' | 'refunded' | 'rejected';\n  applied_date: string;\n  processed_date?: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// 行程表相關型別\nexport interface ItineraryFeature {\n  icon: string; // icon 名稱 (如: \"IconBuilding\")\n  title: string;\n  description: string;\n}\n\nexport interface FocusCard {\n  title: string;\n  src: string; // 圖片 URL\n}\n\nexport interface LeaderInfo {\n  name: string;\n  domesticPhone: string;\n  overseasPhone: string;\n}\n\nexport interface MeetingInfo {\n  time: string; // ISO 8601 格式\n  location: string;\n}\n\nexport interface DailyActivity {\n  icon: string; // emoji 或 icon\n  title: string;\n  description: string;\n}\n\nexport interface DailyMeals {\n  breakfast: string;\n  lunch: string;\n  dinner: string;\n}\n\nexport interface DailyItineraryDay {\n  dayLabel: string; // 如: \"Day 1\"\n  date: string; // 如: \"10/21 (二)\"\n  title: string;\n  highlight?: string;\n  description?: string;\n  activities: DailyActivity[];\n  recommendations: string[];\n  meals: DailyMeals;\n  accommodation: string;\n}\n\nexport interface Itinerary {\n  id: string;\n  tour_id?: string; // 關聯的團 ID（選填，因為可能只是草稿）\n\n  // 封面資訊\n  tagline: string;\n  title: string;\n  subtitle: string;\n  description: string;\n  departureDate: string;\n  tourCode: string;\n  coverImage: string;\n  country: string;\n  city: string;\n  status: 'draft' | 'published';\n\n  // 航班資訊\n  outboundFlight?: FlightInfo;\n  returnFlight?: FlightInfo;\n\n  // 行程特色\n  features: ItineraryFeature[];\n\n  // 精選景點\n  focusCards: FocusCard[];\n\n  // 領隊資訊\n  leader?: LeaderInfo;\n\n  // 集合資訊\n  meetingInfo?: MeetingInfo;\n\n  // 行程副標題\n  itinerarySubtitle?: string;\n\n  // 逐日行程\n  dailyItinerary: DailyItineraryDay[];\n\n  created_at: string;\n  updated_at: string;\n}\n\n// Order 類型已移至 @/types/order.types.ts\n// 使用完整的 Order 定義\nexport type { Order } from '@/types/order.types';\n\n// Customer 類型已移至 @/types/customer.types.ts\n// 使用完整的 Customer 定義，不再使用簡化版\nexport type { Customer } from '@/types/customer.types';\n\nexport interface Payment {\n  id: string;\n  type: 'receipt' | 'request' | 'disbursement';\n  // receipt: 收款\n  // request: 請款\n  // disbursement: 出納\n  order_id?: string;\n  tour_id?: string;\n  amount: number;\n  description: string;\n  status: 'pending' | 'confirmed' | 'completed';\n  // pending: 待確認\n  // confirmed: 已確認\n  // completed: 已完成\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Quote {\n  id: string;\n  quote_number?: string; // 報價單號碼 (QUOTE-2025-0001)\n  name: string; // 團體名稱\n  status: 'draft' | 'proposed' | 'revised' | 'approved' | 'converted' | 'rejected';\n  // draft: 草稿\n  // proposed: 提案\n  // revised: 修改中\n  // approved: 已核准\n  // converted: 已轉單\n  // rejected: 已拒絕\n  tour_id?: string; // 關聯的旅遊團ID\n\n  // 客戶資訊\n  customer_name?: string; // 客戶名稱\n  contact_person?: string; // 聯絡人\n  contact_phone?: string; // 聯絡電話\n  contact_email?: string; // Email\n\n  // 需求資訊\n  group_size: number; // 團體人數（向下相容：總人數）\n  accommodation_days: number; // 住宿天數\n  requirements?: string; // 需求說明\n  budget_range?: string; // 預算範圍\n  valid_until?: string; // 報價有效期\n  payment_terms?: string; // 付款條件\n\n  // 多身份人數統計\n  participant_counts?: {\n    adult: number; // 成人（雙人房）\n    child_with_bed: number; // 小朋友（佔床）\n    child_no_bed: number; // 不佔床\n    single_room: number; // 單人房\n    infant: number; // 嬰兒\n  };\n\n  // 多身份售價\n  selling_prices?: {\n    adult: number;\n    child_with_bed: number;\n    child_no_bed: number;\n    single_room: number;\n    infant: number;\n  };\n\n  categories: QuoteCategory[]; // 費用分類\n  total_cost: number; // 總成本\n  version?: number; // 版本號\n  versions?: QuoteVersion[]; // 版本歷史\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface QuoteVersion {\n  id: string;\n  version: number;\n  categories: QuoteCategory[];\n  total_cost: number;\n  group_size: number; // 團體人數\n  accommodation_days: number; // 住宿天數\n  participant_counts: {\n    adult: number;\n    child_with_bed: number;\n    child_no_bed: number;\n    single_room: number;\n    infant: number;\n  }; // 多身份人數統計\n  selling_prices: {\n    adult: number;\n    child_with_bed: number;\n    child_no_bed: number;\n    single_room: number;\n    infant: number;\n  }; // 多身份售價\n  note?: string; // 修改說明\n  created_at: string;\n}\n\nexport interface QuoteCategory {\n  id: string;\n  name: string;\n  items: QuoteItem[];\n  total: number;\n}\n\nexport interface QuoteItem {\n  id: string;\n  name: string;\n  quantity: number;\n  unit_price: number;\n  total: number;\n  note?: string;\n  day?: number; // 住宿專用：第幾天\n  room_type?: string; // 住宿專用：房型名稱\n  is_group_cost?: boolean; // 交通和領隊導遊專用：團體分攤\n  // 多身份計價：機票專用\n  pricing_type?: 'uniform' | 'by_identity'; // uniform: 統一價格, by_identity: 依身份計價\n  adult_price?: number; // 成人價\n  child_price?: number; // 小朋友價\n  infant_price?: number; // 嬰兒價\n  created_at: string;\n  updated_at: string;\n}\n\n// === 供應商管理系統 ===\n// Supplier 類型已移至 @/types/supplier.types.ts\n// 使用完整的 Supplier 定義\nexport type { Supplier, SupplierContact, SupplierBankInfo, PriceListItem } from '@/types/supplier.types';\n\n\n// === 請款單管理系統 ===\nexport interface PaymentRequest {\n  id: string;\n  request_number: string; // REQ-2024001\n\n  // 分配模式\n  allocation_mode: 'single' | 'multiple'; // 單一團體 or 批量分配\n\n  // 單一團體模式（向下相容）\n  tour_id?: string; // 團號（allocation_mode = 'single' 時使用）\n  code?: string; // CNX241225\n  tour_name?: string; // 團體名稱快照\n\n  // 批量分配模式（一筆帳分多團）\n  tour_allocations?: TourAllocation[]; // 團體分配列表（allocation_mode = 'multiple' 時使用）\n\n  // 共用欄位\n  quote_id?: string; // 關聯的報價單ID\n  order_id?: string; // 訂單ID（選填）\n  order_number?: string; // 訂單號碼\n  request_date: string; // 請款日期 (固定只能選每週四)\n  items: PaymentRequestItem[];\n  total_amount: number;\n  status: 'pending' | 'processing' | 'confirmed' | 'paid';\n  note?: string; // 請款備註\n  budget_warning?: boolean; // 超預算警告\n  created_by: string; // 建立者ID\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface PaymentRequestItem {\n  id: string;\n  request_id: string; // 所屬請款單ID\n  item_number: string; // REQ-2024001-001\n  category: '住宿' | '交通' | '餐食' | '門票' | '導遊' | '其他';\n  supplier_id: string;\n  supplier_name: string; // 供應商名稱快照\n  description: string;\n  unit_price: number;\n  quantity: number;\n  subtotal: number;\n  note?: string; // 項目備註\n  sort_order: number; // 排序\n  created_at: string;\n  updated_at: string;\n}\n\n// 團體分配項目（用於批量分配）\nexport interface TourAllocation {\n  tour_id: string; // 團號ID\n  code: string; // 團體代碼\n  tour_name: string; // 團體名稱\n  allocated_amount: number; // 分配金額\n}\n\n// === 出納單管理系統 ===\nexport interface DisbursementOrder {\n  id: string;\n  order_number: string; // CD-2024001\n  disbursement_date: string; // 出帳日期 (預設本週四)\n  payment_request_ids: string[]; // 關聯的請款單ID陣列\n  total_amount: number; // 總金額 (自動加總)\n  status: 'pending' | 'confirmed' | 'paid' | 'cancelled'; // 待確認、已確認、已付款、已取消\n  note?: string; // 出納備註\n  created_by: string; // 建立者ID\n  confirmed_by?: string; // 確認者ID\n  confirmed_at?: string; // 確認時間\n  paid_at?: string; // 付款時間\n  created_at: string;\n  updated_at: string;\n}\n\n// === 收款單管理系統 ===\nexport interface ReceiptOrder {\n  id: string;\n  receipt_number: string; // REC-2024001\n\n  // 分配模式\n  allocation_mode: 'single' | 'multiple'; // 單一訂單 or 批量分配\n\n  // 單一訂單模式（向下相容）\n  order_id?: string; // 關聯的訂單ID（allocation_mode = 'single' 時使用）\n  order_number?: string; // 訂單號碼快照\n  tour_id?: string; // 團號\n  code?: string; // 團體代碼\n  tour_name?: string; // 團體名稱快照\n  contact_person?: string; // 聯絡人快照\n\n  // 批量分配模式（一筆款分多訂單）\n  order_allocations?: OrderAllocation[]; // 訂單分配列表（allocation_mode = 'multiple' 時使用）\n\n  // 共用欄位\n  receipt_date: string; // 收款日期\n  payment_items: ReceiptPaymentItem[]; // 收款項目\n  total_amount: number; // 總收款金額\n  status: ReceiptStatus; // 收款狀態\n  note?: string; // 收款備註\n  created_by: string; // 建立者ID\n  confirmed_by?: string; // 確認者ID\n  confirmed_at?: string; // 確認時間\n  created_at: string;\n  updated_at: string;\n}\n\n// 訂單分配項目（用於批量分配）\nexport interface OrderAllocation {\n  order_id: string; // 訂單ID\n  order_number: string; // 訂單號碼\n  tour_id: string; // 團號\n  code: string; // 團體代碼\n  tour_name: string; // 團體名稱\n  contact_person: string; // 聯絡人\n  allocated_amount: number; // 分配金額\n}\n\nexport interface ReceiptPaymentItem {\n  id: string;\n  receipt_id: string; // 所屬收款單ID\n  payment_method: PaymentMethod; // 收款方式\n  amount: number; // 金額\n  account_info?: string; // 帳戶資訊 (匯款用)\n  card_last_four?: string; // 卡號後四碼 (刷卡用)\n  auth_code?: string; // 授權碼 (刷卡用)\n  check_number?: string; // 支票號碼\n  check_bank?: string; // 支票銀行\n  check_due_date?: string; // 支票到期日\n  transaction_date: string; // 交易日期\n  handler_name?: string; // 經手人 (現金用)\n  fees?: number; // 手續費\n  note?: string; // 備註\n  created_at: string;\n  updated_at: string;\n}\n\n// === 簽證管理系統 ===\nexport interface Visa {\n  id: string;\n\n  // 申請人資訊\n  applicant_name: string; // 申請人姓名\n  contact_person: string; // 聯絡人\n  contact_phone: string; // 聯絡電話\n\n  // 簽證資訊\n  visa_type: string; // 簽證類型（護照 成人、台胞證等）\n  country: string; // 國家\n\n  // 狀態\n  status: VisaStatus;\n\n  // 日期\n  submission_date?: string; // 送件時間\n  received_date?: string; // 下件時間\n  pickup_date?: string; // 取件時間\n\n  // 關聯資訊\n  order_id: string; // 關聯的訂單ID\n  order_number: string; // 訂單號碼快照\n  tour_id: string; // 團號ID\n  code: string; // 團體代碼 (tourCode)\n\n  // 費用\n  fee: number; // 代辦費\n  cost: number; // 成本\n\n  // 其他\n  note?: string; // 備註\n  created_by?: string; // 建立者ID\n  created_at: string;\n  updated_at: string;\n}\n\n// 系統功能權限清單 - 從統一配置自動生成\nexport { SYSTEM_PERMISSIONS, FEATURE_PERMISSIONS } from '@/lib/permissions';\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/useTravelInvoiceStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3464,3467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3464,3467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4011,4014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4011,4014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4660,4663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4660,4663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5465,5468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5465,5468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6322,6325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6322,6325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 旅行業代轉發票 Zustand Store\n *\n * ⚠️ 特殊說明：此 Store 不使用 FastIn 架構\n *\n * 原因：\n * 1. 發票需要即時與第三方 API（藍新金流）互動\n * 2. 發票開立/作廢具有法律效力，不適合離線樂觀寫入\n * 3. 必須確保 API 回應後才能更新 UI，避免狀態不一致\n * 4. 發票資料由後端統一管理，不需要本地快取\n *\n * 架構：\n * - 直接呼叫 Next.js API routes（/api/travel-invoice/*）\n * - 無 IndexedDB 快取\n * - 無 _needs_sync 標記\n * - 無背景同步機制\n *\n * 離線處理：\n * - 離線時會顯示錯誤（預期行為）\n * - 不支援離線開立發票\n *\n * 如果未來需要離線查詢歷史發票，可考慮：\n * 1. 僅快取查詢結果（read-only cache）\n * 2. 開立/作廢操作仍維持即時 API 呼叫\n */\n\nimport { create } from 'zustand'\n\nexport interface TravelInvoiceItem {\n  item_name: string\n  item_count: number\n  item_unit: string\n  item_price: number\n  itemAmt: number\n  itemTaxType?: string\n  itemWord?: string\n}\n\nexport interface BuyerInfo {\n  buyerName: string\n  buyerUBN?: string\n  buyerAddress?: string\n  buyerEmail?: string\n  buyerMobileCode?: string\n  buyerMobile?: string\n  carrierType?: string\n  carrierNum?: string\n  loveCode?: string\n  printFlag?: 'Y' | 'N'\n}\n\nexport interface TravelInvoice {\n  id: string\n  transactionNo: string\n  merchantId: string\n  invoice_number?: string\n  invoice_date: string\n  total_amount: number\n  tax_type: 'dutiable' | 'zero' | 'free'\n  buyerInfo: BuyerInfo\n  items: TravelInvoiceItem[]\n  status: 'pending' | 'issued' | 'voided' | 'allowance' | 'failed'\n  apiStatus?: string\n  apiMessage?: string\n  randomNum?: string\n  barcode?: string\n  qrcodeL?: string\n  qrcodeR?: string\n  voidDate?: string\n  voidReason?: string\n  allowanceDate?: string\n  allowanceAmount?: number\n  allowanceItems?: TravelInvoiceItem[]\n  order_id?: string\n  tour_id?: string\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\ninterface TravelInvoiceState {\n  invoices: TravelInvoice[]\n  currentInvoice: TravelInvoice | null\n  isLoading: boolean\n  error: string | null\n\n  // Actions\n  fetchInvoices: (filters?: {\n    status?: string\n    start_date?: string\n    end_date?: string\n    page?: number\n    limit?: number\n  }) => Promise<void>\n  fetchInvoiceById: (id: string) => Promise<void>\n  issueInvoice: (data: {\n    invoice_date: string\n    total_amount: number\n    tax_type?: string\n    buyerInfo: BuyerInfo\n    items: TravelInvoiceItem[]\n    order_id?: string\n    tour_id?: string\n    created_by: string\n  }) => Promise<TravelInvoice>\n  voidInvoice: (invoiceId: string, voidReason: string, operatedBy: string) => Promise<void>\n  allowanceInvoice: (\n    invoiceId: string,\n    allowanceAmount: number,\n    allowanceItems: TravelInvoiceItem[],\n    operatedBy: string\n  ) => Promise<void>\n  setCurrentInvoice: (invoice: TravelInvoice | null) => void\n  clearError: () => void\n}\n\nexport const useTravelInvoiceStore = create<TravelInvoiceState>((set, get) => ({\n  invoices: [],\n  currentInvoice: null,\n  isLoading: false,\n  error: null,\n\n  fetchInvoices: async (filters = {}) => {\n    set({ isLoading: true, error: null })\n    try {\n      const params = new URLSearchParams()\n      if (filters.status) params.append('status', filters.status)\n      if (filters.start_date) params.append('start_date', filters.start_date)\n      if (filters.end_date) params.append('end_date', filters.end_date)\n      if (filters.page) params.append('page', filters.page.toString())\n      if (filters.limit) params.append('limit', filters.limit.toString())\n\n      const response = await fetch(`/api/travel-invoice/query?${params.toString()}`)\n      if (!response.ok) throw new Error('查詢發票失敗')\n\n      const result = await response.json()\n      set({ invoices: result.data, isLoading: false })\n    } catch (error: any) {\n      set({ error: error.message, isLoading: false })\n      throw error\n    }\n  },\n\n  fetchInvoiceById: async (id: string) => {\n    set({ isLoading: true, error: null })\n    try {\n      const response = await fetch(`/api/travel-invoice/query?id=${id}`)\n      if (!response.ok) throw new Error('查詢發票失敗')\n\n      const result = await response.json()\n      if (result.data && result.data.length > 0) {\n        set({ currentInvoice: result.data[0], isLoading: false })\n      } else {\n        throw new Error('找不到發票')\n      }\n    } catch (error: any) {\n      set({ error: error.message, isLoading: false })\n      throw error\n    }\n  },\n\n  issueInvoice: async (data) => {\n    set({ isLoading: true, error: null })\n    try {\n      const response = await fetch('/api/travel-invoice/issue', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n\n      const result = await response.json()\n      if (!result.success) {\n        throw new Error(result.message || result.error || '開立發票失敗')\n      }\n\n      // 重新載入發票列表\n      await get().fetchInvoices()\n      set({ isLoading: false })\n\n      return result.data\n    } catch (error: any) {\n      set({ error: error.message, isLoading: false })\n      throw error\n    }\n  },\n\n  voidInvoice: async (invoiceId, voidReason, operatedBy) => {\n    set({ isLoading: true, error: null })\n    try {\n      const response = await fetch('/api/travel-invoice/void', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ invoiceId, voidReason, operatedBy }),\n      })\n\n      const result = await response.json()\n      if (!result.success) {\n        throw new Error(result.message || result.error || '作廢發票失敗')\n      }\n\n      // 更新當前發票\n      if (get().currentInvoice?.id === invoiceId) {\n        set({ currentInvoice: result.data })\n      }\n\n      // 重新載入發票列表\n      await get().fetchInvoices()\n      set({ isLoading: false })\n    } catch (error: any) {\n      set({ error: error.message, isLoading: false })\n      throw error\n    }\n  },\n\n  allowanceInvoice: async (invoiceId, allowanceAmount, allowanceItems, operatedBy) => {\n    set({ isLoading: true, error: null })\n    try {\n      const response = await fetch('/api/travel-invoice/allowance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ invoiceId, allowanceAmount, allowanceItems, operatedBy }),\n      })\n\n      const result = await response.json()\n      if (!result.success) {\n        throw new Error(result.message || result.error || '開立折讓失敗')\n      }\n\n      // 更新當前發票\n      if (get().currentInvoice?.id === invoiceId) {\n        set({ currentInvoice: result.data })\n      }\n\n      // 重新載入發票列表\n      await get().fetchInvoices()\n      set({ isLoading: false })\n    } catch (error: any) {\n      set({ error: error.message, isLoading: false })\n      throw error\n    }\n  },\n\n  setCurrentInvoice: (invoice) => set({ currentInvoice: invoice }),\n  clearError: () => set({ error: null }),\n}))\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/user-store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2483,2486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2483,2486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3146,3149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3146,3149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3444,3447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3444,3447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3649,3652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3649,3652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3923,3926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3923,3926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4098,4101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4098,4101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4665,4668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4665,4668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4975,4978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4975,4978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5257,5260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5257,5260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5545,5548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5545,5548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5814,5817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5814,5817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6405,6408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6405,6408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6864,6867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6864,6867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7187,7190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7187,7190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7388,7391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7388,7391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 員工管理 Store\n * 離線優先架構：Supabase（雲端）+ IndexedDB（快取）\n */\n\nimport { User } from './types';\nimport { createStore } from './create-store';\nimport { TABLES } from '@/lib/db/schemas';\nimport { generateUUID } from '@/lib/utils/uuid';\n\n// 建立員工 Store\nexport const useUserStore = createStore<User>(\n  TABLES.EMPLOYEES as any,\n  undefined, // 員工使用 employee_number 而非 code，所以不需要 codePrefix\n  true // enableSupabase\n);\n\n// 擴充自訂方法（如果需要）\nexport const userStoreHelpers = {\n  /**\n   * 根據員工編號查詢\n   */\n  getUserByNumber: (employee_number: string): User | undefined => {\n    const state = useUserStore.getState();\n    return state.items.find(user => user.employee_number === employee_number);\n  },\n\n  /**\n   * 員工編號生成\n   */\n  generateUserNumber: (english_name: string): string => {\n    const state = useUserStore.getState();\n    const users = state.items;\n    const baseName = english_name.toLowerCase();\n\n    // 所有現有的員工編號（包括同名和不同名的）\n    const allEmployeeNumbers = users.map(user => user.employee_number);\n\n    // 取得所有數字編號（不限名字）\n    const allNumericNumbers = allEmployeeNumbers\n      .map(num => {\n        const match = num.match(/\\d+$/);\n        return match ? parseInt(match[0], 10) : 0;\n      })\n      .filter(num => num > 0);\n\n    // 找到全局最大編號\n    const maxNumber = allNumericNumbers.length > 0 ? Math.max(...allNumericNumbers) : 0;\n    let nextNumber = maxNumber + 1;\n\n    // 確保這個編號不會與現有的任何員工編號衝突\n    let candidate = `${baseName}${nextNumber.toString().padStart(2, '0')}`;\n    while (allEmployeeNumbers.includes(candidate)) {\n      nextNumber++;\n      candidate = `${baseName}${nextNumber.toString().padStart(2, '0')}`;\n    }\n\n    console.log('🔢 產生員工編號:', candidate, '(檢查了', allEmployeeNumbers.length, '個現有編號)');\n    return candidate;\n  },\n\n  /**\n   * 搜尋員工\n   */\n  searchUsers: (searchTerm: string): User[] => {\n    const state = useUserStore.getState();\n    const users = state.items;\n    const term = searchTerm.toLowerCase();\n\n    return users.filter(user =>\n      user.employee_number.toLowerCase().includes(term) ||\n      user.english_name.toLowerCase().includes(term) ||\n      user.display_name.includes(term)\n    );\n  },\n\n  /**\n   * 按狀態篩選\n   */\n  getUsersByStatus: (status: User['status']): User[] => {\n    const state = useUserStore.getState();\n    return state.items.filter(user => user.status === status);\n  },\n\n  /**\n   * 更新權限\n   */\n  updateUserPermissions: async (id: string, permissions: string[]): Promise<void> => {\n    await useUserStore.getState().update(id, { permissions } as any);\n    console.log('✅ 權限更新完成:', id, permissions);\n  },\n\n  /**\n   * 更新基本薪資\n   */\n  updateBaseSalary: async (id: string, newSalary: number, reason: string): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === id);\n    if (!user) return;\n\n    const newHistory = [\n      ...user.salary_info.salary_history,\n      {\n        effective_date: new Date().toISOString().split('T')[0],\n        base_salary: newSalary,\n        reason\n      }\n    ];\n\n    await useUserStore.getState().update(id, {\n      salary_info: {\n        ...user.salary_info,\n        base_salary: newSalary,\n        salary_history: newHistory\n      }\n    } as any);\n  },\n\n  /**\n   * 新增津貼\n   */\n  addAllowance: async (id: string, type: string, amount: number): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === id);\n    if (!user) return;\n\n    const newAllowances = [\n      ...user.salary_info.allowances.filter((a: any) => a.type !== type),\n      { type, amount }\n    ];\n\n    await useUserStore.getState().update(id, {\n      salary_info: {\n        ...user.salary_info,\n        allowances: newAllowances\n      }\n    } as any);\n  },\n\n  /**\n   * 移除津貼\n   */\n  removeAllowance: async (id: string, type: string): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === id);\n    if (!user) return;\n\n    const newAllowances = user.salary_info.allowances.filter((a: any) => a.type !== type);\n\n    await useUserStore.getState().update(id, {\n      salary_info: {\n        ...user.salary_info,\n        allowances: newAllowances\n      }\n    } as any);\n  },\n\n  /**\n   * 新增請假記錄\n   */\n  addLeaveRecord: async (id: string, leaveRecord: Omit<User['attendance']['leave_records'][0], 'id'>): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === id);\n    if (!user) return;\n\n    const newRecord = {\n      ...leaveRecord,\n      id: generateUUID()\n    };\n\n    const newLeaveRecords = [...user.attendance.leave_records, newRecord];\n\n    await useUserStore.getState().update(id, {\n      attendance: {\n        ...user.attendance,\n        leave_records: newLeaveRecords\n      }\n    } as any);\n  },\n\n  /**\n   * 核准請假\n   */\n  approveLeave: async (user_id: string, leaveId: string, approved_by: string): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === user_id);\n    if (!user) return;\n\n    const updatedRecords = user.attendance.leave_records.map((record: any) =>\n      record.id === leaveId\n        ? { ...record, status: 'approved' as const, approved_by }\n        : record\n    );\n\n    await useUserStore.getState().update(user_id, {\n      attendance: {\n        ...user.attendance,\n        leave_records: updatedRecords\n      }\n    } as any);\n  },\n\n  /**\n   * 拒絕請假\n   */\n  rejectLeave: async (user_id: string, leaveId: string): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === user_id);\n    if (!user) return;\n\n    const updatedRecords = user.attendance.leave_records.map((record: any) =>\n      record.id === leaveId\n        ? { ...record, status: 'rejected' as const }\n        : record\n    );\n\n    await useUserStore.getState().update(user_id, {\n      attendance: {\n        ...user.attendance,\n        leave_records: updatedRecords\n      }\n    } as any);\n  },\n\n  /**\n   * 新增加班記錄\n   */\n  addOvertimeRecord: async (id: string, overtimeRecord: Omit<User['attendance']['overtime_records'][0], 'id'>): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === id);\n    if (!user) return;\n\n    const newRecord = {\n      ...overtimeRecord,\n      id: generateUUID()\n    };\n\n    const newOvertimeRecords = [...user.attendance.overtime_records, newRecord];\n\n    await useUserStore.getState().update(id, {\n      attendance: {\n        ...user.attendance,\n        overtime_records: newOvertimeRecords\n      }\n    } as any);\n  },\n\n  /**\n   * 新增合約\n   */\n  addContract: async (id: string, contract: Omit<User['contracts'][0], 'id'>): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === id);\n    if (!user) return;\n\n    const newContract = {\n      ...contract,\n      id: generateUUID()\n    };\n\n    const newContracts = [...user.contracts, newContract];\n\n    await useUserStore.getState().update(id, {\n      contracts: newContracts\n    } as any);\n  },\n\n  /**\n   * 更新合約\n   */\n  updateContract: async (user_id: string, contractId: string, updates: Partial<User['contracts'][0]>): Promise<void> => {\n    const user = useUserStore.getState().items.find((u: User) => u.id === user_id);\n    if (!user) return;\n\n    const updatedContracts = user.contracts.map((contract: any) =>\n      contract.id === contractId\n        ? { ...contract, ...updates }\n        : contract\n    );\n\n    await useUserStore.getState().update(user_id, {\n      contracts: updatedContracts\n    } as any);\n  },\n};\n\n// 相容性 alias（保留舊的 API）\nexport const useUserStoreCompat = () => {\n  const store = useUserStore();\n\n  return {\n    ...store,\n    users: store.items, // 相容性：items → users\n    isLoading: store.loading, // 相容性：loading → isLoading\n    loadUsersFromDatabase: store.fetchAll, // 相容性：fetchAll → loadUsersFromDatabase\n    addUser: store.create, // 相容性：create → addUser\n    updateUser: store.update, // 相容性：update → updateUser\n    deleteUser: store.delete, // 相容性：delete → deleteUser\n    getUser: (id: string) => store.items.find((u: User) => u.id === id), // 相容性：替代 findById\n    ...userStoreHelpers, // 包含所有自訂方法\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/stores/workspace-store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1830,1833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1830,1833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3595,3598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3595,3598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7216,7219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7216,7219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9358,9361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9358,9361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":425,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":425,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13367,13370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13367,13370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":469,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":469,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14801,14804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14801,14804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16628,16631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16628,16631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":567,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":567,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18238,18241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18238,18241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":653,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":653,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20846,20849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20846,20849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":680,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":680,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21687,21690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21687,21690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":708,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":708,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22511,22514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22511,22514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":737,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":737,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23382,23385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23382,23385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":832,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":832,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26066,26069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26066,26069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":844,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":844,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26439,26442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26439,26442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":922,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":922,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28957,28960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28957,28960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":933,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":933,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29376,29379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29376,29379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":970,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":970,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30746,30749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30746,30749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1017,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1017,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32308,32311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32308,32311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'receiptId' is defined but never used. Allowed unused args must match /^_/u.","line":1032,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":1032,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { supabase } from '@/lib/supabase/client';\nimport { v4 as uuidv4 } from 'uuid';\nimport { localDB } from '@/lib/db';\n\n\n\ninterface Workspace {\n  id: string;\n  name: string;\n  description?: string;\n  icon?: string;\n  is_active: boolean;\n  created_by?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\ninterface Bulletin {\n  id: string;\n  workspace_id: string;\n  title: string;\n  content: string;\n  type: 'announcement' | 'notice' | 'event';\n  priority: number;\n  is_pinned: boolean;\n  author_id: string;\n  created_at: string;\n  updated_at: string;\n  author?: {\n    display_name: string;\n    english_name: string;\n  };\n}\n\nexport interface Channel {\n  id: string;\n  workspace_id: string;\n  name: string;\n  description?: string;\n  type: 'public' | 'private' | 'direct';\n  created_by?: string;\n  created_at: string;\n  is_favorite?: boolean;\n  group_id?: string;\n  tour_id?: string;\n}\n\nexport interface ChannelGroup {\n  id: string;\n  workspace_id: string;\n  name: string;\n  is_collapsed: boolean;\n  order: number;\n  created_at?: string;\n}\n\nexport interface Message {\n  id: string;\n  channel_id: string;\n  author_id: string;\n  content: string;\n  reactions: Record<string, string[]>;\n  attachments?: any[];\n  created_at: string;\n  edited_at?: string;\n  is_pinned?: boolean;  // ✨ 新增：是否置頂\n  author?: {\n    id: string;\n    display_name: string;\n    avatar?: string;\n  };\n}\n\nexport interface PersonalCanvas {\n  id: string;\n  channelId: string;\n  name: string;\n  title?: string;  // ✨ 新增：文件標題\n  type: string;\n  order: number;\n  canvas_number?: number;  // ✨ 新增：工作區編號\n  created_at?: string;\n  updated_at?: string;  // ✨ 新增：更新時間\n}\n\nexport interface RichDocument {\n  id: string;\n  canvas_id: string;\n  title: string;\n  content: string;\n  format_data?: any;  // ✨ 新增：格式資料\n  tags?: string[];\n  is_favorite?: boolean;  // ✨ 新增：是否收藏\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface AdvanceItem {\n  id: string;\n  name: string;\n  description: string;\n  amount: number;\n  advance_person: string;\n  status: 'pending' | 'processing' | 'completed' | 'cancelled';\n  payment_request_id?: string;\n  processed_by?: string;\n  processed_at?: string;\n}\n\nexport interface AdvanceList {\n  id: string;\n  channel_id: string;\n  items: AdvanceItem[];\n  created_by: string;\n  created_at: string;\n  author?: {\n    id: string;\n    display_name: string;\n    avatar?: string;\n  };\n}\n\nexport interface SharedOrderList {\n  id: string;\n  channel_id: string;\n  orders: Array<{\n    id: string;\n    order_number: string;\n    contact_person: string;\n    total_amount: number;\n    paid_amount: number;\n    gap: number;\n    collection_rate: number;\n    invoice_status?: 'not_invoiced' | 'invoiced';\n    receipt_status?: 'not_received' | 'received';\n  }>;\n  created_by: string;\n  created_at: string;\n  author?: {\n    id: string;\n    display_name: string;\n    avatar?: string;\n  };\n}\n\ninterface WorkspaceState {\n  workspaces: Workspace[];\n  currentWorkspace: Workspace | null;\n  bulletins: Bulletin[];\n  channels: Channel[];\n  channelGroups: ChannelGroup[];\n  selectedChannel: Channel | null;  // ✨ 新增：當前選擇的頻道\n  currentChannel: Channel | null;   // ✨ 新增：當前頻道（與 selectedChannel 同步）\n  messages: Message[];\n  advanceLists: AdvanceList[];\n  sharedOrderLists: SharedOrderList[];\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  channelFilter: 'all' | 'starred' | 'unread' | 'muted';\n  personalCanvases: PersonalCanvas[];  // ✨ 新增：個人 Canvas 文件\n  richDocuments: RichDocument[];  // ✨ 新增：富文本文件\n  createPersonalCanvas: (canvas: any) => Promise<PersonalCanvas>;  // ✨ 新增：建立個人 Canvas\n  loadRichDocuments: (canvasId?: string) => Promise<void>;  // ✨ 新增\n  createRichDocument: (document: Partial<RichDocument>) => Promise<void>;  // ✨ 新增\n  updateRichDocument: (id: string, updates: Partial<RichDocument>) => Promise<void>;  // ✨ 新增\n  deleteRichDocument: (id: string) => Promise<void>;  // ✨ 新增\n  loadPersonalCanvases: (userId?: string, workspaceId?: string) => Promise<void>;  // ✨ 新增\n\n  loadWorkspaces: () => Promise<void>;\n  setCurrentWorkspace: (workspace: Workspace) => void;\n\n  loadBulletins: (workspaceId?: string) => Promise<void>;\n  createBulletin: (bulletin: Omit<Bulletin, 'id' | 'created_at' | 'updated_at'>) => Promise<void>;\n  updateBulletin: (id: string, updates: Partial<Bulletin>) => Promise<void>;\n  deleteBulletin: (id: string) => Promise<void>;\n\n  loadChannels: (workspaceId?: string) => Promise<void>;\n  createChannel: (channel: Omit<Channel, 'id' | 'created_at'>) => Promise<void>;\n  updateChannel: (id: string, updates: Partial<Channel>) => Promise<void>;\n  deleteChannel: (id: string) => Promise<void>;\n  toggleChannelFavorite: (id: string) => void;\n\n  createChannelGroup: (group: Omit<ChannelGroup, 'id' | 'created_at'>) => void;\n  toggleGroupCollapse: (id: string) => void;\n\n  setSearchQuery: (query: string) => void;\n  setChannelFilter: (filter: 'all' | 'starred' | 'unread' | 'muted') => void;\n\n  selectChannel: (channel: Channel | null) => Promise<void>;  // ✨ 新增：切換頻道\n  loadMessages: (channelId: string) => Promise<void>;\n  sendMessage: (message: Omit<Message, 'id' | 'created_at' | 'reactions'>) => Promise<void>;\n  addMessage: (message: Omit<Message, 'id' | 'created_at' | 'reactions'>) => Promise<void>;  // ✨ 新增\n  updateMessage: (messageId: string, updates: Partial<Message>) => Promise<void>;  // ✨ 新增\n  togglePinMessage: (messageId: string) => void;  // ✨ 新增\n  addReaction: (messageId: string, emoji: string, userId: string) => void;  // ✨ 新增\n  updateMessageReactions: (messageId: string, reactions: Record<string, string[]>) => Promise<void>;\n  deleteMessage: (messageId: string) => Promise<void>;\n  softDeleteMessage: (messageId: string) => Promise<void>;\n  activeCanvasTab: string;  // ✨ 新增\n  setActiveCanvasTab: (tab: string) => void;  // ✨ 新增\n\n  shareAdvanceList: (channelId: string, items: Omit<AdvanceItem, 'id' | 'status'>[], currentUserId: string) => Promise<void>;\n  processAdvanceItem: (listId: string, itemId: string, paymentRequestId: string, processedBy: string) => Promise<void>;\n  updateAdvanceStatus: (listId: string, itemId: string, status: AdvanceItem['status']) => Promise<void>;\n  loadAdvanceLists: (channelId: string) => Promise<void>;\n  deleteAdvanceList: (listId: string) => Promise<void>;\n\n  shareOrderList: (channelId: string, orderIds: string[], currentUserId: string) => Promise<void>;\n  updateOrderReceiptStatus: (listId: string, orderId: string, receiptId: string) => Promise<void>;\n  loadSharedOrderLists: (channelId: string) => Promise<void>;\n\n  clearError: () => void;\n}\n\nexport const useWorkspaceStore = create<WorkspaceState>()(\n  persist(\n    (set, get) => ({\n      workspaces: [],\n      currentWorkspace: null,\n      bulletins: [],\n      channels: [],\n      channelGroups: [],\n      selectedChannel: null,  // ✨ 新增\n      currentChannel: null,   // ✨ 新增\n      messages: [],\n      advanceLists: [],\n      sharedOrderLists: [],\n      loading: false,\n      error: null,\n      searchQuery: '',\n      channelFilter: 'all',\n      personalCanvases: [],  // ✨ 新增初始值\n      richDocuments: [],  // ✨ 新增初始值\n      activeCanvasTab: 'canvas',  // ✨ 新增初始值\n      createPersonalCanvas: async (canvas: any) => {\n        // ✨ 新增：暫時實作（待完整實作）\n        const newCanvas: PersonalCanvas = { ...canvas, id: Date.now().toString() };\n        set((state) => ({\n          personalCanvases: [...state.personalCanvases, newCanvas]\n        }));\n        return newCanvas;\n      },\n      loadRichDocuments: async (canvasId?: string) => {\n        // ✨ 新增：暫時實作（待完整實作）\n        console.log('loadRichDocuments stub', canvasId);\n      },\n      createRichDocument: async (document: Partial<RichDocument>) => {\n        // ✨ 新增：暫時實作（待完整實作）\n        const newDoc: RichDocument = {\n          id: Date.now().toString(),\n          canvas_id: document.canvas_id || '',\n          title: document.title || 'Untitled',\n          content: document.content || '',\n          tags: document.tags || [],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n        set((state) => ({\n          richDocuments: [...state.richDocuments, newDoc]\n        }));\n      },\n      updateRichDocument: async (id: string, updates: Partial<RichDocument>) => {\n        // ✨ 新增：暫時實作（待完整實作）\n        set((state) => ({\n          richDocuments: state.richDocuments.map(doc =>\n            doc.id === id ? { ...doc, ...updates, updated_at: new Date().toISOString() } : doc\n          )\n        }));\n      },\n      deleteRichDocument: async (id: string) => {\n        // ✨ 新增：暫時實作（待完整實作）\n        set((state) => ({\n          richDocuments: state.richDocuments.filter(doc => doc.id !== id)\n        }));\n      },\n      loadPersonalCanvases: async (userId?: string, workspaceId?: string) => {\n        // ✨ 新增：暫時實作（待完整實作）\n        console.log('loadPersonalCanvases stub', userId, workspaceId);\n      },\n      setActiveCanvasTab: (tab: string) => {\n        // ✨ 新增：設定活動 Canvas 標籤\n        set({ activeCanvasTab: tab });\n      },\n\n      loadWorkspaces: async () => {\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        set({ loading: true });\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：從 Supabase 載入\n            const { data, error } = await (supabase as any)\n              .from('workspaces')\n              .select('*')\n              .eq('is_active', true)\n              .order('created_at', { ascending: true });\n\n            if (error) throw error;\n\n            console.log('✅ 從 Supabase 載入工作空間:', data);\n\n            set({\n              workspaces: data || [],\n              currentWorkspace: data?.[0] || null,\n              loading: false\n            });\n          } else {\n            // 📴 離線：使用本地預設值\n            console.log('📴 離線模式：使用本地工作空間');\n            const data: Workspace[] = [\n              {\n                id: 'workspace-001',\n                name: '總部辦公室',\n                description: 'Venturo 總部工作空間',\n                icon: '🏢',\n                is_active: true,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n              }\n            ];\n\n            set({\n              workspaces: data,\n              currentWorkspace: data[0] || null,\n              loading: false\n            });\n          }\n        } catch (error) {\n          console.log('⚠️ 載入工作空間失敗，使用本地預設值:', error);\n          // 降級到本地預設值\n          const data: Workspace[] = [\n            {\n              id: 'workspace-001',\n              name: '總部辦公室',\n              description: 'Venturo 總部工作空間',\n              icon: '🏢',\n              is_active: true,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            }\n          ];\n\n          set({\n            workspaces: data,\n            currentWorkspace: data[0] || null,\n            loading: false\n          });\n        }\n      },\n\n      setCurrentWorkspace: (workspace) => set({ currentWorkspace: workspace }),\n\n      loadBulletins: async (workspaceId) => {\n        const currentWorkspaceId = workspaceId || get().currentWorkspace?.id;\n        if (!currentWorkspaceId) {\n          set({ loading: false });\n          return;\n        }\n\n        set({ loading: true });\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n\n        const allBulletins = get().bulletins;\n        const filtered = allBulletins.filter(b => b.workspace_id === currentWorkspaceId);\n\n        set({ bulletins: filtered, loading: false });\n      },\n\n      createBulletin: async (bulletin) => {\n        const newBulletin: Bulletin = {\n          ...bulletin,\n          id: uuidv4(),\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n\n        set(state => ({\n          bulletins: [...state.bulletins, newBulletin]\n        }));\n      },\n\n      updateBulletin: async (id, updates) => {\n        set(state => ({\n          bulletins: state.bulletins.map(b =>\n            b.id === id ? { ...b, ...updates, updated_at: new Date().toISOString() } : b\n          )\n        }));\n      },\n\n      deleteBulletin: async (id) => {\n        set(state => ({\n          bulletins: state.bulletins.filter(b => b.id !== id)\n        }));\n      },\n\n      loadChannels: async (workspaceId) => {\n        const currentWorkspaceId = workspaceId || get().currentWorkspace?.id;\n        if (!currentWorkspaceId) {\n          set({ loading: false });\n          return;\n        }\n\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          // ✨ 1. 立即從 IndexedDB 快取讀取（快！）\n          console.log('💾 [channels] 從 IndexedDB 快速載入...');\n          const cachedChannels = (await localDB.getAll('channels') as Channel[])\n            .filter(ch => ch.workspace_id === currentWorkspaceId);\n\n          // 立即更新 UI（不等 Supabase）\n          set({ channels: cachedChannels, loading: false });\n          console.log(`✅ [channels] IndexedDB 快速載入完成: ${cachedChannels.length} 筆`);\n\n          // ✨ 2. 背景從 Supabase 同步（不阻塞 UI）\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            setTimeout(async () => {\n              try {\n                console.log('☁️ [channels] 背景同步 Supabase...');\n                const { data, error } = await (supabase as any)\n                  .from('channels')\n                  .select('*')\n                  .eq('workspace_id', currentWorkspaceId)\n                  .order('created_at', { ascending: true });\n\n                if (error) {\n                  console.warn('⚠️ [channels] Supabase 同步失敗，繼續使用快取資料');\n                  return;\n                }\n\n                const freshChannels = data || [];\n                console.log(`✅ [channels] Supabase 同步成功: ${freshChannels.length} 筆`);\n\n                // 批次存入 IndexedDB\n                for (const channel of freshChannels) {\n                  await localDB.put('channels', channel);\n                }\n\n                // 靜默更新 UI\n                set({ channels: freshChannels });\n              } catch (syncError) {\n                console.warn('⚠️ [channels] 背景同步失敗:', syncError);\n              }\n            }, 0);\n          }\n        } catch (error) {\n          console.log('⚠️ 載入頻道失敗:', error);\n          set({ loading: false });\n        }\n      },\n\n      createChannel: async (channel) => {\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        const newChannel: Channel = {\n          ...channel,\n          id: uuidv4(),\n          created_at: new Date().toISOString()\n        };\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：寫入 Supabase\n            const { error } = await (supabase as any)\n              .from('channels')\n              .insert({\n                id: newChannel.id,\n                workspace_id: newChannel.workspace_id,\n                name: newChannel.name,\n                description: newChannel.description,\n                type: newChannel.type,\n                group_id: newChannel.group_id,\n                tour_id: newChannel.tour_id,\n                is_favorite: newChannel.is_favorite || false,\n                created_by: newChannel.created_by,\n                created_at: newChannel.created_at\n              });\n\n            if (error) throw error;\n            console.log('✅ 頻道已同步到 Supabase');\n          } else {\n            console.log('📴 離線模式：頻道僅儲存到本地');\n          }\n        } catch (error) {\n          console.log('⚠️ 頻道同步失敗，僅儲存到本地:', error);\n        }\n\n        // ✨ 同時寫入 IndexedDB 和 state\n        await localDB.put('channels', newChannel);\n        set(state => ({\n          channels: [...state.channels, newChannel]\n        }));\n      },\n\n      loadMessages: async (channelId) => {\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          // ✨ 1. 立即從 IndexedDB 快取讀取（快！）\n          console.log('💾 [messages] 從 IndexedDB 快速載入...');\n          const cachedMessages = (await localDB.getAll('messages') as Message[])\n            .filter(m => m.channel_id === channelId);\n\n          // 立即更新 UI（不等 Supabase）\n          set({ messages: cachedMessages });\n          console.log(`✅ [messages] IndexedDB 快速載入完成: ${cachedMessages.length} 筆`);\n\n          // ✨ 2. 背景從 Supabase 同步（不阻塞 UI）\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            setTimeout(async () => {\n              try {\n                console.log('☁️ [messages] 背景同步 Supabase...');\n                const { data, error } = await (supabase as any)\n                  .from('messages')\n                  .select(`\n                    *,\n                    author:employees!author_id(id, display_name, avatar)\n                  `)\n                  .eq('channel_id', channelId)\n                  .order('created_at', { ascending: true });\n\n                if (error) {\n                  console.warn('⚠️ [messages] Supabase 同步失敗，繼續使用快取資料');\n                  return;\n                }\n\n                const freshMessages = data || [];\n                console.log(`✅ [messages] Supabase 同步成功: ${freshMessages.length} 筆`);\n\n                // 批次存入 IndexedDB\n                for (const message of freshMessages) {\n                  await localDB.put('messages', message);\n                }\n\n                // 靜默更新 UI\n                set({ messages: freshMessages });\n              } catch (syncError) {\n                console.warn('⚠️ [messages] 背景同步失敗:', syncError);\n              }\n            }, 0);\n          }\n        } catch (error) {\n          console.log('⚠️ 載入訊息失敗:', error);\n        }\n      },\n\n      sendMessage: async (message) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        const newMessage: Message = {\n          ...message,\n          id: uuidv4(),\n          reactions: {},\n          created_at: new Date().toISOString(),\n          author: message.author\n        };\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：寫入 Supabase\n            const { error } = await (supabase as any)\n              .from('messages')\n              .insert({\n                id: newMessage.id,\n                channel_id: newMessage.channel_id,\n                author_id: newMessage.author_id,\n                content: newMessage.content,\n                reactions: newMessage.reactions,\n                attachments: newMessage.attachments || [],\n                created_at: newMessage.created_at\n              });\n\n            if (error) throw error;\n\n            console.log('✅ 訊息已同步到 Supabase');\n          } else {\n            console.log('📴 離線模式：訊息僅儲存到本地');\n          }\n        } catch (error) {\n          console.log('⚠️ 訊息同步失敗，僅儲存到本地:', error);\n        }\n\n        // ✨ 同時寫入 IndexedDB 和 state\n        await localDB.put('messages', newMessage);\n        set(state => ({\n          messages: [...state.messages, newMessage]\n        }));\n      },\n\n      addMessage: async (message) => {\n        // ✨ 新增：別名方法，指向 sendMessage\n        return get().sendMessage(message);\n      },\n\n      updateMessage: async (messageId, updates) => {\n        // ✨ 新增：更新訊息\n        set(state => ({\n          messages: state.messages.map(m =>\n            m.id === messageId ? { ...m, ...updates } : m\n          )\n        }));\n      },\n\n      togglePinMessage: (messageId) => {\n        // ✨ 新增：切換訊息置頂\n        set(state => ({\n          messages: state.messages.map(m =>\n            m.id === messageId ? { ...m, is_pinned: !m.is_pinned } : m\n          )\n        }));\n      },\n\n      addReaction: (messageId, emoji, userId) => {\n        // ✨ 新增：新增反應\n        set(state => ({\n          messages: state.messages.map(m => {\n            if (m.id === messageId) {\n              const reactions = { ...m.reactions };\n              if (!reactions[emoji]) {\n                reactions[emoji] = [];\n              }\n              if (!reactions[emoji].includes(userId)) {\n                reactions[emoji] = [...reactions[emoji], userId];\n              }\n              return { ...m, reactions };\n            }\n            return m;\n          })\n        }));\n      },\n\n      updateMessageReactions: async (messageId, reactions) => {\n        set(state => ({\n          messages: state.messages.map(m =>\n            m.id === messageId ? { ...m, reactions } : m\n          )\n        }));\n      },\n\n      deleteMessage: async (messageId) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：從 Supabase 刪除\n            const { error } = await (supabase as any)\n              .from('messages')\n              .delete()\n              .eq('id', messageId);\n\n            if (error) throw error;\n            console.log('✅ 訊息已從 Supabase 刪除');\n          } else {\n            console.log('📴 離線模式：訊息僅從本地刪除');\n          }\n        } catch (error) {\n          console.log('⚠️ 訊息刪除失敗，僅從本地刪除:', error);\n        }\n\n        // 從本地 state 移除\n        set((state) => ({\n          messages: state.messages.filter(m => m.id !== messageId)\n        }));\n      },\n\n      softDeleteMessage: async (messageId) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：更新 Supabase\n            const { error } = await (supabase as any)\n              .from('messages')\n              .update({ content: '此訊息已被刪除' })\n              .eq('id', messageId);\n\n            if (error) throw error;\n          }\n        } catch (error) {\n          console.log('⚠️ 訊息更新失敗:', error);\n        }\n\n        // 更新本地 state\n        set((state) => ({\n          messages: state.messages.map(m =>\n            m.id === messageId\n              ? { ...m, content: '此訊息已被刪除' }\n              : m\n          )\n        }));\n      },\n\n      updateChannel: async (id, updates) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：更新 Supabase\n            const { error } = await (supabase as any)\n              .from('channels')\n              .update(updates)\n              .eq('id', id);\n\n            if (error) throw error;\n            console.log('✅ 頻道已更新到 Supabase');\n          } else {\n            console.log('📴 離線模式：頻道僅更新到本地');\n          }\n        } catch (error) {\n          console.log('⚠️ 頻道更新失敗，僅更新到本地:', error);\n        }\n\n        // 更新本地 state\n        set(state => ({\n          channels: state.channels.map(ch =>\n            ch.id === id ? { ...ch, ...updates } : ch\n          )\n        }));\n      },\n\n      deleteChannel: async (id) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：從 Supabase 刪除\n            const { error } = await (supabase as any)\n              .from('channels')\n              .delete()\n              .eq('id', id);\n\n            if (error) throw error;\n            console.log('✅ 頻道已從 Supabase 刪除');\n          } else {\n            console.log('📴 離線模式：頻道僅從本地刪除');\n          }\n        } catch (error) {\n          console.log('⚠️ 頻道刪除失敗，僅從本地刪除:', error);\n        }\n\n        // 從本地 state 刪除\n        set(state => ({\n          channels: state.channels.filter(ch => ch.id !== id)\n        }));\n      },\n\n      toggleChannelFavorite: (id) => {\n        set(state => ({\n          channels: state.channels.map(ch =>\n            ch.id === id ? { ...ch, is_favorite: !ch.is_favorite } : ch\n          )\n        }));\n      },\n\n      createChannelGroup: (group) => {\n        const newGroup: ChannelGroup = {\n          ...group,\n          id: uuidv4(),\n          created_at: new Date().toISOString()\n        };\n\n        set(state => ({\n          channelGroups: [...state.channelGroups, newGroup]\n        }));\n      },\n\n      toggleGroupCollapse: (id) => {\n        set(state => ({\n          channelGroups: state.channelGroups.map(g =>\n            g.id === id ? { ...g, is_collapsed: !g.is_collapsed } : g\n          )\n        }));\n      },\n\n      setSearchQuery: (query) => set({ searchQuery: query }),\n      setChannelFilter: (filter) => set({ channelFilter: filter }),\n\n      // ✨ 切換頻道\n      selectChannel: async (channel) => {\n        console.log('📢 切換頻道:', channel?.name || 'null');\n\n        // 1. 清空當前訊息和相關資料\n        set({\n          selectedChannel: channel,\n          currentChannel: channel,\n          messages: [],\n          advanceLists: [],\n          sharedOrderLists: []\n        });\n\n        // 2. 載入新頻道的資料\n        if (channel) {\n          await get().loadMessages(channel.id);\n          await get().loadAdvanceLists(channel.id);\n          await get().loadSharedOrderLists(channel.id);\n        }\n      },\n\n      shareAdvanceList: async (channelId, items, currentUserId) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        const listId = uuidv4();\n        const advanceItems = items.map(item => ({\n          ...item,\n          id: uuidv4(),\n          status: 'pending' as const\n        }));\n\n        const newList: AdvanceList = {\n          id: listId,\n          channel_id: channelId,\n          items: advanceItems,\n          created_by: currentUserId,\n          created_at: new Date().toISOString()\n        };\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：寫入 Supabase\n            // 1. 建立代墊清單\n            const { error: listError } = await (supabase as any)\n              .from('advance_lists')\n              .insert({\n                id: listId,\n                channel_id: channelId,\n                created_by: currentUserId,\n                created_at: newList.created_at\n              });\n\n            if (listError) throw listError;\n\n            // 2. 建立代墊項目\n            const { error: itemsError } = await (supabase as any)\n              .from('advance_items')\n              .insert(\n                advanceItems.map(item => ({\n                  id: item.id,\n                  advance_list_id: listId,\n                  name: item.name,\n                  description: item.description,\n                  amount: item.amount,\n                  advance_person: item.advance_person,\n                  status: item.status,\n                  created_at: newList.created_at\n                }))\n              );\n\n            if (itemsError) throw itemsError;\n            console.log('✅ 代墊清單已同步到 Supabase');\n          } else {\n            console.log('📴 離線模式：代墊清單僅儲存到本地');\n          }\n        } catch (error) {\n          console.log('⚠️ 代墊清單同步失敗，僅儲存到本地:', error);\n        }\n\n        // 更新本地 state\n        set(state => ({\n          advanceLists: [...state.advanceLists, newList]\n        }));\n      },\n\n      processAdvanceItem: async (listId, itemId, paymentRequestId, processedBy) => {\n        set(state => ({\n          advanceLists: state.advanceLists.map(list =>\n            list.id === listId\n              ? {\n                  ...list,\n                  items: list.items.map(item =>\n                    item.id === itemId\n                      ? {\n                          ...item,\n                          status: 'completed' as const,\n                          payment_request_id: paymentRequestId,\n                          processed_by: processedBy,\n                          processed_at: new Date().toISOString()\n                        }\n                      : item\n                  )\n                }\n              : list\n          )\n        }));\n      },\n\n      updateAdvanceStatus: async (listId, itemId, status) => {\n        set(state => ({\n          advanceLists: state.advanceLists.map(list =>\n            list.id === listId\n              ? {\n                  ...list,\n                  items: list.items.map(item =>\n                    item.id === itemId ? { ...item, status } : item\n                  )\n                }\n              : list\n          )\n        }));\n      },\n\n      loadAdvanceLists: async (channelId) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        set({ loading: true });\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：從 Supabase 載入\n            // 1. 載入代墊清單\n            const { data: lists, error: listsError } = await (supabase as any)\n              .from('advance_lists')\n              .select('*')\n              .eq('channel_id', channelId)\n              .order('created_at', { ascending: true });\n\n            if (listsError) throw listsError;\n\n            // 2. 載入每個清單的項目\n            const advanceLists: AdvanceList[] = [];\n            for (const list of lists || []) {\n              const { data: items, error: itemsError } = await (supabase as any)\n                .from('advance_items')\n                .select('*')\n                .eq('advance_list_id', list.id)\n                .order('created_at', { ascending: true });\n\n              if (itemsError) throw itemsError;\n\n              advanceLists.push({\n                ...list,\n                items: items || []\n              });\n            }\n\n            set({ advanceLists, loading: false });\n          } else {\n            // 📴 離線：從本地 state 載入\n            const allLists = get().advanceLists;\n            const filtered = allLists.filter(list => list.channel_id === channelId);\n            set({ advanceLists: filtered, loading: false });\n          }\n        } catch (error) {\n          console.log('⚠️ 載入代墊清單失敗，使用本地資料:', error);\n          // 降級到本地資料\n          const allLists = get().advanceLists;\n          const filtered = allLists.filter(list => list.channel_id === channelId);\n          set({ advanceLists: filtered, loading: false });\n        }\n      },\n\n      deleteAdvanceList: async (listId) => {\n        // supabase client already imported at top\n        const isOnline = typeof navigator !== 'undefined' && navigator.onLine;\n\n        try {\n          if (isOnline && process.env.NEXT_PUBLIC_ENABLE_SUPABASE === 'true') {\n            // 🌐 有網路：從 Supabase 刪除（會自動刪除關聯的 items，因為有 ON DELETE CASCADE）\n            const { error } = await (supabase as any)\n              .from('advance_lists')\n              .delete()\n              .eq('id', listId);\n\n            if (error) throw error;\n            console.log('✅ 代墊清單已從 Supabase 刪除');\n          } else {\n            console.log('📴 離線模式：代墊清單僅從本地刪除');\n          }\n        } catch (error) {\n          console.log('⚠️ 代墊清單刪除失敗，僅從本地刪除:', error);\n        }\n\n        // 從本地 state 刪除\n        set(state => ({\n          advanceLists: state.advanceLists.filter(list => list.id !== listId)\n        }));\n      },\n\n      shareOrderList: async (channelId, orderIds, currentUserId) => {\n\n        const { useOrderStore } = await import('./index');\n        const allOrders = useOrderStore.getState().items;\n\n        const orders = orderIds\n          .map(orderId => {\n            const order = allOrders.find(o => o.id === orderId);\n            if (!order) return null;\n\n            const totalCost = order.total_amount || 0;\n            const collected = order.paid_amount || 0;\n            const gap = totalCost - collected;\n            const collectionRate = totalCost > 0 ? (collected / totalCost) * 100 : 0;\n\n            return {\n              id: order.id,\n              order_number: order.order_number,\n              contact_person: order.contact_person || '',\n              total_amount: totalCost,\n              paid_amount: collected,\n              gap,\n              collection_rate: collectionRate,\n              invoice_status: 'not_invoiced' as const,\n              receipt_status: 'not_received' as const\n            };\n          })\n          .filter(Boolean) as any[];\n\n        const newList: SharedOrderList = {\n          id: uuidv4(),\n          channel_id: channelId,\n          orders,\n          created_by: currentUserId,\n          created_at: new Date().toISOString()\n        };\n\n        set(state => ({\n          sharedOrderLists: [...state.sharedOrderLists, newList]\n        }));\n      },\n\n      updateOrderReceiptStatus: async (listId, orderId, receiptId) => {\n        set(state => ({\n          sharedOrderLists: state.sharedOrderLists.map(list =>\n            list.id === listId\n              ? {\n                  ...list,\n                  orders: list.orders.map(order =>\n                    order.id === orderId\n                      ? { ...order, receipt_status: 'received' as const }\n                      : order\n                  )\n                }\n              : list\n          )\n        }));\n      },\n\n      loadSharedOrderLists: async (channelId) => {\n        set({ loading: true });\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        const allLists = get().sharedOrderLists;\n        const filtered = allLists.filter(list => list.channel_id === channelId);\n\n        set({ sharedOrderLists: filtered, loading: false });\n      },\n\n      clearError: () => set({ error: null })\n    }),\n    {\n      name: 'workspace-storage',\n      partialize: (state) => ({\n        workspaces: state.workspaces,\n        currentWorkspace: state.currentWorkspace,\n        bulletins: state.bulletins,\n        channels: state.channels,\n        channelGroups: state.channelGroups,\n        selectedChannel: state.selectedChannel,  // ✨ 記住最後選擇的頻道\n        messages: state.messages,\n        advanceLists: state.advanceLists,\n        sharedOrderLists: state.sharedOrderLists\n      })\n    }\n  )\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/accounting.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/base.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/calendar.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/common.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/customer.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/employee.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/order.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/quote.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1170,1173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1170,1173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 報價單相關型別定義\n */\n\nimport { BaseEntity } from './base.types';\n\n// ============================================\n// 報價單介面\n// ============================================\n\n/**\n * Quote - 報價單\n */\nexport interface Quote extends BaseEntity {\n  code: string;              // 報價單編號\n  customer_id?: string;      // 客戶 ID\n  customer_name?: string;    // 客戶姓名（冗餘欄位）\n  name?: string;             // 報價單名稱\n  destination: string;       // 目的地\n  start_date: string;        // 出發日期 (ISO 8601)\n  end_date: string;          // 結束日期 (ISO 8601)\n  days: number;              // 天數\n  nights: number;            // 夜數\n  number_of_people: number;  // 人數\n  group_size?: number;       // 團體人數（與 number_of_people 同義，保留向後相容）\n  accommodation_days?: number; // 住宿天數\n  status: QuoteStatus;       // 報價狀態\n  total_amount: number;      // 總金額\n  version: number;           // 版本號\n  valid_until?: string;      // 有效期限 (ISO 8601)\n  notes?: string;            // 備註\n  is_active: boolean;        // 是否啟用\n  created_by?: string;       // 建立人 ID\n  created_by_name?: string;  // 建立人姓名（冗餘欄位）\n  converted_to_tour?: boolean; // 是否已轉成旅遊團\n  tour_id?: string;          // 轉換後的旅遊團 ID\n\n  // 擴展欄位（用於詳細頁）\n  categories?: any[];        // 報價分類（前端使用的複雜結構）\n  versions?: QuoteVersion[]; // 歷史版本\n}\n\n/**\n * QuoteVersion - 報價版本\n */\nexport interface QuoteVersion extends BaseEntity {\n  quote_id: string;          // 報價單 ID\n  version: number;           // 版本號\n  total_amount: number;      // 總金額\n  changes?: string;          // 變更說明\n  note?: string;             // 備註說明\n  created_by?: string;       // 建立人 ID\n  created_by_name?: string;  // 建立人姓名\n  snapshot?: string;         // 快照資料（JSON 格式）\n}\n\n/**\n * QuoteCategory - 報價分類\n */\nexport interface QuoteCategory extends BaseEntity {\n  quote_id: string;          // 報價單 ID\n  name: string;              // 分類名稱\n  order: number;             // 排序\n  is_active: boolean;        // 是否啟用\n}\n\n/**\n * QuoteItem - 報價項目\n */\nexport interface QuoteItem extends BaseEntity {\n  quote_id: string;          // 報價單 ID\n  category_id?: string;      // 分類 ID\n  category_name?: string;    // 分類名稱（冗餘欄位）\n  type: QuoteItemType;       // 項目類型\n  name: string;              // 項目名稱\n  description?: string;      // 說明\n  quantity: number;          // 數量\n  unit_price: number;        // 單價\n  total_price: number;       // 總價\n  order: number;             // 排序\n  notes?: string;            // 備註\n  is_optional: boolean;      // 是否為選配\n  is_active: boolean;        // 是否啟用\n}\n\n// ============================================\n// 報價單狀態與類型\n// ============================================\n\n/**\n * QuoteStatus - 報價狀態\n */\nexport type QuoteStatus =\n  | 'draft'      // 草稿\n  | 'sent'       // 已寄出\n  | 'accepted'   // 已接受\n  | 'rejected'   // 已拒絕\n  | 'expired'    // 已過期\n  | 'converted'; // 已轉單\n\n/**\n * QuoteItemType - 報價項目類型\n */\nexport type QuoteItemType =\n  | 'accommodation'  // 住宿\n  | 'transportation' // 交通\n  | 'meals'          // 餐食\n  | 'tickets'        // 門票\n  | 'insurance'      // 保險\n  | 'guide'          // 導遊\n  | 'visa'           // 簽證\n  | 'shopping'       // 購物\n  | 'activity'       // 活動\n  | 'other';         // 其他\n\n// ============================================\n// 報價單建立與更新\n// ============================================\n\n/**\n * CreateQuoteData - 建立報價單\n */\nexport interface CreateQuoteData {\n  code: string;\n  customer_id?: string;\n  customer_name?: string;\n  destination: string;\n  start_date: string;\n  end_date: string;\n  days: number;\n  nights: number;\n  number_of_people: number;\n  status: QuoteStatus;\n  total_amount: number;\n  valid_until?: string;\n  notes?: string;\n  is_active: boolean;\n}\n\n/**\n * UpdateQuoteData - 更新報價單\n */\nexport interface UpdateQuoteData {\n  customer_id?: string;\n  customer_name?: string;\n  destination?: string;\n  start_date?: string;\n  end_date?: string;\n  days?: number;\n  nights?: number;\n  number_of_people?: number;\n  status?: QuoteStatus;\n  total_amount?: number;\n  valid_until?: string;\n  notes?: string;\n  is_active?: boolean;\n  converted_to_tour?: boolean;\n  tour_id?: string;\n}\n\n/**\n * CreateQuoteItemData - 建立報價項目\n */\nexport interface CreateQuoteItemData {\n  quote_id: string;\n  category_id?: string;\n  type: QuoteItemType;\n  name: string;\n  description?: string;\n  quantity: number;\n  unit_price: number;\n  total_price: number;\n  order: number;\n  notes?: string;\n  is_optional: boolean;\n  is_active: boolean;\n}\n\n/**\n * UpdateQuoteItemData - 更新報價項目\n */\nexport interface UpdateQuoteItemData {\n  category_id?: string;\n  type?: QuoteItemType;\n  name?: string;\n  description?: string;\n  quantity?: number;\n  unit_price?: number;\n  total_price?: number;\n  order?: number;\n  notes?: string;\n  is_optional?: boolean;\n  is_active?: boolean;\n}\n\n// ============================================\n// 報價單查詢與篩選\n// ============================================\n\n/**\n * QuoteFilter - 報價單篩選條件\n */\nexport interface QuoteFilter {\n  customer_id?: string;\n  status?: QuoteStatus | QuoteStatus[];\n  destination?: string;\n  start_date_from?: string;\n  start_date_to?: string;\n  is_active?: boolean;\n  search_term?: string; // 搜尋報價單編號、客戶姓名\n}\n\n/**\n * QuoteListItem - 報價單列表項目（精簡版）\n */\nexport interface QuoteListItem {\n  id: string;\n  code: string;\n  customer_name?: string;\n  destination: string;\n  start_date: string;\n  end_date: string;\n  number_of_people: number;\n  status: QuoteStatus;\n  total_amount: number;\n  valid_until?: string;\n  converted_to_tour?: boolean;\n  created_at: string;\n}\n\n// ============================================\n// 報價單統計\n// ============================================\n\n/**\n * QuoteStats - 報價單統計資料\n */\nexport interface QuoteStats {\n  total_quotes: number;\n  draft_quotes: number;\n  sent_quotes: number;\n  accepted_quotes: number;\n  rejected_quotes: number;\n  converted_quotes: number;\n  conversion_rate: number;     // 轉換率（百分比）\n  total_quoted_amount: number;\n  average_quote_amount: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/region.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/supplier.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/timebox.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/todo.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/tour.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[915,918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[915,918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2254,2257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2254,2257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2660,2663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2660,2663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 旅遊團相關型別定義\n */\n\nimport { BaseEntity } from './base.types';\n\n// ============================================\n// 旅遊團介面\n// ============================================\n\n/**\n * Tour - 旅遊團資料\n */\nexport interface Tour extends BaseEntity {\n  code: string;              // 團號（統一使用 code）\n  name: string;              // 團名\n  location: string;          // 目的地（相容舊欄位：destination）\n  departure_date: string;    // 出發日期 (ISO 8601)（相容舊欄位：start_date）\n  return_date: string;       // 返回日期 (ISO 8601)（相容舊欄位：end_date）\n  status: TourStatus; // 狀態（英文）\n  price: number;             // 基本價格\n  max_participants: number;  // 最大參與人數（相容舊欄位：max_people）\n  current_participants?: number; // 當前參與人數\n  contract_status: ContractStatus; // 合約狀態\n  total_revenue: number;     // 總收入\n  total_cost: number;        // 總成本\n  profit: number;            // 利潤\n  description?: string;      // 團體說明/描述\n  archived?: boolean;        // 是否已封存\n  features?: any[];          // 行程特色（用於展示頁面）\n  quote_id?: string;         // 關聯的報價單ID\n  quote_cost_structure?: any[]; // 報價成本結構快照\n}\n\n// ============================================\n// 旅遊團狀態\n// ============================================\n\n/**\n * TourStatus - 旅遊團狀態（英文）\n */\nexport type TourStatus =\n  | 'draft'          // 提案階段\n  | 'active'         // 進行中\n  | 'pending_close'  // 待結案\n  | 'closed'         // 已結案\n  | 'cancelled'      // 已取消\n  | 'special';       // 特殊團\n\n/**\n * ContractStatus - 合約狀態（英文）\n */\nexport type ContractStatus =\n  | 'pending'  // 未簽署\n  | 'partial'  // 部分簽署\n  | 'signed';  // 已簽署\n\n/**\n * TourCategory - 旅遊團分類\n */\nexport type TourCategory =\n  | 'domestic'      // 國內\n  | 'international' // 國外\n  | 'group'         // 團體\n  | 'custom'        // 客製化\n  | 'cruise'        // 郵輪\n  | 'study';        // 遊學\n\n// ============================================\n// 旅遊團建立與更新\n// ============================================\n\n/**\n * CreateTourData - 建立旅遊團所需資料\n */\nexport interface CreateTourData {\n  code?: string;             // 可選，由 createStore 自動生成\n  name: string;\n  location: string;\n  departure_date: string;\n  return_date: string;\n  status: TourStatus;\n  price: number;\n  max_participants: number;\n  contract_status: ContractStatus;\n  total_revenue: number;\n  total_cost: number;\n  profit: number;\n  quote_id?: string;\n  quote_cost_structure?: any[];\n}\n\n/**\n * UpdateTourData - 更新旅遊團資料\n */\nexport interface UpdateTourData {\n  code?: string;\n  name?: string;\n  location?: string;\n  departure_date?: string;\n  return_date?: string;\n  status?: TourStatus;\n  price?: number;\n  max_participants?: number;\n  contract_status?: ContractStatus;\n  total_revenue?: number;\n  total_cost?: number;\n  profit?: number;\n  quote_id?: string;\n  quote_cost_structure?: any[];\n}\n\n// ============================================\n// 旅遊團查詢與篩選\n// ============================================\n\n/**\n * TourFilter - 旅遊團篩選條件\n */\nexport interface TourFilter {\n  status?: TourStatus | TourStatus[];\n  category?: TourCategory | TourCategory[];\n  destination?: string;\n  start_date_from?: string;\n  start_date_to?: string;\n  is_active?: boolean;\n  search_term?: string; // 搜尋團號或團名\n}\n\n/**\n * TourListItem - 旅遊團列表項目（精簡版）\n */\nexport interface TourListItem {\n  id: string;\n  code: string;\n  name: string;\n  location: string;\n  departure_date: string;\n  return_date: string;\n  status: TourStatus;\n  max_participants: number;\n  price: number;\n}\n\n// ============================================\n// 旅遊團統計\n// ============================================\n\n/**\n * TourStats - 旅遊團統計資料\n */\nexport interface TourStats {\n  total_tours: number;\n  active_tours: number;\n  completed_tours: number;\n  cancelled_tours: number;\n  total_revenue: number;\n  average_price: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/visa.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/src/types/workspace.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/tests/e2e/indexeddb-sync-simple.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/william/Projects/Corner/tests/e2e/indexeddb-sync.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1067,1070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1067,1070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1512,1515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1512,1515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'clearIndexedDB' is defined but never used. Allowed unused vars must match /^_/u.","line":57,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":75,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2585,2588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2585,2588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4810,4813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4810,4813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5985,5988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5985,5988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6204,6207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6204,6207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8345,8348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8345,8348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8416,8419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8416,8419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * IndexedDB 同步測試 - E2E 自動化測試\n *\n * 測試目標：驗證 Supabase ↔ IndexedDB 雙向同步機制\n * 測試環境：Playwright + Chrome\n */\n\nimport { test, expect, Page } from '@playwright/test';\n\n/**\n * 輔助函數：檢查 IndexedDB 中的資料數量\n */\nasync function getIndexedDBCount(page: Page, storeName: string): Promise<number> {\n  return await page.evaluate(async (store) => {\n    const db = await new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open('venturo-db', 1);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n\n    const transaction = db.transaction(store, 'readonly');\n    const objectStore = transaction.objectStore(store);\n\n    return await new Promise<number>((resolve, reject) => {\n      const countRequest = objectStore.count();\n      countRequest.onsuccess = () => resolve(countRequest.result);\n      countRequest.onerror = () => reject(countRequest.error);\n    });\n  }, storeName);\n}\n\n/**\n * 輔助函數：從 IndexedDB 取得所有資料\n */\nasync function getAllFromIndexedDB(page: Page, storeName: string): Promise<any[]> {\n  return await page.evaluate(async (store) => {\n    const db = await new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open('venturo-db', 1);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n\n    const transaction = db.transaction(store, 'readonly');\n    const objectStore = transaction.objectStore(store);\n\n    return await new Promise<any[]>((resolve, reject) => {\n      const getAllRequest = objectStore.getAll();\n      getAllRequest.onsuccess = () => resolve(getAllRequest.result);\n      getAllRequest.onerror = () => reject(getAllRequest.error);\n    });\n  }, storeName);\n}\n\n/**\n * 輔助函數：清空 IndexedDB\n */\nasync function clearIndexedDB(page: Page): Promise<void> {\n  await page.evaluate(async () => {\n    await new Promise<void>((resolve) => {\n      const request = indexedDB.deleteDatabase('venturo-db');\n      request.onsuccess = () => resolve();\n      request.onerror = () => resolve(); // 即使失敗也繼續\n    });\n  });\n}\n\n/**\n * 輔助函數：等待 IndexedDB 同步完成\n */\nasync function waitForSync(page: Page, timeMs: number = 3000): Promise<void> {\n  await page.waitForTimeout(timeMs);\n}\n\ntest.describe('IndexedDB 同步測試', () => {\n  test.beforeEach(async ({ page, context }) => {\n    // 訪問應用程式（必須先訪問頁面才能使用 IndexedDB）\n    await page.goto('/');\n\n    // 等待頁面載入\n    await page.waitForLoadState('domcontentloaded');\n\n    // 清空 IndexedDB（在頁面 context 中執行）\n    await page.evaluate(async () => {\n      const databases = await (window as any).indexedDB?.databases?.();\n      if (databases) {\n        for (const db of databases) {\n          if (db.name === 'venturo-db') {\n            await new Promise<void>((resolve) => {\n              const request = indexedDB.deleteDatabase(db.name);\n              request.onsuccess = () => resolve();\n              request.onerror = () => resolve();\n            });\n          }\n        }\n      }\n    });\n\n    // 重新載入頁面以初始化 IndexedDB\n    await page.reload();\n    await page.waitForLoadState('networkidle');\n  });\n\n  test('測試 1: 初始讀取 → IndexedDB 快取', async ({ page }) => {\n    console.log('🧪 測試 1: 初始讀取 → IndexedDB 快取');\n\n    // 模擬使用者操作：載入資料\n    // 注意：這裡假設應用程式在載入時會自動 fetchAll\n    // 如果需要點擊按鈕，請修改此處\n\n    // 等待資料載入\n    await waitForSync(page, 5000);\n\n    // 檢查 IndexedDB 中是否有資料\n    const toursCount = await getIndexedDBCount(page, 'tours');\n    const ordersCount = await getIndexedDBCount(page, 'orders');\n    const quotesCount = await getIndexedDBCount(page, 'quotes');\n\n    console.log(`📊 IndexedDB 快取狀態:`);\n    console.log(`  Tours: ${toursCount} 筆`);\n    console.log(`  Orders: ${ordersCount} 筆`);\n    console.log(`  Quotes: ${quotesCount} 筆`);\n\n    // 驗證：至少應該有一些資料（具體數量取決於你的測試資料）\n    expect(toursCount).toBeGreaterThanOrEqual(0);\n    expect(ordersCount).toBeGreaterThanOrEqual(0);\n    expect(quotesCount).toBeGreaterThanOrEqual(0);\n\n    console.log('✅ 測試 1 通過');\n  });\n\n  test('測試 2: 建立資料 → IndexedDB 同步', async ({ page }) => {\n    console.log('🧪 測試 2: 建立資料 → IndexedDB 同步');\n\n    // 先載入初始資料\n    await waitForSync(page, 5000);\n\n    // 記錄建立前的數量\n    const beforeCount = await getIndexedDBCount(page, 'tours');\n    console.log(`📊 建立前 Tours 數量: ${beforeCount}`);\n\n    // 模擬建立新資料\n    await page.evaluate(async () => {\n      const { useTourStore } = await import('@/stores');\n      const store = useTourStore.getState();\n\n      await store.create({\n        code: `E2E-TEST-${Date.now()}`,\n        name: 'E2E 測試旅遊團',\n        location: '測試地點',\n        departure_date: '2025-12-01',\n        return_date: '2025-12-05',\n        status: '提案',\n        price: 50000,\n        max_participants: 20,\n        contract_status: '未簽署',\n        total_revenue: 0,\n        total_cost: 0,\n        profit: 0,\n        is_active: true,\n      } as any);\n    });\n\n    // 等待同步\n    await waitForSync(page, 3000);\n\n    // 檢查數量是否增加\n    const afterCount = await getIndexedDBCount(page, 'tours');\n    console.log(`📊 建立後 Tours 數量: ${afterCount}`);\n    console.log(`變化: +${afterCount - beforeCount}`);\n\n    // 驗證：數量應該增加 1\n    expect(afterCount).toBe(beforeCount + 1);\n\n    console.log('✅ 測試 2 通過');\n  });\n\n  test('測試 3: 更新資料 → IndexedDB 同步', async ({ page }) => {\n    console.log('🧪 測試 3: 更新資料 → IndexedDB 同步');\n\n    // 先載入初始資料\n    await waitForSync(page, 5000);\n\n    // 取得第一筆資料\n    const tours = await getAllFromIndexedDB(page, 'tours');\n\n    if (tours.length === 0) {\n      console.log('⚠️ 沒有資料可以測試，跳過此測試');\n      test.skip();\n      return;\n    }\n\n    const firstTour = tours[0];\n    console.log(`📊 更新前:`);\n    console.log(`  ID: ${firstTour.id}`);\n    console.log(`  狀態: ${firstTour.status}`);\n    console.log(`  參加人數: ${firstTour.current_participants || 0}`);\n\n    // 模擬更新資料\n    await page.evaluate(async (tourId) => {\n      const { useTourStore } = await import('@/stores');\n      const store = useTourStore.getState();\n\n      await store.update(tourId, {\n        status: '進行中',\n        current_participants: 10,\n      } as any);\n    }, firstTour.id);\n\n    // 等待同步\n    await waitForSync(page, 3000);\n\n    // 檢查 IndexedDB 中的資料是否更新\n    const updatedTours = await getAllFromIndexedDB(page, 'tours');\n    const updatedTour = updatedTours.find((t: any) => t.id === firstTour.id);\n\n    console.log(`📊 更新後:`);\n    console.log(`  ID: ${updatedTour.id}`);\n    console.log(`  狀態: ${updatedTour.status}`);\n    console.log(`  參加人數: ${updatedTour.current_participants}`);\n\n    // 驗證：狀態和參加人數應該更新\n    expect(updatedTour.status).toBe('進行中');\n    expect(updatedTour.current_participants).toBe(10);\n\n    console.log('✅ 測試 3 通過');\n  });\n\n  test('測試 4: 刪除資料 → IndexedDB 同步', async ({ page }) => {\n    console.log('🧪 測試 4: 刪除資料 → IndexedDB 同步');\n\n    // 先載入初始資料\n    await waitForSync(page, 5000);\n\n    // 記錄刪除前的數量\n    const beforeCount = await getIndexedDBCount(page, 'tours');\n    console.log(`📊 刪除前 Tours 數量: ${beforeCount}`);\n\n    if (beforeCount === 0) {\n      console.log('⚠️ 沒有資料可以刪除，跳過此測試');\n      test.skip();\n      return;\n    }\n\n    // 取得第一筆資料的 ID\n    const tours = await getAllFromIndexedDB(page, 'tours');\n    const firstTourId = tours[0].id;\n\n    // 模擬刪除資料\n    await page.evaluate(async (tourId) => {\n      const { useTourStore } = await import('@/stores');\n      const store = useTourStore.getState();\n\n      await store.delete(tourId);\n    }, firstTourId);\n\n    // 等待同步\n    await waitForSync(page, 3000);\n\n    // 檢查數量是否減少\n    const afterCount = await getIndexedDBCount(page, 'tours');\n    console.log(`📊 刪除後 Tours 數量: ${afterCount}`);\n    console.log(`變化: ${afterCount - beforeCount}`);\n\n    // 驗證：數量應該減少 1\n    expect(afterCount).toBe(beforeCount - 1);\n\n    console.log('✅ 測試 4 通過');\n  });\n\n  test('測試 5: 資料一致性檢查', async ({ page }) => {\n    console.log('🧪 測試 5: 資料一致性檢查');\n\n    // 載入資料\n    await waitForSync(page, 5000);\n\n    // 從 Store 取得資料\n    const storeData = await page.evaluate(async () => {\n      const { useTourStore } = await import('@/stores');\n      const store = useTourStore.getState();\n      return store.items;\n    });\n\n    // 從 IndexedDB 取得資料\n    const indexedDBData = await getAllFromIndexedDB(page, 'tours');\n\n    console.log(`📊 Store 資料數: ${storeData.length}`);\n    console.log(`📊 IndexedDB 資料數: ${indexedDBData.length}`);\n\n    // 驗證：數量應該一致\n    expect(indexedDBData.length).toBe(storeData.length);\n\n    // 驗證：ID 應該一致\n    const storeIds = new Set(storeData.map((t: any) => t.id));\n    const indexedDBIds = new Set(indexedDBData.map((t: any) => t.id));\n\n    const onlyInStore = [...storeIds].filter(id => !indexedDBIds.has(id));\n    const onlyInIndexedDB = [...indexedDBIds].filter(id => !storeIds.has(id));\n\n    if (onlyInStore.length > 0) {\n      console.log('❌ 只在 Store:', onlyInStore);\n    }\n    if (onlyInIndexedDB.length > 0) {\n      console.log('❌ 只在 IndexedDB:', onlyInIndexedDB);\n    }\n\n    expect(onlyInStore.length).toBe(0);\n    expect(onlyInIndexedDB.length).toBe(0);\n\n    console.log('✅ 測試 5 通過 - 資料完全一致');\n  });\n});\n","usedDeprecatedRules":[]}]