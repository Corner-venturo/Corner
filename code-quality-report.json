{
  "largeFiles": [
    {
      "file": "src/app/quotes/[id]/page.tsx",
      "lines": 1944
    },
    {
      "file": "src/app/tours/page.tsx",
      "lines": 1650
    },
    {
      "file": "src/stores/workspace-store.ts",
      "lines": 1396
    },
    {
      "file": "src/components/workspace/ChannelChat.tsx",
      "lines": 1393
    },
    {
      "file": "src/app/finance/requests/page.tsx",
      "lines": 1135
    },
    {
      "file": "src/app/page.tsx",
      "lines": 1109
    },
    {
      "file": "src/app/calendar/page.tsx",
      "lines": 1075
    },
    {
      "file": "src/components/editor/TourForm.tsx",
      "lines": 1074
    },
    {
      "file": "src/components/TourPage.tsx",
      "lines": 897
    },
    {
      "file": "src/components/todos/todo-expanded-view.tsx",
      "lines": 777
    },
    {
      "file": "src/components/shared/react-datasheet-wrapper.tsx",
      "lines": 708
    },
    {
      "file": "src/lib/db/index.ts",
      "lines": 692
    },
    {
      "file": "src/stores/create-store.ts",
      "lines": 681
    },
    {
      "file": "src/app/visas/page.tsx",
      "lines": 676
    },
    {
      "file": "src/components/workspace/QuickTools.tsx",
      "lines": 665
    },
    {
      "file": "src/app/finance/treasury/disbursement/page.tsx",
      "lines": 631
    },
    {
      "file": "src/lib/db/schemas.ts",
      "lines": 630
    },
    {
      "file": "src/components/hr/tabs/basic-info-tab.tsx",
      "lines": 615
    },
    {
      "file": "src/stores/types.ts",
      "lines": 603
    }
  ],
  "typeEscapes": [
    {
      "file": "src/core/services/base.service.ts",
      "count": 5,
      "occurrences": [
        {
          "lineNum": 43,
          "code": "this.validate(data as unknown);"
        },
        {
          "lineNum": 81,
          "code": "const aVal = (a as unknown)[params.sortBy!];"
        },
        {
          "lineNum": 82,
          "code": "const bVal = (b as unknown)[params.sortBy!];"
        },
        {
          "lineNum": 84,
          "code": "if (aVal < bVal) return (params as unknown).sort_order === 'desc' ? 1 : -1;"
        },
        {
          "lineNum": 85,
          "code": "if (aVal > bVal) return (params as unknown).sort_order === 'desc' ? -1 : 1;"
        }
      ]
    },
    {
      "file": "src/app/settings/page.tsx",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 95,
          "code": "const isPasswordValid = await verifyPassword(passwordData.currentPassword, (userData as unknown).password_hash);"
        },
        {
          "lineNum": 105,
          "code": "const result: unknown = await (supabase as unknown)"
        },
        {
          "lineNum": 136,
          "code": "const employee = await localDB.read(TABLES.EMPLOYEES, user.id) as unknown;"
        }
      ]
    },
    {
      "file": "src/app/database/regions/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 48,
          "code": "} as unknown);"
        },
        {
          "lineNum": 58,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/app/database/transport/page.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 221,
          "code": "icon: Car} as unknown}"
        }
      ]
    },
    {
      "file": "src/app/database/suppliers/page.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 104,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/app/database/activities/page.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 197,
          "code": "icon: Ticket} as unknown}"
        }
      ]
    },
    {
      "file": "src/app/tours/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 800,
          "code": "} as unknown}"
        },
        {
          "lineNum": 852,
          "code": "} as unknown}"
        }
      ]
    },
    {
      "file": "src/app/quotes/[id]/page.tsx",
      "count": 9,
      "occurrences": [
        {
          "lineNum": 173,
          "code": "}>((quote as unknown)?.participant_counts || {"
        },
        {
          "lineNum": 203,
          "code": "}>((quote as unknown)?.selling_prices || {"
        },
        {
          "lineNum": 894,
          "code": "categories: updatedCategories as unknown,"
        },
        {
          "lineNum": 902,
          "code": "versions: [...existingVersions, newVersionRecord] as unknown // 加入新版本到歷史"
        },
        {
          "lineNum": 903,
          "code": "} as unknown);"
        },
        {
          "lineNum": 948,
          "code": "categories: updatedCategories as unknown, // CostCategory[] 與 QuoteCategory[] 結構相同"
        },
        {
          "lineNum": 955,
          "code": "} as unknown);"
        },
        {
          "lineNum": 996,
          "code": "} as unknown);"
        },
        {
          "lineNum": 1044,
          "code": "{(quote as unknown)?.code || '-'}"
        }
      ]
    },
    {
      "file": "src/app/quotes/page.tsx",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 94,
          "code": "{(quote as unknown).code || '-'}"
        },
        {
          "lineNum": 225,
          "code": "if (duplicated && (duplicated as unknown).id) {"
        },
        {
          "lineNum": 227,
          "code": "router.push(`/quotes/${(duplicated as unknown).id}`);"
        }
      ]
    },
    {
      "file": "src/app/visas/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 238,
          "code": "} as unknown);"
        },
        {
          "lineNum": 444,
          "code": "icon: FileText} as unknown}"
        }
      ]
    },
    {
      "file": "src/app/hr/page.tsx",
      "count": 4,
      "occurrences": [
        {
          "lineNum": 86,
          "code": "const confirmMessage = `⚠️ 確定要將員工「${employee.display_name || (employee as unknown).chinese_name || '未命名員工'}」辦理離職嗎？\\n\\n離職後將無法登入系統，但歷史記錄會保留。`;"
        },
        {
          "lineNum": 108,
          "code": "const confirmMessage = `⚠️⚠️⚠️ 確定要刪除員工「${employee.display_name || (employee as unknown).chinese_name || '未命名員工'}」嗎？\\n\\n此操作會：\\n- 永久刪除員工所有資料\\n- 移除所有歷史記錄\\n- 無法復原\\n\\n建議使用「辦理離職」功能來保留歷史記錄。\\n\\n真的要刪除嗎？`;"
        },
        {
          "lineNum": 119,
          "code": "alert(`✅ 員工「${employee.display_name || (employee as unknown).chinese_name || '未命名員工'}」已成功刪除`);"
        },
        {
          "lineNum": 216,
          "code": "{employee.display_name || (employee as unknown).chinese_name || '未命名員工'}"
        }
      ]
    },
    {
      "file": "src/app/finance/requests/page.tsx",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 235,
          "code": "payment_requests as unknown, // 使用新的 Store 型別"
        },
        {
          "lineNum": 338,
          "code": "} as unknown);"
        },
        {
          "lineNum": 400,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/app/finance/treasury/disbursement/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 61,
          "code": "} = {} as unknown;"
        },
        {
          "lineNum": 357,
          "code": "onTabChange={(tab) => setActiveTab(tab as unknown)}"
        }
      ]
    },
    {
      "file": "src/app/finance/travel-invoice/create/page.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 169,
          "code": "onChange={e => setTaxType(e.target.value as unknown)}"
        }
      ]
    },
    {
      "file": "src/app/orders/[orderId]/payment/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 22,
          "code": "const orders = (orderStore as unknown).orders || [];"
        },
        {
          "lineNum": 23,
          "code": "const paymentRequests = (paymentStore as unknown).payment_requests || [];"
        }
      ]
    },
    {
      "file": "src/app/orders/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 122,
          "code": "} as unknown);"
        },
        {
          "lineNum": 134,
          "code": "icon: ShoppingCart} as unknown}"
        }
      ]
    },
    {
      "file": "src/app/todos/page.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 243,
          "code": "await addTodo(newTodoData as unknown);"
        },
        {
          "lineNum": 296,
          "code": "await addTodo(newTodoData as unknown);"
        }
      ]
    },
    {
      "file": "src/features/customers/hooks/useCustomers.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 21,
          "code": "return await store.create(data as unknown);"
        }
      ]
    },
    {
      "file": "src/features/customers/services/customer.service.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 15,
          "code": "await store.create(customer as unknown);"
        }
      ]
    },
    {
      "file": "src/features/accounting/services/accounting.service.ts",
      "count": 4,
      "occurrences": [
        {
          "lineNum": 13,
          "code": "getAll: () => store.accounts as unknown,"
        },
        {
          "lineNum": 14,
          "code": "getById: (id: string) => store.accounts.find(a => a.id === id) as unknown,"
        },
        {
          "lineNum": 16,
          "code": "await store.addAccount(account as unknown);"
        },
        {
          "lineNum": 120,
          "code": "await store.addCategory(category as unknown);"
        }
      ]
    },
    {
      "file": "src/features/payments/hooks/usePayments.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 25,
          "code": "return await paymentRequestService.create(data as unknown);"
        }
      ]
    },
    {
      "file": "src/features/payments/services/disbursement-order.service.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 15,
          "code": "const result = await store.create(order as unknown);"
        },
        {
          "lineNum": 103,
          "code": "const order = await this.create(orderData as unknown);"
        }
      ]
    },
    {
      "file": "src/features/payments/services/payment-request.service.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 16,
          "code": "const result = await store.create(request as unknown);"
        },
        {
          "lineNum": 196,
          "code": "return await this.create(requestData as unknown);"
        }
      ]
    },
    {
      "file": "src/features/tours/hooks/useTours.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 20,
          "code": "return await tourStore.create(data as unknown);"
        }
      ]
    },
    {
      "file": "src/features/tours/services/tour.service.ts",
      "count": 7,
      "occurrences": [
        {
          "lineNum": 22,
          "code": "const result = await store.create(tour as unknown);"
        },
        {
          "lineNum": 132,
          "code": "const total_revenue = tour.price * ((tour as unknown).current_participants || 0);"
        },
        {
          "lineNum": 217,
          "code": "if ((data as unknown)._deleted) {"
        },
        {
          "lineNum": 219,
          "code": "const { data: updated, error: updateError } = await (supabase as unknown)"
        },
        {
          "lineNum": 226,
          "code": ".eq('id', (data as unknown).id)"
        },
        {
          "lineNum": 277,
          "code": "} as unknown;"
        },
        {
          "lineNum": 279,
          "code": "return await this.create(visaTour as unknown);"
        }
      ]
    },
    {
      "file": "src/features/suppliers/services/supplier.service.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 15,
          "code": "await store.create(supplier as unknown);"
        }
      ]
    },
    {
      "file": "src/features/quotes/hooks/useQuotes.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 14,
          "code": "return await store.create(data as unknown);"
        }
      ]
    },
    {
      "file": "src/features/quotes/services/quote.service.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 16,
          "code": "const result = await store.create(quote as unknown);"
        },
        {
          "lineNum": 55,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/features/orders/hooks/useOrders.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 14,
          "code": "return await store.create(data as unknown);"
        },
        {
          "lineNum": 36,
          "code": "return orderService.getOrdersByStatus(status as unknown);"
        }
      ]
    },
    {
      "file": "src/features/orders/services/order.service.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 15,
          "code": "const result = await store.create(order as unknown);"
        }
      ]
    },
    {
      "file": "src/features/todos/services/todo.service.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 15,
          "code": "await store.create(todo as unknown);"
        },
        {
          "lineNum": 46,
          "code": "await store.update(id, { status: todo.status === 'completed' ? 'pending' : 'completed' } as unknown);"
        }
      ]
    },
    {
      "file": "src/stores/timebox-store-supabase.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 433,
          "code": "updated.completedSetsTime[setIndex] = updated.setsCompleted[setIndex] ? new Date() : null as unknown"
        }
      ]
    },
    {
      "file": "src/stores/workspace-store.ts",
      "count": 15,
      "occurrences": [
        {
          "lineNum": 403,
          "code": "const { data, error } = await (supabase as unknown)"
        },
        {
          "lineNum": 532,
          "code": "const { data, error } = await (supabase as unknown)"
        },
        {
          "lineNum": 576,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 645,
          "code": "const { data, error } = await (supabase as unknown)"
        },
        {
          "lineNum": 714,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 889,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 939,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 1028,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 1057,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 1152,
          "code": "const { error: listError } = await (supabase as unknown)"
        },
        {
          "lineNum": 1164,
          "code": "const { error: itemsError } = await (supabase as unknown)"
        },
        {
          "lineNum": 1242,
          "code": "const { data: lists, error: listsError } = await (supabase as unknown)"
        },
        {
          "lineNum": 1253,
          "code": "const { data: items, error: itemsError } = await (supabase as unknown)"
        },
        {
          "lineNum": 1290,
          "code": "const { error } = await (supabase as unknown)"
        },
        {
          "lineNum": 1337,
          "code": ".filter(Boolean) as unknown[];"
        }
      ]
    },
    {
      "file": "src/stores/index.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 116,
          "code": "export const useTourAddOnStore = createStore<import('./types').TourAddOn>('tour_addons' as unknown);"
        }
      ]
    },
    {
      "file": "src/components/accounting/transaction-list.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 100,
          "code": "onChange={(e) => setFilterType(e.target.value as unknown)}"
        },
        {
          "lineNum": 112,
          "code": "onChange={(e) => setDateRange(e.target.value as unknown)}"
        }
      ]
    },
    {
      "file": "src/components/accounting/add-account-dialog.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 125,
          "code": "type: type.id as unknown,"
        }
      ]
    },
    {
      "file": "src/components/accounting/add-transaction-dialog.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 106,
          "code": "onClick={() => setTransactionType(type.id as unknown)}"
        }
      ]
    },
    {
      "file": "src/components/ui/calendar.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 59,
          "code": "} as unknown}"
        }
      ]
    },
    {
      "file": "src/components/ui/checkbox.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 19,
          "code": "(checkboxRef.current as unknown).indeterminate = indeterminate ?? false;"
        }
      ]
    },
    {
      "file": "src/components/tours/tour-costs.tsx",
      "count": 4,
      "occurrences": [
        {
          "lineNum": 154,
          "code": ".filter(cost => (cost as unknown).category === category)"
        },
        {
          "lineNum": 202,
          "code": "const Icon = getCategoryIcon((cost as unknown).category || '');"
        },
        {
          "lineNum": 203,
          "code": "const displayCategory = getCategoryDisplayName((cost as unknown).category || '');"
        },
        {
          "lineNum": 236,
          "code": "{(cost as unknown).vendor || relatedOrder?.order_number || '-'}"
        }
      ]
    },
    {
      "file": "src/components/tours/tour-payments.tsx",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 207,
          "code": "getMethodBadge((payment as unknown).method)"
        },
        {
          "lineNum": 209,
          "code": "{getMethodDisplayName((payment as unknown).method)}"
        },
        {
          "lineNum": 302,
          "code": "onChange={(e) => setNewPayment(prev => ({ ...prev, status: e.target.value as unknown }))}"
        }
      ]
    },
    {
      "file": "src/components/tours/tour-members.tsx",
      "count": 12,
      "occurrences": [
        {
          "lineNum": 75,
          "code": "} as unknown;"
        },
        {
          "lineNum": 124,
          "code": "(member as unknown)[field] = value;"
        },
        {
          "lineNum": 147,
          "code": "delete (convertedData as unknown).nameEn;"
        },
        {
          "lineNum": 148,
          "code": "delete (convertedData as unknown).passportNumber;"
        },
        {
          "lineNum": 149,
          "code": "delete (convertedData as unknown).passportExpiry;"
        },
        {
          "lineNum": 150,
          "code": "delete (convertedData as unknown).idNumber;"
        },
        {
          "lineNum": 152,
          "code": "const newMember = await addMember(convertedData as unknown);"
        },
        {
          "lineNum": 168,
          "code": "delete (convertedData as unknown).nameEn;"
        },
        {
          "lineNum": 169,
          "code": "delete (convertedData as unknown).passportNumber;"
        },
        {
          "lineNum": 170,
          "code": "delete (convertedData as unknown).passportExpiry;"
        },
        {
          "lineNum": 171,
          "code": "delete (convertedData as unknown).idNumber;"
        },
        {
          "lineNum": 173,
          "code": "await updateMember(member.id, convertedData as unknown);"
        }
      ]
    },
    {
      "file": "src/components/workspace/QuickTools.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 151,
          "code": "const rate = (exchangeRates as unknown)[fromCurrency]?.[toCurrency];"
        }
      ]
    },
    {
      "file": "src/components/workspace/ShareAdvanceDialog.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 48,
          "code": "const notDeleted = !(emp as unknown)._deleted;"
        },
        {
          "lineNum": 49,
          "code": "const isActive = (emp as unknown).status === 'active';"
        }
      ]
    },
    {
      "file": "src/components/workspace/CreatePaymentRequestDialog.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 82,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/components/workspace/BulletinBoard.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 84,
          "code": "type: bulletin.type as unknown,"
        },
        {
          "lineNum": 282,
          "code": "onChange={(e) => setNewBulletin({...newBulletin, type: e.target.value as unknown})}"
        }
      ]
    },
    {
      "file": "src/components/workspace/workspace-task-list.tsx",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 82,
          "code": "} as unknown);"
        },
        {
          "lineNum": 248,
          "code": "{getEmployeeName((note as unknown).user_id)[0]}"
        },
        {
          "lineNum": 255,
          "code": "{getEmployeeName((note as unknown).user_id)}"
        }
      ]
    },
    {
      "file": "src/components/workspace/CreateReceiptDialog.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 58,
          "code": "const receipt = await createReceipt(receiptData as unknown);"
        },
        {
          "lineNum": 133,
          "code": "onChange={(e) => setPaymentMethod(e.target.value as unknown)}"
        }
      ]
    },
    {
      "file": "src/components/workspace/channel-list.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 23,
          "code": "const isArchived = (channel as unknown).isArchived; // TODO: Add isArchived to Channel interface"
        }
      ]
    },
    {
      "file": "src/components/workspace/canvas-view.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 60,
          "code": "} as unknown);"
        },
        {
          "lineNum": 130,
          "code": "tour_id={(channel as unknown).tour_id}"
        }
      ]
    },
    {
      "file": "src/components/hr/tabs/permissions-tab.tsx",
      "count": 7,
      "occurrences": [
        {
          "lineNum": 20,
          "code": "const [selectedRoles, setSelectedRoles] = useState<string[]>((employee as unknown).roles || []);"
        },
        {
          "lineNum": 26,
          "code": "setSelectedRoles((employee as unknown).roles || []);"
        },
        {
          "lineNum": 70,
          "code": "await updateUser(employee.id, { roles: roles as unknown });"
        },
        {
          "lineNum": 77,
          "code": "const existingEmployee = await localDB.read(TABLES.EMPLOYEES, employee.id) as unknown;"
        },
        {
          "lineNum": 94,
          "code": "roles: roles as unknown"
        },
        {
          "lineNum": 105,
          "code": "roles: roles as unknown"
        },
        {
          "lineNum": 135,
          "code": "const existingEmployee = await localDB.read(TABLES.EMPLOYEES, employee.id) as unknown;"
        }
      ]
    },
    {
      "file": "src/components/hr/tabs/basic-info-tab.tsx",
      "count": 5,
      "occurrences": [
        {
          "lineNum": 33,
          "code": "chinese_name: (employee as unknown).chinese_name || '',"
        },
        {
          "lineNum": 68,
          "code": "(updates as unknown).employee_number = userStoreHelpers.generateUserNumber(formData.english_name);"
        },
        {
          "lineNum": 91,
          "code": "chinese_name: (employee as unknown).chinese_name || '',"
        },
        {
          "lineNum": 139,
          "code": "const result: unknown = await (supabase as unknown)"
        },
        {
          "lineNum": 197,
          "code": "<p className=\"text-morandi-primary py-2\">{(employee as unknown).chinese_name || '-'}</p>"
        }
      ]
    },
    {
      "file": "src/components/hr/employee-expanded-view.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 134,
          "code": "{employee.display_name || (employee as unknown).chinese_name || '未命名員工'}"
        }
      ]
    },
    {
      "file": "src/components/hr/add-employee-form.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 111,
          "code": "addUser(dbEmployeeData as unknown);"
        }
      ]
    },
    {
      "file": "src/components/templates/template-pdf-preview.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 130,
          "code": "<div className={`flex items-center ${(currentStyle as unknown)?.container || ''}`}>"
        },
        {
          "lineNum": 141,
          "code": "className={`px-3 py-2 transition-all ${(currentStyle as unknown)?.text || ''}"
        }
      ]
    },
    {
      "file": "src/components/templates/template-card.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 129,
          "code": "<span>{formatDate((template.metadata as unknown).updated_at)}</span>"
        }
      ]
    },
    {
      "file": "src/components/templates/template-editor-dialog.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 139,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/components/templates/field-mapping-editor.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 63,
          "code": "const validation = validateField(field as unknown);"
        }
      ]
    },
    {
      "file": "src/components/finance/batch-receipt-dialog.tsx",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 187,
          "code": "} as unknown);"
        },
        {
          "lineNum": 234,
          "code": "onValueChange={(value) => updatePaymentItem(index, { payment_method: value as unknown })}"
        }
      ]
    },
    {
      "file": "src/components/members/excel-member-table.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 83,
          "code": "const created = await memberStore.create(memberData as unknown);"
        }
      ]
    },
    {
      "file": "src/components/orders/add-order-form.tsx",
      "count": 6,
      "occurrences": [
        {
          "lineNum": 85,
          "code": "const notDeleted = !(emp as unknown)._deleted;"
        },
        {
          "lineNum": 86,
          "code": "const isActive = (emp as unknown).status === 'active';"
        },
        {
          "lineNum": 91,
          "code": "(emp as unknown).roles?.includes('sales')"
        },
        {
          "lineNum": 101,
          "code": "const notDeleted = !(emp as unknown)._deleted;"
        },
        {
          "lineNum": 102,
          "code": "const isActive = (emp as unknown).status === 'active';"
        },
        {
          "lineNum": 107,
          "code": "(emp as unknown).roles?.includes('assistant')"
        }
      ]
    },
    {
      "file": "src/components/orders/order-kanban.tsx",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 48,
          "code": "updateOrder(draggedOrder.id, { payment_status: status as unknown });"
        }
      ]
    },
    {
      "file": "src/hooks/useCrudOperations.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 14,
          "code": "} as unknown as T;"
        }
      ]
    },
    {
      "file": "src/lib/cache/cache-strategy.ts",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 243,
          "code": "const value = await localDB.read('cache' as unknown, key);"
        },
        {
          "lineNum": 254,
          "code": "await localDB.create('cache' as unknown, { id: key, data: value });"
        },
        {
          "lineNum": 264,
          "code": "await localDB.delete('cache' as unknown, key);"
        }
      ]
    },
    {
      "file": "src/lib/error-handler.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 77,
          "code": "return `驗證錯誤: ${(error as unknown).field} - ${error.message}`;"
        },
        {
          "lineNum": 81,
          "code": "return `找不到資源: ${(error as unknown).resource} (ID: ${(error as unknown).id})`;"
        }
      ]
    },
    {
      "file": "src/lib/supabase/helpers.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 11,
          "code": "return data as unknown;"
        },
        {
          "lineNum": 19,
          "code": "return data as unknown;"
        }
      ]
    },
    {
      "file": "src/lib/supabase/api.ts",
      "count": 6,
      "occurrences": [
        {
          "lineNum": 93,
          "code": ".from(table as unknown)"
        },
        {
          "lineNum": 94,
          "code": ".insert(snakeData as unknown)"
        },
        {
          "lineNum": 200,
          "code": "const queryBuilder: any = supabase.from(table as unknown);"
        },
        {
          "lineNum": 236,
          "code": "let query: any = supabase.from(table as unknown);"
        },
        {
          "lineNum": 339,
          "code": "const { data, error } = await supabase.rpc('execute_sql' as unknown, {"
        },
        {
          "lineNum": 342,
          "code": "} as unknown);"
        }
      ]
    },
    {
      "file": "src/lib/db/init-local-data.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 77,
          "code": "const { data: employees, error } = await (supabase as unknown)"
        },
        {
          "lineNum": 145,
          "code": "await localDB.clear(table as unknown);"
        }
      ]
    },
    {
      "file": "src/lib/db/database-initializer.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 224,
          "code": "(window as unknown).DatabaseInitializer = DatabaseInitializer;"
        }
      ]
    },
    {
      "file": "src/lib/db/sync-schema-helper.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 59,
          "code": "return SYNCABLE_TABLES.includes(tableName as unknown);"
        }
      ]
    },
    {
      "file": "src/lib/db/index.ts",
      "count": 7,
      "occurrences": [
        {
          "lineNum": 66,
          "code": "created_at: (data as unknown).created_at || now,"
        },
        {
          "lineNum": 229,
          "code": "created_at: (data as unknown).created_at || now,"
        },
        {
          "lineNum": 399,
          "code": "created_at: (data as unknown).created_at || now,"
        },
        {
          "lineNum": 561,
          "code": "return (fieldValue as unknown) > (condition.value as unknown);"
        },
        {
          "lineNum": 563,
          "code": "return (fieldValue as unknown) >= (condition.value as unknown);"
        },
        {
          "lineNum": 565,
          "code": "return (fieldValue as unknown) < (condition.value as unknown);"
        },
        {
          "lineNum": 567,
          "code": "return (fieldValue as unknown) <= (condition.value as unknown);"
        }
      ]
    },
    {
      "file": "src/lib/db/verify-and-fix.ts",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 190,
          "code": "(window as unknown).verifyAndFix = verifyAndFix;"
        },
        {
          "lineNum": 191,
          "code": "(window as unknown).quickCheck = quickCheck;"
        },
        {
          "lineNum": 192,
          "code": "(window as unknown).clearAndRebuild = clearAndRebuild;"
        }
      ]
    },
    {
      "file": "src/lib/sync/background-sync-service.ts",
      "count": 16,
      "occurrences": [
        {
          "lineNum": 77,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 88,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 103,
          "code": "...(supabaseData as unknown),"
        },
        {
          "lineNum": 108,
          "code": "logger.log(`✅ [${tableName}] TBC 編號已轉換: ${typedItem.code} → ${(supabaseData as unknown).code}`);"
        },
        {
          "lineNum": 110,
          "code": "logger.error(`❌ [${tableName}] TBC 編號轉換失敗:`, (item as unknown).code, error);"
        },
        {
          "lineNum": 127,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 140,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 170,
          "code": "...(item as unknown),"
        },
        {
          "lineNum": 175,
          "code": "logger.error(`❌ [${tableName}] 同步失敗:`, (item as unknown).id, error);"
        },
        {
          "lineNum": 193,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 203,
          "code": "const typedItem = queueItem as unknown;"
        },
        {
          "lineNum": 219,
          "code": "logger.error(`❌ [${tableName}] 刪除失敗:`, (queueItem as unknown).record_id, error);"
        },
        {
          "lineNum": 234,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 241,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 259,
          "code": "const typedItem = item as unknown;"
        },
        {
          "lineNum": 266,
          "code": "const typedItem = item as unknown;"
        }
      ]
    },
    {
      "file": "src/lib/performance/memory-manager.ts",
      "count": 4,
      "occurrences": [
        {
          "lineNum": 64,
          "code": "if (typeof window === 'undefined' || !(performance as unknown).memory) {"
        },
        {
          "lineNum": 68,
          "code": "const memory = (performance as unknown).memory;"
        },
        {
          "lineNum": 110,
          "code": "if (typeof window !== 'undefined' && (window as unknown).gc) {"
        },
        {
          "lineNum": 112,
          "code": "(window as unknown).gc();"
        }
      ]
    },
    {
      "file": "src/lib/store/lazy-store.ts",
      "count": 3,
      "occurrences": [
        {
          "lineNum": 145,
          "code": "const localItem = await localDB.read(this.options.table as unknown, id);"
        },
        {
          "lineNum": 226,
          "code": "const allData = (await localDB.getAll(this.options.table as unknown)) as T[];"
        },
        {
          "lineNum": 288,
          "code": "await localDB.create(this.options.table as unknown, item);"
        }
      ]
    },
    {
      "file": "src/services/auth-service-v5.ts",
      "count": 2,
      "occurrences": [
        {
          "lineNum": 57,
          "code": "if (!(user as unknown).is_active || user.status === 'terminated') {"
        },
        {
          "lineNum": 88,
          "code": "await (supabase as unknown)"
        }
      ]
    },
    {
      "file": "src/services/offline-auth.service.ts",
      "count": 1,
      "occurrences": [
        {
          "lineNum": 33,
          "code": "const users = await localDB.getAll<unknown>(TABLES.EMPLOYEES as unknown);"
        }
      ]
    },
    {
      "file": "src/services/local-auth-service.ts",
      "count": 4,
      "occurrences": [
        {
          "lineNum": 77,
          "code": "} as unknown);"
        },
        {
          "lineNum": 106,
          "code": "} as unknown);"
        },
        {
          "lineNum": 174,
          "code": "} as unknown);"
        },
        {
          "lineNum": 204,
          "code": "} as unknown);"
        }
      ]
    }
  ],
  "setTimeoutUsage": [
    {
      "file": "src/app/accounting/page.tsx",
      "lineNum": 92,
      "code": "setTimeout(() => setShowToast(false), 2000);"
    },
    {
      "file": "src/app/accounting/page.tsx",
      "lineNum": 95,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/app/accounting/page.tsx",
      "lineNum": 103,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/app/database/regions/page.tsx",
      "lineNum": 72,
      "code": "const timer = setTimeout(initializeRegions, 100);"
    },
    {
      "file": "src/app/quotes/[id]/page.tsx",
      "lineNum": 289,
      "code": "scrollTimeoutRef.current = setTimeout(() => {"
    },
    {
      "file": "src/app/quotes/[id]/page.tsx",
      "lineNum": 907,
      "code": "setTimeout(() => setSaveSuccess(false), 2000);"
    },
    {
      "file": "src/app/quotes/page.tsx",
      "lineNum": 40,
      "code": "const timer = setTimeout(() => {"
    },
    {
      "file": "src/app/fix-database/page.tsx",
      "lineNum": 318,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/app/timebox/components/box-dialogs/workout-dialog.tsx",
      "lineNum": 69,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/app/timebox/components/box-dialogs/workout-dialog.tsx",
      "lineNum": 95,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/app/timebox/components/box-dialogs/workout-dialog.tsx",
      "lineNum": 112,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/app/finance/requests/page.tsx",
      "lineNum": 491,
      "code": "onBlur={() => setTimeout(() => setShowTourDropdown(false), 200)}"
    },
    {
      "file": "src/app/finance/requests/page.tsx",
      "lineNum": 534,
      "code": "onBlur={() => setTimeout(() => setShowOrderDropdown(false), 200)}"
    },
    {
      "file": "src/app/finance/requests/page.tsx",
      "lineNum": 819,
      "code": "onBlur={() => setTimeout(() => setShowBatchTourDropdown(false), 200)}"
    },
    {
      "file": "src/app/itinerary/new/page.tsx",
      "lineNum": 255,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 176,
      "code": "setTimeout(() => reject(new Error('IndexedDB_TIMEOUT')), 3000)"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 223,
      "code": "new Promise((_, reject) => setTimeout(() => reject(new Error('TIMEOUT')), 1000))"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 254,
      "code": "setTimeout(async () => {"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 315,
      "code": "setTimeout(() => syncBatch(startIndex + batchSize), 10);"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 445,
      "code": "setTimeout(async () => {"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 508,
      "code": "setTimeout(async () => {"
    },
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 568,
      "code": "setTimeout(async () => {"
    },
    {
      "file": "src/stores/accounting-store.ts",
      "lineNum": 399,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/stores/workspace-store.ts",
      "lineNum": 472,
      "code": "await new Promise(resolve => setTimeout(resolve, 100));"
    },
    {
      "file": "src/stores/workspace-store.ts",
      "lineNum": 529,
      "code": "setTimeout(async () => {"
    },
    {
      "file": "src/stores/workspace-store.ts",
      "lineNum": 642,
      "code": "setTimeout(async () => {"
    },
    {
      "file": "src/stores/workspace-store.ts",
      "lineNum": 1371,
      "code": "await new Promise(resolve => setTimeout(resolve, 100));"
    },
    {
      "file": "src/components/ui/thursday-date-picker.tsx",
      "lineNum": 58,
      "code": "setTimeout(() => setShowWarning(false), 3000) // 3秒後自動隱藏"
    },
    {
      "file": "src/components/ui/smart-date-input.tsx",
      "lineNum": 64,
      "code": "setTimeout(() => monthRef.current?.focus(), 0);"
    },
    {
      "file": "src/components/ui/smart-date-input.tsx",
      "lineNum": 86,
      "code": "setTimeout(() => dayRef.current?.focus(), 0);"
    },
    {
      "file": "src/components/tours/tour-operations.tsx",
      "lineNum": 168,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/components/tours/tour-members.tsx",
      "lineNum": 91,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/components/manifestation/ChapterContent.tsx",
      "lineNum": 84,
      "code": "setTimeout(() => setSaveSuccess(false), 2000);"
    },
    {
      "file": "src/components/manifestation/BreathingExercise.tsx",
      "lineNum": 20,
      "code": "const timer = setTimeout(() => {"
    },
    {
      "file": "src/components/layout/main-layout.tsx",
      "lineNum": 40,
      "code": "const checkTimeout = setTimeout(() => {"
    },
    {
      "file": "src/components/layout/sidebar.tsx",
      "lineNum": 190,
      "code": "timeoutRef.current = setTimeout(() => {"
    },
    {
      "file": "src/components/workspace/ChannelChat.tsx",
      "lineNum": 285,
      "code": "setTimeout(() => setUploadProgress(0), 1000);"
    },
    {
      "file": "src/components/workspace/ChannelChat.tsx",
      "lineNum": 637,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/components/workspace/ChannelChat.tsx",
      "lineNum": 641,
      "code": "setTimeout(() => setIsSwitching(false), 150);"
    },
    {
      "file": "src/components/TourPage.tsx",
      "lineNum": 53,
      "code": "const timer = setTimeout(() => {"
    },
    {
      "file": "src/components/TourPage.tsx",
      "lineNum": 131,
      "code": "const timer = setTimeout(() => {"
    },
    {
      "file": "src/components/hr/tabs/permissions-tab.tsx",
      "lineNum": 116,
      "code": "setTimeout(() => setShowSavedMessage(false), 2000);"
    },
    {
      "file": "src/components/hr/tabs/permissions-tab.tsx",
      "lineNum": 157,
      "code": "setTimeout(() => setShowSavedMessage(false), 2000);"
    },
    {
      "file": "src/components/hr/add-employee-form.tsx",
      "lineNum": 132,
      "code": "setTimeout(() => setCopiedField(null), 2000);"
    },
    {
      "file": "src/components/sync/sync-status-indicator.tsx",
      "lineNum": 90,
      "code": "setTimeout(() => setShowNotification(false), 3000);"
    },
    {
      "file": "src/components/sync/sync-status-indicator.tsx",
      "lineNum": 96,
      "code": "setTimeout(() => setShowNotification(false), 3000);"
    },
    {
      "file": "src/components/sync/sync-status-indicator.tsx",
      "lineNum": 116,
      "code": "setTimeout(() => setShowNotification(false), 3000);"
    },
    {
      "file": "src/lib/supabase/client.ts",
      "lineNum": 25,
      "code": "const timeoutId = setTimeout(() => controller.abort(), 60000);"
    },
    {
      "file": "src/lib/db/index.ts",
      "lineNum": 131,
      "code": "setTimeout(() => {"
    },
    {
      "file": "src/lib/db/version-manager.ts",
      "lineNum": 95,
      "code": "setTimeout(() => resolve(), 1000);"
    },
    {
      "file": "src/lib/files.ts",
      "lineNum": 7,
      "code": "return new Promise(resolve => setTimeout(resolve, duration));"
    }
  ],
  "memoryLeaks": [
    {
      "file": "src/stores/create-store.ts",
      "lineNum": 674,
      "type": "missing-remove-listener"
    },
    {
      "file": "src/lib/performance/memory-manager.ts",
      "lineNum": 45,
      "type": "missing-remove-listener"
    }
  ],
  "todos": [
    {
      "file": "src/app/customers/page.tsx",
      "count": 1
    },
    {
      "file": "src/app/database/transport/page.tsx",
      "count": 2
    },
    {
      "file": "src/app/database/activities/page.tsx",
      "count": 2
    },
    {
      "file": "src/app/database/page.tsx",
      "count": 1
    },
    {
      "file": "src/app/tours/page.tsx.bak2",
      "count": 2
    },
    {
      "file": "src/app/tours/[id]/page.tsx",
      "count": 5
    },
    {
      "file": "src/app/tours/page.tsx",
      "count": 4
    },
    {
      "file": "src/app/timebox/components/create-box-dialog.tsx",
      "count": 1
    },
    {
      "file": "src/app/templates/[id]/page.tsx",
      "count": 2
    },
    {
      "file": "src/app/finance/payments/new/page.tsx",
      "count": 1
    },
    {
      "file": "src/app/finance/payments/page.tsx",
      "count": 3
    },
    {
      "file": "src/app/finance/treasury/disbursement/page.tsx",
      "count": 3
    },
    {
      "file": "src/app/finance/page.tsx",
      "count": 2
    },
    {
      "file": "src/app/finance/travel-invoice/[id]/page.tsx",
      "count": 1
    },
    {
      "file": "src/app/finance/travel-invoice/create/page.tsx",
      "count": 1
    },
    {
      "file": "src/app/finance/reports/page.tsx",
      "count": 2
    },
    {
      "file": "src/app/orders/[orderId]/payment/page.tsx.bak2",
      "count": 2
    },
    {
      "file": "src/app/orders/[orderId]/payment/page.tsx",
      "count": 2
    },
    {
      "file": "src/app/orders/[orderId]/documents/page.tsx",
      "count": 1
    },
    {
      "file": "src/app/itinerary/page.tsx",
      "count": 1
    },
    {
      "file": "src/features/customers/services/customer.service.ts",
      "count": 1
    },
    {
      "file": "src/features/payments/index.ts",
      "count": 1
    },
    {
      "file": "src/features/payments/services/disbursement-order.service.ts",
      "count": 1
    },
    {
      "file": "src/features/payments/services/payment-request.service.ts",
      "count": 1
    },
    {
      "file": "src/features/tours/services/tour.service.ts",
      "count": 1
    },
    {
      "file": "src/features/index.ts",
      "count": 1
    },
    {
      "file": "src/stores/create-store.ts",
      "count": 3
    },
    {
      "file": "src/stores/timebox-store.ts",
      "count": 1
    },
    {
      "file": "src/stores/auth-store.ts",
      "count": 1
    },
    {
      "file": "src/stores/index.ts",
      "count": 8
    },
    {
      "file": "src/components/tours/tour-costs.tsx.bak2",
      "count": 2
    },
    {
      "file": "src/components/tours/tour-costs.tsx",
      "count": 3
    },
    {
      "file": "src/components/tours/tour-payments.tsx",
      "count": 2
    },
    {
      "file": "src/components/workspace/CreatePaymentRequestDialog.tsx",
      "count": 1
    },
    {
      "file": "src/components/workspace/ChannelChat.tsx",
      "count": 8
    },
    {
      "file": "src/components/workspace/workspace-task-list.tsx",
      "count": 1
    },
    {
      "file": "src/components/workspace/CreateReceiptDialog.tsx",
      "count": 4
    },
    {
      "file": "src/components/workspace/create-channel-dialog.tsx",
      "count": 2
    },
    {
      "file": "src/components/workspace/FinanceAlertCard.tsx",
      "count": 1
    },
    {
      "file": "src/components/workspace/channel-list.tsx",
      "count": 1
    },
    {
      "file": "src/components/workspace/canvas-view.tsx",
      "count": 1
    },
    {
      "file": "src/components/sync-indicator.tsx",
      "count": 1
    },
    {
      "file": "src/components/templates/template-card.tsx",
      "count": 1
    },
    {
      "file": "src/components/templates/use-template-dialog.tsx",
      "count": 3
    },
    {
      "file": "src/components/finance/batch-receipt-dialog.tsx",
      "count": 1
    },
    {
      "file": "src/components/widgets/currency-widget.tsx",
      "count": 1
    },
    {
      "file": "src/components/widgets/calculator-widget.tsx",
      "count": 1
    },
    {
      "file": "src/hooks/index.ts",
      "count": 1
    },
    {
      "file": "src/hooks/useTours.ts",
      "count": 2
    },
    {
      "file": "src/lib/error-handler.ts",
      "count": 1
    },
    {
      "file": "src/lib/logger.ts",
      "count": 1
    },
    {
      "file": "src/lib/db/schemas.ts",
      "count": 1
    },
    {
      "file": "src/lib/sync/background-sync-service.ts",
      "count": 1
    },
    {
      "file": "src/services/offline-auth.service.ts",
      "count": 4
    }
  ],
  "syncFields": 0
}